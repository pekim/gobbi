<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
  <include name="Gdk" version="4.0"/>
  <include name="xlib" version="2.0"/>
  <package name="gtk4-x11"/>
  <c:include name="gdk/gdkx.h"/>
  <namespace name="GdkX11" version="4.0" shared-library="libgtk-4.so.0.9600.0" c:identifier-prefixes="Gdk" c:symbol-prefixes="gdk">
    <class name="X11AppLaunchContext" c:symbol-prefix="x11_app_launch_context" c:type="GdkX11AppLaunchContext" parent="Gdk.AppLaunchContext" glib:type-name="GdkX11AppLaunchContext" glib:get-type="gdk_x11_app_launch_context_get_type" glib:type-struct="X11AppLaunchContextClass">
      
    </class>
    <record name="X11AppLaunchContextClass" c:type="GdkX11AppLaunchContextClass" disguised="1" glib:is-gtype-struct-for="X11AppLaunchContext">
      
    </record>
    <class name="X11DeviceCore" c:symbol-prefix="x11_device_core" c:type="GdkX11DeviceCore" parent="Gdk.Device" glib:type-name="GdkX11DeviceCore" glib:get-type="gdk_x11_device_core_get_type" glib:type-struct="X11DeviceCoreClass">
      
    </class>
    <record name="X11DeviceCoreClass" c:type="GdkX11DeviceCoreClass" disguised="1" glib:is-gtype-struct-for="X11DeviceCore">
      
    </record>
    <class name="X11DeviceManagerCore" c:symbol-prefix="x11_device_manager_core" c:type="GdkX11DeviceManagerCore" parent="GObject.Object" glib:type-name="GdkX11DeviceManagerCore" glib:get-type="gdk_x11_device_manager_core_get_type" glib:type-struct="X11DeviceManagerCoreClass">
      
      <property name="display" writable="1" construct-only="1" transfer-ownership="none">
        <type name="Gdk.Display"/>
      </property>
    </class>
    <record name="X11DeviceManagerCoreClass" c:type="GdkX11DeviceManagerCoreClass" disguised="1" glib:is-gtype-struct-for="X11DeviceManagerCore">
      
    </record>
    <class name="X11DeviceManagerXI2" c:symbol-prefix="x11_device_manager_xi2" c:type="GdkX11DeviceManagerXI2" parent="X11DeviceManagerCore" glib:type-name="GdkX11DeviceManagerXI2" glib:get-type="gdk_x11_device_manager_xi2_get_type" glib:type-struct="X11DeviceManagerXI2Class">
      
      <property name="major" writable="1" construct-only="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="minor" writable="1" construct-only="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opcode" writable="1" construct-only="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="X11DeviceManagerXI2Class" c:type="GdkX11DeviceManagerXI2Class" disguised="1" glib:is-gtype-struct-for="X11DeviceManagerXI2">
      
    </record>
    <class name="X11DeviceXI2" c:symbol-prefix="x11_device_xi2" c:type="GdkX11DeviceXI2" parent="Gdk.Device" glib:type-name="GdkX11DeviceXI2" glib:get-type="gdk_x11_device_xi2_get_type" glib:type-struct="X11DeviceXI2Class">
      
      <property name="device-id" writable="1" construct-only="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="X11DeviceXI2Class" c:type="GdkX11DeviceXI2Class" disguised="1" glib:is-gtype-struct-for="X11DeviceXI2">
      
    </record>
    <class name="X11Display" c:symbol-prefix="x11_display" c:type="GdkX11Display" parent="Gdk.Display" glib:type-name="GdkX11Display" glib:get-type="gdk_x11_display_get_type" glib:type-struct="X11DisplayClass">
      
      <function name="get_glx_version" c:identifier="gdk_x11_display_get_glx_version">
        <doc xml:space="preserve" filename="../gdk/x11/gdkglcontext-x11.c" line="1301">Retrieves the version of the GLX implementation.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkglcontext-x11.c" line="1309">%TRUE if GLX is available</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkglcontext-x11.c" line="1303">a #GdkDisplay</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="major" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkglcontext-x11.c" line="1304">return location for the GLX major version</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="minor" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkglcontext-x11.c" line="1305">return location for the GLX minor version</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_screen" c:identifier="gdk_x11_display_get_screen">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2867">Retrieves the #GdkX11Screen of the @display.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2873">the #GdkX11Screen</doc>
          <type name="X11Screen" c:type="GdkX11Screen*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2869">a #GdkX11Display</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <function name="open" c:identifier="gdk_x11_display_open">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1415">Tries to open a new display to the X server given by
@display_name. If opening the display fails, %NULL is
returned.</doc>
        
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1424">The new display or
    %NULL on error.</doc>
          <type name="Gdk.Display" c:type="GdkDisplay*"/>
        </return-value>
        <parameters>
          <parameter name="display_name" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1417">name of the X display.
    See the XOpenDisplay() for details.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_program_class" c:identifier="gdk_x11_display_set_program_class">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1687">Sets the program class.

The X11 backend uses the program class to set the class name part
of the `WM_CLASS` property on toplevel windows; see the ICCCM.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1689">a #GdkDisplay</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="program_class" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1690">a string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="broadcast_startup_message" c:identifier="gdk_x11_display_broadcast_startup_message" introspectable="0">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2249">Sends a startup notification message of type @message_type to
@display.

This is a convenience function for use by code that implements the
freedesktop startup notification specification. Applications should
not normally need to call it directly. See the
[Startup Notification Protocol specification](http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt)
for definitions of the message types and keys that can be used.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2251">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2252">startup notification message type ("new", "change",
or "remove")</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2254">a list of key/value pairs (as strings), terminated by a
%NULL key. (A %NULL value for a key will cause that key to be
skipped in the output.)</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="error_trap_pop" c:identifier="gdk_x11_display_error_trap_pop">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2778">Pops the error trap pushed by gdk_x11_display_error_trap_push().
Will XSync() if necessary and will always block until
the error is known to have occurred or not occurred,
so the error code can be returned.

If you don&#x2019;t need to use the return value,
gdk_x11_display_error_trap_pop_ignored() would be more efficient.

See gdk_error_trap_pop() for the all-displays-at-once
equivalent.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2793">X error code or 0 on success</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2780">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="error_trap_pop_ignored" c:identifier="gdk_x11_display_error_trap_pop_ignored">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2803">Pops the error trap pushed by gdk_x11_display_error_trap_push().
Does not block to see if an error occurred; merely records the
range of requests to ignore errors for, and ignores those errors
if they arrive asynchronously.

See gdk_error_trap_pop_ignored() for the all-displays-at-once
equivalent.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2805">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="error_trap_push" c:identifier="gdk_x11_display_error_trap_push">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2632">Begins a range of X requests on @display for which X error events
will be ignored. Unignored errors (when no trap is pushed) will abort
the application. Use gdk_x11_display_error_trap_pop() or
gdk_x11_display_error_trap_pop_ignored()to lift a trap pushed
with this function.

See also gdk_error_trap_push() to push a trap on all displays.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2634">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_startup_notification_id" c:identifier="gdk_x11_display_get_startup_notification_id">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2393">Gets the startup notification ID for a display.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2399">the startup notification ID for @display</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2395">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_time" c:identifier="gdk_x11_display_get_user_time">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2363">Returns the timestamp of the last user interaction on
@display. The timestamp is taken from events caused
by user interaction such as key presses or pointer
movements. See gdk_x11_surface_set_user_time().</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2372">the timestamp of the last user interaction</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2365">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xcursor" c:identifier="gdk_x11_display_get_xcursor">
        <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="331">Returns the X cursor belonging to a #GdkCursor, potentially
creating the cursor.

Be aware that the returned cursor may not be unique to @cursor.
It may for example be shared with its fallback cursor. On old
X servers that don't support the XCursor extension, all cursors
may even fall back to a few default cursors.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="344">an Xlib Cursor.</doc>
          <type name="xlib.Cursor" c:type="Cursor"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="333">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="334">a #GdkCursor.</doc>
            <type name="Gdk.Cursor" c:type="GdkCursor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_xdisplay" c:identifier="gdk_x11_display_get_xdisplay">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2100">Returns the X display of a #GdkDisplay.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2106">an X display</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2102">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xrootwindow" c:identifier="gdk_x11_display_get_xrootwindow">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2132">Returns the root X window used by #GdkDisplay.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2138">an X Window</doc>
          <type name="xlib.Window" c:type="Window"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2134">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xscreen" c:identifier="gdk_x11_display_get_xscreen">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2116">Returns the X Screen used by #GdkDisplay.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2122">an X Screen</doc>
          <type name="xlib.Screen" c:type="Screen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2118">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="gdk_x11_display_grab">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1897">Call XGrabServer() on @display.
To ungrab the display again, use gdk_x11_display_ungrab().

gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1899">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cursor_theme" c:identifier="gdk_x11_display_set_cursor_theme">
        <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="261">Sets the cursor theme from which the images for cursor
should be taken.

If the windowing system supports it, existing cursors created
with gdk_cursor_new(), gdk_cursor_new_for_display() and
gdk_cursor_new_from_name() are updated to reflect the theme
change. Custom cursors constructed with
gdk_cursor_new_from_texture() will have to be handled
by the application (GTK+ applications can learn about
cursor theme changes by listening for change notification
for the corresponding #GtkSetting).</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="263">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="theme" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="264">the name of the cursor theme to use, or %NULL to unset
        a previously set value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkcursor-x11.c" line="266">the cursor size to use, or 0 to keep the previous size</doc>
            <type name="gint" c:type="const gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_notification_id" c:identifier="gdk_x11_display_set_startup_notification_id">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2407">Sets the startup notification ID for a display.

This is usually taken from the value of the DESKTOP_STARTUP_ID
environment variable, but in some cases (such as the application not
being launched using exec()) it can come from other sources.

If the ID contains the string "_TIME" then the portion following that
string is taken to be the X11 timestamp of the event that triggered
the application to be launched and the GDK current event time is set
accordingly.

The startup ID is also what is used to signal that the startup is
complete (for example, when opening a window or when calling
gdk_notify_startup_complete()).</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2409">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2410">the startup notification ID (must be valid utf8)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_surface_scale" c:identifier="gdk_x11_display_set_surface_scale">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2735">Forces a specific window scale for all windows on this display,
instead of using the default or user configured scale. This
is can be used to disable scaling support by setting @scale to
1, or to programmatically set the window scale.

Once the scale is set by this call it will not change in response
to later user configuration changes.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2737">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2738">The new scale value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="string_to_compound_text" c:identifier="gdk_x11_display_string_to_compound_text">
        <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="273">Convert a string from the encoding of the current
locale into a form suitable for storing in a window property.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="287">0 upon success, non-zero upon failure</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="275">the #GdkDisplay where the encoding is defined</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="276">a nul-terminated string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding" direction="out" caller-allocates="0" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="277">location to store the encoding atom
    (to be used as the type for the property)</doc>
            <type name="Gdk.Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="format" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="279">location to store the format of the property</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ctext" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="280">location to store newly
    allocated data for the property</doc>
            <array length="4" zero-terminated="0" c:type="guchar**">
              <type name="guint8" c:type="guchar*"/>
            </array>
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="282">the length of @ctext, in bytes</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="text_property_to_text_list" c:identifier="gdk_x11_display_text_property_to_text_list">
        <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="36">Convert a text string from the encoding as it is stored
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="54">the number of strings stored in list, or 0,
    if the conversion failed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="38">The #GdkDisplay where the encoding is defined</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="39">an atom representing the encoding. The most
   common values for this are STRING, or COMPOUND_TEXT.
   This is value used as the type for the property</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="42">the format of the property</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="43">The text data</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="44">The number of items to transform</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="45">location to store an  array of strings in
   the encoding of the current locale. This array should be
   freed using gdk_free_text_list().</doc>
            <type name="utf8" c:type="gchar***"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab" c:identifier="gdk_x11_display_ungrab">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1920">Ungrab @display after it has been grabbed with
gdk_x11_display_grab().</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="1922">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="utf8_to_compound_text" c:identifier="gdk_x11_display_utf8_to_compound_text">
        <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="392">Converts from UTF-8 to compound text.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="404">%TRUE if the conversion succeeded,
    otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="394">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="395">a UTF-8 string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="396">location to store resulting encoding</doc>
            <type name="Gdk.Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="format" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="397">location to store format of the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ctext" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="398">location to store the data of the result</doc>
            <array length="4" zero-terminated="0" c:type="guchar**">
              <type name="guint8" c:type="guchar*"/>
            </array>
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full">
            <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="399">location to store the length of the data
    stored in @ctext</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="xevent" when="last">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="3066">The ::xevent signal is a low level signal that is emitted
whenever an XEvent has been received.

When handlers to this signal return %TRUE, no other handlers will be
invoked. In particular, the default handler for this function is
GDK's own event handling mechanism, so by returning %TRUE for an event
that GDK expects to translate, you may break GDK and/or GTK+ in
interesting ways. You have been warned.

If you want this signal handler to queue a #GdkEvent, you can use
gdk_display_put_event().

If you are interested in X GenericEvents, bear in mind that
XGetEventData() has been already called on the event, and
XFreeEventData() will be called afterwards.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="3087">%TRUE to stop other handlers from being invoked for the event.
  %FALSE to propagate the event further.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="xevent" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="3069">a pointer to the XEvent to process</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="X11DisplayClass" c:type="GdkX11DisplayClass" disguised="1" glib:is-gtype-struct-for="X11Display">
      
    </record>
    <class name="X11Drag" c:symbol-prefix="x11_drag" c:type="GdkX11Drag" parent="Gdk.Drag" glib:type-name="GdkX11Drag" glib:get-type="gdk_x11_drag_get_type" glib:type-struct="X11DragClass">
      
    </class>
    <record name="X11DragClass" c:type="GdkX11DragClass" disguised="1" glib:is-gtype-struct-for="X11Drag">
      
    </record>
    <class name="X11GLContext" c:symbol-prefix="x11_gl_context" c:type="GdkX11GLContext" parent="Gdk.GLContext" glib:type-name="GdkX11GLContext" glib:get-type="gdk_x11_gl_context_get_type" glib:type-struct="X11GLContextClass">
      
    </class>
    <record name="X11GLContextClass" c:type="GdkX11GLContextClass" disguised="1" glib:is-gtype-struct-for="X11GLContext">
      
    </record>
    <class name="X11Keymap" c:symbol-prefix="x11_keymap" c:type="GdkX11Keymap" parent="Gdk.Keymap" glib:type-name="GdkX11Keymap" glib:get-type="gdk_x11_keymap_get_type" glib:type-struct="X11KeymapClass">
      
      <method name="get_group_for_state" c:identifier="gdk_x11_keymap_get_group_for_state">
        <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1387">Extracts the group from the state field sent in an X Key event.
This is only needed for code processing raw X events, since #GdkEventKey
directly includes an is_modifier field.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1396">the index of the active keyboard group for the event</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1389">a #GdkX11Keymap</doc>
            <type name="X11Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1390">raw state returned from X</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_is_modifier" c:identifier="gdk_x11_keymap_key_is_modifier">
        <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1473">Determines whether a particular key code represents a key that
is a modifier. That is, it&#x2019;s a key that normally just affects
the keyboard state and the behavior of other keys rather than
producing a direct effect itself. This is only needed for code
processing raw X events, since #GdkEventKey directly includes
an is_modifier field.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1485">%TRUE if the hardware keycode is a modifier key</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1475">a #GdkX11Keymap</doc>
            <type name="X11Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkkeys-x11.c" line="1476">the hardware keycode from a key event</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="X11KeymapClass" c:type="GdkX11KeymapClass" disguised="1" glib:is-gtype-struct-for="X11Keymap">
      
    </record>
    <class name="X11Monitor" c:symbol-prefix="x11_monitor" c:type="GdkX11Monitor" parent="Gdk.Monitor" glib:type-name="GdkX11Monitor" glib:get-type="gdk_x11_monitor_get_type" glib:type-struct="X11MonitorClass">
      
      <function name="get_output" c:identifier="gdk_x11_monitor_get_output">
        
        <return-value transfer-ownership="none">
          <type name="xlib.XID" c:type="XID"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Gdk.Monitor" c:type="GdkMonitor*"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="X11MonitorClass" c:type="GdkX11MonitorClass" disguised="1" glib:is-gtype-struct-for="X11Monitor">
      
    </record>
    <class name="X11Screen" c:symbol-prefix="x11_screen" c:type="GdkX11Screen" parent="GObject.Object" glib:type-name="GdkX11Screen" glib:get-type="gdk_x11_screen_get_type" glib:type-struct="X11ScreenClass">
      
      <method name="get_current_desktop" c:identifier="gdk_x11_screen_get_current_desktop">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1279">Returns the current workspace for @screen when running under a
window manager that supports multiple workspaces, as described
in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1288">the current workspace, or 0 if workspaces are not supported</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1281">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor_output" c:identifier="gdk_x11_screen_get_monitor_output">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="120">Gets the XID of the specified output/monitor.
If the X server does not support version 1.2 of the RANDR
extension, 0 is returned.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="129">the XID of the monitor</doc>
          <type name="xlib.XID" c:type="XID"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="122">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="123">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_number_of_desktops" c:identifier="gdk_x11_screen_get_number_of_desktops">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1262">Returns the number of workspaces for @screen when running under a
window manager that supports multiple workspaces, as described
in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1271">the number of workspaces, or 0 if workspaces are not supported</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1264">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen_number" c:identifier="gdk_x11_screen_get_screen_number">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="269">Returns the index of a #GdkX11Screen.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="275">the position of @screen among the screens
    of its display</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="271">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_manager_name" c:identifier="gdk_x11_screen_get_window_manager_name">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1144">Returns the name of the window manager for @screen.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1150">the name of the window manager screen @screen, or
"unknown" if the window manager is unknown. The string is owned by GDK
and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1146">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xscreen" c:identifier="gdk_x11_screen_get_xscreen">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="255">Returns the screen of a #GdkX11Screen.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="261">an Xlib Screen*</doc>
          <type name="xlib.Screen" c:type="Screen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="257">a #GdkX11Screen</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_net_wm_hint" c:identifier="gdk_x11_screen_supports_net_wm_hint">
        <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1057">This function is specific to the X11 backend of GDK, and indicates
whether the window manager supports a certain hint from the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.

When using this function, keep in mind that the window manager
can change over time; so you shouldn&#x2019;t use this function in
a way that impacts persistent application state. A common bug
is that your application can start up before the window manager
does when the user logs in, and before the window manager starts
gdk_x11_screen_supports_net_wm_hint() will return %FALSE for every property.
You can monitor the window_manager_changed signal on #GdkX11Screen to detect
a window manager change.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1075">%TRUE if the window manager supports @property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1059">the relevant #GdkX11Screen.</doc>
            <type name="X11Screen" c:type="GdkX11Screen*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkscreen-x11.c" line="1060">a property atom.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="window-manager-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="X11ScreenClass" c:type="GdkX11ScreenClass" disguised="1" glib:is-gtype-struct-for="X11Screen">
      
    </record>
    <class name="X11Surface" c:symbol-prefix="x11_surface" c:type="GdkX11Surface" parent="Gdk.Surface" glib:type-name="GdkX11Surface" glib:get-type="gdk_x11_surface_get_type" glib:type-struct="X11SurfaceClass">
      
      <function name="get_group" c:identifier="gdk_x11_surface_get_group" introspectable="0">
        
        <return-value>
          <type name="Gdk.Surface" c:type="GdkSurface*"/>
        </return-value>
        <parameters>
          <parameter name="surface" transfer-ownership="none">
            <type name="Gdk.Surface" c:type="GdkSurface*"/>
          </parameter>
        </parameters>
      </function>
      <function name="lookup_for_display" c:identifier="gdk_x11_surface_lookup_for_display">
        <doc xml:space="preserve" filename="../gdk/x11/gdkxid.c" line="90">Looks up the #GdkSurface that wraps the given native window handle.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkxid.c" line="98">the #GdkSurface wrapper for the native
   window, or %NULL if there is none.</doc>
          <type name="X11Surface" c:type="GdkSurface*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkxid.c" line="92">the #GdkDisplay corresponding to the
          window handle</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdkxid.c" line="94">an Xlib Window</doc>
            <type name="xlib.Window" c:type="Window"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_desktop" c:identifier="gdk_x11_surface_get_desktop">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1580">Gets the number of the workspace @surface is on.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1586">the current workspace of @surface</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1582">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xid" c:identifier="gdk_x11_surface_get_xid">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4514">Returns the X resource (surface) belonging to a #GdkSurface.</doc>
        
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4520">the ID of @drawable&#x2019;s X resource.</doc>
          <type name="xlib.Window" c:type="Window"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4516">a native #GdkSurface.</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_to_current_desktop" c:identifier="gdk_x11_surface_move_to_current_desktop">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1513">Moves the surface to the correct workspace when running under a
window manager that supports multiple workspaces, as described
in the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.
Will not do anything if the surface is already on all workspaces.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1515">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_to_desktop" c:identifier="gdk_x11_surface_move_to_desktop">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1596">Moves the surface to the given workspace when running unde a
window manager that supports multiple workspaces, as described
in the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1598">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1599">the number of the workspace to move the surface to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frame_sync_enabled" c:identifier="gdk_x11_surface_set_frame_sync_enabled">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4546">This function can be used to disable frame synchronization for a surface.
Normally frame synchronziation will be enabled or disabled based on whether
the system has a compositor that supports frame synchronization, but if
the surface is not directly managed by the window manager, then frame
synchronziation may need to be disabled. This is the case for a surface
embedded via the XEMBED protocol.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4548">a native #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="frame_sync_enabled" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4549">whether frame-synchronization should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group" c:identifier="gdk_x11_surface_set_group">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="3404">Sets the group leader of @surface to be @leader.
See the ICCCM for details.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="3406">a native #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="leader" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="3407">a #GdkSurface</doc>
            <type name="Gdk.Surface" c:type="GdkSurface*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_pager_hint" c:identifier="gdk_x11_surface_set_skip_pager_hint">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1899">Sets a hint on @surface that pagers should not
display it. See the EWMH for details.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1901">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="skips_pager" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1902">%TRUE to skip pagers</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_skip_taskbar_hint" c:identifier="gdk_x11_surface_set_skip_taskbar_hint">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1870">Sets a hint on @surface that taskbars should not
display it. See the EWMH for details.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1872">a native #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="skips_taskbar" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1873">%TRUE to skip taskbars</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme_variant" c:identifier="gdk_x11_surface_set_theme_variant">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2770">GTK+ applications can request a dark theme variant. In order to
make other applications - namely window managers using GTK+ for
themeing - aware of this choice, GTK+ uses this function to
export the requested theme variant as _GTK_THEME_VARIANT property
on toplevel surfaces.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel surfaces.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2772">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2773">the theme variant to export</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgency_hint" c:identifier="gdk_x11_surface_set_urgency_hint">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1928">Sets a hint on @surface that it needs user attention.
See the ICCCM for details.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1930">a native #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="urgent" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="1931">%TRUE to indicate urgenct attention needed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_time" c:identifier="gdk_x11_surface_set_user_time">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2644">The application can use this call to update the _NET_WM_USER_TIME
property on a toplevel surface.  This property stores an Xserver
time which represents the time of the last user input event
received for this surface.  This property may be used by the window
manager to alter the focus, stacking, and/or placement behavior of
surfaces when they are mapped depending on whether the new surface
was created by a user action or is a "pop-up" surface activated by a
timer or some other event.

Note that this property is automatically updated by GDK, so this
function should only be used by applications which handle input
events bypassing GDK.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2646">A toplevel #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2647">An XServer timestamp to which the property should be set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_utf8_property" c:identifier="gdk_x11_surface_set_utf8_property">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2707">This function modifies or removes an arbitrary X11 window
property of type UTF8_STRING.  If the given @surface is
not a toplevel surface, it is ignored.</doc>
        
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="surface" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2709">a #GdkSurface</doc>
            <type name="X11Surface" c:type="GdkSurface*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2710">Property name, will be interned as an X atom</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="2711">Property value, or %NULL to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="X11SurfaceClass" c:type="GdkX11SurfaceClass" disguised="1" glib:is-gtype-struct-for="X11Surface">
      
    </record>
    <function name="disable_multidevice" c:identifier="gdk_disable_multidevice">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="159">Disables multidevice support in GDKs X11 backend. This call must happen prior
to gdk_display_open(), gtk_init() or gtk_init_check() in order to
take effect.

Most common GTK+ applications won&#x2019;t ever need to call this. Only
applications that do mixed GDK/Xlib calls could want to disable
multidevice support if such Xlib code deals with input devices in
any way and doesn&#x2019;t observe the presence of XInput 2.</doc>
      
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="x11_atom_to_xatom_for_display" c:identifier="gdk_x11_atom_to_xatom_for_display">
      <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="68">Converts from a #GdkAtom to the X atom for a #GdkDisplay
with the same string value. The special value %NULL
is converted to %None.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="77">the X atom corresponding to @atom, or %None</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="70">A #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="atom" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="71">A #GdkAtom, or %NULL</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_device_get_id" c:identifier="gdk_x11_device_get_id">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="122">Returns the device ID as seen by XInput2.

&gt; If gdk_disable_multidevice() has been called, this function
&gt; will respectively return 2/3 for the core pointer and keyboard,
&gt; (matching the IDs for the Virtual Core Pointer and Keyboard in
&gt; XInput 2), but calling this function on any slave devices (i.e.
&gt; those managed via XInput 1.x), will return 0.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="134">the XInput2 device ID.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="124">a #GdkDevice</doc>
          <type name="X11DeviceCore" c:type="GdkDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_device_manager_lookup" c:identifier="gdk_x11_device_manager_lookup">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="83">Returns the #GdkDevice that wraps the given device ID.</doc>
      
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="90">The #GdkDevice wrapping the device ID,
         or %NULL if the given ID doesn&#x2019;t currently represent a device.</doc>
        <type name="X11DeviceCore" c:type="GdkDevice*"/>
      </return-value>
      <parameters>
        <parameter name="device_manager" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="85">a #GdkDeviceManager</doc>
          <type name="X11DeviceManagerCore" c:type="GdkX11DeviceManagerCore*"/>
        </parameter>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdevicemanager-x11.c" line="86">a device ID, as understood by the XInput2 protocol</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_free_compound_text" c:identifier="gdk_x11_free_compound_text">
      <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="469">Frees the data returned from gdk_x11_display_string_to_compound_text().</doc>
      
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ctext" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="471">The pointer stored in @ctext from a call to
  gdk_x11_display_string_to_compound_text().</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_free_text_list" c:identifier="gdk_x11_free_text_list">
      <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="96">Frees the array of strings created by
gdk_x11_display_text_property_to_text_list().</doc>
      
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkselection-x11.c" line="98">the value stored in the @list parameter by
  a call to gdk_x11_display_text_property_to_text_list().</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_server_time" c:identifier="gdk_x11_get_server_time">
      <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4475">Routine to get the current X server time stamp.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4484">the time stamp.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="surface" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdksurface-x11.c" line="4477">a #GdkSurface, used for communication
         with the server.  The surface must have
         GDK_PROPERTY_CHANGE_MASK in its events mask or a hang will
         result.</doc>
          <type name="X11Surface" c:type="GdkSurface*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_by_name_for_display" c:identifier="gdk_x11_get_xatom_by_name_for_display">
      <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="200">Returns the X atom for a #GdkDisplay corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="209">a X atom for a #GdkDisplay</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="202">a #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="203">a string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_name_for_display" c:identifier="gdk_x11_get_xatom_name_for_display">
      <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="239">Returns the name of an X atom for its display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and the result doesn&#x2019;t need to
be freed.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="249">name of the X atom; this string is owned by GDK,
  so it shouldn&#x2019;t be modifed or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="241">the #GdkDisplay where @xatom is defined</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="242">an X atom</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_lookup_xdisplay" c:identifier="gdk_x11_lookup_xdisplay">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2020">Find the #GdkDisplay corresponding to @xdisplay, if any exists.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2026">the #GdkDisplay, if found, otherwise %NULL.</doc>
        <type name="X11Display" c:type="GdkDisplay*"/>
      </return-value>
      <parameters>
        <parameter name="xdisplay" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2022">a pointer to an X Display</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_register_standard_event_type" c:identifier="gdk_x11_register_standard_event_type">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2479">Registers interest in receiving extension events with type codes
between @event_base and `event_base + n_events - 1`.
The registered events must have the window field in the same place
as core X events (this is not the case for e.g. XKB extension events).

GDK may register the events of some X extensions on its own.

This function should only be needed in unusual circumstances, e.g.
when filtering XInput extension events on the root window.</doc>
      
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2481">a #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="event_base" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2482">first event type code to register</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="n_events" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2483">number of event type codes to register</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_set_sm_client_id" c:identifier="gdk_x11_set_sm_client_id">
      <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2823">Sets the `SM_CLIENT_ID` property on the application&#x2019;s leader window so that
the window manager can save the application&#x2019;s state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual</doc>
      
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sm_client_id" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../gdk/x11/gdkdisplay-x11.c" line="2825">the client id assigned by the session manager
   when the connection was opened, or %NULL to remove the property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_xatom_to_atom_for_display" c:identifier="gdk_x11_xatom_to_atom_for_display">
      <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="145">Convert from an X atom for a #GdkDisplay to the corresponding
#GdkAtom.</doc>
      
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="153">the corresponding #GdkAtom.</doc>
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="147">A #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve" filename="../gdk/x11/gdkproperty-x11.c" line="148">an X atom</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
