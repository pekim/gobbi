<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
  <include name="GObject" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <package name="pangocairo"/>
  <c:include name="pango/pangocairo.h"/>
  <namespace name="PangoCairo" version="1.0" shared-library="libpangocairo-1.0.so.0" c:identifier-prefixes="PangoCairo" c:symbol-prefixes="pango_cairo">
    <interface name="Font" c:symbol-prefix="font" c:type="PangoCairoFont" version="1.18" glib:type-name="PangoCairoFont" glib:get-type="pango_cairo_font_get_type">
      <doc xml:space="preserve" filename="../pango/pangocairo.h" line="30">#PangoCairoFont is an interface exported by fonts for
use with Cairo. The actual type of the font will depend
on the particular font technology Cairo was compiled to use.</doc>
      <prerequisite name="Pango.Font"/>
      <method name="get_scaled_font" c:identifier="pango_cairo_font_get_scaled_font" version="1.18">
        <doc xml:space="preserve" filename="../pango/pangocairo-font.c" line="137">Gets the #cairo_scaled_font_t used by @font.
The scaled font can be referenced and kept using
cairo_scaled_font_reference().</doc>
        <source-position filename="../pango/pangocairo.h" line="111"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../pango/pangocairo-font.c" line="145">the #cairo_scaled_font_t used by @font,
              or %NULL if @font is %NULL.</doc>
          <type name="cairo.ScaledFont" c:type="cairo_scaled_font_t*"/>
        </return-value>
        <parameters>
          <instance-parameter name="font" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-font.c" line="139">a #PangoFont from a #PangoCairoFontMap</doc>
            <type name="Font" c:type="PangoCairoFont*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <interface name="FontMap" c:symbol-prefix="font_map" c:type="PangoCairoFontMap" version="1.10" glib:type-name="PangoCairoFontMap" glib:get-type="pango_cairo_font_map_get_type">
      <doc xml:space="preserve" filename="../pango/pangocairo.h" line="44">#PangoCairoFontMap is an interface exported by font maps for
use with Cairo. The actual type of the font map will depend
on the particular font technology Cairo was compiled to use.</doc>
      <prerequisite name="Pango.FontMap"/>
      <function name="get_default" c:identifier="pango_cairo_font_map_get_default" version="1.10">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="159">Gets a default #PangoCairoFontMap to use with Cairo.

Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.

The default Cairo fontmap can be changed by using
pango_cairo_font_map_set_default().  This can be used to
change the Cairo font backend that the default fontmap
uses for example.

Note that since Pango 1.32.6, the default fontmap is per-thread.
Each thread gets its own default fontmap.  In this way,
PangoCairo can be used safely from multiple threads.</doc>
        <source-position filename="../pango/pangocairo.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="178">the default PangoCairo fontmap
 for the current thread. This object is owned by Pango and must not be freed.</doc>
          <type name="Pango.FontMap" c:type="PangoFontMap*"/>
        </return-value>
      </function>
      <function name="new" c:identifier="pango_cairo_font_map_new" version="1.10">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="47">Creates a new #PangoCairoFontMap object; a fontmap is used
to cache information about available fonts, and holds
certain global parameters such as the resolution.
In most cases, you can use pango_cairo_font_map_get_default()
instead.

Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.

You can override the type of backend returned by using an
environment variable %PANGOCAIRO_BACKEND.  Supported types,
based on your build, are fc (fontconfig), win32, and coretext.
If requested type is not available, NULL is returned. Ie.
this is only useful for testing, when at least two backends
are compiled in.</doc>
        <source-position filename="../pango/pangocairo.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="68">the newly allocated #PangoFontMap,
              which should be freed with g_object_unref().</doc>
          <type name="Pango.FontMap" c:type="PangoFontMap*"/>
        </return-value>
      </function>
      <function name="new_for_font_type" c:identifier="pango_cairo_font_map_new_for_font_type" version="1.18">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="113">Creates a new #PangoCairoFontMap object of the type suitable
to be used with cairo font backend of type @fonttype.

In most cases one should simply use @pango_cairo_font_map_new(),
or in fact in most of those cases, just use
@pango_cairo_font_map_get_default().</doc>
        <source-position filename="../pango/pangocairo.h" line="86"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="124">the newly allocated
              #PangoFontMap of suitable type which should be freed
              with g_object_unref(), or %NULL if the requested
              cairo font backend is not supported / compiled in.</doc>
          <type name="Pango.FontMap" c:type="PangoFontMap*"/>
        </return-value>
        <parameters>
          <parameter name="fonttype" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="115">desired #cairo_font_type_t</doc>
            <type name="cairo.FontType" c:type="cairo_font_type_t"/>
          </parameter>
        </parameters>
      </function>
      <method name="create_context" c:identifier="pango_cairo_font_map_create_context" version="1.10" introspectable="0" deprecated="1" deprecated-version="1.22">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="270">Create a #PangoContext for the given fontmap.</doc>
        <doc-deprecated xml:space="preserve">Use pango_font_map_create_context() instead.</doc-deprecated>
        <source-position filename="../pango/pangocairo.h" line="101"/>
        <return-value>
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="276">the newly created context; free with g_object_unref().</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="272">a #PangoCairoFontMap</doc>
            <type name="FontMap" c:type="PangoCairoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_type" c:identifier="pango_cairo_font_map_get_font_type" version="1.18">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="290">Gets the type of Cairo font backend that @fontmap uses.</doc>
        <source-position filename="../pango/pangocairo.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="296">the #cairo_font_type_t cairo font backend type</doc>
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="292">a #PangoCairoFontMap</doc>
            <type name="FontMap" c:type="PangoCairoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resolution" c:identifier="pango_cairo_font_map_get_resolution" version="1.10">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="252">Gets the resolution for the fontmap. See pango_cairo_font_map_set_resolution()</doc>
        <source-position filename="../pango/pangocairo.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="258">the resolution in "dots per inch"</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="254">a #PangoCairoFontMap</doc>
            <type name="FontMap" c:type="PangoCairoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default" c:identifier="pango_cairo_font_map_set_default" version="1.22">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="197">Sets a default #PangoCairoFontMap to use with Cairo.

This can be used to change the Cairo font backend that the
default fontmap uses for example.  The old default font map
is unreffed and the new font map referenced.

Note that since Pango 1.32.6, the default fontmap is per-thread.
This function only changes the default fontmap for
the current thread.   Default fontmaps of exisiting threads
are not changed.  Default fontmaps of any new threads will
still be created using pango_cairo_font_map_new().

A value of %NULL for @fontmap will cause the current default
font map to be released and a new default font
map to be created on demand, using pango_cairo_font_map_new().</doc>
        <source-position filename="../pango/pangocairo.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none" nullable="1" allow-none="1">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="199">The new default font map, or %NULL</doc>
            <type name="FontMap" c:type="PangoCairoFontMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_resolution" c:identifier="pango_cairo_font_map_set_resolution" version="1.10">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="230">Sets the resolution for the fontmap. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3).</doc>
        <source-position filename="../pango/pangocairo.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fontmap" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="232">a #PangoCairoFontMap</doc>
            <type name="FontMap" c:type="PangoCairoFontMap*"/>
          </instance-parameter>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="233">the resolution in "dots per inch". (Physical inches aren't actually
  involved; the terminology is conventional.)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <callback name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc">
      <doc xml:space="preserve" filename="../pango/pangocairo.h" line="58">Function type for rendering attributes of type %PANGO_ATTR_SHAPE
with Pango's Cairo renderer.</doc>
      <source-position filename="../pango/pangocairo.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo.h" line="60">a Cairo context with current point set to where the shape should
be rendered</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="attr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo.h" line="62">the %PANGO_ATTR_SHAPE to render</doc>
          <type name="Pango.AttrShape" c:type="PangoAttrShape*"/>
        </parameter>
        <parameter name="do_path" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo.h" line="63">whether only the shape path should be appended to current
path of @cr and no filling/stroking done.  This will be set
to %TRUE when called from pango_cairo_layout_path() and
pango_cairo_layout_line_path() rendering functions.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../pango/pangocairo.h" line="67">user data passed to pango_cairo_context_set_shape_renderer()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="context_get_font_options" c:identifier="pango_cairo_context_get_font_options" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="271">Retrieves any font rendering options previously set with
pango_cairo_context_set_font_options(). This function does not report options
that are derived from the target surface by pango_cairo_update_context()</doc>
      <source-position filename="../pango/pangocairo.h" line="123"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="279">the font options previously set on the
  context, or %NULL if no options have been set. This value is
  owned by the context and must not be modified or freed.</doc>
        <type name="cairo.FontOptions" c:type="const cairo_font_options_t*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="273">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_resolution" c:identifier="pango_cairo_context_get_resolution" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="203">Gets the resolution for the context. See pango_cairo_context_set_resolution()</doc>
      <source-position filename="../pango/pangocairo.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="209">the resolution in "dots per inch". A negative value will
 be returned if no resolution has previously been set.</doc>
        <type name="gdouble" c:type="double"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="205">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_get_shape_renderer" c:identifier="pango_cairo_context_get_shape_renderer" version="1.18" introspectable="0">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="364">Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details.

Retrieves callback function and associated user data for rendering
attributes of type %PANGO_ATTR_SHAPE as set by
pango_cairo_context_set_shape_renderer(), if any.</doc>
      <source-position filename="../pango/pangocairo.h" line="137"/>
      <return-value nullable="1">
        <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="377">the shape rendering callback previously
  set on the context, or %NULL if no shape rendering callback have
  been set.</doc>
        <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="366">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="367">Pointer to #gpointer to return user data</doc>
          <type name="gpointer" c:type="gpointer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_font_options" c:identifier="pango_cairo_context_set_font_options" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="225">Sets the font options used when rendering text with this context.
These options override any options that pango_cairo_update_context()
derives from the target surface.</doc>
      <source-position filename="../pango/pangocairo.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="227">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="228">a #cairo_font_options_t, or %NULL to unset
          any previously set options. A copy is made.</doc>
          <type name="cairo.FontOptions" c:type="const cairo_font_options_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_resolution" c:identifier="pango_cairo_context_set_resolution" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="181">Sets the resolution for the context. This is a scale factor between
points specified in a #PangoFontDescription and Cairo units. The
default value is 96, meaning that a 10 point font will be 13
units high. (10 * 96. / 72. = 13.3).</doc>
      <source-position filename="../pango/pangocairo.h" line="126"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="183">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="dpi" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="184">the resolution in "dots per inch". (Physical inches aren't actually
  involved; the terminology is conventional.) A 0 or negative value
  means to use the resolution from the font map.</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="context_set_shape_renderer" c:identifier="pango_cairo_context_set_shape_renderer" version="1.18">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="329">Sets callback function for context to use for rendering attributes
of type %PANGO_ATTR_SHAPE.  See #PangoCairoShapeRendererFunc for
details.</doc>
      <source-position filename="../pango/pangocairo.h" line="132"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="331">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" nullable="1" allow-none="1" scope="notified" closure="2" destroy="3">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="332">Callback function for rendering attributes of
       type %PANGO_ATTR_SHAPE, or %NULL to disable shape rendering.</doc>
          <type name="ShapeRendererFunc" c:type="PangoCairoShapeRendererFunc"/>
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="334">User data that will be passed to @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="dnotify" transfer-ownership="none" scope="async">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="335">Callback that will be called when the
          context is freed to release @data, or %NULL.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_context" c:identifier="pango_cairo_create_context" version="1.22">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="407">Creates a context object set up to match the current transformation
and target surface of the Cairo context.  This context can then be
used to create a layout using pango_layout_new().

This function is a convenience function that creates a context using
the default font map, then updates it to @cr.  If you just need to
create a layout for use with @cr and do not need to access #PangoContext
directly, you can use pango_cairo_create_layout() instead.</doc>
      <source-position filename="../pango/pangocairo.h" line="143"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="420">the newly created #PangoContext. Free with
  g_object_unref().</doc>
        <type name="Pango.Context" c:type="PangoContext*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="409">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_layout" c:identifier="pango_cairo_create_layout" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="440">Creates a layout object set up to match the current transformation
and target surface of the Cairo context.  This layout can then be
used for text measurement with functions like
pango_layout_get_size() or drawing with functions like
pango_cairo_show_layout(). If you change the transformation
or target surface for @cr, you need to call pango_cairo_update_layout()

This function is the most convenient way to use Cairo with Pango,
however it is slightly inefficient since it creates a separate
#PangoContext object for each layout. This might matter in an
application that was laying out large amounts of text.</doc>
      <source-position filename="../pango/pangocairo.h" line="145"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="456">the newly created #PangoLayout. Free with
  g_object_unref().</doc>
        <type name="Pango.Layout" c:type="PangoLayout*"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="442">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_underline_path" c:identifier="pango_cairo_error_underline_path" version="1.14">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1266">Add a squiggly line to the current path in the specified cairo context that
approximately covers the given rectangle in the style of an underline used
to indicate a spelling error.  (The width of the underline is rounded to an
integer number of up/down segments and the resulting rectangle is centered
in the original rectangle)</doc>
      <source-position filename="../pango/pangocairo.h" line="190"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1268">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1269">The X coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1270">The Y coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1271">Non-negative width of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1272">Non-negative height of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_map_get_default" c:identifier="pango_cairo_font_map_get_default" moved-to="FontMap.get_default" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="159">Gets a default #PangoCairoFontMap to use with Cairo.

Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.

The default Cairo fontmap can be changed by using
pango_cairo_font_map_set_default().  This can be used to
change the Cairo font backend that the default fontmap
uses for example.

Note that since Pango 1.32.6, the default fontmap is per-thread.
Each thread gets its own default fontmap.  In this way,
PangoCairo can be used safely from multiple threads.</doc>
      <source-position filename="../pango/pangocairo.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="178">the default PangoCairo fontmap
 for the current thread. This object is owned by Pango and must not be freed.</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new" c:identifier="pango_cairo_font_map_new" moved-to="FontMap.new" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="47">Creates a new #PangoCairoFontMap object; a fontmap is used
to cache information about available fonts, and holds
certain global parameters such as the resolution.
In most cases, you can use pango_cairo_font_map_get_default()
instead.

Note that the type of the returned object will depend
on the particular font backend Cairo was compiled to use;
You generally should only use the #PangoFontMap and
#PangoCairoFontMap interfaces on the returned object.

You can override the type of backend returned by using an
environment variable %PANGOCAIRO_BACKEND.  Supported types,
based on your build, are fc (fontconfig), win32, and coretext.
If requested type is not available, NULL is returned. Ie.
this is only useful for testing, when at least two backends
are compiled in.</doc>
      <source-position filename="../pango/pangocairo.h" line="84"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="68">the newly allocated #PangoFontMap,
              which should be freed with g_object_unref().</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
    </function>
    <function name="font_map_new_for_font_type" c:identifier="pango_cairo_font_map_new_for_font_type" moved-to="FontMap.new_for_font_type" version="1.18">
      <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="113">Creates a new #PangoCairoFontMap object of the type suitable
to be used with cairo font backend of type @fonttype.

In most cases one should simply use @pango_cairo_font_map_new(),
or in fact in most of those cases, just use
@pango_cairo_font_map_get_default().</doc>
      <source-position filename="../pango/pangocairo.h" line="86"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="124">the newly allocated
              #PangoFontMap of suitable type which should be freed
              with g_object_unref(), or %NULL if the requested
              cairo font backend is not supported / compiled in.</doc>
        <type name="Pango.FontMap" c:type="PangoFontMap*"/>
      </return-value>
      <parameters>
        <parameter name="fonttype" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-fontmap.c" line="115">desired #cairo_font_type_t</doc>
          <type name="cairo.FontType" c:type="cairo_font_type_t"/>
        </parameter>
      </parameters>
    </function>
    <function name="glyph_string_path" c:identifier="pango_cairo_glyph_string_path" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1201">Adds the glyphs in @glyphs to the current path in the specified
cairo context. The origin of the glyphs (the left edge of the baseline)
will be at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="179"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1203">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1204">a #PangoFont from a #PangoCairoFontMap</doc>
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1205">a #PangoGlyphString</doc>
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_line_path" c:identifier="pango_cairo_layout_line_path" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1224">Adds the text in #PangoLayoutLine to the current path in the
specified cairo context.  The origin of the glyphs (the left edge
of the line) will be at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="183"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1226">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1227">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="layout_path" c:identifier="pango_cairo_layout_path" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1245">Adds the text in a #PangoLayout to the current path in the
specified cairo context.  The top-left corner of the #PangoLayout
will be at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="186"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1247">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1248">a Pango layout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_error_underline" c:identifier="pango_cairo_show_error_underline" version="1.14">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1172">Draw a squiggly line in the specified cairo context that approximately
covers the given rectangle in the style of an underline used to indicate a
spelling error.  (The width of the underline is rounded to an integer
number of up/down segments and the resulting rectangle is centered in the
original rectangle)</doc>
      <source-position filename="../pango/pangocairo.h" line="169"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1174">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="x" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1175">The X coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1176">The Y coordinate of one corner of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1177">Non-negative width of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1178">Non-negative height of the rectangle</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_item" c:identifier="pango_cairo_show_glyph_item" version="1.22">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1099">Draws the glyphs in @glyph_item in the specified cairo context,
embedding the text associated with the glyphs in the output if the
output format supports it (PDF for example), otherwise it acts
similar to pango_cairo_show_glyph_string().

The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context.

Note that @text is the start of the text for layout, which is then
indexed by &lt;literal&gt;@glyph_item-&gt;item-&gt;offset&lt;/literal&gt;.</doc>
      <source-position filename="../pango/pangocairo.h" line="158"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1101">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1102">the UTF-8 text that @glyph_item refers to</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="glyph_item" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1103">a #PangoGlyphItem</doc>
          <type name="Pango.GlyphItem" c:type="PangoGlyphItem*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_glyph_string" c:identifier="pango_cairo_show_glyph_string" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1075">Draws the glyphs in @glyphs in the specified cairo context.
The origin of the glyphs (the left edge of the baseline) will
be drawn at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="154"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1077">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="font" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1078">a #PangoFont from a #PangoCairoFontMap</doc>
          <type name="Pango.Font" c:type="PangoFont*"/>
        </parameter>
        <parameter name="glyphs" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1079">a #PangoGlyphString</doc>
          <type name="Pango.GlyphString" c:type="PangoGlyphString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout" c:identifier="pango_cairo_show_layout" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1151">Draws a #PangoLayout in the specified cairo context.
The top-left corner of the #PangoLayout will be drawn
at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="165"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1153">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1154">a Pango layout</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_layout_line" c:identifier="pango_cairo_show_layout_line" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1130">Draws a #PangoLayoutLine in the specified cairo context.
The origin of the glyphs (the left edge of the line) will
be drawn at the current point of the cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="162"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1132">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="line" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-render.c" line="1133">a #PangoLayoutLine</doc>
          <type name="Pango.LayoutLine" c:type="PangoLayoutLine*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_context" c:identifier="pango_cairo_update_context" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="158">Updates a #PangoContext previously created for use with Cairo to
match the current transformation and target surface of a Cairo
context. If any layouts have been created for the context,
it's necessary to call pango_layout_context_changed() on those
layouts.</doc>
      <source-position filename="../pango/pangocairo.h" line="116"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="160">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="161">a #PangoContext, from a pangocairo font map</doc>
          <type name="Pango.Context" c:type="PangoContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="update_layout" c:identifier="pango_cairo_update_layout" version="1.10">
      <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="476">Updates the private #PangoContext of a #PangoLayout created with
pango_cairo_create_layout() to match the current transformation
and target surface of a Cairo context.</doc>
      <source-position filename="../pango/pangocairo.h" line="147"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cr" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="478">a Cairo context</doc>
          <type name="cairo.Context" c:type="cairo_t*"/>
        </parameter>
        <parameter name="layout" transfer-ownership="none">
          <doc xml:space="preserve" filename="../pango/pangocairo-context.c" line="479">a #PangoLayout, from pango_cairo_create_layout()</doc>
          <type name="Pango.Layout" c:type="PangoLayout*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
