#!/bin/bash
set -e
set -u

exampleDir=example
tags="cairo_1.12 gobject_2.26 glib_2.40 gdk_3.4 gdkpixbuf_2.32 gio_2.36 gtk_3.18 pango_1.38 pangocairo_1.22 gtksource_3.18 webkit2_2.26 soup_2.62 javascriptcore_2.24"

usage () {
    echo "Usage:"
    echo "  gobbi -h                       Show this help"
    echo "  gobbi build                    Generate libraries and docs, and run tests"
    echo "  gobbi build-examples           Build examples, to validate they're buildable"
    echo "  gobbi docs                     Generate documentation"
    echo "  gobbi generate                 Generate libraries"
    echo "  gobbi generate-clean           Generate libraries, first removing all generated files"
    echo "  gobbi test                     Run tests"

    exit
}

build () {
    generate $@ && \
    echo "" && \
    test && \
    echo "" && \
    buildExamples && \
    echo "" && \
    docs && \
    echo ""
}

buildExamples () {
  srcDir="../example"
  binDir="example-bin"

  rm -fr $binDir
  mkdir -p $binDir

  for example in $(find $srcDir -name main.go -printf '%h\n' | sort) ; do
    go build -o $binDir -tags "$tags"  $example
  done
}

generate () {
    GOGC=off go run cmd/generate/*.go $@ 2>&1
}

generateCairo () {
  c-for-go -nostamp -out ../lib/ generate/cairo/cairo.yml
}

generateClean () {
    grep -l -r "Code generated - DO NOT EDIT" lib/ | xargs rm -f && \
    generate $@
}

docs () {
    go run cmd/docs/main.go
}

test () {
    flags=""
    if (( $# > 0 )); then
        flags=$1
    fi

    go test -tags "$tags" $flags github.com/pekim/gobbi/...
}

processOptions () {
  while getopts ":h" opt; do
    case ${opt} in
      h )
        usage
        ;;
      \? )
        echo "Invalid Option: -$OPTARG" 1>&2
        echo ""
        usage
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [ "$#" -lt 1 ]; then
    usage
  fi
}

processSubcommand () {
  subCommand=$1
  shift

  case "$subCommand" in
    build)
      build $@
      ;;
    build-examples)
      buildExamples
      ;;
    docs)
      docs
      ;;
    generate)
      generate $@
      ;;
    generate-cairo)
      generateCairo $@
      ;;
    generate-clean)
      generateClean $@
      ;;
    test)
      test $@
      ;;
    *)
      echo "Invalid subcommand: $subCommand" 1>&2
      echo ""
      usage
      ;;
  esac
}

processOptions "$@"
processSubcommand "$@"
