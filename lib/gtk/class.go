// Code generated - DO NOT EDIT.

package gtk

import (
	gi "github.com/pekim/gobbi/internal/gi"
	atk "github.com/pekim/gobbi/lib/atk"
	gio "github.com/pekim/gobbi/lib/gio"
	gobject "github.com/pekim/gobbi/lib/gobject"
	xlib "github.com/pekim/gobbi/lib/xlib"
	"runtime"
	"sync"
)

var aboutDialogStruct *gi.Struct
var aboutDialogStruct_Once sync.Once

func aboutDialogStruct_Set() error {
	var err error
	aboutDialogStruct_Once.Do(func() {
		aboutDialogStruct, err = gi.StructNew("Gtk", "AboutDialog")
	})
	return err
}

type AboutDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *AboutDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(aboutDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *AboutDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(aboutDialogStruct, recv.Native, "parent_instance", argValue)
}

var aboutDialogNewFunction *gi.Function
var aboutDialogNewFunction_Once sync.Once

func aboutDialogNewFunction_Set() error {
	var err error
	aboutDialogNewFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogNewFunction, err = aboutDialogStruct.InvokerNew("new")
	})
	return err
}

// AboutDialogNew is a representation of the C type gtk_about_dialog_new.
func AboutDialogNew() *AboutDialog {

	var ret gi.Argument

	err := aboutDialogNewFunction_Set()
	if err == nil {
		ret = aboutDialogNewFunction.Invoke(nil, nil)
	}

	retGo := &AboutDialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_about_dialog_add_credit_section' : parameter 'people' of type 'nil' not supported

var aboutDialogGetArtistsFunction *gi.Function
var aboutDialogGetArtistsFunction_Once sync.Once

func aboutDialogGetArtistsFunction_Set() error {
	var err error
	aboutDialogGetArtistsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetArtistsFunction, err = aboutDialogStruct.InvokerNew("get_artists")
	})
	return err
}

// GetArtists is a representation of the C type gtk_about_dialog_get_artists.
func (recv *AboutDialog) GetArtists() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := aboutDialogGetArtistsFunction_Set()
	if err == nil {
		aboutDialogGetArtistsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogGetAuthorsFunction *gi.Function
var aboutDialogGetAuthorsFunction_Once sync.Once

func aboutDialogGetAuthorsFunction_Set() error {
	var err error
	aboutDialogGetAuthorsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetAuthorsFunction, err = aboutDialogStruct.InvokerNew("get_authors")
	})
	return err
}

// GetAuthors is a representation of the C type gtk_about_dialog_get_authors.
func (recv *AboutDialog) GetAuthors() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := aboutDialogGetAuthorsFunction_Set()
	if err == nil {
		aboutDialogGetAuthorsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogGetCommentsFunction *gi.Function
var aboutDialogGetCommentsFunction_Once sync.Once

func aboutDialogGetCommentsFunction_Set() error {
	var err error
	aboutDialogGetCommentsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetCommentsFunction, err = aboutDialogStruct.InvokerNew("get_comments")
	})
	return err
}

// GetComments is a representation of the C type gtk_about_dialog_get_comments.
func (recv *AboutDialog) GetComments() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetCommentsFunction_Set()
	if err == nil {
		ret = aboutDialogGetCommentsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetCopyrightFunction *gi.Function
var aboutDialogGetCopyrightFunction_Once sync.Once

func aboutDialogGetCopyrightFunction_Set() error {
	var err error
	aboutDialogGetCopyrightFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetCopyrightFunction, err = aboutDialogStruct.InvokerNew("get_copyright")
	})
	return err
}

// GetCopyright is a representation of the C type gtk_about_dialog_get_copyright.
func (recv *AboutDialog) GetCopyright() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetCopyrightFunction_Set()
	if err == nil {
		ret = aboutDialogGetCopyrightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetDocumentersFunction *gi.Function
var aboutDialogGetDocumentersFunction_Once sync.Once

func aboutDialogGetDocumentersFunction_Set() error {
	var err error
	aboutDialogGetDocumentersFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetDocumentersFunction, err = aboutDialogStruct.InvokerNew("get_documenters")
	})
	return err
}

// GetDocumenters is a representation of the C type gtk_about_dialog_get_documenters.
func (recv *AboutDialog) GetDocumenters() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := aboutDialogGetDocumentersFunction_Set()
	if err == nil {
		aboutDialogGetDocumentersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogGetLicenseFunction *gi.Function
var aboutDialogGetLicenseFunction_Once sync.Once

func aboutDialogGetLicenseFunction_Set() error {
	var err error
	aboutDialogGetLicenseFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetLicenseFunction, err = aboutDialogStruct.InvokerNew("get_license")
	})
	return err
}

// GetLicense is a representation of the C type gtk_about_dialog_get_license.
func (recv *AboutDialog) GetLicense() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetLicenseFunction_Set()
	if err == nil {
		ret = aboutDialogGetLicenseFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_about_dialog_get_license_type' : return type 'License' not supported

// UNSUPPORTED : C value 'gtk_about_dialog_get_logo' : return type 'GdkPixbuf.Pixbuf' not supported

var aboutDialogGetLogoIconNameFunction *gi.Function
var aboutDialogGetLogoIconNameFunction_Once sync.Once

func aboutDialogGetLogoIconNameFunction_Set() error {
	var err error
	aboutDialogGetLogoIconNameFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetLogoIconNameFunction, err = aboutDialogStruct.InvokerNew("get_logo_icon_name")
	})
	return err
}

// GetLogoIconName is a representation of the C type gtk_about_dialog_get_logo_icon_name.
func (recv *AboutDialog) GetLogoIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetLogoIconNameFunction_Set()
	if err == nil {
		ret = aboutDialogGetLogoIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetProgramNameFunction *gi.Function
var aboutDialogGetProgramNameFunction_Once sync.Once

func aboutDialogGetProgramNameFunction_Set() error {
	var err error
	aboutDialogGetProgramNameFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetProgramNameFunction, err = aboutDialogStruct.InvokerNew("get_program_name")
	})
	return err
}

// GetProgramName is a representation of the C type gtk_about_dialog_get_program_name.
func (recv *AboutDialog) GetProgramName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetProgramNameFunction_Set()
	if err == nil {
		ret = aboutDialogGetProgramNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetTranslatorCreditsFunction *gi.Function
var aboutDialogGetTranslatorCreditsFunction_Once sync.Once

func aboutDialogGetTranslatorCreditsFunction_Set() error {
	var err error
	aboutDialogGetTranslatorCreditsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetTranslatorCreditsFunction, err = aboutDialogStruct.InvokerNew("get_translator_credits")
	})
	return err
}

// GetTranslatorCredits is a representation of the C type gtk_about_dialog_get_translator_credits.
func (recv *AboutDialog) GetTranslatorCredits() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetTranslatorCreditsFunction_Set()
	if err == nil {
		ret = aboutDialogGetTranslatorCreditsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetVersionFunction *gi.Function
var aboutDialogGetVersionFunction_Once sync.Once

func aboutDialogGetVersionFunction_Set() error {
	var err error
	aboutDialogGetVersionFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetVersionFunction, err = aboutDialogStruct.InvokerNew("get_version")
	})
	return err
}

// GetVersion is a representation of the C type gtk_about_dialog_get_version.
func (recv *AboutDialog) GetVersion() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetVersionFunction_Set()
	if err == nil {
		ret = aboutDialogGetVersionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetWebsiteFunction *gi.Function
var aboutDialogGetWebsiteFunction_Once sync.Once

func aboutDialogGetWebsiteFunction_Set() error {
	var err error
	aboutDialogGetWebsiteFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetWebsiteFunction, err = aboutDialogStruct.InvokerNew("get_website")
	})
	return err
}

// GetWebsite is a representation of the C type gtk_about_dialog_get_website.
func (recv *AboutDialog) GetWebsite() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetWebsiteFunction_Set()
	if err == nil {
		ret = aboutDialogGetWebsiteFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetWebsiteLabelFunction *gi.Function
var aboutDialogGetWebsiteLabelFunction_Once sync.Once

func aboutDialogGetWebsiteLabelFunction_Set() error {
	var err error
	aboutDialogGetWebsiteLabelFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetWebsiteLabelFunction, err = aboutDialogStruct.InvokerNew("get_website_label")
	})
	return err
}

// GetWebsiteLabel is a representation of the C type gtk_about_dialog_get_website_label.
func (recv *AboutDialog) GetWebsiteLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetWebsiteLabelFunction_Set()
	if err == nil {
		ret = aboutDialogGetWebsiteLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var aboutDialogGetWrapLicenseFunction *gi.Function
var aboutDialogGetWrapLicenseFunction_Once sync.Once

func aboutDialogGetWrapLicenseFunction_Set() error {
	var err error
	aboutDialogGetWrapLicenseFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogGetWrapLicenseFunction, err = aboutDialogStruct.InvokerNew("get_wrap_license")
	})
	return err
}

// GetWrapLicense is a representation of the C type gtk_about_dialog_get_wrap_license.
func (recv *AboutDialog) GetWrapLicense() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := aboutDialogGetWrapLicenseFunction_Set()
	if err == nil {
		ret = aboutDialogGetWrapLicenseFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_about_dialog_set_artists' : parameter 'artists' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_about_dialog_set_authors' : parameter 'authors' of type 'nil' not supported

var aboutDialogSetCommentsFunction *gi.Function
var aboutDialogSetCommentsFunction_Once sync.Once

func aboutDialogSetCommentsFunction_Set() error {
	var err error
	aboutDialogSetCommentsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetCommentsFunction, err = aboutDialogStruct.InvokerNew("set_comments")
	})
	return err
}

// SetComments is a representation of the C type gtk_about_dialog_set_comments.
func (recv *AboutDialog) SetComments(comments string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(comments)

	err := aboutDialogSetCommentsFunction_Set()
	if err == nil {
		aboutDialogSetCommentsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetCopyrightFunction *gi.Function
var aboutDialogSetCopyrightFunction_Once sync.Once

func aboutDialogSetCopyrightFunction_Set() error {
	var err error
	aboutDialogSetCopyrightFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetCopyrightFunction, err = aboutDialogStruct.InvokerNew("set_copyright")
	})
	return err
}

// SetCopyright is a representation of the C type gtk_about_dialog_set_copyright.
func (recv *AboutDialog) SetCopyright(copyright string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(copyright)

	err := aboutDialogSetCopyrightFunction_Set()
	if err == nil {
		aboutDialogSetCopyrightFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_about_dialog_set_documenters' : parameter 'documenters' of type 'nil' not supported

var aboutDialogSetLicenseFunction *gi.Function
var aboutDialogSetLicenseFunction_Once sync.Once

func aboutDialogSetLicenseFunction_Set() error {
	var err error
	aboutDialogSetLicenseFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetLicenseFunction, err = aboutDialogStruct.InvokerNew("set_license")
	})
	return err
}

// SetLicense is a representation of the C type gtk_about_dialog_set_license.
func (recv *AboutDialog) SetLicense(license string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(license)

	err := aboutDialogSetLicenseFunction_Set()
	if err == nil {
		aboutDialogSetLicenseFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_about_dialog_set_license_type' : parameter 'license_type' of type 'License' not supported

// UNSUPPORTED : C value 'gtk_about_dialog_set_logo' : parameter 'logo' of type 'GdkPixbuf.Pixbuf' not supported

var aboutDialogSetLogoIconNameFunction *gi.Function
var aboutDialogSetLogoIconNameFunction_Once sync.Once

func aboutDialogSetLogoIconNameFunction_Set() error {
	var err error
	aboutDialogSetLogoIconNameFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetLogoIconNameFunction, err = aboutDialogStruct.InvokerNew("set_logo_icon_name")
	})
	return err
}

// SetLogoIconName is a representation of the C type gtk_about_dialog_set_logo_icon_name.
func (recv *AboutDialog) SetLogoIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := aboutDialogSetLogoIconNameFunction_Set()
	if err == nil {
		aboutDialogSetLogoIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetProgramNameFunction *gi.Function
var aboutDialogSetProgramNameFunction_Once sync.Once

func aboutDialogSetProgramNameFunction_Set() error {
	var err error
	aboutDialogSetProgramNameFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetProgramNameFunction, err = aboutDialogStruct.InvokerNew("set_program_name")
	})
	return err
}

// SetProgramName is a representation of the C type gtk_about_dialog_set_program_name.
func (recv *AboutDialog) SetProgramName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := aboutDialogSetProgramNameFunction_Set()
	if err == nil {
		aboutDialogSetProgramNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetTranslatorCreditsFunction *gi.Function
var aboutDialogSetTranslatorCreditsFunction_Once sync.Once

func aboutDialogSetTranslatorCreditsFunction_Set() error {
	var err error
	aboutDialogSetTranslatorCreditsFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetTranslatorCreditsFunction, err = aboutDialogStruct.InvokerNew("set_translator_credits")
	})
	return err
}

// SetTranslatorCredits is a representation of the C type gtk_about_dialog_set_translator_credits.
func (recv *AboutDialog) SetTranslatorCredits(translatorCredits string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(translatorCredits)

	err := aboutDialogSetTranslatorCreditsFunction_Set()
	if err == nil {
		aboutDialogSetTranslatorCreditsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetVersionFunction *gi.Function
var aboutDialogSetVersionFunction_Once sync.Once

func aboutDialogSetVersionFunction_Set() error {
	var err error
	aboutDialogSetVersionFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetVersionFunction, err = aboutDialogStruct.InvokerNew("set_version")
	})
	return err
}

// SetVersion is a representation of the C type gtk_about_dialog_set_version.
func (recv *AboutDialog) SetVersion(version string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(version)

	err := aboutDialogSetVersionFunction_Set()
	if err == nil {
		aboutDialogSetVersionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetWebsiteFunction *gi.Function
var aboutDialogSetWebsiteFunction_Once sync.Once

func aboutDialogSetWebsiteFunction_Set() error {
	var err error
	aboutDialogSetWebsiteFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetWebsiteFunction, err = aboutDialogStruct.InvokerNew("set_website")
	})
	return err
}

// SetWebsite is a representation of the C type gtk_about_dialog_set_website.
func (recv *AboutDialog) SetWebsite(website string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(website)

	err := aboutDialogSetWebsiteFunction_Set()
	if err == nil {
		aboutDialogSetWebsiteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetWebsiteLabelFunction *gi.Function
var aboutDialogSetWebsiteLabelFunction_Once sync.Once

func aboutDialogSetWebsiteLabelFunction_Set() error {
	var err error
	aboutDialogSetWebsiteLabelFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetWebsiteLabelFunction, err = aboutDialogStruct.InvokerNew("set_website_label")
	})
	return err
}

// SetWebsiteLabel is a representation of the C type gtk_about_dialog_set_website_label.
func (recv *AboutDialog) SetWebsiteLabel(websiteLabel string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(websiteLabel)

	err := aboutDialogSetWebsiteLabelFunction_Set()
	if err == nil {
		aboutDialogSetWebsiteLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var aboutDialogSetWrapLicenseFunction *gi.Function
var aboutDialogSetWrapLicenseFunction_Once sync.Once

func aboutDialogSetWrapLicenseFunction_Set() error {
	var err error
	aboutDialogSetWrapLicenseFunction_Once.Do(func() {
		err = aboutDialogStruct_Set()
		if err != nil {
			return
		}
		aboutDialogSetWrapLicenseFunction, err = aboutDialogStruct.InvokerNew("set_wrap_license")
	})
	return err
}

// SetWrapLicense is a representation of the C type gtk_about_dialog_set_wrap_license.
func (recv *AboutDialog) SetWrapLicense(wrapLicense bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(wrapLicense)

	err := aboutDialogSetWrapLicenseFunction_Set()
	if err == nil {
		aboutDialogSetWrapLicenseFunction.Invoke(inArgs[:], nil)
	}

	return
}

var accelGroupStruct *gi.Struct
var accelGroupStruct_Once sync.Once

func accelGroupStruct_Set() error {
	var err error
	accelGroupStruct_Once.Do(func() {
		accelGroupStruct, err = gi.StructNew("Gtk", "AccelGroup")
	})
	return err
}

type AccelGroup struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *AccelGroup) FieldPriv() *AccelGroupPrivate {
	argValue := gi.FieldGet(accelGroupStruct, recv.Native, "priv")
	value := &AccelGroupPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *AccelGroup) SetFieldPriv(value *AccelGroupPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(accelGroupStruct, recv.Native, "priv", argValue)
}

var accelGroupNewFunction *gi.Function
var accelGroupNewFunction_Once sync.Once

func accelGroupNewFunction_Set() error {
	var err error
	accelGroupNewFunction_Once.Do(func() {
		err = accelGroupStruct_Set()
		if err != nil {
			return
		}
		accelGroupNewFunction, err = accelGroupStruct.InvokerNew("new")
	})
	return err
}

// AccelGroupNew is a representation of the C type gtk_accel_group_new.
func AccelGroupNew() *AccelGroup {

	var ret gi.Argument

	err := accelGroupNewFunction_Set()
	if err == nil {
		ret = accelGroupNewFunction.Invoke(nil, nil)
	}

	retGo := &AccelGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_accel_group_activate' : parameter 'acceleratable' of type 'GObject.Object' not supported

// UNSUPPORTED : C value 'gtk_accel_group_connect' : parameter 'accel_mods' of type 'Gdk.ModifierType' not supported

// UNSUPPORTED : C value 'gtk_accel_group_connect_by_path' : parameter 'closure' of type 'GObject.Closure' not supported

// UNSUPPORTED : C value 'gtk_accel_group_disconnect' : parameter 'closure' of type 'GObject.Closure' not supported

// UNSUPPORTED : C value 'gtk_accel_group_disconnect_key' : parameter 'accel_mods' of type 'Gdk.ModifierType' not supported

// UNSUPPORTED : C value 'gtk_accel_group_find' : parameter 'find_func' of type 'AccelGroupFindFunc' not supported

var accelGroupGetIsLockedFunction *gi.Function
var accelGroupGetIsLockedFunction_Once sync.Once

func accelGroupGetIsLockedFunction_Set() error {
	var err error
	accelGroupGetIsLockedFunction_Once.Do(func() {
		err = accelGroupStruct_Set()
		if err != nil {
			return
		}
		accelGroupGetIsLockedFunction, err = accelGroupStruct.InvokerNew("get_is_locked")
	})
	return err
}

// GetIsLocked is a representation of the C type gtk_accel_group_get_is_locked.
func (recv *AccelGroup) GetIsLocked() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := accelGroupGetIsLockedFunction_Set()
	if err == nil {
		ret = accelGroupGetIsLockedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_accel_group_get_modifier_mask' : return type 'Gdk.ModifierType' not supported

var accelGroupLockFunction *gi.Function
var accelGroupLockFunction_Once sync.Once

func accelGroupLockFunction_Set() error {
	var err error
	accelGroupLockFunction_Once.Do(func() {
		err = accelGroupStruct_Set()
		if err != nil {
			return
		}
		accelGroupLockFunction, err = accelGroupStruct.InvokerNew("lock")
	})
	return err
}

// Lock is a representation of the C type gtk_accel_group_lock.
func (recv *AccelGroup) Lock() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := accelGroupLockFunction_Set()
	if err == nil {
		accelGroupLockFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_accel_group_query' : parameter 'accel_mods' of type 'Gdk.ModifierType' not supported

var accelGroupUnlockFunction *gi.Function
var accelGroupUnlockFunction_Once sync.Once

func accelGroupUnlockFunction_Set() error {
	var err error
	accelGroupUnlockFunction_Once.Do(func() {
		err = accelGroupStruct_Set()
		if err != nil {
			return
		}
		accelGroupUnlockFunction, err = accelGroupStruct.InvokerNew("unlock")
	})
	return err
}

// Unlock is a representation of the C type gtk_accel_group_unlock.
func (recv *AccelGroup) Unlock() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := accelGroupUnlockFunction_Set()
	if err == nil {
		accelGroupUnlockFunction.Invoke(inArgs[:], nil)
	}

	return
}

var accelLabelStruct *gi.Struct
var accelLabelStruct_Once sync.Once

func accelLabelStruct_Set() error {
	var err error
	accelLabelStruct_Once.Do(func() {
		accelLabelStruct, err = gi.StructNew("Gtk", "AccelLabel")
	})
	return err
}

type AccelLabel struct {
	Label
}

// FieldLabel returns the C field 'label'.
func (recv *AccelLabel) FieldLabel() *Label {
	argValue := gi.FieldGet(accelLabelStruct, recv.Native, "label")
	value := &Label{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldLabel sets the value of the C field 'label'.
func (recv *AccelLabel) SetFieldLabel(value *Label) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(accelLabelStruct, recv.Native, "label", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *AccelLabel) FieldPriv() *AccelLabelPrivate {
	argValue := gi.FieldGet(accelLabelStruct, recv.Native, "priv")
	value := &AccelLabelPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *AccelLabel) SetFieldPriv(value *AccelLabelPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(accelLabelStruct, recv.Native, "priv", argValue)
}

var accelLabelNewFunction *gi.Function
var accelLabelNewFunction_Once sync.Once

func accelLabelNewFunction_Set() error {
	var err error
	accelLabelNewFunction_Once.Do(func() {
		err = accelLabelStruct_Set()
		if err != nil {
			return
		}
		accelLabelNewFunction, err = accelLabelStruct.InvokerNew("new")
	})
	return err
}

// AccelLabelNew is a representation of the C type gtk_accel_label_new.
func AccelLabelNew(string_ string) *AccelLabel {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(string_)

	var ret gi.Argument

	err := accelLabelNewFunction_Set()
	if err == nil {
		ret = accelLabelNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AccelLabel{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_accel_label_get_accel' : parameter 'accelerator_mods' of type 'Gdk.ModifierType' not supported

var accelLabelGetAccelWidgetFunction *gi.Function
var accelLabelGetAccelWidgetFunction_Once sync.Once

func accelLabelGetAccelWidgetFunction_Set() error {
	var err error
	accelLabelGetAccelWidgetFunction_Once.Do(func() {
		err = accelLabelStruct_Set()
		if err != nil {
			return
		}
		accelLabelGetAccelWidgetFunction, err = accelLabelStruct.InvokerNew("get_accel_widget")
	})
	return err
}

// GetAccelWidget is a representation of the C type gtk_accel_label_get_accel_widget.
func (recv *AccelLabel) GetAccelWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := accelLabelGetAccelWidgetFunction_Set()
	if err == nil {
		ret = accelLabelGetAccelWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var accelLabelGetAccelWidthFunction *gi.Function
var accelLabelGetAccelWidthFunction_Once sync.Once

func accelLabelGetAccelWidthFunction_Set() error {
	var err error
	accelLabelGetAccelWidthFunction_Once.Do(func() {
		err = accelLabelStruct_Set()
		if err != nil {
			return
		}
		accelLabelGetAccelWidthFunction, err = accelLabelStruct.InvokerNew("get_accel_width")
	})
	return err
}

// GetAccelWidth is a representation of the C type gtk_accel_label_get_accel_width.
func (recv *AccelLabel) GetAccelWidth() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := accelLabelGetAccelWidthFunction_Set()
	if err == nil {
		ret = accelLabelGetAccelWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var accelLabelRefetchFunction *gi.Function
var accelLabelRefetchFunction_Once sync.Once

func accelLabelRefetchFunction_Set() error {
	var err error
	accelLabelRefetchFunction_Once.Do(func() {
		err = accelLabelStruct_Set()
		if err != nil {
			return
		}
		accelLabelRefetchFunction, err = accelLabelStruct.InvokerNew("refetch")
	})
	return err
}

// Refetch is a representation of the C type gtk_accel_label_refetch.
func (recv *AccelLabel) Refetch() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := accelLabelRefetchFunction_Set()
	if err == nil {
		ret = accelLabelRefetchFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_accel_label_set_accel' : parameter 'accelerator_mods' of type 'Gdk.ModifierType' not supported

// UNSUPPORTED : C value 'gtk_accel_label_set_accel_closure' : parameter 'accel_closure' of type 'GObject.Closure' not supported

var accelLabelSetAccelWidgetFunction *gi.Function
var accelLabelSetAccelWidgetFunction_Once sync.Once

func accelLabelSetAccelWidgetFunction_Set() error {
	var err error
	accelLabelSetAccelWidgetFunction_Once.Do(func() {
		err = accelLabelStruct_Set()
		if err != nil {
			return
		}
		accelLabelSetAccelWidgetFunction, err = accelLabelStruct.InvokerNew("set_accel_widget")
	})
	return err
}

// SetAccelWidget is a representation of the C type gtk_accel_label_set_accel_widget.
func (recv *AccelLabel) SetAccelWidget(accelWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelWidget.Native)

	err := accelLabelSetAccelWidgetFunction_Set()
	if err == nil {
		accelLabelSetAccelWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var accelMapStruct *gi.Struct
var accelMapStruct_Once sync.Once

func accelMapStruct_Set() error {
	var err error
	accelMapStruct_Once.Do(func() {
		accelMapStruct, err = gi.StructNew("Gtk", "AccelMap")
	})
	return err
}

type AccelMap struct {
	gobject.Object
}

// AccelMapStruct creates an uninitialised AccelMap.
func AccelMapStruct() *AccelMap {
	err := accelMapStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &AccelMap{}
	structGo.Native = accelMapStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeAccelMap)
	return structGo
}
func finalizeAccelMap(obj *AccelMap) {
	accelMapStruct.Free(obj.Native)
}

var accessibleStruct *gi.Struct
var accessibleStruct_Once sync.Once

func accessibleStruct_Set() error {
	var err error
	accessibleStruct_Once.Do(func() {
		accessibleStruct, err = gi.StructNew("Gtk", "Accessible")
	})
	return err
}

type Accessible struct {
	atk.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'Atk.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'Atk.Object'

var accessibleConnectWidgetDestroyedFunction *gi.Function
var accessibleConnectWidgetDestroyedFunction_Once sync.Once

func accessibleConnectWidgetDestroyedFunction_Set() error {
	var err error
	accessibleConnectWidgetDestroyedFunction_Once.Do(func() {
		err = accessibleStruct_Set()
		if err != nil {
			return
		}
		accessibleConnectWidgetDestroyedFunction, err = accessibleStruct.InvokerNew("connect_widget_destroyed")
	})
	return err
}

// ConnectWidgetDestroyed is a representation of the C type gtk_accessible_connect_widget_destroyed.
func (recv *Accessible) ConnectWidgetDestroyed() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := accessibleConnectWidgetDestroyedFunction_Set()
	if err == nil {
		accessibleConnectWidgetDestroyedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var accessibleGetWidgetFunction *gi.Function
var accessibleGetWidgetFunction_Once sync.Once

func accessibleGetWidgetFunction_Set() error {
	var err error
	accessibleGetWidgetFunction_Once.Do(func() {
		err = accessibleStruct_Set()
		if err != nil {
			return
		}
		accessibleGetWidgetFunction, err = accessibleStruct.InvokerNew("get_widget")
	})
	return err
}

// GetWidget is a representation of the C type gtk_accessible_get_widget.
func (recv *Accessible) GetWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := accessibleGetWidgetFunction_Set()
	if err == nil {
		ret = accessibleGetWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var accessibleSetWidgetFunction *gi.Function
var accessibleSetWidgetFunction_Once sync.Once

func accessibleSetWidgetFunction_Set() error {
	var err error
	accessibleSetWidgetFunction_Once.Do(func() {
		err = accessibleStruct_Set()
		if err != nil {
			return
		}
		accessibleSetWidgetFunction, err = accessibleStruct.InvokerNew("set_widget")
	})
	return err
}

// SetWidget is a representation of the C type gtk_accessible_set_widget.
func (recv *Accessible) SetWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := accessibleSetWidgetFunction_Set()
	if err == nil {
		accessibleSetWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// AccessibleStruct creates an uninitialised Accessible.
func AccessibleStruct() *Accessible {
	err := accessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Accessible{}
	structGo.Native = accessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeAccessible)
	return structGo
}
func finalizeAccessible(obj *Accessible) {
	accessibleStruct.Free(obj.Native)
}

var actionStruct *gi.Struct
var actionStruct_Once sync.Once

func actionStruct_Set() error {
	var err error
	actionStruct_Once.Do(func() {
		actionStruct, err = gi.StructNew("Gtk", "Action")
	})
	return err
}

type Action struct {
	gobject.Object
}

// UNSUPPORTED : C value 'object' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'object' : for field setter : no Go type for 'GObject.Object'

var actionNewFunction *gi.Function
var actionNewFunction_Once sync.Once

func actionNewFunction_Set() error {
	var err error
	actionNewFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionNewFunction, err = actionStruct.InvokerNew("new")
	})
	return err
}

// ActionNew is a representation of the C type gtk_action_new.
func ActionNew(name string, label string, tooltip string, stockId string) *Action {
	var inArgs [4]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetString(label)
	inArgs[2].SetString(tooltip)
	inArgs[3].SetString(stockId)

	var ret gi.Argument

	err := actionNewFunction_Set()
	if err == nil {
		ret = actionNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Action{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionActivateFunction *gi.Function
var actionActivateFunction_Once sync.Once

func actionActivateFunction_Set() error {
	var err error
	actionActivateFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionActivateFunction, err = actionStruct.InvokerNew("activate")
	})
	return err
}

// Activate is a representation of the C type gtk_action_activate.
func (recv *Action) Activate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := actionActivateFunction_Set()
	if err == nil {
		actionActivateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionBlockActivateFunction *gi.Function
var actionBlockActivateFunction_Once sync.Once

func actionBlockActivateFunction_Set() error {
	var err error
	actionBlockActivateFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionBlockActivateFunction, err = actionStruct.InvokerNew("block_activate")
	})
	return err
}

// BlockActivate is a representation of the C type gtk_action_block_activate.
func (recv *Action) BlockActivate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := actionBlockActivateFunction_Set()
	if err == nil {
		actionBlockActivateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionConnectAcceleratorFunction *gi.Function
var actionConnectAcceleratorFunction_Once sync.Once

func actionConnectAcceleratorFunction_Set() error {
	var err error
	actionConnectAcceleratorFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionConnectAcceleratorFunction, err = actionStruct.InvokerNew("connect_accelerator")
	})
	return err
}

// ConnectAccelerator is a representation of the C type gtk_action_connect_accelerator.
func (recv *Action) ConnectAccelerator() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := actionConnectAcceleratorFunction_Set()
	if err == nil {
		actionConnectAcceleratorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_action_create_icon' : parameter 'icon_size' of type 'IconSize' not supported

var actionCreateMenuFunction *gi.Function
var actionCreateMenuFunction_Once sync.Once

func actionCreateMenuFunction_Set() error {
	var err error
	actionCreateMenuFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionCreateMenuFunction, err = actionStruct.InvokerNew("create_menu")
	})
	return err
}

// CreateMenu is a representation of the C type gtk_action_create_menu.
func (recv *Action) CreateMenu() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionCreateMenuFunction_Set()
	if err == nil {
		ret = actionCreateMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionCreateMenuItemFunction *gi.Function
var actionCreateMenuItemFunction_Once sync.Once

func actionCreateMenuItemFunction_Set() error {
	var err error
	actionCreateMenuItemFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionCreateMenuItemFunction, err = actionStruct.InvokerNew("create_menu_item")
	})
	return err
}

// CreateMenuItem is a representation of the C type gtk_action_create_menu_item.
func (recv *Action) CreateMenuItem() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionCreateMenuItemFunction_Set()
	if err == nil {
		ret = actionCreateMenuItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionCreateToolItemFunction *gi.Function
var actionCreateToolItemFunction_Once sync.Once

func actionCreateToolItemFunction_Set() error {
	var err error
	actionCreateToolItemFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionCreateToolItemFunction, err = actionStruct.InvokerNew("create_tool_item")
	})
	return err
}

// CreateToolItem is a representation of the C type gtk_action_create_tool_item.
func (recv *Action) CreateToolItem() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionCreateToolItemFunction_Set()
	if err == nil {
		ret = actionCreateToolItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionDisconnectAcceleratorFunction *gi.Function
var actionDisconnectAcceleratorFunction_Once sync.Once

func actionDisconnectAcceleratorFunction_Set() error {
	var err error
	actionDisconnectAcceleratorFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionDisconnectAcceleratorFunction, err = actionStruct.InvokerNew("disconnect_accelerator")
	})
	return err
}

// DisconnectAccelerator is a representation of the C type gtk_action_disconnect_accelerator.
func (recv *Action) DisconnectAccelerator() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := actionDisconnectAcceleratorFunction_Set()
	if err == nil {
		actionDisconnectAcceleratorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_action_get_accel_closure' : return type 'GObject.Closure' not supported

var actionGetAccelPathFunction *gi.Function
var actionGetAccelPathFunction_Once sync.Once

func actionGetAccelPathFunction_Set() error {
	var err error
	actionGetAccelPathFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetAccelPathFunction, err = actionStruct.InvokerNew("get_accel_path")
	})
	return err
}

// GetAccelPath is a representation of the C type gtk_action_get_accel_path.
func (recv *Action) GetAccelPath() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetAccelPathFunction_Set()
	if err == nil {
		ret = actionGetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetAlwaysShowImageFunction *gi.Function
var actionGetAlwaysShowImageFunction_Once sync.Once

func actionGetAlwaysShowImageFunction_Set() error {
	var err error
	actionGetAlwaysShowImageFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetAlwaysShowImageFunction, err = actionStruct.InvokerNew("get_always_show_image")
	})
	return err
}

// GetAlwaysShowImage is a representation of the C type gtk_action_get_always_show_image.
func (recv *Action) GetAlwaysShowImage() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetAlwaysShowImageFunction_Set()
	if err == nil {
		ret = actionGetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_action_get_gicon' : return type 'Gio.Icon' not supported

var actionGetIconNameFunction *gi.Function
var actionGetIconNameFunction_Once sync.Once

func actionGetIconNameFunction_Set() error {
	var err error
	actionGetIconNameFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetIconNameFunction, err = actionStruct.InvokerNew("get_icon_name")
	})
	return err
}

// GetIconName is a representation of the C type gtk_action_get_icon_name.
func (recv *Action) GetIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetIconNameFunction_Set()
	if err == nil {
		ret = actionGetIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetIsImportantFunction *gi.Function
var actionGetIsImportantFunction_Once sync.Once

func actionGetIsImportantFunction_Set() error {
	var err error
	actionGetIsImportantFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetIsImportantFunction, err = actionStruct.InvokerNew("get_is_important")
	})
	return err
}

// GetIsImportant is a representation of the C type gtk_action_get_is_important.
func (recv *Action) GetIsImportant() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetIsImportantFunction_Set()
	if err == nil {
		ret = actionGetIsImportantFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionGetLabelFunction *gi.Function
var actionGetLabelFunction_Once sync.Once

func actionGetLabelFunction_Set() error {
	var err error
	actionGetLabelFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetLabelFunction, err = actionStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_action_get_label.
func (recv *Action) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetLabelFunction_Set()
	if err == nil {
		ret = actionGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetNameFunction *gi.Function
var actionGetNameFunction_Once sync.Once

func actionGetNameFunction_Set() error {
	var err error
	actionGetNameFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetNameFunction, err = actionStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_action_get_name.
func (recv *Action) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetNameFunction_Set()
	if err == nil {
		ret = actionGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_action_get_proxies' : return type 'GLib.SList' not supported

var actionGetSensitiveFunction *gi.Function
var actionGetSensitiveFunction_Once sync.Once

func actionGetSensitiveFunction_Set() error {
	var err error
	actionGetSensitiveFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetSensitiveFunction, err = actionStruct.InvokerNew("get_sensitive")
	})
	return err
}

// GetSensitive is a representation of the C type gtk_action_get_sensitive.
func (recv *Action) GetSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetSensitiveFunction_Set()
	if err == nil {
		ret = actionGetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionGetShortLabelFunction *gi.Function
var actionGetShortLabelFunction_Once sync.Once

func actionGetShortLabelFunction_Set() error {
	var err error
	actionGetShortLabelFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetShortLabelFunction, err = actionStruct.InvokerNew("get_short_label")
	})
	return err
}

// GetShortLabel is a representation of the C type gtk_action_get_short_label.
func (recv *Action) GetShortLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetShortLabelFunction_Set()
	if err == nil {
		ret = actionGetShortLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetStockIdFunction *gi.Function
var actionGetStockIdFunction_Once sync.Once

func actionGetStockIdFunction_Set() error {
	var err error
	actionGetStockIdFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetStockIdFunction, err = actionStruct.InvokerNew("get_stock_id")
	})
	return err
}

// GetStockId is a representation of the C type gtk_action_get_stock_id.
func (recv *Action) GetStockId() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetStockIdFunction_Set()
	if err == nil {
		ret = actionGetStockIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetTooltipFunction *gi.Function
var actionGetTooltipFunction_Once sync.Once

func actionGetTooltipFunction_Set() error {
	var err error
	actionGetTooltipFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetTooltipFunction, err = actionStruct.InvokerNew("get_tooltip")
	})
	return err
}

// GetTooltip is a representation of the C type gtk_action_get_tooltip.
func (recv *Action) GetTooltip() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetTooltipFunction_Set()
	if err == nil {
		ret = actionGetTooltipFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGetVisibleFunction *gi.Function
var actionGetVisibleFunction_Once sync.Once

func actionGetVisibleFunction_Set() error {
	var err error
	actionGetVisibleFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetVisibleFunction, err = actionStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_action_get_visible.
func (recv *Action) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetVisibleFunction_Set()
	if err == nil {
		ret = actionGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionGetVisibleHorizontalFunction *gi.Function
var actionGetVisibleHorizontalFunction_Once sync.Once

func actionGetVisibleHorizontalFunction_Set() error {
	var err error
	actionGetVisibleHorizontalFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetVisibleHorizontalFunction, err = actionStruct.InvokerNew("get_visible_horizontal")
	})
	return err
}

// GetVisibleHorizontal is a representation of the C type gtk_action_get_visible_horizontal.
func (recv *Action) GetVisibleHorizontal() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetVisibleHorizontalFunction_Set()
	if err == nil {
		ret = actionGetVisibleHorizontalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionGetVisibleVerticalFunction *gi.Function
var actionGetVisibleVerticalFunction_Once sync.Once

func actionGetVisibleVerticalFunction_Set() error {
	var err error
	actionGetVisibleVerticalFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionGetVisibleVerticalFunction, err = actionStruct.InvokerNew("get_visible_vertical")
	})
	return err
}

// GetVisibleVertical is a representation of the C type gtk_action_get_visible_vertical.
func (recv *Action) GetVisibleVertical() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGetVisibleVerticalFunction_Set()
	if err == nil {
		ret = actionGetVisibleVerticalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionIsSensitiveFunction *gi.Function
var actionIsSensitiveFunction_Once sync.Once

func actionIsSensitiveFunction_Set() error {
	var err error
	actionIsSensitiveFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionIsSensitiveFunction, err = actionStruct.InvokerNew("is_sensitive")
	})
	return err
}

// IsSensitive is a representation of the C type gtk_action_is_sensitive.
func (recv *Action) IsSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionIsSensitiveFunction_Set()
	if err == nil {
		ret = actionIsSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionIsVisibleFunction *gi.Function
var actionIsVisibleFunction_Once sync.Once

func actionIsVisibleFunction_Set() error {
	var err error
	actionIsVisibleFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionIsVisibleFunction, err = actionStruct.InvokerNew("is_visible")
	})
	return err
}

// IsVisible is a representation of the C type gtk_action_is_visible.
func (recv *Action) IsVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionIsVisibleFunction_Set()
	if err == nil {
		ret = actionIsVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionSetAccelGroupFunction *gi.Function
var actionSetAccelGroupFunction_Once sync.Once

func actionSetAccelGroupFunction_Set() error {
	var err error
	actionSetAccelGroupFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetAccelGroupFunction, err = actionStruct.InvokerNew("set_accel_group")
	})
	return err
}

// SetAccelGroup is a representation of the C type gtk_action_set_accel_group.
func (recv *Action) SetAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := actionSetAccelGroupFunction_Set()
	if err == nil {
		actionSetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetAccelPathFunction *gi.Function
var actionSetAccelPathFunction_Once sync.Once

func actionSetAccelPathFunction_Set() error {
	var err error
	actionSetAccelPathFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetAccelPathFunction, err = actionStruct.InvokerNew("set_accel_path")
	})
	return err
}

// SetAccelPath is a representation of the C type gtk_action_set_accel_path.
func (recv *Action) SetAccelPath(accelPath string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accelPath)

	err := actionSetAccelPathFunction_Set()
	if err == nil {
		actionSetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetAlwaysShowImageFunction *gi.Function
var actionSetAlwaysShowImageFunction_Once sync.Once

func actionSetAlwaysShowImageFunction_Set() error {
	var err error
	actionSetAlwaysShowImageFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetAlwaysShowImageFunction, err = actionStruct.InvokerNew("set_always_show_image")
	})
	return err
}

// SetAlwaysShowImage is a representation of the C type gtk_action_set_always_show_image.
func (recv *Action) SetAlwaysShowImage(alwaysShow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(alwaysShow)

	err := actionSetAlwaysShowImageFunction_Set()
	if err == nil {
		actionSetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_action_set_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

var actionSetIconNameFunction *gi.Function
var actionSetIconNameFunction_Once sync.Once

func actionSetIconNameFunction_Set() error {
	var err error
	actionSetIconNameFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetIconNameFunction, err = actionStruct.InvokerNew("set_icon_name")
	})
	return err
}

// SetIconName is a representation of the C type gtk_action_set_icon_name.
func (recv *Action) SetIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := actionSetIconNameFunction_Set()
	if err == nil {
		actionSetIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetIsImportantFunction *gi.Function
var actionSetIsImportantFunction_Once sync.Once

func actionSetIsImportantFunction_Set() error {
	var err error
	actionSetIsImportantFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetIsImportantFunction, err = actionStruct.InvokerNew("set_is_important")
	})
	return err
}

// SetIsImportant is a representation of the C type gtk_action_set_is_important.
func (recv *Action) SetIsImportant(isImportant bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isImportant)

	err := actionSetIsImportantFunction_Set()
	if err == nil {
		actionSetIsImportantFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetLabelFunction *gi.Function
var actionSetLabelFunction_Once sync.Once

func actionSetLabelFunction_Set() error {
	var err error
	actionSetLabelFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetLabelFunction, err = actionStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_action_set_label.
func (recv *Action) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := actionSetLabelFunction_Set()
	if err == nil {
		actionSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetSensitiveFunction *gi.Function
var actionSetSensitiveFunction_Once sync.Once

func actionSetSensitiveFunction_Set() error {
	var err error
	actionSetSensitiveFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetSensitiveFunction, err = actionStruct.InvokerNew("set_sensitive")
	})
	return err
}

// SetSensitive is a representation of the C type gtk_action_set_sensitive.
func (recv *Action) SetSensitive(sensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sensitive)

	err := actionSetSensitiveFunction_Set()
	if err == nil {
		actionSetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetShortLabelFunction *gi.Function
var actionSetShortLabelFunction_Once sync.Once

func actionSetShortLabelFunction_Set() error {
	var err error
	actionSetShortLabelFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetShortLabelFunction, err = actionStruct.InvokerNew("set_short_label")
	})
	return err
}

// SetShortLabel is a representation of the C type gtk_action_set_short_label.
func (recv *Action) SetShortLabel(shortLabel string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(shortLabel)

	err := actionSetShortLabelFunction_Set()
	if err == nil {
		actionSetShortLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetStockIdFunction *gi.Function
var actionSetStockIdFunction_Once sync.Once

func actionSetStockIdFunction_Set() error {
	var err error
	actionSetStockIdFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetStockIdFunction, err = actionStruct.InvokerNew("set_stock_id")
	})
	return err
}

// SetStockId is a representation of the C type gtk_action_set_stock_id.
func (recv *Action) SetStockId(stockId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	err := actionSetStockIdFunction_Set()
	if err == nil {
		actionSetStockIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetTooltipFunction *gi.Function
var actionSetTooltipFunction_Once sync.Once

func actionSetTooltipFunction_Set() error {
	var err error
	actionSetTooltipFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetTooltipFunction, err = actionStruct.InvokerNew("set_tooltip")
	})
	return err
}

// SetTooltip is a representation of the C type gtk_action_set_tooltip.
func (recv *Action) SetTooltip(tooltip string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(tooltip)

	err := actionSetTooltipFunction_Set()
	if err == nil {
		actionSetTooltipFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetVisibleFunction *gi.Function
var actionSetVisibleFunction_Once sync.Once

func actionSetVisibleFunction_Set() error {
	var err error
	actionSetVisibleFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetVisibleFunction, err = actionStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_action_set_visible.
func (recv *Action) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := actionSetVisibleFunction_Set()
	if err == nil {
		actionSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetVisibleHorizontalFunction *gi.Function
var actionSetVisibleHorizontalFunction_Once sync.Once

func actionSetVisibleHorizontalFunction_Set() error {
	var err error
	actionSetVisibleHorizontalFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetVisibleHorizontalFunction, err = actionStruct.InvokerNew("set_visible_horizontal")
	})
	return err
}

// SetVisibleHorizontal is a representation of the C type gtk_action_set_visible_horizontal.
func (recv *Action) SetVisibleHorizontal(visibleHorizontal bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visibleHorizontal)

	err := actionSetVisibleHorizontalFunction_Set()
	if err == nil {
		actionSetVisibleHorizontalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionSetVisibleVerticalFunction *gi.Function
var actionSetVisibleVerticalFunction_Once sync.Once

func actionSetVisibleVerticalFunction_Set() error {
	var err error
	actionSetVisibleVerticalFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionSetVisibleVerticalFunction, err = actionStruct.InvokerNew("set_visible_vertical")
	})
	return err
}

// SetVisibleVertical is a representation of the C type gtk_action_set_visible_vertical.
func (recv *Action) SetVisibleVertical(visibleVertical bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visibleVertical)

	err := actionSetVisibleVerticalFunction_Set()
	if err == nil {
		actionSetVisibleVerticalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionUnblockActivateFunction *gi.Function
var actionUnblockActivateFunction_Once sync.Once

func actionUnblockActivateFunction_Set() error {
	var err error
	actionUnblockActivateFunction_Once.Do(func() {
		err = actionStruct_Set()
		if err != nil {
			return
		}
		actionUnblockActivateFunction, err = actionStruct.InvokerNew("unblock_activate")
	})
	return err
}

// UnblockActivate is a representation of the C type gtk_action_unblock_activate.
func (recv *Action) UnblockActivate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := actionUnblockActivateFunction_Set()
	if err == nil {
		actionUnblockActivateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionBarStruct *gi.Struct
var actionBarStruct_Once sync.Once

func actionBarStruct_Set() error {
	var err error
	actionBarStruct_Once.Do(func() {
		actionBarStruct, err = gi.StructNew("Gtk", "ActionBar")
	})
	return err
}

type ActionBar struct {
	Bin
}

var actionBarNewFunction *gi.Function
var actionBarNewFunction_Once sync.Once

func actionBarNewFunction_Set() error {
	var err error
	actionBarNewFunction_Once.Do(func() {
		err = actionBarStruct_Set()
		if err != nil {
			return
		}
		actionBarNewFunction, err = actionBarStruct.InvokerNew("new")
	})
	return err
}

// ActionBarNew is a representation of the C type gtk_action_bar_new.
func ActionBarNew() *ActionBar {

	var ret gi.Argument

	err := actionBarNewFunction_Set()
	if err == nil {
		ret = actionBarNewFunction.Invoke(nil, nil)
	}

	retGo := &ActionBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionBarGetCenterWidgetFunction *gi.Function
var actionBarGetCenterWidgetFunction_Once sync.Once

func actionBarGetCenterWidgetFunction_Set() error {
	var err error
	actionBarGetCenterWidgetFunction_Once.Do(func() {
		err = actionBarStruct_Set()
		if err != nil {
			return
		}
		actionBarGetCenterWidgetFunction, err = actionBarStruct.InvokerNew("get_center_widget")
	})
	return err
}

// GetCenterWidget is a representation of the C type gtk_action_bar_get_center_widget.
func (recv *ActionBar) GetCenterWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionBarGetCenterWidgetFunction_Set()
	if err == nil {
		ret = actionBarGetCenterWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionBarPackEndFunction *gi.Function
var actionBarPackEndFunction_Once sync.Once

func actionBarPackEndFunction_Set() error {
	var err error
	actionBarPackEndFunction_Once.Do(func() {
		err = actionBarStruct_Set()
		if err != nil {
			return
		}
		actionBarPackEndFunction, err = actionBarStruct.InvokerNew("pack_end")
	})
	return err
}

// PackEnd is a representation of the C type gtk_action_bar_pack_end.
func (recv *ActionBar) PackEnd(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := actionBarPackEndFunction_Set()
	if err == nil {
		actionBarPackEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionBarPackStartFunction *gi.Function
var actionBarPackStartFunction_Once sync.Once

func actionBarPackStartFunction_Set() error {
	var err error
	actionBarPackStartFunction_Once.Do(func() {
		err = actionBarStruct_Set()
		if err != nil {
			return
		}
		actionBarPackStartFunction, err = actionBarStruct.InvokerNew("pack_start")
	})
	return err
}

// PackStart is a representation of the C type gtk_action_bar_pack_start.
func (recv *ActionBar) PackStart(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := actionBarPackStartFunction_Set()
	if err == nil {
		actionBarPackStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionBarSetCenterWidgetFunction *gi.Function
var actionBarSetCenterWidgetFunction_Once sync.Once

func actionBarSetCenterWidgetFunction_Set() error {
	var err error
	actionBarSetCenterWidgetFunction_Once.Do(func() {
		err = actionBarStruct_Set()
		if err != nil {
			return
		}
		actionBarSetCenterWidgetFunction, err = actionBarStruct.InvokerNew("set_center_widget")
	})
	return err
}

// SetCenterWidget is a representation of the C type gtk_action_bar_set_center_widget.
func (recv *ActionBar) SetCenterWidget(centerWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(centerWidget.Native)

	err := actionBarSetCenterWidgetFunction_Set()
	if err == nil {
		actionBarSetCenterWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupStruct *gi.Struct
var actionGroupStruct_Once sync.Once

func actionGroupStruct_Set() error {
	var err error
	actionGroupStruct_Once.Do(func() {
		actionGroupStruct, err = gi.StructNew("Gtk", "ActionGroup")
	})
	return err
}

type ActionGroup struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

var actionGroupNewFunction *gi.Function
var actionGroupNewFunction_Once sync.Once

func actionGroupNewFunction_Set() error {
	var err error
	actionGroupNewFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupNewFunction, err = actionGroupStruct.InvokerNew("new")
	})
	return err
}

// ActionGroupNew is a representation of the C type gtk_action_group_new.
func ActionGroupNew(name string) *ActionGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(name)

	var ret gi.Argument

	err := actionGroupNewFunction_Set()
	if err == nil {
		ret = actionGroupNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ActionGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionGroupAddActionFunction *gi.Function
var actionGroupAddActionFunction_Once sync.Once

func actionGroupAddActionFunction_Set() error {
	var err error
	actionGroupAddActionFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupAddActionFunction, err = actionGroupStruct.InvokerNew("add_action")
	})
	return err
}

// AddAction is a representation of the C type gtk_action_group_add_action.
func (recv *ActionGroup) AddAction(action *Action) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(action.Native)

	err := actionGroupAddActionFunction_Set()
	if err == nil {
		actionGroupAddActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupAddActionWithAccelFunction *gi.Function
var actionGroupAddActionWithAccelFunction_Once sync.Once

func actionGroupAddActionWithAccelFunction_Set() error {
	var err error
	actionGroupAddActionWithAccelFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupAddActionWithAccelFunction, err = actionGroupStruct.InvokerNew("add_action_with_accel")
	})
	return err
}

// AddActionWithAccel is a representation of the C type gtk_action_group_add_action_with_accel.
func (recv *ActionGroup) AddActionWithAccel(action *Action, accelerator string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(action.Native)
	inArgs[2].SetString(accelerator)

	err := actionGroupAddActionWithAccelFunction_Set()
	if err == nil {
		actionGroupAddActionWithAccelFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_action_group_add_actions' : parameter 'entries' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_action_group_add_actions_full' : parameter 'entries' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_action_group_add_radio_actions' : parameter 'entries' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_action_group_add_radio_actions_full' : parameter 'entries' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_action_group_add_toggle_actions' : parameter 'entries' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_action_group_add_toggle_actions_full' : parameter 'entries' of type 'nil' not supported

var actionGroupGetAccelGroupFunction *gi.Function
var actionGroupGetAccelGroupFunction_Once sync.Once

func actionGroupGetAccelGroupFunction_Set() error {
	var err error
	actionGroupGetAccelGroupFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupGetAccelGroupFunction, err = actionGroupStruct.InvokerNew("get_accel_group")
	})
	return err
}

// GetAccelGroup is a representation of the C type gtk_action_group_get_accel_group.
func (recv *ActionGroup) GetAccelGroup() *AccelGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGroupGetAccelGroupFunction_Set()
	if err == nil {
		ret = actionGroupGetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AccelGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionGroupGetActionFunction *gi.Function
var actionGroupGetActionFunction_Once sync.Once

func actionGroupGetActionFunction_Set() error {
	var err error
	actionGroupGetActionFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupGetActionFunction, err = actionGroupStruct.InvokerNew("get_action")
	})
	return err
}

// GetAction is a representation of the C type gtk_action_group_get_action.
func (recv *ActionGroup) GetAction(actionName string) *Action {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(actionName)

	var ret gi.Argument

	err := actionGroupGetActionFunction_Set()
	if err == nil {
		ret = actionGroupGetActionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Action{}
	retGo.Native = ret.Pointer()

	return retGo
}

var actionGroupGetNameFunction *gi.Function
var actionGroupGetNameFunction_Once sync.Once

func actionGroupGetNameFunction_Set() error {
	var err error
	actionGroupGetNameFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupGetNameFunction, err = actionGroupStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_action_group_get_name.
func (recv *ActionGroup) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGroupGetNameFunction_Set()
	if err == nil {
		ret = actionGroupGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var actionGroupGetSensitiveFunction *gi.Function
var actionGroupGetSensitiveFunction_Once sync.Once

func actionGroupGetSensitiveFunction_Set() error {
	var err error
	actionGroupGetSensitiveFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupGetSensitiveFunction, err = actionGroupStruct.InvokerNew("get_sensitive")
	})
	return err
}

// GetSensitive is a representation of the C type gtk_action_group_get_sensitive.
func (recv *ActionGroup) GetSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGroupGetSensitiveFunction_Set()
	if err == nil {
		ret = actionGroupGetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var actionGroupGetVisibleFunction *gi.Function
var actionGroupGetVisibleFunction_Once sync.Once

func actionGroupGetVisibleFunction_Set() error {
	var err error
	actionGroupGetVisibleFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupGetVisibleFunction, err = actionGroupStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_action_group_get_visible.
func (recv *ActionGroup) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := actionGroupGetVisibleFunction_Set()
	if err == nil {
		ret = actionGroupGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_action_group_list_actions' : return type 'GLib.List' not supported

var actionGroupRemoveActionFunction *gi.Function
var actionGroupRemoveActionFunction_Once sync.Once

func actionGroupRemoveActionFunction_Set() error {
	var err error
	actionGroupRemoveActionFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupRemoveActionFunction, err = actionGroupStruct.InvokerNew("remove_action")
	})
	return err
}

// RemoveAction is a representation of the C type gtk_action_group_remove_action.
func (recv *ActionGroup) RemoveAction(action *Action) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(action.Native)

	err := actionGroupRemoveActionFunction_Set()
	if err == nil {
		actionGroupRemoveActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupSetAccelGroupFunction *gi.Function
var actionGroupSetAccelGroupFunction_Once sync.Once

func actionGroupSetAccelGroupFunction_Set() error {
	var err error
	actionGroupSetAccelGroupFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupSetAccelGroupFunction, err = actionGroupStruct.InvokerNew("set_accel_group")
	})
	return err
}

// SetAccelGroup is a representation of the C type gtk_action_group_set_accel_group.
func (recv *ActionGroup) SetAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := actionGroupSetAccelGroupFunction_Set()
	if err == nil {
		actionGroupSetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupSetSensitiveFunction *gi.Function
var actionGroupSetSensitiveFunction_Once sync.Once

func actionGroupSetSensitiveFunction_Set() error {
	var err error
	actionGroupSetSensitiveFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupSetSensitiveFunction, err = actionGroupStruct.InvokerNew("set_sensitive")
	})
	return err
}

// SetSensitive is a representation of the C type gtk_action_group_set_sensitive.
func (recv *ActionGroup) SetSensitive(sensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sensitive)

	err := actionGroupSetSensitiveFunction_Set()
	if err == nil {
		actionGroupSetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_action_group_set_translate_func' : parameter 'func' of type 'TranslateFunc' not supported

var actionGroupSetTranslationDomainFunction *gi.Function
var actionGroupSetTranslationDomainFunction_Once sync.Once

func actionGroupSetTranslationDomainFunction_Set() error {
	var err error
	actionGroupSetTranslationDomainFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupSetTranslationDomainFunction, err = actionGroupStruct.InvokerNew("set_translation_domain")
	})
	return err
}

// SetTranslationDomain is a representation of the C type gtk_action_group_set_translation_domain.
func (recv *ActionGroup) SetTranslationDomain(domain string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(domain)

	err := actionGroupSetTranslationDomainFunction_Set()
	if err == nil {
		actionGroupSetTranslationDomainFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupSetVisibleFunction *gi.Function
var actionGroupSetVisibleFunction_Once sync.Once

func actionGroupSetVisibleFunction_Set() error {
	var err error
	actionGroupSetVisibleFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupSetVisibleFunction, err = actionGroupStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_action_group_set_visible.
func (recv *ActionGroup) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := actionGroupSetVisibleFunction_Set()
	if err == nil {
		actionGroupSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var actionGroupTranslateStringFunction *gi.Function
var actionGroupTranslateStringFunction_Once sync.Once

func actionGroupTranslateStringFunction_Set() error {
	var err error
	actionGroupTranslateStringFunction_Once.Do(func() {
		err = actionGroupStruct_Set()
		if err != nil {
			return
		}
		actionGroupTranslateStringFunction, err = actionGroupStruct.InvokerNew("translate_string")
	})
	return err
}

// TranslateString is a representation of the C type gtk_action_group_translate_string.
func (recv *ActionGroup) TranslateString(string_ string) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(string_)

	var ret gi.Argument

	err := actionGroupTranslateStringFunction_Set()
	if err == nil {
		ret = actionGroupTranslateStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var adjustmentStruct *gi.Struct
var adjustmentStruct_Once sync.Once

func adjustmentStruct_Set() error {
	var err error
	adjustmentStruct_Once.Do(func() {
		adjustmentStruct, err = gi.StructNew("Gtk", "Adjustment")
	})
	return err
}

type Adjustment struct {
	gobject.InitiallyUnowned
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.InitiallyUnowned'

// FieldPriv returns the C field 'priv'.
func (recv *Adjustment) FieldPriv() *AdjustmentPrivate {
	argValue := gi.FieldGet(adjustmentStruct, recv.Native, "priv")
	value := &AdjustmentPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Adjustment) SetFieldPriv(value *AdjustmentPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(adjustmentStruct, recv.Native, "priv", argValue)
}

var adjustmentNewFunction *gi.Function
var adjustmentNewFunction_Once sync.Once

func adjustmentNewFunction_Set() error {
	var err error
	adjustmentNewFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentNewFunction, err = adjustmentStruct.InvokerNew("new")
	})
	return err
}

// AdjustmentNew is a representation of the C type gtk_adjustment_new.
func AdjustmentNew(value float64, lower float64, upper float64, stepIncrement float64, pageIncrement float64, pageSize float64) *Adjustment {
	var inArgs [6]gi.Argument
	inArgs[0].SetFloat64(value)
	inArgs[1].SetFloat64(lower)
	inArgs[2].SetFloat64(upper)
	inArgs[3].SetFloat64(stepIncrement)
	inArgs[4].SetFloat64(pageIncrement)
	inArgs[5].SetFloat64(pageSize)

	var ret gi.Argument

	err := adjustmentNewFunction_Set()
	if err == nil {
		ret = adjustmentNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var adjustmentChangedFunction *gi.Function
var adjustmentChangedFunction_Once sync.Once

func adjustmentChangedFunction_Set() error {
	var err error
	adjustmentChangedFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentChangedFunction, err = adjustmentStruct.InvokerNew("changed")
	})
	return err
}

// Changed is a representation of the C type gtk_adjustment_changed.
func (recv *Adjustment) Changed() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := adjustmentChangedFunction_Set()
	if err == nil {
		adjustmentChangedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentClampPageFunction *gi.Function
var adjustmentClampPageFunction_Once sync.Once

func adjustmentClampPageFunction_Set() error {
	var err error
	adjustmentClampPageFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentClampPageFunction, err = adjustmentStruct.InvokerNew("clamp_page")
	})
	return err
}

// ClampPage is a representation of the C type gtk_adjustment_clamp_page.
func (recv *Adjustment) ClampPage(lower float64, upper float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(lower)
	inArgs[2].SetFloat64(upper)

	err := adjustmentClampPageFunction_Set()
	if err == nil {
		adjustmentClampPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentConfigureFunction *gi.Function
var adjustmentConfigureFunction_Once sync.Once

func adjustmentConfigureFunction_Set() error {
	var err error
	adjustmentConfigureFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentConfigureFunction, err = adjustmentStruct.InvokerNew("configure")
	})
	return err
}

// Configure is a representation of the C type gtk_adjustment_configure.
func (recv *Adjustment) Configure(value float64, lower float64, upper float64, stepIncrement float64, pageIncrement float64, pageSize float64) {
	var inArgs [7]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)
	inArgs[2].SetFloat64(lower)
	inArgs[3].SetFloat64(upper)
	inArgs[4].SetFloat64(stepIncrement)
	inArgs[5].SetFloat64(pageIncrement)
	inArgs[6].SetFloat64(pageSize)

	err := adjustmentConfigureFunction_Set()
	if err == nil {
		adjustmentConfigureFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentGetLowerFunction *gi.Function
var adjustmentGetLowerFunction_Once sync.Once

func adjustmentGetLowerFunction_Set() error {
	var err error
	adjustmentGetLowerFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetLowerFunction, err = adjustmentStruct.InvokerNew("get_lower")
	})
	return err
}

// GetLower is a representation of the C type gtk_adjustment_get_lower.
func (recv *Adjustment) GetLower() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetLowerFunction_Set()
	if err == nil {
		ret = adjustmentGetLowerFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetMinimumIncrementFunction *gi.Function
var adjustmentGetMinimumIncrementFunction_Once sync.Once

func adjustmentGetMinimumIncrementFunction_Set() error {
	var err error
	adjustmentGetMinimumIncrementFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetMinimumIncrementFunction, err = adjustmentStruct.InvokerNew("get_minimum_increment")
	})
	return err
}

// GetMinimumIncrement is a representation of the C type gtk_adjustment_get_minimum_increment.
func (recv *Adjustment) GetMinimumIncrement() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetMinimumIncrementFunction_Set()
	if err == nil {
		ret = adjustmentGetMinimumIncrementFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetPageIncrementFunction *gi.Function
var adjustmentGetPageIncrementFunction_Once sync.Once

func adjustmentGetPageIncrementFunction_Set() error {
	var err error
	adjustmentGetPageIncrementFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetPageIncrementFunction, err = adjustmentStruct.InvokerNew("get_page_increment")
	})
	return err
}

// GetPageIncrement is a representation of the C type gtk_adjustment_get_page_increment.
func (recv *Adjustment) GetPageIncrement() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetPageIncrementFunction_Set()
	if err == nil {
		ret = adjustmentGetPageIncrementFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetPageSizeFunction *gi.Function
var adjustmentGetPageSizeFunction_Once sync.Once

func adjustmentGetPageSizeFunction_Set() error {
	var err error
	adjustmentGetPageSizeFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetPageSizeFunction, err = adjustmentStruct.InvokerNew("get_page_size")
	})
	return err
}

// GetPageSize is a representation of the C type gtk_adjustment_get_page_size.
func (recv *Adjustment) GetPageSize() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetPageSizeFunction_Set()
	if err == nil {
		ret = adjustmentGetPageSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetStepIncrementFunction *gi.Function
var adjustmentGetStepIncrementFunction_Once sync.Once

func adjustmentGetStepIncrementFunction_Set() error {
	var err error
	adjustmentGetStepIncrementFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetStepIncrementFunction, err = adjustmentStruct.InvokerNew("get_step_increment")
	})
	return err
}

// GetStepIncrement is a representation of the C type gtk_adjustment_get_step_increment.
func (recv *Adjustment) GetStepIncrement() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetStepIncrementFunction_Set()
	if err == nil {
		ret = adjustmentGetStepIncrementFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetUpperFunction *gi.Function
var adjustmentGetUpperFunction_Once sync.Once

func adjustmentGetUpperFunction_Set() error {
	var err error
	adjustmentGetUpperFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetUpperFunction, err = adjustmentStruct.InvokerNew("get_upper")
	})
	return err
}

// GetUpper is a representation of the C type gtk_adjustment_get_upper.
func (recv *Adjustment) GetUpper() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetUpperFunction_Set()
	if err == nil {
		ret = adjustmentGetUpperFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentGetValueFunction *gi.Function
var adjustmentGetValueFunction_Once sync.Once

func adjustmentGetValueFunction_Set() error {
	var err error
	adjustmentGetValueFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentGetValueFunction, err = adjustmentStruct.InvokerNew("get_value")
	})
	return err
}

// GetValue is a representation of the C type gtk_adjustment_get_value.
func (recv *Adjustment) GetValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := adjustmentGetValueFunction_Set()
	if err == nil {
		ret = adjustmentGetValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var adjustmentSetLowerFunction *gi.Function
var adjustmentSetLowerFunction_Once sync.Once

func adjustmentSetLowerFunction_Set() error {
	var err error
	adjustmentSetLowerFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetLowerFunction, err = adjustmentStruct.InvokerNew("set_lower")
	})
	return err
}

// SetLower is a representation of the C type gtk_adjustment_set_lower.
func (recv *Adjustment) SetLower(lower float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(lower)

	err := adjustmentSetLowerFunction_Set()
	if err == nil {
		adjustmentSetLowerFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentSetPageIncrementFunction *gi.Function
var adjustmentSetPageIncrementFunction_Once sync.Once

func adjustmentSetPageIncrementFunction_Set() error {
	var err error
	adjustmentSetPageIncrementFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetPageIncrementFunction, err = adjustmentStruct.InvokerNew("set_page_increment")
	})
	return err
}

// SetPageIncrement is a representation of the C type gtk_adjustment_set_page_increment.
func (recv *Adjustment) SetPageIncrement(pageIncrement float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(pageIncrement)

	err := adjustmentSetPageIncrementFunction_Set()
	if err == nil {
		adjustmentSetPageIncrementFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentSetPageSizeFunction *gi.Function
var adjustmentSetPageSizeFunction_Once sync.Once

func adjustmentSetPageSizeFunction_Set() error {
	var err error
	adjustmentSetPageSizeFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetPageSizeFunction, err = adjustmentStruct.InvokerNew("set_page_size")
	})
	return err
}

// SetPageSize is a representation of the C type gtk_adjustment_set_page_size.
func (recv *Adjustment) SetPageSize(pageSize float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(pageSize)

	err := adjustmentSetPageSizeFunction_Set()
	if err == nil {
		adjustmentSetPageSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentSetStepIncrementFunction *gi.Function
var adjustmentSetStepIncrementFunction_Once sync.Once

func adjustmentSetStepIncrementFunction_Set() error {
	var err error
	adjustmentSetStepIncrementFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetStepIncrementFunction, err = adjustmentStruct.InvokerNew("set_step_increment")
	})
	return err
}

// SetStepIncrement is a representation of the C type gtk_adjustment_set_step_increment.
func (recv *Adjustment) SetStepIncrement(stepIncrement float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(stepIncrement)

	err := adjustmentSetStepIncrementFunction_Set()
	if err == nil {
		adjustmentSetStepIncrementFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentSetUpperFunction *gi.Function
var adjustmentSetUpperFunction_Once sync.Once

func adjustmentSetUpperFunction_Set() error {
	var err error
	adjustmentSetUpperFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetUpperFunction, err = adjustmentStruct.InvokerNew("set_upper")
	})
	return err
}

// SetUpper is a representation of the C type gtk_adjustment_set_upper.
func (recv *Adjustment) SetUpper(upper float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(upper)

	err := adjustmentSetUpperFunction_Set()
	if err == nil {
		adjustmentSetUpperFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentSetValueFunction *gi.Function
var adjustmentSetValueFunction_Once sync.Once

func adjustmentSetValueFunction_Set() error {
	var err error
	adjustmentSetValueFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentSetValueFunction, err = adjustmentStruct.InvokerNew("set_value")
	})
	return err
}

// SetValue is a representation of the C type gtk_adjustment_set_value.
func (recv *Adjustment) SetValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := adjustmentSetValueFunction_Set()
	if err == nil {
		adjustmentSetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var adjustmentValueChangedFunction *gi.Function
var adjustmentValueChangedFunction_Once sync.Once

func adjustmentValueChangedFunction_Set() error {
	var err error
	adjustmentValueChangedFunction_Once.Do(func() {
		err = adjustmentStruct_Set()
		if err != nil {
			return
		}
		adjustmentValueChangedFunction, err = adjustmentStruct.InvokerNew("value_changed")
	})
	return err
}

// ValueChanged is a representation of the C type gtk_adjustment_value_changed.
func (recv *Adjustment) ValueChanged() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := adjustmentValueChangedFunction_Set()
	if err == nil {
		adjustmentValueChangedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var alignmentStruct *gi.Struct
var alignmentStruct_Once sync.Once

func alignmentStruct_Set() error {
	var err error
	alignmentStruct_Once.Do(func() {
		alignmentStruct, err = gi.StructNew("Gtk", "Alignment")
	})
	return err
}

type Alignment struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *Alignment) FieldBin() *Bin {
	argValue := gi.FieldGet(alignmentStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *Alignment) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(alignmentStruct, recv.Native, "bin", argValue)
}

var alignmentNewFunction *gi.Function
var alignmentNewFunction_Once sync.Once

func alignmentNewFunction_Set() error {
	var err error
	alignmentNewFunction_Once.Do(func() {
		err = alignmentStruct_Set()
		if err != nil {
			return
		}
		alignmentNewFunction, err = alignmentStruct.InvokerNew("new")
	})
	return err
}

// AlignmentNew is a representation of the C type gtk_alignment_new.
func AlignmentNew(xalign float32, yalign float32, xscale float32, yscale float32) *Alignment {
	var inArgs [4]gi.Argument
	inArgs[0].SetFloat32(xalign)
	inArgs[1].SetFloat32(yalign)
	inArgs[2].SetFloat32(xscale)
	inArgs[3].SetFloat32(yscale)

	var ret gi.Argument

	err := alignmentNewFunction_Set()
	if err == nil {
		ret = alignmentNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Alignment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var alignmentGetPaddingFunction *gi.Function
var alignmentGetPaddingFunction_Once sync.Once

func alignmentGetPaddingFunction_Set() error {
	var err error
	alignmentGetPaddingFunction_Once.Do(func() {
		err = alignmentStruct_Set()
		if err != nil {
			return
		}
		alignmentGetPaddingFunction, err = alignmentStruct.InvokerNew("get_padding")
	})
	return err
}

// GetPadding is a representation of the C type gtk_alignment_get_padding.
func (recv *Alignment) GetPadding() (uint32, uint32, uint32, uint32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [4]gi.Argument

	err := alignmentGetPaddingFunction_Set()
	if err == nil {
		alignmentGetPaddingFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].Uint32()
	out2 := outArgs[2].Uint32()
	out3 := outArgs[3].Uint32()

	return out0, out1, out2, out3
}

var alignmentSetFunction *gi.Function
var alignmentSetFunction_Once sync.Once

func alignmentSetFunction_Set() error {
	var err error
	alignmentSetFunction_Once.Do(func() {
		err = alignmentStruct_Set()
		if err != nil {
			return
		}
		alignmentSetFunction, err = alignmentStruct.InvokerNew("set")
	})
	return err
}

// Set is a representation of the C type gtk_alignment_set.
func (recv *Alignment) Set(xalign float32, yalign float32, xscale float32, yscale float32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)
	inArgs[3].SetFloat32(xscale)
	inArgs[4].SetFloat32(yscale)

	err := alignmentSetFunction_Set()
	if err == nil {
		alignmentSetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var alignmentSetPaddingFunction *gi.Function
var alignmentSetPaddingFunction_Once sync.Once

func alignmentSetPaddingFunction_Set() error {
	var err error
	alignmentSetPaddingFunction_Once.Do(func() {
		err = alignmentStruct_Set()
		if err != nil {
			return
		}
		alignmentSetPaddingFunction, err = alignmentStruct.InvokerNew("set_padding")
	})
	return err
}

// SetPadding is a representation of the C type gtk_alignment_set_padding.
func (recv *Alignment) SetPadding(paddingTop uint32, paddingBottom uint32, paddingLeft uint32, paddingRight uint32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(paddingTop)
	inArgs[2].SetUint32(paddingBottom)
	inArgs[3].SetUint32(paddingLeft)
	inArgs[4].SetUint32(paddingRight)

	err := alignmentSetPaddingFunction_Set()
	if err == nil {
		alignmentSetPaddingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserButtonStruct *gi.Struct
var appChooserButtonStruct_Once sync.Once

func appChooserButtonStruct_Set() error {
	var err error
	appChooserButtonStruct_Once.Do(func() {
		appChooserButtonStruct, err = gi.StructNew("Gtk", "AppChooserButton")
	})
	return err
}

type AppChooserButton struct {
	ComboBox
}

// FieldParent returns the C field 'parent'.
func (recv *AppChooserButton) FieldParent() *ComboBox {
	argValue := gi.FieldGet(appChooserButtonStruct, recv.Native, "parent")
	value := &ComboBox{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *AppChooserButton) SetFieldParent(value *ComboBox) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(appChooserButtonStruct, recv.Native, "parent", argValue)
}

var appChooserButtonNewFunction *gi.Function
var appChooserButtonNewFunction_Once sync.Once

func appChooserButtonNewFunction_Set() error {
	var err error
	appChooserButtonNewFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonNewFunction, err = appChooserButtonStruct.InvokerNew("new")
	})
	return err
}

// AppChooserButtonNew is a representation of the C type gtk_app_chooser_button_new.
func AppChooserButtonNew(contentType string) *AppChooserButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(contentType)

	var ret gi.Argument

	err := appChooserButtonNewFunction_Set()
	if err == nil {
		ret = appChooserButtonNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AppChooserButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_app_chooser_button_append_custom_item' : parameter 'icon' of type 'Gio.Icon' not supported

var appChooserButtonAppendSeparatorFunction *gi.Function
var appChooserButtonAppendSeparatorFunction_Once sync.Once

func appChooserButtonAppendSeparatorFunction_Set() error {
	var err error
	appChooserButtonAppendSeparatorFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonAppendSeparatorFunction, err = appChooserButtonStruct.InvokerNew("append_separator")
	})
	return err
}

// AppendSeparator is a representation of the C type gtk_app_chooser_button_append_separator.
func (recv *AppChooserButton) AppendSeparator() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := appChooserButtonAppendSeparatorFunction_Set()
	if err == nil {
		appChooserButtonAppendSeparatorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserButtonGetHeadingFunction *gi.Function
var appChooserButtonGetHeadingFunction_Once sync.Once

func appChooserButtonGetHeadingFunction_Set() error {
	var err error
	appChooserButtonGetHeadingFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonGetHeadingFunction, err = appChooserButtonStruct.InvokerNew("get_heading")
	})
	return err
}

// GetHeading is a representation of the C type gtk_app_chooser_button_get_heading.
func (recv *AppChooserButton) GetHeading() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserButtonGetHeadingFunction_Set()
	if err == nil {
		ret = appChooserButtonGetHeadingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var appChooserButtonGetShowDefaultItemFunction *gi.Function
var appChooserButtonGetShowDefaultItemFunction_Once sync.Once

func appChooserButtonGetShowDefaultItemFunction_Set() error {
	var err error
	appChooserButtonGetShowDefaultItemFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonGetShowDefaultItemFunction, err = appChooserButtonStruct.InvokerNew("get_show_default_item")
	})
	return err
}

// GetShowDefaultItem is a representation of the C type gtk_app_chooser_button_get_show_default_item.
func (recv *AppChooserButton) GetShowDefaultItem() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserButtonGetShowDefaultItemFunction_Set()
	if err == nil {
		ret = appChooserButtonGetShowDefaultItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserButtonGetShowDialogItemFunction *gi.Function
var appChooserButtonGetShowDialogItemFunction_Once sync.Once

func appChooserButtonGetShowDialogItemFunction_Set() error {
	var err error
	appChooserButtonGetShowDialogItemFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonGetShowDialogItemFunction, err = appChooserButtonStruct.InvokerNew("get_show_dialog_item")
	})
	return err
}

// GetShowDialogItem is a representation of the C type gtk_app_chooser_button_get_show_dialog_item.
func (recv *AppChooserButton) GetShowDialogItem() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserButtonGetShowDialogItemFunction_Set()
	if err == nil {
		ret = appChooserButtonGetShowDialogItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserButtonSetActiveCustomItemFunction *gi.Function
var appChooserButtonSetActiveCustomItemFunction_Once sync.Once

func appChooserButtonSetActiveCustomItemFunction_Set() error {
	var err error
	appChooserButtonSetActiveCustomItemFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonSetActiveCustomItemFunction, err = appChooserButtonStruct.InvokerNew("set_active_custom_item")
	})
	return err
}

// SetActiveCustomItem is a representation of the C type gtk_app_chooser_button_set_active_custom_item.
func (recv *AppChooserButton) SetActiveCustomItem(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := appChooserButtonSetActiveCustomItemFunction_Set()
	if err == nil {
		appChooserButtonSetActiveCustomItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserButtonSetHeadingFunction *gi.Function
var appChooserButtonSetHeadingFunction_Once sync.Once

func appChooserButtonSetHeadingFunction_Set() error {
	var err error
	appChooserButtonSetHeadingFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonSetHeadingFunction, err = appChooserButtonStruct.InvokerNew("set_heading")
	})
	return err
}

// SetHeading is a representation of the C type gtk_app_chooser_button_set_heading.
func (recv *AppChooserButton) SetHeading(heading string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(heading)

	err := appChooserButtonSetHeadingFunction_Set()
	if err == nil {
		appChooserButtonSetHeadingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserButtonSetShowDefaultItemFunction *gi.Function
var appChooserButtonSetShowDefaultItemFunction_Once sync.Once

func appChooserButtonSetShowDefaultItemFunction_Set() error {
	var err error
	appChooserButtonSetShowDefaultItemFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonSetShowDefaultItemFunction, err = appChooserButtonStruct.InvokerNew("set_show_default_item")
	})
	return err
}

// SetShowDefaultItem is a representation of the C type gtk_app_chooser_button_set_show_default_item.
func (recv *AppChooserButton) SetShowDefaultItem(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserButtonSetShowDefaultItemFunction_Set()
	if err == nil {
		appChooserButtonSetShowDefaultItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserButtonSetShowDialogItemFunction *gi.Function
var appChooserButtonSetShowDialogItemFunction_Once sync.Once

func appChooserButtonSetShowDialogItemFunction_Set() error {
	var err error
	appChooserButtonSetShowDialogItemFunction_Once.Do(func() {
		err = appChooserButtonStruct_Set()
		if err != nil {
			return
		}
		appChooserButtonSetShowDialogItemFunction, err = appChooserButtonStruct.InvokerNew("set_show_dialog_item")
	})
	return err
}

// SetShowDialogItem is a representation of the C type gtk_app_chooser_button_set_show_dialog_item.
func (recv *AppChooserButton) SetShowDialogItem(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserButtonSetShowDialogItemFunction_Set()
	if err == nil {
		appChooserButtonSetShowDialogItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserDialogStruct *gi.Struct
var appChooserDialogStruct_Once sync.Once

func appChooserDialogStruct_Set() error {
	var err error
	appChooserDialogStruct_Once.Do(func() {
		appChooserDialogStruct, err = gi.StructNew("Gtk", "AppChooserDialog")
	})
	return err
}

type AppChooserDialog struct {
	Dialog
}

// FieldParent returns the C field 'parent'.
func (recv *AppChooserDialog) FieldParent() *Dialog {
	argValue := gi.FieldGet(appChooserDialogStruct, recv.Native, "parent")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *AppChooserDialog) SetFieldParent(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(appChooserDialogStruct, recv.Native, "parent", argValue)
}

// UNSUPPORTED : C value 'gtk_app_chooser_dialog_new' : parameter 'flags' of type 'DialogFlags' not supported

// UNSUPPORTED : C value 'gtk_app_chooser_dialog_new_for_content_type' : parameter 'flags' of type 'DialogFlags' not supported

var appChooserDialogGetHeadingFunction *gi.Function
var appChooserDialogGetHeadingFunction_Once sync.Once

func appChooserDialogGetHeadingFunction_Set() error {
	var err error
	appChooserDialogGetHeadingFunction_Once.Do(func() {
		err = appChooserDialogStruct_Set()
		if err != nil {
			return
		}
		appChooserDialogGetHeadingFunction, err = appChooserDialogStruct.InvokerNew("get_heading")
	})
	return err
}

// GetHeading is a representation of the C type gtk_app_chooser_dialog_get_heading.
func (recv *AppChooserDialog) GetHeading() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserDialogGetHeadingFunction_Set()
	if err == nil {
		ret = appChooserDialogGetHeadingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var appChooserDialogGetWidgetFunction *gi.Function
var appChooserDialogGetWidgetFunction_Once sync.Once

func appChooserDialogGetWidgetFunction_Set() error {
	var err error
	appChooserDialogGetWidgetFunction_Once.Do(func() {
		err = appChooserDialogStruct_Set()
		if err != nil {
			return
		}
		appChooserDialogGetWidgetFunction, err = appChooserDialogStruct.InvokerNew("get_widget")
	})
	return err
}

// GetWidget is a representation of the C type gtk_app_chooser_dialog_get_widget.
func (recv *AppChooserDialog) GetWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserDialogGetWidgetFunction_Set()
	if err == nil {
		ret = appChooserDialogGetWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var appChooserDialogSetHeadingFunction *gi.Function
var appChooserDialogSetHeadingFunction_Once sync.Once

func appChooserDialogSetHeadingFunction_Set() error {
	var err error
	appChooserDialogSetHeadingFunction_Once.Do(func() {
		err = appChooserDialogStruct_Set()
		if err != nil {
			return
		}
		appChooserDialogSetHeadingFunction, err = appChooserDialogStruct.InvokerNew("set_heading")
	})
	return err
}

// SetHeading is a representation of the C type gtk_app_chooser_dialog_set_heading.
func (recv *AppChooserDialog) SetHeading(heading string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(heading)

	err := appChooserDialogSetHeadingFunction_Set()
	if err == nil {
		appChooserDialogSetHeadingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetStruct *gi.Struct
var appChooserWidgetStruct_Once sync.Once

func appChooserWidgetStruct_Set() error {
	var err error
	appChooserWidgetStruct_Once.Do(func() {
		appChooserWidgetStruct, err = gi.StructNew("Gtk", "AppChooserWidget")
	})
	return err
}

type AppChooserWidget struct {
	Box
}

// FieldParent returns the C field 'parent'.
func (recv *AppChooserWidget) FieldParent() *Box {
	argValue := gi.FieldGet(appChooserWidgetStruct, recv.Native, "parent")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *AppChooserWidget) SetFieldParent(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(appChooserWidgetStruct, recv.Native, "parent", argValue)
}

var appChooserWidgetNewFunction *gi.Function
var appChooserWidgetNewFunction_Once sync.Once

func appChooserWidgetNewFunction_Set() error {
	var err error
	appChooserWidgetNewFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetNewFunction, err = appChooserWidgetStruct.InvokerNew("new")
	})
	return err
}

// AppChooserWidgetNew is a representation of the C type gtk_app_chooser_widget_new.
func AppChooserWidgetNew(contentType string) *AppChooserWidget {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(contentType)

	var ret gi.Argument

	err := appChooserWidgetNewFunction_Set()
	if err == nil {
		ret = appChooserWidgetNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AppChooserWidget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var appChooserWidgetGetDefaultTextFunction *gi.Function
var appChooserWidgetGetDefaultTextFunction_Once sync.Once

func appChooserWidgetGetDefaultTextFunction_Set() error {
	var err error
	appChooserWidgetGetDefaultTextFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetDefaultTextFunction, err = appChooserWidgetStruct.InvokerNew("get_default_text")
	})
	return err
}

// GetDefaultText is a representation of the C type gtk_app_chooser_widget_get_default_text.
func (recv *AppChooserWidget) GetDefaultText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetDefaultTextFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetDefaultTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var appChooserWidgetGetShowAllFunction *gi.Function
var appChooserWidgetGetShowAllFunction_Once sync.Once

func appChooserWidgetGetShowAllFunction_Set() error {
	var err error
	appChooserWidgetGetShowAllFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetShowAllFunction, err = appChooserWidgetStruct.InvokerNew("get_show_all")
	})
	return err
}

// GetShowAll is a representation of the C type gtk_app_chooser_widget_get_show_all.
func (recv *AppChooserWidget) GetShowAll() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetShowAllFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetShowAllFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserWidgetGetShowDefaultFunction *gi.Function
var appChooserWidgetGetShowDefaultFunction_Once sync.Once

func appChooserWidgetGetShowDefaultFunction_Set() error {
	var err error
	appChooserWidgetGetShowDefaultFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetShowDefaultFunction, err = appChooserWidgetStruct.InvokerNew("get_show_default")
	})
	return err
}

// GetShowDefault is a representation of the C type gtk_app_chooser_widget_get_show_default.
func (recv *AppChooserWidget) GetShowDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetShowDefaultFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetShowDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserWidgetGetShowFallbackFunction *gi.Function
var appChooserWidgetGetShowFallbackFunction_Once sync.Once

func appChooserWidgetGetShowFallbackFunction_Set() error {
	var err error
	appChooserWidgetGetShowFallbackFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetShowFallbackFunction, err = appChooserWidgetStruct.InvokerNew("get_show_fallback")
	})
	return err
}

// GetShowFallback is a representation of the C type gtk_app_chooser_widget_get_show_fallback.
func (recv *AppChooserWidget) GetShowFallback() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetShowFallbackFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetShowFallbackFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserWidgetGetShowOtherFunction *gi.Function
var appChooserWidgetGetShowOtherFunction_Once sync.Once

func appChooserWidgetGetShowOtherFunction_Set() error {
	var err error
	appChooserWidgetGetShowOtherFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetShowOtherFunction, err = appChooserWidgetStruct.InvokerNew("get_show_other")
	})
	return err
}

// GetShowOther is a representation of the C type gtk_app_chooser_widget_get_show_other.
func (recv *AppChooserWidget) GetShowOther() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetShowOtherFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetShowOtherFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserWidgetGetShowRecommendedFunction *gi.Function
var appChooserWidgetGetShowRecommendedFunction_Once sync.Once

func appChooserWidgetGetShowRecommendedFunction_Set() error {
	var err error
	appChooserWidgetGetShowRecommendedFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetGetShowRecommendedFunction, err = appChooserWidgetStruct.InvokerNew("get_show_recommended")
	})
	return err
}

// GetShowRecommended is a representation of the C type gtk_app_chooser_widget_get_show_recommended.
func (recv *AppChooserWidget) GetShowRecommended() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := appChooserWidgetGetShowRecommendedFunction_Set()
	if err == nil {
		ret = appChooserWidgetGetShowRecommendedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var appChooserWidgetSetDefaultTextFunction *gi.Function
var appChooserWidgetSetDefaultTextFunction_Once sync.Once

func appChooserWidgetSetDefaultTextFunction_Set() error {
	var err error
	appChooserWidgetSetDefaultTextFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetDefaultTextFunction, err = appChooserWidgetStruct.InvokerNew("set_default_text")
	})
	return err
}

// SetDefaultText is a representation of the C type gtk_app_chooser_widget_set_default_text.
func (recv *AppChooserWidget) SetDefaultText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := appChooserWidgetSetDefaultTextFunction_Set()
	if err == nil {
		appChooserWidgetSetDefaultTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetSetShowAllFunction *gi.Function
var appChooserWidgetSetShowAllFunction_Once sync.Once

func appChooserWidgetSetShowAllFunction_Set() error {
	var err error
	appChooserWidgetSetShowAllFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetShowAllFunction, err = appChooserWidgetStruct.InvokerNew("set_show_all")
	})
	return err
}

// SetShowAll is a representation of the C type gtk_app_chooser_widget_set_show_all.
func (recv *AppChooserWidget) SetShowAll(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserWidgetSetShowAllFunction_Set()
	if err == nil {
		appChooserWidgetSetShowAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetSetShowDefaultFunction *gi.Function
var appChooserWidgetSetShowDefaultFunction_Once sync.Once

func appChooserWidgetSetShowDefaultFunction_Set() error {
	var err error
	appChooserWidgetSetShowDefaultFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetShowDefaultFunction, err = appChooserWidgetStruct.InvokerNew("set_show_default")
	})
	return err
}

// SetShowDefault is a representation of the C type gtk_app_chooser_widget_set_show_default.
func (recv *AppChooserWidget) SetShowDefault(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserWidgetSetShowDefaultFunction_Set()
	if err == nil {
		appChooserWidgetSetShowDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetSetShowFallbackFunction *gi.Function
var appChooserWidgetSetShowFallbackFunction_Once sync.Once

func appChooserWidgetSetShowFallbackFunction_Set() error {
	var err error
	appChooserWidgetSetShowFallbackFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetShowFallbackFunction, err = appChooserWidgetStruct.InvokerNew("set_show_fallback")
	})
	return err
}

// SetShowFallback is a representation of the C type gtk_app_chooser_widget_set_show_fallback.
func (recv *AppChooserWidget) SetShowFallback(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserWidgetSetShowFallbackFunction_Set()
	if err == nil {
		appChooserWidgetSetShowFallbackFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetSetShowOtherFunction *gi.Function
var appChooserWidgetSetShowOtherFunction_Once sync.Once

func appChooserWidgetSetShowOtherFunction_Set() error {
	var err error
	appChooserWidgetSetShowOtherFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetShowOtherFunction, err = appChooserWidgetStruct.InvokerNew("set_show_other")
	})
	return err
}

// SetShowOther is a representation of the C type gtk_app_chooser_widget_set_show_other.
func (recv *AppChooserWidget) SetShowOther(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserWidgetSetShowOtherFunction_Set()
	if err == nil {
		appChooserWidgetSetShowOtherFunction.Invoke(inArgs[:], nil)
	}

	return
}

var appChooserWidgetSetShowRecommendedFunction *gi.Function
var appChooserWidgetSetShowRecommendedFunction_Once sync.Once

func appChooserWidgetSetShowRecommendedFunction_Set() error {
	var err error
	appChooserWidgetSetShowRecommendedFunction_Once.Do(func() {
		err = appChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		appChooserWidgetSetShowRecommendedFunction, err = appChooserWidgetStruct.InvokerNew("set_show_recommended")
	})
	return err
}

// SetShowRecommended is a representation of the C type gtk_app_chooser_widget_set_show_recommended.
func (recv *AppChooserWidget) SetShowRecommended(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := appChooserWidgetSetShowRecommendedFunction_Set()
	if err == nil {
		appChooserWidgetSetShowRecommendedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationStruct *gi.Struct
var applicationStruct_Once sync.Once

func applicationStruct_Set() error {
	var err error
	applicationStruct_Once.Do(func() {
		applicationStruct, err = gi.StructNew("Gtk", "Application")
	})
	return err
}

type Application struct {
	gio.Application
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'Gio.Application'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'Gio.Application'

// UNSUPPORTED : C value 'gtk_application_new' : parameter 'flags' of type 'Gio.ApplicationFlags' not supported

// UNSUPPORTED : C value 'gtk_application_add_accelerator' : parameter 'parameter' of type 'GLib.Variant' not supported

var applicationAddWindowFunction *gi.Function
var applicationAddWindowFunction_Once sync.Once

func applicationAddWindowFunction_Set() error {
	var err error
	applicationAddWindowFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationAddWindowFunction, err = applicationStruct.InvokerNew("add_window")
	})
	return err
}

// AddWindow is a representation of the C type gtk_application_add_window.
func (recv *Application) AddWindow(window *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(window.Native)

	err := applicationAddWindowFunction_Set()
	if err == nil {
		applicationAddWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationGetAccelsForActionFunction *gi.Function
var applicationGetAccelsForActionFunction_Once sync.Once

func applicationGetAccelsForActionFunction_Set() error {
	var err error
	applicationGetAccelsForActionFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationGetAccelsForActionFunction, err = applicationStruct.InvokerNew("get_accels_for_action")
	})
	return err
}

// GetAccelsForAction is a representation of the C type gtk_application_get_accels_for_action.
func (recv *Application) GetAccelsForAction(detailedActionName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(detailedActionName)

	err := applicationGetAccelsForActionFunction_Set()
	if err == nil {
		applicationGetAccelsForActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationGetActionsForAccelFunction *gi.Function
var applicationGetActionsForAccelFunction_Once sync.Once

func applicationGetActionsForAccelFunction_Set() error {
	var err error
	applicationGetActionsForAccelFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationGetActionsForAccelFunction, err = applicationStruct.InvokerNew("get_actions_for_accel")
	})
	return err
}

// GetActionsForAccel is a representation of the C type gtk_application_get_actions_for_accel.
func (recv *Application) GetActionsForAccel(accel string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accel)

	err := applicationGetActionsForAccelFunction_Set()
	if err == nil {
		applicationGetActionsForAccelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationGetActiveWindowFunction *gi.Function
var applicationGetActiveWindowFunction_Once sync.Once

func applicationGetActiveWindowFunction_Set() error {
	var err error
	applicationGetActiveWindowFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationGetActiveWindowFunction, err = applicationStruct.InvokerNew("get_active_window")
	})
	return err
}

// GetActiveWindow is a representation of the C type gtk_application_get_active_window.
func (recv *Application) GetActiveWindow() *Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := applicationGetActiveWindowFunction_Set()
	if err == nil {
		ret = applicationGetActiveWindowFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_application_get_app_menu' : return type 'Gio.MenuModel' not supported

// UNSUPPORTED : C value 'gtk_application_get_menu_by_id' : return type 'Gio.Menu' not supported

// UNSUPPORTED : C value 'gtk_application_get_menubar' : return type 'Gio.MenuModel' not supported

var applicationGetWindowByIdFunction *gi.Function
var applicationGetWindowByIdFunction_Once sync.Once

func applicationGetWindowByIdFunction_Set() error {
	var err error
	applicationGetWindowByIdFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationGetWindowByIdFunction, err = applicationStruct.InvokerNew("get_window_by_id")
	})
	return err
}

// GetWindowById is a representation of the C type gtk_application_get_window_by_id.
func (recv *Application) GetWindowById(id uint32) *Window {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(id)

	var ret gi.Argument

	err := applicationGetWindowByIdFunction_Set()
	if err == nil {
		ret = applicationGetWindowByIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_application_get_windows' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_application_inhibit' : parameter 'flags' of type 'ApplicationInhibitFlags' not supported

// UNSUPPORTED : C value 'gtk_application_is_inhibited' : parameter 'flags' of type 'ApplicationInhibitFlags' not supported

var applicationListActionDescriptionsFunction *gi.Function
var applicationListActionDescriptionsFunction_Once sync.Once

func applicationListActionDescriptionsFunction_Set() error {
	var err error
	applicationListActionDescriptionsFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationListActionDescriptionsFunction, err = applicationStruct.InvokerNew("list_action_descriptions")
	})
	return err
}

// ListActionDescriptions is a representation of the C type gtk_application_list_action_descriptions.
func (recv *Application) ListActionDescriptions() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := applicationListActionDescriptionsFunction_Set()
	if err == nil {
		applicationListActionDescriptionsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationPrefersAppMenuFunction *gi.Function
var applicationPrefersAppMenuFunction_Once sync.Once

func applicationPrefersAppMenuFunction_Set() error {
	var err error
	applicationPrefersAppMenuFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationPrefersAppMenuFunction, err = applicationStruct.InvokerNew("prefers_app_menu")
	})
	return err
}

// PrefersAppMenu is a representation of the C type gtk_application_prefers_app_menu.
func (recv *Application) PrefersAppMenu() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := applicationPrefersAppMenuFunction_Set()
	if err == nil {
		ret = applicationPrefersAppMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_application_remove_accelerator' : parameter 'parameter' of type 'GLib.Variant' not supported

var applicationRemoveWindowFunction *gi.Function
var applicationRemoveWindowFunction_Once sync.Once

func applicationRemoveWindowFunction_Set() error {
	var err error
	applicationRemoveWindowFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationRemoveWindowFunction, err = applicationStruct.InvokerNew("remove_window")
	})
	return err
}

// RemoveWindow is a representation of the C type gtk_application_remove_window.
func (recv *Application) RemoveWindow(window *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(window.Native)

	err := applicationRemoveWindowFunction_Set()
	if err == nil {
		applicationRemoveWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_application_set_accels_for_action' : parameter 'accels' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_application_set_app_menu' : parameter 'app_menu' of type 'Gio.MenuModel' not supported

// UNSUPPORTED : C value 'gtk_application_set_menubar' : parameter 'menubar' of type 'Gio.MenuModel' not supported

var applicationUninhibitFunction *gi.Function
var applicationUninhibitFunction_Once sync.Once

func applicationUninhibitFunction_Set() error {
	var err error
	applicationUninhibitFunction_Once.Do(func() {
		err = applicationStruct_Set()
		if err != nil {
			return
		}
		applicationUninhibitFunction, err = applicationStruct.InvokerNew("uninhibit")
	})
	return err
}

// Uninhibit is a representation of the C type gtk_application_uninhibit.
func (recv *Application) Uninhibit(cookie uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(cookie)

	err := applicationUninhibitFunction_Set()
	if err == nil {
		applicationUninhibitFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationWindowStruct *gi.Struct
var applicationWindowStruct_Once sync.Once

func applicationWindowStruct_Set() error {
	var err error
	applicationWindowStruct_Once.Do(func() {
		applicationWindowStruct, err = gi.StructNew("Gtk", "ApplicationWindow")
	})
	return err
}

type ApplicationWindow struct {
	Window
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ApplicationWindow) FieldParentInstance() *Window {
	argValue := gi.FieldGet(applicationWindowStruct, recv.Native, "parent_instance")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ApplicationWindow) SetFieldParentInstance(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(applicationWindowStruct, recv.Native, "parent_instance", argValue)
}

var applicationWindowNewFunction *gi.Function
var applicationWindowNewFunction_Once sync.Once

func applicationWindowNewFunction_Set() error {
	var err error
	applicationWindowNewFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowNewFunction, err = applicationWindowStruct.InvokerNew("new")
	})
	return err
}

// ApplicationWindowNew is a representation of the C type gtk_application_window_new.
func ApplicationWindowNew(application *Application) *ApplicationWindow {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(application.Native)

	var ret gi.Argument

	err := applicationWindowNewFunction_Set()
	if err == nil {
		ret = applicationWindowNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ApplicationWindow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var applicationWindowGetHelpOverlayFunction *gi.Function
var applicationWindowGetHelpOverlayFunction_Once sync.Once

func applicationWindowGetHelpOverlayFunction_Set() error {
	var err error
	applicationWindowGetHelpOverlayFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowGetHelpOverlayFunction, err = applicationWindowStruct.InvokerNew("get_help_overlay")
	})
	return err
}

// GetHelpOverlay is a representation of the C type gtk_application_window_get_help_overlay.
func (recv *ApplicationWindow) GetHelpOverlay() *ShortcutsWindow {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := applicationWindowGetHelpOverlayFunction_Set()
	if err == nil {
		ret = applicationWindowGetHelpOverlayFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ShortcutsWindow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var applicationWindowGetIdFunction *gi.Function
var applicationWindowGetIdFunction_Once sync.Once

func applicationWindowGetIdFunction_Set() error {
	var err error
	applicationWindowGetIdFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowGetIdFunction, err = applicationWindowStruct.InvokerNew("get_id")
	})
	return err
}

// GetId is a representation of the C type gtk_application_window_get_id.
func (recv *ApplicationWindow) GetId() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := applicationWindowGetIdFunction_Set()
	if err == nil {
		ret = applicationWindowGetIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var applicationWindowGetShowMenubarFunction *gi.Function
var applicationWindowGetShowMenubarFunction_Once sync.Once

func applicationWindowGetShowMenubarFunction_Set() error {
	var err error
	applicationWindowGetShowMenubarFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowGetShowMenubarFunction, err = applicationWindowStruct.InvokerNew("get_show_menubar")
	})
	return err
}

// GetShowMenubar is a representation of the C type gtk_application_window_get_show_menubar.
func (recv *ApplicationWindow) GetShowMenubar() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := applicationWindowGetShowMenubarFunction_Set()
	if err == nil {
		ret = applicationWindowGetShowMenubarFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var applicationWindowSetHelpOverlayFunction *gi.Function
var applicationWindowSetHelpOverlayFunction_Once sync.Once

func applicationWindowSetHelpOverlayFunction_Set() error {
	var err error
	applicationWindowSetHelpOverlayFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowSetHelpOverlayFunction, err = applicationWindowStruct.InvokerNew("set_help_overlay")
	})
	return err
}

// SetHelpOverlay is a representation of the C type gtk_application_window_set_help_overlay.
func (recv *ApplicationWindow) SetHelpOverlay(helpOverlay *ShortcutsWindow) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(helpOverlay.Native)

	err := applicationWindowSetHelpOverlayFunction_Set()
	if err == nil {
		applicationWindowSetHelpOverlayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var applicationWindowSetShowMenubarFunction *gi.Function
var applicationWindowSetShowMenubarFunction_Once sync.Once

func applicationWindowSetShowMenubarFunction_Set() error {
	var err error
	applicationWindowSetShowMenubarFunction_Once.Do(func() {
		err = applicationWindowStruct_Set()
		if err != nil {
			return
		}
		applicationWindowSetShowMenubarFunction, err = applicationWindowStruct.InvokerNew("set_show_menubar")
	})
	return err
}

// SetShowMenubar is a representation of the C type gtk_application_window_set_show_menubar.
func (recv *ApplicationWindow) SetShowMenubar(showMenubar bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showMenubar)

	err := applicationWindowSetShowMenubarFunction_Set()
	if err == nil {
		applicationWindowSetShowMenubarFunction.Invoke(inArgs[:], nil)
	}

	return
}

var arrowStruct *gi.Struct
var arrowStruct_Once sync.Once

func arrowStruct_Set() error {
	var err error
	arrowStruct_Once.Do(func() {
		arrowStruct, err = gi.StructNew("Gtk", "Arrow")
	})
	return err
}

type Arrow struct {
	Misc
}

// FieldMisc returns the C field 'misc'.
func (recv *Arrow) FieldMisc() *Misc {
	argValue := gi.FieldGet(arrowStruct, recv.Native, "misc")
	value := &Misc{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMisc sets the value of the C field 'misc'.
func (recv *Arrow) SetFieldMisc(value *Misc) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(arrowStruct, recv.Native, "misc", argValue)
}

// UNSUPPORTED : C value 'gtk_arrow_new' : parameter 'arrow_type' of type 'ArrowType' not supported

// UNSUPPORTED : C value 'gtk_arrow_set' : parameter 'arrow_type' of type 'ArrowType' not supported

var arrowAccessibleStruct *gi.Struct
var arrowAccessibleStruct_Once sync.Once

func arrowAccessibleStruct_Set() error {
	var err error
	arrowAccessibleStruct_Once.Do(func() {
		arrowAccessibleStruct, err = gi.StructNew("Gtk", "ArrowAccessible")
	})
	return err
}

type ArrowAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ArrowAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(arrowAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ArrowAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(arrowAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ArrowAccessible) FieldPriv() *ArrowAccessiblePrivate {
	argValue := gi.FieldGet(arrowAccessibleStruct, recv.Native, "priv")
	value := &ArrowAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ArrowAccessible) SetFieldPriv(value *ArrowAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(arrowAccessibleStruct, recv.Native, "priv", argValue)
}

// ArrowAccessibleStruct creates an uninitialised ArrowAccessible.
func ArrowAccessibleStruct() *ArrowAccessible {
	err := arrowAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ArrowAccessible{}
	structGo.Native = arrowAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeArrowAccessible)
	return structGo
}
func finalizeArrowAccessible(obj *ArrowAccessible) {
	arrowAccessibleStruct.Free(obj.Native)
}

var aspectFrameStruct *gi.Struct
var aspectFrameStruct_Once sync.Once

func aspectFrameStruct_Set() error {
	var err error
	aspectFrameStruct_Once.Do(func() {
		aspectFrameStruct, err = gi.StructNew("Gtk", "AspectFrame")
	})
	return err
}

type AspectFrame struct {
	Frame
}

// FieldFrame returns the C field 'frame'.
func (recv *AspectFrame) FieldFrame() *Frame {
	argValue := gi.FieldGet(aspectFrameStruct, recv.Native, "frame")
	value := &Frame{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldFrame sets the value of the C field 'frame'.
func (recv *AspectFrame) SetFieldFrame(value *Frame) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(aspectFrameStruct, recv.Native, "frame", argValue)
}

var aspectFrameNewFunction *gi.Function
var aspectFrameNewFunction_Once sync.Once

func aspectFrameNewFunction_Set() error {
	var err error
	aspectFrameNewFunction_Once.Do(func() {
		err = aspectFrameStruct_Set()
		if err != nil {
			return
		}
		aspectFrameNewFunction, err = aspectFrameStruct.InvokerNew("new")
	})
	return err
}

// AspectFrameNew is a representation of the C type gtk_aspect_frame_new.
func AspectFrameNew(label string, xalign float32, yalign float32, ratio float32, obeyChild bool) *AspectFrame {
	var inArgs [5]gi.Argument
	inArgs[0].SetString(label)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)
	inArgs[3].SetFloat32(ratio)
	inArgs[4].SetBoolean(obeyChild)

	var ret gi.Argument

	err := aspectFrameNewFunction_Set()
	if err == nil {
		ret = aspectFrameNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AspectFrame{}
	retGo.Native = ret.Pointer()

	return retGo
}

var aspectFrameSetFunction *gi.Function
var aspectFrameSetFunction_Once sync.Once

func aspectFrameSetFunction_Set() error {
	var err error
	aspectFrameSetFunction_Once.Do(func() {
		err = aspectFrameStruct_Set()
		if err != nil {
			return
		}
		aspectFrameSetFunction, err = aspectFrameStruct.InvokerNew("set")
	})
	return err
}

// Set is a representation of the C type gtk_aspect_frame_set.
func (recv *AspectFrame) Set(xalign float32, yalign float32, ratio float32, obeyChild bool) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)
	inArgs[3].SetFloat32(ratio)
	inArgs[4].SetBoolean(obeyChild)

	err := aspectFrameSetFunction_Set()
	if err == nil {
		aspectFrameSetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantStruct *gi.Struct
var assistantStruct_Once sync.Once

func assistantStruct_Set() error {
	var err error
	assistantStruct_Once.Do(func() {
		assistantStruct, err = gi.StructNew("Gtk", "Assistant")
	})
	return err
}

type Assistant struct {
	Window
}

// FieldParent returns the C field 'parent'.
func (recv *Assistant) FieldParent() *Window {
	argValue := gi.FieldGet(assistantStruct, recv.Native, "parent")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *Assistant) SetFieldParent(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(assistantStruct, recv.Native, "parent", argValue)
}

var assistantNewFunction *gi.Function
var assistantNewFunction_Once sync.Once

func assistantNewFunction_Set() error {
	var err error
	assistantNewFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantNewFunction, err = assistantStruct.InvokerNew("new")
	})
	return err
}

// AssistantNew is a representation of the C type gtk_assistant_new.
func AssistantNew() *Assistant {

	var ret gi.Argument

	err := assistantNewFunction_Set()
	if err == nil {
		ret = assistantNewFunction.Invoke(nil, nil)
	}

	retGo := &Assistant{}
	retGo.Native = ret.Pointer()

	return retGo
}

var assistantAddActionWidgetFunction *gi.Function
var assistantAddActionWidgetFunction_Once sync.Once

func assistantAddActionWidgetFunction_Set() error {
	var err error
	assistantAddActionWidgetFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantAddActionWidgetFunction, err = assistantStruct.InvokerNew("add_action_widget")
	})
	return err
}

// AddActionWidget is a representation of the C type gtk_assistant_add_action_widget.
func (recv *Assistant) AddActionWidget(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := assistantAddActionWidgetFunction_Set()
	if err == nil {
		assistantAddActionWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantAppendPageFunction *gi.Function
var assistantAppendPageFunction_Once sync.Once

func assistantAppendPageFunction_Set() error {
	var err error
	assistantAppendPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantAppendPageFunction, err = assistantStruct.InvokerNew("append_page")
	})
	return err
}

// AppendPage is a representation of the C type gtk_assistant_append_page.
func (recv *Assistant) AppendPage(page *Widget) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)

	var ret gi.Argument

	err := assistantAppendPageFunction_Set()
	if err == nil {
		ret = assistantAppendPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var assistantCommitFunction *gi.Function
var assistantCommitFunction_Once sync.Once

func assistantCommitFunction_Set() error {
	var err error
	assistantCommitFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantCommitFunction, err = assistantStruct.InvokerNew("commit")
	})
	return err
}

// Commit is a representation of the C type gtk_assistant_commit.
func (recv *Assistant) Commit() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := assistantCommitFunction_Set()
	if err == nil {
		assistantCommitFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantGetCurrentPageFunction *gi.Function
var assistantGetCurrentPageFunction_Once sync.Once

func assistantGetCurrentPageFunction_Set() error {
	var err error
	assistantGetCurrentPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetCurrentPageFunction, err = assistantStruct.InvokerNew("get_current_page")
	})
	return err
}

// GetCurrentPage is a representation of the C type gtk_assistant_get_current_page.
func (recv *Assistant) GetCurrentPage() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := assistantGetCurrentPageFunction_Set()
	if err == nil {
		ret = assistantGetCurrentPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var assistantGetNPagesFunction *gi.Function
var assistantGetNPagesFunction_Once sync.Once

func assistantGetNPagesFunction_Set() error {
	var err error
	assistantGetNPagesFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetNPagesFunction, err = assistantStruct.InvokerNew("get_n_pages")
	})
	return err
}

// GetNPages is a representation of the C type gtk_assistant_get_n_pages.
func (recv *Assistant) GetNPages() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := assistantGetNPagesFunction_Set()
	if err == nil {
		ret = assistantGetNPagesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var assistantGetNthPageFunction *gi.Function
var assistantGetNthPageFunction_Once sync.Once

func assistantGetNthPageFunction_Set() error {
	var err error
	assistantGetNthPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetNthPageFunction, err = assistantStruct.InvokerNew("get_nth_page")
	})
	return err
}

// GetNthPage is a representation of the C type gtk_assistant_get_nth_page.
func (recv *Assistant) GetNthPage(pageNum int32) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	var ret gi.Argument

	err := assistantGetNthPageFunction_Set()
	if err == nil {
		ret = assistantGetNthPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var assistantGetPageCompleteFunction *gi.Function
var assistantGetPageCompleteFunction_Once sync.Once

func assistantGetPageCompleteFunction_Set() error {
	var err error
	assistantGetPageCompleteFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetPageCompleteFunction, err = assistantStruct.InvokerNew("get_page_complete")
	})
	return err
}

// GetPageComplete is a representation of the C type gtk_assistant_get_page_complete.
func (recv *Assistant) GetPageComplete(page *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)

	var ret gi.Argument

	err := assistantGetPageCompleteFunction_Set()
	if err == nil {
		ret = assistantGetPageCompleteFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var assistantGetPageHasPaddingFunction *gi.Function
var assistantGetPageHasPaddingFunction_Once sync.Once

func assistantGetPageHasPaddingFunction_Set() error {
	var err error
	assistantGetPageHasPaddingFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetPageHasPaddingFunction, err = assistantStruct.InvokerNew("get_page_has_padding")
	})
	return err
}

// GetPageHasPadding is a representation of the C type gtk_assistant_get_page_has_padding.
func (recv *Assistant) GetPageHasPadding(page *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)

	var ret gi.Argument

	err := assistantGetPageHasPaddingFunction_Set()
	if err == nil {
		ret = assistantGetPageHasPaddingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_assistant_get_page_header_image' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_assistant_get_page_side_image' : return type 'GdkPixbuf.Pixbuf' not supported

var assistantGetPageTitleFunction *gi.Function
var assistantGetPageTitleFunction_Once sync.Once

func assistantGetPageTitleFunction_Set() error {
	var err error
	assistantGetPageTitleFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantGetPageTitleFunction, err = assistantStruct.InvokerNew("get_page_title")
	})
	return err
}

// GetPageTitle is a representation of the C type gtk_assistant_get_page_title.
func (recv *Assistant) GetPageTitle(page *Widget) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)

	var ret gi.Argument

	err := assistantGetPageTitleFunction_Set()
	if err == nil {
		ret = assistantGetPageTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_assistant_get_page_type' : return type 'AssistantPageType' not supported

var assistantInsertPageFunction *gi.Function
var assistantInsertPageFunction_Once sync.Once

func assistantInsertPageFunction_Set() error {
	var err error
	assistantInsertPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantInsertPageFunction, err = assistantStruct.InvokerNew("insert_page")
	})
	return err
}

// InsertPage is a representation of the C type gtk_assistant_insert_page.
func (recv *Assistant) InsertPage(page *Widget, position int32) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)
	inArgs[2].SetInt32(position)

	var ret gi.Argument

	err := assistantInsertPageFunction_Set()
	if err == nil {
		ret = assistantInsertPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var assistantNextPageFunction *gi.Function
var assistantNextPageFunction_Once sync.Once

func assistantNextPageFunction_Set() error {
	var err error
	assistantNextPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantNextPageFunction, err = assistantStruct.InvokerNew("next_page")
	})
	return err
}

// NextPage is a representation of the C type gtk_assistant_next_page.
func (recv *Assistant) NextPage() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := assistantNextPageFunction_Set()
	if err == nil {
		assistantNextPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantPrependPageFunction *gi.Function
var assistantPrependPageFunction_Once sync.Once

func assistantPrependPageFunction_Set() error {
	var err error
	assistantPrependPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantPrependPageFunction, err = assistantStruct.InvokerNew("prepend_page")
	})
	return err
}

// PrependPage is a representation of the C type gtk_assistant_prepend_page.
func (recv *Assistant) PrependPage(page *Widget) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)

	var ret gi.Argument

	err := assistantPrependPageFunction_Set()
	if err == nil {
		ret = assistantPrependPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var assistantPreviousPageFunction *gi.Function
var assistantPreviousPageFunction_Once sync.Once

func assistantPreviousPageFunction_Set() error {
	var err error
	assistantPreviousPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantPreviousPageFunction, err = assistantStruct.InvokerNew("previous_page")
	})
	return err
}

// PreviousPage is a representation of the C type gtk_assistant_previous_page.
func (recv *Assistant) PreviousPage() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := assistantPreviousPageFunction_Set()
	if err == nil {
		assistantPreviousPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantRemoveActionWidgetFunction *gi.Function
var assistantRemoveActionWidgetFunction_Once sync.Once

func assistantRemoveActionWidgetFunction_Set() error {
	var err error
	assistantRemoveActionWidgetFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantRemoveActionWidgetFunction, err = assistantStruct.InvokerNew("remove_action_widget")
	})
	return err
}

// RemoveActionWidget is a representation of the C type gtk_assistant_remove_action_widget.
func (recv *Assistant) RemoveActionWidget(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := assistantRemoveActionWidgetFunction_Set()
	if err == nil {
		assistantRemoveActionWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantRemovePageFunction *gi.Function
var assistantRemovePageFunction_Once sync.Once

func assistantRemovePageFunction_Set() error {
	var err error
	assistantRemovePageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantRemovePageFunction, err = assistantStruct.InvokerNew("remove_page")
	})
	return err
}

// RemovePage is a representation of the C type gtk_assistant_remove_page.
func (recv *Assistant) RemovePage(pageNum int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	err := assistantRemovePageFunction_Set()
	if err == nil {
		assistantRemovePageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantSetCurrentPageFunction *gi.Function
var assistantSetCurrentPageFunction_Once sync.Once

func assistantSetCurrentPageFunction_Set() error {
	var err error
	assistantSetCurrentPageFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantSetCurrentPageFunction, err = assistantStruct.InvokerNew("set_current_page")
	})
	return err
}

// SetCurrentPage is a representation of the C type gtk_assistant_set_current_page.
func (recv *Assistant) SetCurrentPage(pageNum int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	err := assistantSetCurrentPageFunction_Set()
	if err == nil {
		assistantSetCurrentPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_assistant_set_forward_page_func' : parameter 'page_func' of type 'AssistantPageFunc' not supported

var assistantSetPageCompleteFunction *gi.Function
var assistantSetPageCompleteFunction_Once sync.Once

func assistantSetPageCompleteFunction_Set() error {
	var err error
	assistantSetPageCompleteFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantSetPageCompleteFunction, err = assistantStruct.InvokerNew("set_page_complete")
	})
	return err
}

// SetPageComplete is a representation of the C type gtk_assistant_set_page_complete.
func (recv *Assistant) SetPageComplete(page *Widget, complete bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)
	inArgs[2].SetBoolean(complete)

	err := assistantSetPageCompleteFunction_Set()
	if err == nil {
		assistantSetPageCompleteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var assistantSetPageHasPaddingFunction *gi.Function
var assistantSetPageHasPaddingFunction_Once sync.Once

func assistantSetPageHasPaddingFunction_Set() error {
	var err error
	assistantSetPageHasPaddingFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantSetPageHasPaddingFunction, err = assistantStruct.InvokerNew("set_page_has_padding")
	})
	return err
}

// SetPageHasPadding is a representation of the C type gtk_assistant_set_page_has_padding.
func (recv *Assistant) SetPageHasPadding(page *Widget, hasPadding bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)
	inArgs[2].SetBoolean(hasPadding)

	err := assistantSetPageHasPaddingFunction_Set()
	if err == nil {
		assistantSetPageHasPaddingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_assistant_set_page_header_image' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_assistant_set_page_side_image' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var assistantSetPageTitleFunction *gi.Function
var assistantSetPageTitleFunction_Once sync.Once

func assistantSetPageTitleFunction_Set() error {
	var err error
	assistantSetPageTitleFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantSetPageTitleFunction, err = assistantStruct.InvokerNew("set_page_title")
	})
	return err
}

// SetPageTitle is a representation of the C type gtk_assistant_set_page_title.
func (recv *Assistant) SetPageTitle(page *Widget, title string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(page.Native)
	inArgs[2].SetString(title)

	err := assistantSetPageTitleFunction_Set()
	if err == nil {
		assistantSetPageTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_assistant_set_page_type' : parameter 'type' of type 'AssistantPageType' not supported

var assistantUpdateButtonsStateFunction *gi.Function
var assistantUpdateButtonsStateFunction_Once sync.Once

func assistantUpdateButtonsStateFunction_Set() error {
	var err error
	assistantUpdateButtonsStateFunction_Once.Do(func() {
		err = assistantStruct_Set()
		if err != nil {
			return
		}
		assistantUpdateButtonsStateFunction, err = assistantStruct.InvokerNew("update_buttons_state")
	})
	return err
}

// UpdateButtonsState is a representation of the C type gtk_assistant_update_buttons_state.
func (recv *Assistant) UpdateButtonsState() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := assistantUpdateButtonsStateFunction_Set()
	if err == nil {
		assistantUpdateButtonsStateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var binStruct *gi.Struct
var binStruct_Once sync.Once

func binStruct_Set() error {
	var err error
	binStruct_Once.Do(func() {
		binStruct, err = gi.StructNew("Gtk", "Bin")
	})
	return err
}

type Bin struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Bin) FieldContainer() *Container {
	argValue := gi.FieldGet(binStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Bin) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(binStruct, recv.Native, "container", argValue)
}

var binGetChildFunction *gi.Function
var binGetChildFunction_Once sync.Once

func binGetChildFunction_Set() error {
	var err error
	binGetChildFunction_Once.Do(func() {
		err = binStruct_Set()
		if err != nil {
			return
		}
		binGetChildFunction, err = binStruct.InvokerNew("get_child")
	})
	return err
}

// GetChild is a representation of the C type gtk_bin_get_child.
func (recv *Bin) GetChild() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := binGetChildFunction_Set()
	if err == nil {
		ret = binGetChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// BinStruct creates an uninitialised Bin.
func BinStruct() *Bin {
	err := binStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Bin{}
	structGo.Native = binStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeBin)
	return structGo
}
func finalizeBin(obj *Bin) {
	binStruct.Free(obj.Native)
}

var booleanCellAccessibleStruct *gi.Struct
var booleanCellAccessibleStruct_Once sync.Once

func booleanCellAccessibleStruct_Set() error {
	var err error
	booleanCellAccessibleStruct_Once.Do(func() {
		booleanCellAccessibleStruct, err = gi.StructNew("Gtk", "BooleanCellAccessible")
	})
	return err
}

type BooleanCellAccessible struct {
	RendererCellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *BooleanCellAccessible) FieldParent() *RendererCellAccessible {
	argValue := gi.FieldGet(booleanCellAccessibleStruct, recv.Native, "parent")
	value := &RendererCellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *BooleanCellAccessible) SetFieldParent(value *RendererCellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(booleanCellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *BooleanCellAccessible) FieldPriv() *BooleanCellAccessiblePrivate {
	argValue := gi.FieldGet(booleanCellAccessibleStruct, recv.Native, "priv")
	value := &BooleanCellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *BooleanCellAccessible) SetFieldPriv(value *BooleanCellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(booleanCellAccessibleStruct, recv.Native, "priv", argValue)
}

// BooleanCellAccessibleStruct creates an uninitialised BooleanCellAccessible.
func BooleanCellAccessibleStruct() *BooleanCellAccessible {
	err := booleanCellAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &BooleanCellAccessible{}
	structGo.Native = booleanCellAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeBooleanCellAccessible)
	return structGo
}
func finalizeBooleanCellAccessible(obj *BooleanCellAccessible) {
	booleanCellAccessibleStruct.Free(obj.Native)
}

var boxStruct *gi.Struct
var boxStruct_Once sync.Once

func boxStruct_Set() error {
	var err error
	boxStruct_Once.Do(func() {
		boxStruct, err = gi.StructNew("Gtk", "Box")
	})
	return err
}

type Box struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Box) FieldContainer() *Container {
	argValue := gi.FieldGet(boxStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Box) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(boxStruct, recv.Native, "container", argValue)
}

// UNSUPPORTED : C value 'gtk_box_new' : parameter 'orientation' of type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_box_get_baseline_position' : return type 'BaselinePosition' not supported

var boxGetCenterWidgetFunction *gi.Function
var boxGetCenterWidgetFunction_Once sync.Once

func boxGetCenterWidgetFunction_Set() error {
	var err error
	boxGetCenterWidgetFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxGetCenterWidgetFunction, err = boxStruct.InvokerNew("get_center_widget")
	})
	return err
}

// GetCenterWidget is a representation of the C type gtk_box_get_center_widget.
func (recv *Box) GetCenterWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := boxGetCenterWidgetFunction_Set()
	if err == nil {
		ret = boxGetCenterWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var boxGetHomogeneousFunction *gi.Function
var boxGetHomogeneousFunction_Once sync.Once

func boxGetHomogeneousFunction_Set() error {
	var err error
	boxGetHomogeneousFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxGetHomogeneousFunction, err = boxStruct.InvokerNew("get_homogeneous")
	})
	return err
}

// GetHomogeneous is a representation of the C type gtk_box_get_homogeneous.
func (recv *Box) GetHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := boxGetHomogeneousFunction_Set()
	if err == nil {
		ret = boxGetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var boxGetSpacingFunction *gi.Function
var boxGetSpacingFunction_Once sync.Once

func boxGetSpacingFunction_Set() error {
	var err error
	boxGetSpacingFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxGetSpacingFunction, err = boxStruct.InvokerNew("get_spacing")
	})
	return err
}

// GetSpacing is a representation of the C type gtk_box_get_spacing.
func (recv *Box) GetSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := boxGetSpacingFunction_Set()
	if err == nil {
		ret = boxGetSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var boxPackEndFunction *gi.Function
var boxPackEndFunction_Once sync.Once

func boxPackEndFunction_Set() error {
	var err error
	boxPackEndFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxPackEndFunction, err = boxStruct.InvokerNew("pack_end")
	})
	return err
}

// PackEnd is a representation of the C type gtk_box_pack_end.
func (recv *Box) PackEnd(child *Widget, expand bool, fill bool, padding uint32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(expand)
	inArgs[3].SetBoolean(fill)
	inArgs[4].SetUint32(padding)

	err := boxPackEndFunction_Set()
	if err == nil {
		boxPackEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var boxPackStartFunction *gi.Function
var boxPackStartFunction_Once sync.Once

func boxPackStartFunction_Set() error {
	var err error
	boxPackStartFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxPackStartFunction, err = boxStruct.InvokerNew("pack_start")
	})
	return err
}

// PackStart is a representation of the C type gtk_box_pack_start.
func (recv *Box) PackStart(child *Widget, expand bool, fill bool, padding uint32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(expand)
	inArgs[3].SetBoolean(fill)
	inArgs[4].SetUint32(padding)

	err := boxPackStartFunction_Set()
	if err == nil {
		boxPackStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_box_query_child_packing' : parameter 'pack_type' of type 'PackType' not supported

var boxReorderChildFunction *gi.Function
var boxReorderChildFunction_Once sync.Once

func boxReorderChildFunction_Set() error {
	var err error
	boxReorderChildFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxReorderChildFunction, err = boxStruct.InvokerNew("reorder_child")
	})
	return err
}

// ReorderChild is a representation of the C type gtk_box_reorder_child.
func (recv *Box) ReorderChild(child *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(position)

	err := boxReorderChildFunction_Set()
	if err == nil {
		boxReorderChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_box_set_baseline_position' : parameter 'position' of type 'BaselinePosition' not supported

var boxSetCenterWidgetFunction *gi.Function
var boxSetCenterWidgetFunction_Once sync.Once

func boxSetCenterWidgetFunction_Set() error {
	var err error
	boxSetCenterWidgetFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxSetCenterWidgetFunction, err = boxStruct.InvokerNew("set_center_widget")
	})
	return err
}

// SetCenterWidget is a representation of the C type gtk_box_set_center_widget.
func (recv *Box) SetCenterWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := boxSetCenterWidgetFunction_Set()
	if err == nil {
		boxSetCenterWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_box_set_child_packing' : parameter 'pack_type' of type 'PackType' not supported

var boxSetHomogeneousFunction *gi.Function
var boxSetHomogeneousFunction_Once sync.Once

func boxSetHomogeneousFunction_Set() error {
	var err error
	boxSetHomogeneousFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxSetHomogeneousFunction, err = boxStruct.InvokerNew("set_homogeneous")
	})
	return err
}

// SetHomogeneous is a representation of the C type gtk_box_set_homogeneous.
func (recv *Box) SetHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := boxSetHomogeneousFunction_Set()
	if err == nil {
		boxSetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var boxSetSpacingFunction *gi.Function
var boxSetSpacingFunction_Once sync.Once

func boxSetSpacingFunction_Set() error {
	var err error
	boxSetSpacingFunction_Once.Do(func() {
		err = boxStruct_Set()
		if err != nil {
			return
		}
		boxSetSpacingFunction, err = boxStruct.InvokerNew("set_spacing")
	})
	return err
}

// SetSpacing is a representation of the C type gtk_box_set_spacing.
func (recv *Box) SetSpacing(spacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(spacing)

	err := boxSetSpacingFunction_Set()
	if err == nil {
		boxSetSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var builderStruct *gi.Struct
var builderStruct_Once sync.Once

func builderStruct_Set() error {
	var err error
	builderStruct_Once.Do(func() {
		builderStruct, err = gi.StructNew("Gtk", "Builder")
	})
	return err
}

type Builder struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *Builder) FieldPriv() *BuilderPrivate {
	argValue := gi.FieldGet(builderStruct, recv.Native, "priv")
	value := &BuilderPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Builder) SetFieldPriv(value *BuilderPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(builderStruct, recv.Native, "priv", argValue)
}

var builderNewFunction *gi.Function
var builderNewFunction_Once sync.Once

func builderNewFunction_Set() error {
	var err error
	builderNewFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderNewFunction, err = builderStruct.InvokerNew("new")
	})
	return err
}

// BuilderNew is a representation of the C type gtk_builder_new.
func BuilderNew() *Builder {

	var ret gi.Argument

	err := builderNewFunction_Set()
	if err == nil {
		ret = builderNewFunction.Invoke(nil, nil)
	}

	retGo := &Builder{}
	retGo.Native = ret.Pointer()

	return retGo
}

var builderNewFromFileFunction *gi.Function
var builderNewFromFileFunction_Once sync.Once

func builderNewFromFileFunction_Set() error {
	var err error
	builderNewFromFileFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderNewFromFileFunction, err = builderStruct.InvokerNew("new_from_file")
	})
	return err
}

// BuilderNewFromFile is a representation of the C type gtk_builder_new_from_file.
func BuilderNewFromFile(filename string) *Builder {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(filename)

	var ret gi.Argument

	err := builderNewFromFileFunction_Set()
	if err == nil {
		ret = builderNewFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Builder{}
	retGo.Native = ret.Pointer()

	return retGo
}

var builderNewFromResourceFunction *gi.Function
var builderNewFromResourceFunction_Once sync.Once

func builderNewFromResourceFunction_Set() error {
	var err error
	builderNewFromResourceFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderNewFromResourceFunction, err = builderStruct.InvokerNew("new_from_resource")
	})
	return err
}

// BuilderNewFromResource is a representation of the C type gtk_builder_new_from_resource.
func BuilderNewFromResource(resourcePath string) *Builder {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(resourcePath)

	var ret gi.Argument

	err := builderNewFromResourceFunction_Set()
	if err == nil {
		ret = builderNewFromResourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Builder{}
	retGo.Native = ret.Pointer()

	return retGo
}

var builderNewFromStringFunction *gi.Function
var builderNewFromStringFunction_Once sync.Once

func builderNewFromStringFunction_Set() error {
	var err error
	builderNewFromStringFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderNewFromStringFunction, err = builderStruct.InvokerNew("new_from_string")
	})
	return err
}

// BuilderNewFromString is a representation of the C type gtk_builder_new_from_string.
func BuilderNewFromString(string_ string, length int32) *Builder {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(string_)
	inArgs[1].SetInt32(length)

	var ret gi.Argument

	err := builderNewFromStringFunction_Set()
	if err == nil {
		ret = builderNewFromStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Builder{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_builder_add_callback_symbol' : parameter 'callback_symbol' of type 'GObject.Callback' not supported

// UNSUPPORTED : C value 'gtk_builder_add_callback_symbols' : parameter 'first_callback_symbol' of type 'GObject.Callback' not supported

var builderAddFromFileFunction *gi.Function
var builderAddFromFileFunction_Once sync.Once

func builderAddFromFileFunction_Set() error {
	var err error
	builderAddFromFileFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderAddFromFileFunction, err = builderStruct.InvokerNew("add_from_file")
	})
	return err
}

// AddFromFile is a representation of the C type gtk_builder_add_from_file.
func (recv *Builder) AddFromFile(filename string) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	var ret gi.Argument

	err := builderAddFromFileFunction_Set()
	if err == nil {
		ret = builderAddFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var builderAddFromResourceFunction *gi.Function
var builderAddFromResourceFunction_Once sync.Once

func builderAddFromResourceFunction_Set() error {
	var err error
	builderAddFromResourceFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderAddFromResourceFunction, err = builderStruct.InvokerNew("add_from_resource")
	})
	return err
}

// AddFromResource is a representation of the C type gtk_builder_add_from_resource.
func (recv *Builder) AddFromResource(resourcePath string) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(resourcePath)

	var ret gi.Argument

	err := builderAddFromResourceFunction_Set()
	if err == nil {
		ret = builderAddFromResourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var builderAddFromStringFunction *gi.Function
var builderAddFromStringFunction_Once sync.Once

func builderAddFromStringFunction_Set() error {
	var err error
	builderAddFromStringFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderAddFromStringFunction, err = builderStruct.InvokerNew("add_from_string")
	})
	return err
}

// AddFromString is a representation of the C type gtk_builder_add_from_string.
func (recv *Builder) AddFromString(buffer string, length uint64) uint32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(buffer)
	inArgs[2].SetUint64(length)

	var ret gi.Argument

	err := builderAddFromStringFunction_Set()
	if err == nil {
		ret = builderAddFromStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_builder_add_objects_from_file' : parameter 'object_ids' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_builder_add_objects_from_resource' : parameter 'object_ids' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_builder_add_objects_from_string' : parameter 'object_ids' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_builder_connect_signals' : parameter 'user_data' of type 'gpointer' not supported

// UNSUPPORTED : C value 'gtk_builder_connect_signals_full' : parameter 'func' of type 'BuilderConnectFunc' not supported

// UNSUPPORTED : C value 'gtk_builder_expose_object' : parameter 'object' of type 'GObject.Object' not supported

// UNSUPPORTED : C value 'gtk_builder_extend_with_template' : parameter 'template_type' of type 'GType' not supported

var builderGetApplicationFunction *gi.Function
var builderGetApplicationFunction_Once sync.Once

func builderGetApplicationFunction_Set() error {
	var err error
	builderGetApplicationFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderGetApplicationFunction, err = builderStruct.InvokerNew("get_application")
	})
	return err
}

// GetApplication is a representation of the C type gtk_builder_get_application.
func (recv *Builder) GetApplication() *Application {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := builderGetApplicationFunction_Set()
	if err == nil {
		ret = builderGetApplicationFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Application{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_builder_get_object' : return type 'GObject.Object' not supported

// UNSUPPORTED : C value 'gtk_builder_get_objects' : return type 'GLib.SList' not supported

var builderGetTranslationDomainFunction *gi.Function
var builderGetTranslationDomainFunction_Once sync.Once

func builderGetTranslationDomainFunction_Set() error {
	var err error
	builderGetTranslationDomainFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderGetTranslationDomainFunction, err = builderStruct.InvokerNew("get_translation_domain")
	})
	return err
}

// GetTranslationDomain is a representation of the C type gtk_builder_get_translation_domain.
func (recv *Builder) GetTranslationDomain() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := builderGetTranslationDomainFunction_Set()
	if err == nil {
		ret = builderGetTranslationDomainFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_builder_get_type_from_name' : return type 'GType' not supported

// UNSUPPORTED : C value 'gtk_builder_lookup_callback_symbol' : return type 'GObject.Callback' not supported

var builderSetApplicationFunction *gi.Function
var builderSetApplicationFunction_Once sync.Once

func builderSetApplicationFunction_Set() error {
	var err error
	builderSetApplicationFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderSetApplicationFunction, err = builderStruct.InvokerNew("set_application")
	})
	return err
}

// SetApplication is a representation of the C type gtk_builder_set_application.
func (recv *Builder) SetApplication(application *Application) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(application.Native)

	err := builderSetApplicationFunction_Set()
	if err == nil {
		builderSetApplicationFunction.Invoke(inArgs[:], nil)
	}

	return
}

var builderSetTranslationDomainFunction *gi.Function
var builderSetTranslationDomainFunction_Once sync.Once

func builderSetTranslationDomainFunction_Set() error {
	var err error
	builderSetTranslationDomainFunction_Once.Do(func() {
		err = builderStruct_Set()
		if err != nil {
			return
		}
		builderSetTranslationDomainFunction, err = builderStruct.InvokerNew("set_translation_domain")
	})
	return err
}

// SetTranslationDomain is a representation of the C type gtk_builder_set_translation_domain.
func (recv *Builder) SetTranslationDomain(domain string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(domain)

	err := builderSetTranslationDomainFunction_Set()
	if err == nil {
		builderSetTranslationDomainFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_builder_value_from_string' : parameter 'pspec' of type 'GObject.ParamSpec' not supported

// UNSUPPORTED : C value 'gtk_builder_value_from_string_type' : parameter 'type' of type 'GType' not supported

var buttonStruct *gi.Struct
var buttonStruct_Once sync.Once

func buttonStruct_Set() error {
	var err error
	buttonStruct_Once.Do(func() {
		buttonStruct, err = gi.StructNew("Gtk", "Button")
	})
	return err
}

type Button struct {
	Bin
}

var buttonNewFunction *gi.Function
var buttonNewFunction_Once sync.Once

func buttonNewFunction_Set() error {
	var err error
	buttonNewFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonNewFunction, err = buttonStruct.InvokerNew("new")
	})
	return err
}

// ButtonNew is a representation of the C type gtk_button_new.
func ButtonNew() *Button {

	var ret gi.Argument

	err := buttonNewFunction_Set()
	if err == nil {
		ret = buttonNewFunction.Invoke(nil, nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_button_new_from_icon_name' : parameter 'size' of type 'IconSize' not supported

var buttonNewFromStockFunction *gi.Function
var buttonNewFromStockFunction_Once sync.Once

func buttonNewFromStockFunction_Set() error {
	var err error
	buttonNewFromStockFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonNewFromStockFunction, err = buttonStruct.InvokerNew("new_from_stock")
	})
	return err
}

// ButtonNewFromStock is a representation of the C type gtk_button_new_from_stock.
func ButtonNewFromStock(stockId string) *Button {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(stockId)

	var ret gi.Argument

	err := buttonNewFromStockFunction_Set()
	if err == nil {
		ret = buttonNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

var buttonNewWithLabelFunction *gi.Function
var buttonNewWithLabelFunction_Once sync.Once

func buttonNewWithLabelFunction_Set() error {
	var err error
	buttonNewWithLabelFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonNewWithLabelFunction, err = buttonStruct.InvokerNew("new_with_label")
	})
	return err
}

// ButtonNewWithLabel is a representation of the C type gtk_button_new_with_label.
func ButtonNewWithLabel(label string) *Button {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := buttonNewWithLabelFunction_Set()
	if err == nil {
		ret = buttonNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

var buttonNewWithMnemonicFunction *gi.Function
var buttonNewWithMnemonicFunction_Once sync.Once

func buttonNewWithMnemonicFunction_Set() error {
	var err error
	buttonNewWithMnemonicFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonNewWithMnemonicFunction, err = buttonStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// ButtonNewWithMnemonic is a representation of the C type gtk_button_new_with_mnemonic.
func ButtonNewWithMnemonic(label string) *Button {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := buttonNewWithMnemonicFunction_Set()
	if err == nil {
		ret = buttonNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

var buttonClickedFunction *gi.Function
var buttonClickedFunction_Once sync.Once

func buttonClickedFunction_Set() error {
	var err error
	buttonClickedFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonClickedFunction, err = buttonStruct.InvokerNew("clicked")
	})
	return err
}

// Clicked is a representation of the C type gtk_button_clicked.
func (recv *Button) Clicked() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := buttonClickedFunction_Set()
	if err == nil {
		buttonClickedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonEnterFunction *gi.Function
var buttonEnterFunction_Once sync.Once

func buttonEnterFunction_Set() error {
	var err error
	buttonEnterFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonEnterFunction, err = buttonStruct.InvokerNew("enter")
	})
	return err
}

// Enter is a representation of the C type gtk_button_enter.
func (recv *Button) Enter() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := buttonEnterFunction_Set()
	if err == nil {
		buttonEnterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonGetAlignmentFunction *gi.Function
var buttonGetAlignmentFunction_Once sync.Once

func buttonGetAlignmentFunction_Set() error {
	var err error
	buttonGetAlignmentFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetAlignmentFunction, err = buttonStruct.InvokerNew("get_alignment")
	})
	return err
}

// GetAlignment is a representation of the C type gtk_button_get_alignment.
func (recv *Button) GetAlignment() (float32, float32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := buttonGetAlignmentFunction_Set()
	if err == nil {
		buttonGetAlignmentFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float32()
	out1 := outArgs[1].Float32()

	return out0, out1
}

var buttonGetAlwaysShowImageFunction *gi.Function
var buttonGetAlwaysShowImageFunction_Once sync.Once

func buttonGetAlwaysShowImageFunction_Set() error {
	var err error
	buttonGetAlwaysShowImageFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetAlwaysShowImageFunction, err = buttonStruct.InvokerNew("get_always_show_image")
	})
	return err
}

// GetAlwaysShowImage is a representation of the C type gtk_button_get_always_show_image.
func (recv *Button) GetAlwaysShowImage() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetAlwaysShowImageFunction_Set()
	if err == nil {
		ret = buttonGetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_button_get_event_window' : return type 'Gdk.Window' not supported

var buttonGetFocusOnClickFunction *gi.Function
var buttonGetFocusOnClickFunction_Once sync.Once

func buttonGetFocusOnClickFunction_Set() error {
	var err error
	buttonGetFocusOnClickFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetFocusOnClickFunction, err = buttonStruct.InvokerNew("get_focus_on_click")
	})
	return err
}

// GetFocusOnClick is a representation of the C type gtk_button_get_focus_on_click.
func (recv *Button) GetFocusOnClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetFocusOnClickFunction_Set()
	if err == nil {
		ret = buttonGetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var buttonGetImageFunction *gi.Function
var buttonGetImageFunction_Once sync.Once

func buttonGetImageFunction_Set() error {
	var err error
	buttonGetImageFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetImageFunction, err = buttonStruct.InvokerNew("get_image")
	})
	return err
}

// GetImage is a representation of the C type gtk_button_get_image.
func (recv *Button) GetImage() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetImageFunction_Set()
	if err == nil {
		ret = buttonGetImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_button_get_image_position' : return type 'PositionType' not supported

var buttonGetLabelFunction *gi.Function
var buttonGetLabelFunction_Once sync.Once

func buttonGetLabelFunction_Set() error {
	var err error
	buttonGetLabelFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetLabelFunction, err = buttonStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_button_get_label.
func (recv *Button) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetLabelFunction_Set()
	if err == nil {
		ret = buttonGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_button_get_relief' : return type 'ReliefStyle' not supported

var buttonGetUseStockFunction *gi.Function
var buttonGetUseStockFunction_Once sync.Once

func buttonGetUseStockFunction_Set() error {
	var err error
	buttonGetUseStockFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetUseStockFunction, err = buttonStruct.InvokerNew("get_use_stock")
	})
	return err
}

// GetUseStock is a representation of the C type gtk_button_get_use_stock.
func (recv *Button) GetUseStock() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetUseStockFunction_Set()
	if err == nil {
		ret = buttonGetUseStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var buttonGetUseUnderlineFunction *gi.Function
var buttonGetUseUnderlineFunction_Once sync.Once

func buttonGetUseUnderlineFunction_Set() error {
	var err error
	buttonGetUseUnderlineFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonGetUseUnderlineFunction, err = buttonStruct.InvokerNew("get_use_underline")
	})
	return err
}

// GetUseUnderline is a representation of the C type gtk_button_get_use_underline.
func (recv *Button) GetUseUnderline() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := buttonGetUseUnderlineFunction_Set()
	if err == nil {
		ret = buttonGetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var buttonLeaveFunction *gi.Function
var buttonLeaveFunction_Once sync.Once

func buttonLeaveFunction_Set() error {
	var err error
	buttonLeaveFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonLeaveFunction, err = buttonStruct.InvokerNew("leave")
	})
	return err
}

// Leave is a representation of the C type gtk_button_leave.
func (recv *Button) Leave() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := buttonLeaveFunction_Set()
	if err == nil {
		buttonLeaveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonPressedFunction *gi.Function
var buttonPressedFunction_Once sync.Once

func buttonPressedFunction_Set() error {
	var err error
	buttonPressedFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonPressedFunction, err = buttonStruct.InvokerNew("pressed")
	})
	return err
}

// Pressed is a representation of the C type gtk_button_pressed.
func (recv *Button) Pressed() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := buttonPressedFunction_Set()
	if err == nil {
		buttonPressedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonReleasedFunction *gi.Function
var buttonReleasedFunction_Once sync.Once

func buttonReleasedFunction_Set() error {
	var err error
	buttonReleasedFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonReleasedFunction, err = buttonStruct.InvokerNew("released")
	})
	return err
}

// Released is a representation of the C type gtk_button_released.
func (recv *Button) Released() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := buttonReleasedFunction_Set()
	if err == nil {
		buttonReleasedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonSetAlignmentFunction *gi.Function
var buttonSetAlignmentFunction_Once sync.Once

func buttonSetAlignmentFunction_Set() error {
	var err error
	buttonSetAlignmentFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetAlignmentFunction, err = buttonStruct.InvokerNew("set_alignment")
	})
	return err
}

// SetAlignment is a representation of the C type gtk_button_set_alignment.
func (recv *Button) SetAlignment(xalign float32, yalign float32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)

	err := buttonSetAlignmentFunction_Set()
	if err == nil {
		buttonSetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonSetAlwaysShowImageFunction *gi.Function
var buttonSetAlwaysShowImageFunction_Once sync.Once

func buttonSetAlwaysShowImageFunction_Set() error {
	var err error
	buttonSetAlwaysShowImageFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetAlwaysShowImageFunction, err = buttonStruct.InvokerNew("set_always_show_image")
	})
	return err
}

// SetAlwaysShowImage is a representation of the C type gtk_button_set_always_show_image.
func (recv *Button) SetAlwaysShowImage(alwaysShow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(alwaysShow)

	err := buttonSetAlwaysShowImageFunction_Set()
	if err == nil {
		buttonSetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonSetFocusOnClickFunction *gi.Function
var buttonSetFocusOnClickFunction_Once sync.Once

func buttonSetFocusOnClickFunction_Set() error {
	var err error
	buttonSetFocusOnClickFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetFocusOnClickFunction, err = buttonStruct.InvokerNew("set_focus_on_click")
	})
	return err
}

// SetFocusOnClick is a representation of the C type gtk_button_set_focus_on_click.
func (recv *Button) SetFocusOnClick(focusOnClick bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(focusOnClick)

	err := buttonSetFocusOnClickFunction_Set()
	if err == nil {
		buttonSetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonSetImageFunction *gi.Function
var buttonSetImageFunction_Once sync.Once

func buttonSetImageFunction_Set() error {
	var err error
	buttonSetImageFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetImageFunction, err = buttonStruct.InvokerNew("set_image")
	})
	return err
}

// SetImage is a representation of the C type gtk_button_set_image.
func (recv *Button) SetImage(image *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(image.Native)

	err := buttonSetImageFunction_Set()
	if err == nil {
		buttonSetImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_button_set_image_position' : parameter 'position' of type 'PositionType' not supported

var buttonSetLabelFunction *gi.Function
var buttonSetLabelFunction_Once sync.Once

func buttonSetLabelFunction_Set() error {
	var err error
	buttonSetLabelFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetLabelFunction, err = buttonStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_button_set_label.
func (recv *Button) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := buttonSetLabelFunction_Set()
	if err == nil {
		buttonSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_button_set_relief' : parameter 'relief' of type 'ReliefStyle' not supported

var buttonSetUseStockFunction *gi.Function
var buttonSetUseStockFunction_Once sync.Once

func buttonSetUseStockFunction_Set() error {
	var err error
	buttonSetUseStockFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetUseStockFunction, err = buttonStruct.InvokerNew("set_use_stock")
	})
	return err
}

// SetUseStock is a representation of the C type gtk_button_set_use_stock.
func (recv *Button) SetUseStock(useStock bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useStock)

	err := buttonSetUseStockFunction_Set()
	if err == nil {
		buttonSetUseStockFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonSetUseUnderlineFunction *gi.Function
var buttonSetUseUnderlineFunction_Once sync.Once

func buttonSetUseUnderlineFunction_Set() error {
	var err error
	buttonSetUseUnderlineFunction_Once.Do(func() {
		err = buttonStruct_Set()
		if err != nil {
			return
		}
		buttonSetUseUnderlineFunction, err = buttonStruct.InvokerNew("set_use_underline")
	})
	return err
}

// SetUseUnderline is a representation of the C type gtk_button_set_use_underline.
func (recv *Button) SetUseUnderline(useUnderline bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useUnderline)

	err := buttonSetUseUnderlineFunction_Set()
	if err == nil {
		buttonSetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonAccessibleStruct *gi.Struct
var buttonAccessibleStruct_Once sync.Once

func buttonAccessibleStruct_Set() error {
	var err error
	buttonAccessibleStruct_Once.Do(func() {
		buttonAccessibleStruct, err = gi.StructNew("Gtk", "ButtonAccessible")
	})
	return err
}

type ButtonAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ButtonAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(buttonAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ButtonAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(buttonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ButtonAccessible) FieldPriv() *ButtonAccessiblePrivate {
	argValue := gi.FieldGet(buttonAccessibleStruct, recv.Native, "priv")
	value := &ButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ButtonAccessible) SetFieldPriv(value *ButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(buttonAccessibleStruct, recv.Native, "priv", argValue)
}

// ButtonAccessibleStruct creates an uninitialised ButtonAccessible.
func ButtonAccessibleStruct() *ButtonAccessible {
	err := buttonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ButtonAccessible{}
	structGo.Native = buttonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeButtonAccessible)
	return structGo
}
func finalizeButtonAccessible(obj *ButtonAccessible) {
	buttonAccessibleStruct.Free(obj.Native)
}

var buttonBoxStruct *gi.Struct
var buttonBoxStruct_Once sync.Once

func buttonBoxStruct_Set() error {
	var err error
	buttonBoxStruct_Once.Do(func() {
		buttonBoxStruct, err = gi.StructNew("Gtk", "ButtonBox")
	})
	return err
}

type ButtonBox struct {
	Box
}

// FieldBox returns the C field 'box'.
func (recv *ButtonBox) FieldBox() *Box {
	argValue := gi.FieldGet(buttonBoxStruct, recv.Native, "box")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBox sets the value of the C field 'box'.
func (recv *ButtonBox) SetFieldBox(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(buttonBoxStruct, recv.Native, "box", argValue)
}

// UNSUPPORTED : C value 'gtk_button_box_new' : parameter 'orientation' of type 'Orientation' not supported

var buttonBoxGetChildNonHomogeneousFunction *gi.Function
var buttonBoxGetChildNonHomogeneousFunction_Once sync.Once

func buttonBoxGetChildNonHomogeneousFunction_Set() error {
	var err error
	buttonBoxGetChildNonHomogeneousFunction_Once.Do(func() {
		err = buttonBoxStruct_Set()
		if err != nil {
			return
		}
		buttonBoxGetChildNonHomogeneousFunction, err = buttonBoxStruct.InvokerNew("get_child_non_homogeneous")
	})
	return err
}

// GetChildNonHomogeneous is a representation of the C type gtk_button_box_get_child_non_homogeneous.
func (recv *ButtonBox) GetChildNonHomogeneous(child *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := buttonBoxGetChildNonHomogeneousFunction_Set()
	if err == nil {
		ret = buttonBoxGetChildNonHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var buttonBoxGetChildSecondaryFunction *gi.Function
var buttonBoxGetChildSecondaryFunction_Once sync.Once

func buttonBoxGetChildSecondaryFunction_Set() error {
	var err error
	buttonBoxGetChildSecondaryFunction_Once.Do(func() {
		err = buttonBoxStruct_Set()
		if err != nil {
			return
		}
		buttonBoxGetChildSecondaryFunction, err = buttonBoxStruct.InvokerNew("get_child_secondary")
	})
	return err
}

// GetChildSecondary is a representation of the C type gtk_button_box_get_child_secondary.
func (recv *ButtonBox) GetChildSecondary(child *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := buttonBoxGetChildSecondaryFunction_Set()
	if err == nil {
		ret = buttonBoxGetChildSecondaryFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_button_box_get_layout' : return type 'ButtonBoxStyle' not supported

var buttonBoxSetChildNonHomogeneousFunction *gi.Function
var buttonBoxSetChildNonHomogeneousFunction_Once sync.Once

func buttonBoxSetChildNonHomogeneousFunction_Set() error {
	var err error
	buttonBoxSetChildNonHomogeneousFunction_Once.Do(func() {
		err = buttonBoxStruct_Set()
		if err != nil {
			return
		}
		buttonBoxSetChildNonHomogeneousFunction, err = buttonBoxStruct.InvokerNew("set_child_non_homogeneous")
	})
	return err
}

// SetChildNonHomogeneous is a representation of the C type gtk_button_box_set_child_non_homogeneous.
func (recv *ButtonBox) SetChildNonHomogeneous(child *Widget, nonHomogeneous bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(nonHomogeneous)

	err := buttonBoxSetChildNonHomogeneousFunction_Set()
	if err == nil {
		buttonBoxSetChildNonHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var buttonBoxSetChildSecondaryFunction *gi.Function
var buttonBoxSetChildSecondaryFunction_Once sync.Once

func buttonBoxSetChildSecondaryFunction_Set() error {
	var err error
	buttonBoxSetChildSecondaryFunction_Once.Do(func() {
		err = buttonBoxStruct_Set()
		if err != nil {
			return
		}
		buttonBoxSetChildSecondaryFunction, err = buttonBoxStruct.InvokerNew("set_child_secondary")
	})
	return err
}

// SetChildSecondary is a representation of the C type gtk_button_box_set_child_secondary.
func (recv *ButtonBox) SetChildSecondary(child *Widget, isSecondary bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(isSecondary)

	err := buttonBoxSetChildSecondaryFunction_Set()
	if err == nil {
		buttonBoxSetChildSecondaryFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_button_box_set_layout' : parameter 'layout_style' of type 'ButtonBoxStyle' not supported

var calendarStruct *gi.Struct
var calendarStruct_Once sync.Once

func calendarStruct_Set() error {
	var err error
	calendarStruct_Once.Do(func() {
		calendarStruct, err = gi.StructNew("Gtk", "Calendar")
	})
	return err
}

type Calendar struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Calendar) FieldWidget() *Widget {
	argValue := gi.FieldGet(calendarStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Calendar) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(calendarStruct, recv.Native, "widget", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Calendar) FieldPriv() *CalendarPrivate {
	argValue := gi.FieldGet(calendarStruct, recv.Native, "priv")
	value := &CalendarPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Calendar) SetFieldPriv(value *CalendarPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(calendarStruct, recv.Native, "priv", argValue)
}

var calendarNewFunction *gi.Function
var calendarNewFunction_Once sync.Once

func calendarNewFunction_Set() error {
	var err error
	calendarNewFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarNewFunction, err = calendarStruct.InvokerNew("new")
	})
	return err
}

// CalendarNew is a representation of the C type gtk_calendar_new.
func CalendarNew() *Calendar {

	var ret gi.Argument

	err := calendarNewFunction_Set()
	if err == nil {
		ret = calendarNewFunction.Invoke(nil, nil)
	}

	retGo := &Calendar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var calendarClearMarksFunction *gi.Function
var calendarClearMarksFunction_Once sync.Once

func calendarClearMarksFunction_Set() error {
	var err error
	calendarClearMarksFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarClearMarksFunction, err = calendarStruct.InvokerNew("clear_marks")
	})
	return err
}

// ClearMarks is a representation of the C type gtk_calendar_clear_marks.
func (recv *Calendar) ClearMarks() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := calendarClearMarksFunction_Set()
	if err == nil {
		calendarClearMarksFunction.Invoke(inArgs[:], nil)
	}

	return
}

var calendarGetDateFunction *gi.Function
var calendarGetDateFunction_Once sync.Once

func calendarGetDateFunction_Set() error {
	var err error
	calendarGetDateFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarGetDateFunction, err = calendarStruct.InvokerNew("get_date")
	})
	return err
}

// GetDate is a representation of the C type gtk_calendar_get_date.
func (recv *Calendar) GetDate() (uint32, uint32, uint32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [3]gi.Argument

	err := calendarGetDateFunction_Set()
	if err == nil {
		calendarGetDateFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].Uint32()
	out2 := outArgs[2].Uint32()

	return out0, out1, out2
}

var calendarGetDayIsMarkedFunction *gi.Function
var calendarGetDayIsMarkedFunction_Once sync.Once

func calendarGetDayIsMarkedFunction_Set() error {
	var err error
	calendarGetDayIsMarkedFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarGetDayIsMarkedFunction, err = calendarStruct.InvokerNew("get_day_is_marked")
	})
	return err
}

// GetDayIsMarked is a representation of the C type gtk_calendar_get_day_is_marked.
func (recv *Calendar) GetDayIsMarked(day uint32) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(day)

	var ret gi.Argument

	err := calendarGetDayIsMarkedFunction_Set()
	if err == nil {
		ret = calendarGetDayIsMarkedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var calendarGetDetailHeightRowsFunction *gi.Function
var calendarGetDetailHeightRowsFunction_Once sync.Once

func calendarGetDetailHeightRowsFunction_Set() error {
	var err error
	calendarGetDetailHeightRowsFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarGetDetailHeightRowsFunction, err = calendarStruct.InvokerNew("get_detail_height_rows")
	})
	return err
}

// GetDetailHeightRows is a representation of the C type gtk_calendar_get_detail_height_rows.
func (recv *Calendar) GetDetailHeightRows() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := calendarGetDetailHeightRowsFunction_Set()
	if err == nil {
		ret = calendarGetDetailHeightRowsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var calendarGetDetailWidthCharsFunction *gi.Function
var calendarGetDetailWidthCharsFunction_Once sync.Once

func calendarGetDetailWidthCharsFunction_Set() error {
	var err error
	calendarGetDetailWidthCharsFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarGetDetailWidthCharsFunction, err = calendarStruct.InvokerNew("get_detail_width_chars")
	})
	return err
}

// GetDetailWidthChars is a representation of the C type gtk_calendar_get_detail_width_chars.
func (recv *Calendar) GetDetailWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := calendarGetDetailWidthCharsFunction_Set()
	if err == nil {
		ret = calendarGetDetailWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_calendar_get_display_options' : return type 'CalendarDisplayOptions' not supported

var calendarMarkDayFunction *gi.Function
var calendarMarkDayFunction_Once sync.Once

func calendarMarkDayFunction_Set() error {
	var err error
	calendarMarkDayFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarMarkDayFunction, err = calendarStruct.InvokerNew("mark_day")
	})
	return err
}

// MarkDay is a representation of the C type gtk_calendar_mark_day.
func (recv *Calendar) MarkDay(day uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(day)

	err := calendarMarkDayFunction_Set()
	if err == nil {
		calendarMarkDayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var calendarSelectDayFunction *gi.Function
var calendarSelectDayFunction_Once sync.Once

func calendarSelectDayFunction_Set() error {
	var err error
	calendarSelectDayFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarSelectDayFunction, err = calendarStruct.InvokerNew("select_day")
	})
	return err
}

// SelectDay is a representation of the C type gtk_calendar_select_day.
func (recv *Calendar) SelectDay(day uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(day)

	err := calendarSelectDayFunction_Set()
	if err == nil {
		calendarSelectDayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var calendarSelectMonthFunction *gi.Function
var calendarSelectMonthFunction_Once sync.Once

func calendarSelectMonthFunction_Set() error {
	var err error
	calendarSelectMonthFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarSelectMonthFunction, err = calendarStruct.InvokerNew("select_month")
	})
	return err
}

// SelectMonth is a representation of the C type gtk_calendar_select_month.
func (recv *Calendar) SelectMonth(month uint32, year uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(month)
	inArgs[2].SetUint32(year)

	err := calendarSelectMonthFunction_Set()
	if err == nil {
		calendarSelectMonthFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_calendar_set_detail_func' : parameter 'func' of type 'CalendarDetailFunc' not supported

var calendarSetDetailHeightRowsFunction *gi.Function
var calendarSetDetailHeightRowsFunction_Once sync.Once

func calendarSetDetailHeightRowsFunction_Set() error {
	var err error
	calendarSetDetailHeightRowsFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarSetDetailHeightRowsFunction, err = calendarStruct.InvokerNew("set_detail_height_rows")
	})
	return err
}

// SetDetailHeightRows is a representation of the C type gtk_calendar_set_detail_height_rows.
func (recv *Calendar) SetDetailHeightRows(rows int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(rows)

	err := calendarSetDetailHeightRowsFunction_Set()
	if err == nil {
		calendarSetDetailHeightRowsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var calendarSetDetailWidthCharsFunction *gi.Function
var calendarSetDetailWidthCharsFunction_Once sync.Once

func calendarSetDetailWidthCharsFunction_Set() error {
	var err error
	calendarSetDetailWidthCharsFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarSetDetailWidthCharsFunction, err = calendarStruct.InvokerNew("set_detail_width_chars")
	})
	return err
}

// SetDetailWidthChars is a representation of the C type gtk_calendar_set_detail_width_chars.
func (recv *Calendar) SetDetailWidthChars(chars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(chars)

	err := calendarSetDetailWidthCharsFunction_Set()
	if err == nil {
		calendarSetDetailWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_calendar_set_display_options' : parameter 'flags' of type 'CalendarDisplayOptions' not supported

var calendarUnmarkDayFunction *gi.Function
var calendarUnmarkDayFunction_Once sync.Once

func calendarUnmarkDayFunction_Set() error {
	var err error
	calendarUnmarkDayFunction_Once.Do(func() {
		err = calendarStruct_Set()
		if err != nil {
			return
		}
		calendarUnmarkDayFunction, err = calendarStruct.InvokerNew("unmark_day")
	})
	return err
}

// UnmarkDay is a representation of the C type gtk_calendar_unmark_day.
func (recv *Calendar) UnmarkDay(day uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(day)

	err := calendarUnmarkDayFunction_Set()
	if err == nil {
		calendarUnmarkDayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAccessibleStruct *gi.Struct
var cellAccessibleStruct_Once sync.Once

func cellAccessibleStruct_Set() error {
	var err error
	cellAccessibleStruct_Once.Do(func() {
		cellAccessibleStruct, err = gi.StructNew("Gtk", "CellAccessible")
	})
	return err
}

type CellAccessible struct {
	Accessible
}

// FieldParent returns the C field 'parent'.
func (recv *CellAccessible) FieldParent() *Accessible {
	argValue := gi.FieldGet(cellAccessibleStruct, recv.Native, "parent")
	value := &Accessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellAccessible) SetFieldParent(value *Accessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *CellAccessible) FieldPriv() *CellAccessiblePrivate {
	argValue := gi.FieldGet(cellAccessibleStruct, recv.Native, "priv")
	value := &CellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *CellAccessible) SetFieldPriv(value *CellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellAccessibleStruct, recv.Native, "priv", argValue)
}

// CellAccessibleStruct creates an uninitialised CellAccessible.
func CellAccessibleStruct() *CellAccessible {
	err := cellAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &CellAccessible{}
	structGo.Native = cellAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeCellAccessible)
	return structGo
}
func finalizeCellAccessible(obj *CellAccessible) {
	cellAccessibleStruct.Free(obj.Native)
}

var cellAreaStruct *gi.Struct
var cellAreaStruct_Once sync.Once

func cellAreaStruct_Set() error {
	var err error
	cellAreaStruct_Once.Do(func() {
		cellAreaStruct, err = gi.StructNew("Gtk", "CellArea")
	})
	return err
}

type CellArea struct {
	gobject.InitiallyUnowned
}

// UNSUPPORTED : C value 'gtk_cell_area_activate' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_cell_area_activate_cell' : parameter 'event' of type 'Gdk.Event' not supported

var cellAreaAddFunction *gi.Function
var cellAreaAddFunction_Once sync.Once

func cellAreaAddFunction_Set() error {
	var err error
	cellAreaAddFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaAddFunction, err = cellAreaStruct.InvokerNew("add")
	})
	return err
}

// Add is a representation of the C type gtk_cell_area_add.
func (recv *CellArea) Add(renderer *CellRenderer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)

	err := cellAreaAddFunction_Set()
	if err == nil {
		cellAreaAddFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaAddFocusSiblingFunction *gi.Function
var cellAreaAddFocusSiblingFunction_Once sync.Once

func cellAreaAddFocusSiblingFunction_Set() error {
	var err error
	cellAreaAddFocusSiblingFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaAddFocusSiblingFunction, err = cellAreaStruct.InvokerNew("add_focus_sibling")
	})
	return err
}

// AddFocusSibling is a representation of the C type gtk_cell_area_add_focus_sibling.
func (recv *CellArea) AddFocusSibling(renderer *CellRenderer, sibling *CellRenderer) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetPointer(sibling.Native)

	err := cellAreaAddFocusSiblingFunction_Set()
	if err == nil {
		cellAreaAddFocusSiblingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_cell_area_add_with_properties' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_cell_area_apply_attributes' : parameter 'tree_model' of type 'TreeModel' not supported

var cellAreaAttributeConnectFunction *gi.Function
var cellAreaAttributeConnectFunction_Once sync.Once

func cellAreaAttributeConnectFunction_Set() error {
	var err error
	cellAreaAttributeConnectFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaAttributeConnectFunction, err = cellAreaStruct.InvokerNew("attribute_connect")
	})
	return err
}

// AttributeConnect is a representation of the C type gtk_cell_area_attribute_connect.
func (recv *CellArea) AttributeConnect(renderer *CellRenderer, attribute string, column int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetString(attribute)
	inArgs[3].SetInt32(column)

	err := cellAreaAttributeConnectFunction_Set()
	if err == nil {
		cellAreaAttributeConnectFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaAttributeDisconnectFunction *gi.Function
var cellAreaAttributeDisconnectFunction_Once sync.Once

func cellAreaAttributeDisconnectFunction_Set() error {
	var err error
	cellAreaAttributeDisconnectFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaAttributeDisconnectFunction, err = cellAreaStruct.InvokerNew("attribute_disconnect")
	})
	return err
}

// AttributeDisconnect is a representation of the C type gtk_cell_area_attribute_disconnect.
func (recv *CellArea) AttributeDisconnect(renderer *CellRenderer, attribute string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetString(attribute)

	err := cellAreaAttributeDisconnectFunction_Set()
	if err == nil {
		cellAreaAttributeDisconnectFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaAttributeGetColumnFunction *gi.Function
var cellAreaAttributeGetColumnFunction_Once sync.Once

func cellAreaAttributeGetColumnFunction_Set() error {
	var err error
	cellAreaAttributeGetColumnFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaAttributeGetColumnFunction, err = cellAreaStruct.InvokerNew("attribute_get_column")
	})
	return err
}

// AttributeGetColumn is a representation of the C type gtk_cell_area_attribute_get_column.
func (recv *CellArea) AttributeGetColumn(renderer *CellRenderer, attribute string) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetString(attribute)

	var ret gi.Argument

	err := cellAreaAttributeGetColumnFunction_Set()
	if err == nil {
		ret = cellAreaAttributeGetColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_area_cell_get' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_cell_area_cell_get_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_cell_area_cell_get_valist' : parameter 'var_args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_cell_area_cell_set' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_cell_area_cell_set_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_cell_area_cell_set_valist' : parameter 'var_args' of type 'va_list' not supported

var cellAreaCopyContextFunction *gi.Function
var cellAreaCopyContextFunction_Once sync.Once

func cellAreaCopyContextFunction_Set() error {
	var err error
	cellAreaCopyContextFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaCopyContextFunction, err = cellAreaStruct.InvokerNew("copy_context")
	})
	return err
}

// CopyContext is a representation of the C type gtk_cell_area_copy_context.
func (recv *CellArea) CopyContext(context *CellAreaContext) *CellAreaContext {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(context.Native)

	var ret gi.Argument

	err := cellAreaCopyContextFunction_Set()
	if err == nil {
		ret = cellAreaCopyContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellAreaContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellAreaCreateContextFunction *gi.Function
var cellAreaCreateContextFunction_Once sync.Once

func cellAreaCreateContextFunction_Set() error {
	var err error
	cellAreaCreateContextFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaCreateContextFunction, err = cellAreaStruct.InvokerNew("create_context")
	})
	return err
}

// CreateContext is a representation of the C type gtk_cell_area_create_context.
func (recv *CellArea) CreateContext() *CellAreaContext {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaCreateContextFunction_Set()
	if err == nil {
		ret = cellAreaCreateContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellAreaContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_area_event' : parameter 'event' of type 'Gdk.Event' not supported

// UNSUPPORTED : C value 'gtk_cell_area_focus' : parameter 'direction' of type 'DirectionType' not supported

// UNSUPPORTED : C value 'gtk_cell_area_foreach' : parameter 'callback' of type 'CellCallback' not supported

// UNSUPPORTED : C value 'gtk_cell_area_foreach_alloc' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_cell_area_get_cell_allocation' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_cell_area_get_cell_at_position' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

var cellAreaGetCurrentPathStringFunction *gi.Function
var cellAreaGetCurrentPathStringFunction_Once sync.Once

func cellAreaGetCurrentPathStringFunction_Set() error {
	var err error
	cellAreaGetCurrentPathStringFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetCurrentPathStringFunction, err = cellAreaStruct.InvokerNew("get_current_path_string")
	})
	return err
}

// GetCurrentPathString is a representation of the C type gtk_cell_area_get_current_path_string.
func (recv *CellArea) GetCurrentPathString() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaGetCurrentPathStringFunction_Set()
	if err == nil {
		ret = cellAreaGetCurrentPathStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_area_get_edit_widget' : return type 'CellEditable' not supported

var cellAreaGetEditedCellFunction *gi.Function
var cellAreaGetEditedCellFunction_Once sync.Once

func cellAreaGetEditedCellFunction_Set() error {
	var err error
	cellAreaGetEditedCellFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetEditedCellFunction, err = cellAreaStruct.InvokerNew("get_edited_cell")
	})
	return err
}

// GetEditedCell is a representation of the C type gtk_cell_area_get_edited_cell.
func (recv *CellArea) GetEditedCell() *CellRenderer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaGetEditedCellFunction_Set()
	if err == nil {
		ret = cellAreaGetEditedCellFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellRenderer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellAreaGetFocusCellFunction *gi.Function
var cellAreaGetFocusCellFunction_Once sync.Once

func cellAreaGetFocusCellFunction_Set() error {
	var err error
	cellAreaGetFocusCellFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetFocusCellFunction, err = cellAreaStruct.InvokerNew("get_focus_cell")
	})
	return err
}

// GetFocusCell is a representation of the C type gtk_cell_area_get_focus_cell.
func (recv *CellArea) GetFocusCell() *CellRenderer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaGetFocusCellFunction_Set()
	if err == nil {
		ret = cellAreaGetFocusCellFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellRenderer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellAreaGetFocusFromSiblingFunction *gi.Function
var cellAreaGetFocusFromSiblingFunction_Once sync.Once

func cellAreaGetFocusFromSiblingFunction_Set() error {
	var err error
	cellAreaGetFocusFromSiblingFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetFocusFromSiblingFunction, err = cellAreaStruct.InvokerNew("get_focus_from_sibling")
	})
	return err
}

// GetFocusFromSibling is a representation of the C type gtk_cell_area_get_focus_from_sibling.
func (recv *CellArea) GetFocusFromSibling(renderer *CellRenderer) *CellRenderer {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)

	var ret gi.Argument

	err := cellAreaGetFocusFromSiblingFunction_Set()
	if err == nil {
		ret = cellAreaGetFocusFromSiblingFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellRenderer{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_area_get_focus_siblings' : return type 'GLib.List' not supported

var cellAreaGetPreferredHeightFunction *gi.Function
var cellAreaGetPreferredHeightFunction_Once sync.Once

func cellAreaGetPreferredHeightFunction_Set() error {
	var err error
	cellAreaGetPreferredHeightFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetPreferredHeightFunction, err = cellAreaStruct.InvokerNew("get_preferred_height")
	})
	return err
}

// GetPreferredHeight is a representation of the C type gtk_cell_area_get_preferred_height.
func (recv *CellArea) GetPreferredHeight(context *CellAreaContext, widget *Widget) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(context.Native)
	inArgs[2].SetPointer(widget.Native)

	var outArgs [2]gi.Argument

	err := cellAreaGetPreferredHeightFunction_Set()
	if err == nil {
		cellAreaGetPreferredHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaGetPreferredHeightForWidthFunction *gi.Function
var cellAreaGetPreferredHeightForWidthFunction_Once sync.Once

func cellAreaGetPreferredHeightForWidthFunction_Set() error {
	var err error
	cellAreaGetPreferredHeightForWidthFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetPreferredHeightForWidthFunction, err = cellAreaStruct.InvokerNew("get_preferred_height_for_width")
	})
	return err
}

// GetPreferredHeightForWidth is a representation of the C type gtk_cell_area_get_preferred_height_for_width.
func (recv *CellArea) GetPreferredHeightForWidth(context *CellAreaContext, widget *Widget, width int32) (int32, int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(context.Native)
	inArgs[2].SetPointer(widget.Native)
	inArgs[3].SetInt32(width)

	var outArgs [2]gi.Argument

	err := cellAreaGetPreferredHeightForWidthFunction_Set()
	if err == nil {
		cellAreaGetPreferredHeightForWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaGetPreferredWidthFunction *gi.Function
var cellAreaGetPreferredWidthFunction_Once sync.Once

func cellAreaGetPreferredWidthFunction_Set() error {
	var err error
	cellAreaGetPreferredWidthFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetPreferredWidthFunction, err = cellAreaStruct.InvokerNew("get_preferred_width")
	})
	return err
}

// GetPreferredWidth is a representation of the C type gtk_cell_area_get_preferred_width.
func (recv *CellArea) GetPreferredWidth(context *CellAreaContext, widget *Widget) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(context.Native)
	inArgs[2].SetPointer(widget.Native)

	var outArgs [2]gi.Argument

	err := cellAreaGetPreferredWidthFunction_Set()
	if err == nil {
		cellAreaGetPreferredWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaGetPreferredWidthForHeightFunction *gi.Function
var cellAreaGetPreferredWidthForHeightFunction_Once sync.Once

func cellAreaGetPreferredWidthForHeightFunction_Set() error {
	var err error
	cellAreaGetPreferredWidthForHeightFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaGetPreferredWidthForHeightFunction, err = cellAreaStruct.InvokerNew("get_preferred_width_for_height")
	})
	return err
}

// GetPreferredWidthForHeight is a representation of the C type gtk_cell_area_get_preferred_width_for_height.
func (recv *CellArea) GetPreferredWidthForHeight(context *CellAreaContext, widget *Widget, height int32) (int32, int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(context.Native)
	inArgs[2].SetPointer(widget.Native)
	inArgs[3].SetInt32(height)

	var outArgs [2]gi.Argument

	err := cellAreaGetPreferredWidthForHeightFunction_Set()
	if err == nil {
		cellAreaGetPreferredWidthForHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_cell_area_get_request_mode' : return type 'SizeRequestMode' not supported

var cellAreaHasRendererFunction *gi.Function
var cellAreaHasRendererFunction_Once sync.Once

func cellAreaHasRendererFunction_Set() error {
	var err error
	cellAreaHasRendererFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaHasRendererFunction, err = cellAreaStruct.InvokerNew("has_renderer")
	})
	return err
}

// HasRenderer is a representation of the C type gtk_cell_area_has_renderer.
func (recv *CellArea) HasRenderer(renderer *CellRenderer) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)

	var ret gi.Argument

	err := cellAreaHasRendererFunction_Set()
	if err == nil {
		ret = cellAreaHasRendererFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_area_inner_cell_area' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

var cellAreaIsActivatableFunction *gi.Function
var cellAreaIsActivatableFunction_Once sync.Once

func cellAreaIsActivatableFunction_Set() error {
	var err error
	cellAreaIsActivatableFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaIsActivatableFunction, err = cellAreaStruct.InvokerNew("is_activatable")
	})
	return err
}

// IsActivatable is a representation of the C type gtk_cell_area_is_activatable.
func (recv *CellArea) IsActivatable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaIsActivatableFunction_Set()
	if err == nil {
		ret = cellAreaIsActivatableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellAreaIsFocusSiblingFunction *gi.Function
var cellAreaIsFocusSiblingFunction_Once sync.Once

func cellAreaIsFocusSiblingFunction_Set() error {
	var err error
	cellAreaIsFocusSiblingFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaIsFocusSiblingFunction, err = cellAreaStruct.InvokerNew("is_focus_sibling")
	})
	return err
}

// IsFocusSibling is a representation of the C type gtk_cell_area_is_focus_sibling.
func (recv *CellArea) IsFocusSibling(renderer *CellRenderer, sibling *CellRenderer) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetPointer(sibling.Native)

	var ret gi.Argument

	err := cellAreaIsFocusSiblingFunction_Set()
	if err == nil {
		ret = cellAreaIsFocusSiblingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellAreaRemoveFunction *gi.Function
var cellAreaRemoveFunction_Once sync.Once

func cellAreaRemoveFunction_Set() error {
	var err error
	cellAreaRemoveFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaRemoveFunction, err = cellAreaStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_cell_area_remove.
func (recv *CellArea) Remove(renderer *CellRenderer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)

	err := cellAreaRemoveFunction_Set()
	if err == nil {
		cellAreaRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaRemoveFocusSiblingFunction *gi.Function
var cellAreaRemoveFocusSiblingFunction_Once sync.Once

func cellAreaRemoveFocusSiblingFunction_Set() error {
	var err error
	cellAreaRemoveFocusSiblingFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaRemoveFocusSiblingFunction, err = cellAreaStruct.InvokerNew("remove_focus_sibling")
	})
	return err
}

// RemoveFocusSibling is a representation of the C type gtk_cell_area_remove_focus_sibling.
func (recv *CellArea) RemoveFocusSibling(renderer *CellRenderer, sibling *CellRenderer) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetPointer(sibling.Native)

	err := cellAreaRemoveFocusSiblingFunction_Set()
	if err == nil {
		cellAreaRemoveFocusSiblingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_cell_area_render' : parameter 'cr' of type 'cairo.Context' not supported

// UNSUPPORTED : C value 'gtk_cell_area_request_renderer' : parameter 'orientation' of type 'Orientation' not supported

var cellAreaSetFocusCellFunction *gi.Function
var cellAreaSetFocusCellFunction_Once sync.Once

func cellAreaSetFocusCellFunction_Set() error {
	var err error
	cellAreaSetFocusCellFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaSetFocusCellFunction, err = cellAreaStruct.InvokerNew("set_focus_cell")
	})
	return err
}

// SetFocusCell is a representation of the C type gtk_cell_area_set_focus_cell.
func (recv *CellArea) SetFocusCell(renderer *CellRenderer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)

	err := cellAreaSetFocusCellFunction_Set()
	if err == nil {
		cellAreaSetFocusCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaStopEditingFunction *gi.Function
var cellAreaStopEditingFunction_Once sync.Once

func cellAreaStopEditingFunction_Set() error {
	var err error
	cellAreaStopEditingFunction_Once.Do(func() {
		err = cellAreaStruct_Set()
		if err != nil {
			return
		}
		cellAreaStopEditingFunction, err = cellAreaStruct.InvokerNew("stop_editing")
	})
	return err
}

// StopEditing is a representation of the C type gtk_cell_area_stop_editing.
func (recv *CellArea) StopEditing(canceled bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(canceled)

	err := cellAreaStopEditingFunction_Set()
	if err == nil {
		cellAreaStopEditingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// CellAreaStruct creates an uninitialised CellArea.
func CellAreaStruct() *CellArea {
	err := cellAreaStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &CellArea{}
	structGo.Native = cellAreaStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeCellArea)
	return structGo
}
func finalizeCellArea(obj *CellArea) {
	cellAreaStruct.Free(obj.Native)
}

var cellAreaBoxStruct *gi.Struct
var cellAreaBoxStruct_Once sync.Once

func cellAreaBoxStruct_Set() error {
	var err error
	cellAreaBoxStruct_Once.Do(func() {
		cellAreaBoxStruct, err = gi.StructNew("Gtk", "CellAreaBox")
	})
	return err
}

type CellAreaBox struct {
	CellArea
}

var cellAreaBoxNewFunction *gi.Function
var cellAreaBoxNewFunction_Once sync.Once

func cellAreaBoxNewFunction_Set() error {
	var err error
	cellAreaBoxNewFunction_Once.Do(func() {
		err = cellAreaBoxStruct_Set()
		if err != nil {
			return
		}
		cellAreaBoxNewFunction, err = cellAreaBoxStruct.InvokerNew("new")
	})
	return err
}

// CellAreaBoxNew is a representation of the C type gtk_cell_area_box_new.
func CellAreaBoxNew() *CellAreaBox {

	var ret gi.Argument

	err := cellAreaBoxNewFunction_Set()
	if err == nil {
		ret = cellAreaBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &CellAreaBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellAreaBoxGetSpacingFunction *gi.Function
var cellAreaBoxGetSpacingFunction_Once sync.Once

func cellAreaBoxGetSpacingFunction_Set() error {
	var err error
	cellAreaBoxGetSpacingFunction_Once.Do(func() {
		err = cellAreaBoxStruct_Set()
		if err != nil {
			return
		}
		cellAreaBoxGetSpacingFunction, err = cellAreaBoxStruct.InvokerNew("get_spacing")
	})
	return err
}

// GetSpacing is a representation of the C type gtk_cell_area_box_get_spacing.
func (recv *CellAreaBox) GetSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaBoxGetSpacingFunction_Set()
	if err == nil {
		ret = cellAreaBoxGetSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var cellAreaBoxPackEndFunction *gi.Function
var cellAreaBoxPackEndFunction_Once sync.Once

func cellAreaBoxPackEndFunction_Set() error {
	var err error
	cellAreaBoxPackEndFunction_Once.Do(func() {
		err = cellAreaBoxStruct_Set()
		if err != nil {
			return
		}
		cellAreaBoxPackEndFunction, err = cellAreaBoxStruct.InvokerNew("pack_end")
	})
	return err
}

// PackEnd is a representation of the C type gtk_cell_area_box_pack_end.
func (recv *CellAreaBox) PackEnd(renderer *CellRenderer, expand bool, align bool, fixed bool) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetBoolean(expand)
	inArgs[3].SetBoolean(align)
	inArgs[4].SetBoolean(fixed)

	err := cellAreaBoxPackEndFunction_Set()
	if err == nil {
		cellAreaBoxPackEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaBoxPackStartFunction *gi.Function
var cellAreaBoxPackStartFunction_Once sync.Once

func cellAreaBoxPackStartFunction_Set() error {
	var err error
	cellAreaBoxPackStartFunction_Once.Do(func() {
		err = cellAreaBoxStruct_Set()
		if err != nil {
			return
		}
		cellAreaBoxPackStartFunction, err = cellAreaBoxStruct.InvokerNew("pack_start")
	})
	return err
}

// PackStart is a representation of the C type gtk_cell_area_box_pack_start.
func (recv *CellAreaBox) PackStart(renderer *CellRenderer, expand bool, align bool, fixed bool) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(renderer.Native)
	inArgs[2].SetBoolean(expand)
	inArgs[3].SetBoolean(align)
	inArgs[4].SetBoolean(fixed)

	err := cellAreaBoxPackStartFunction_Set()
	if err == nil {
		cellAreaBoxPackStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaBoxSetSpacingFunction *gi.Function
var cellAreaBoxSetSpacingFunction_Once sync.Once

func cellAreaBoxSetSpacingFunction_Set() error {
	var err error
	cellAreaBoxSetSpacingFunction_Once.Do(func() {
		err = cellAreaBoxStruct_Set()
		if err != nil {
			return
		}
		cellAreaBoxSetSpacingFunction, err = cellAreaBoxStruct.InvokerNew("set_spacing")
	})
	return err
}

// SetSpacing is a representation of the C type gtk_cell_area_box_set_spacing.
func (recv *CellAreaBox) SetSpacing(spacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(spacing)

	err := cellAreaBoxSetSpacingFunction_Set()
	if err == nil {
		cellAreaBoxSetSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaContextStruct *gi.Struct
var cellAreaContextStruct_Once sync.Once

func cellAreaContextStruct_Set() error {
	var err error
	cellAreaContextStruct_Once.Do(func() {
		cellAreaContextStruct, err = gi.StructNew("Gtk", "CellAreaContext")
	})
	return err
}

type CellAreaContext struct {
	gobject.Object
}

var cellAreaContextAllocateFunction *gi.Function
var cellAreaContextAllocateFunction_Once sync.Once

func cellAreaContextAllocateFunction_Set() error {
	var err error
	cellAreaContextAllocateFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextAllocateFunction, err = cellAreaContextStruct.InvokerNew("allocate")
	})
	return err
}

// Allocate is a representation of the C type gtk_cell_area_context_allocate.
func (recv *CellAreaContext) Allocate(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := cellAreaContextAllocateFunction_Set()
	if err == nil {
		cellAreaContextAllocateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaContextGetAllocationFunction *gi.Function
var cellAreaContextGetAllocationFunction_Once sync.Once

func cellAreaContextGetAllocationFunction_Set() error {
	var err error
	cellAreaContextGetAllocationFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetAllocationFunction, err = cellAreaContextStruct.InvokerNew("get_allocation")
	})
	return err
}

// GetAllocation is a representation of the C type gtk_cell_area_context_get_allocation.
func (recv *CellAreaContext) GetAllocation() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellAreaContextGetAllocationFunction_Set()
	if err == nil {
		cellAreaContextGetAllocationFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaContextGetAreaFunction *gi.Function
var cellAreaContextGetAreaFunction_Once sync.Once

func cellAreaContextGetAreaFunction_Set() error {
	var err error
	cellAreaContextGetAreaFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetAreaFunction, err = cellAreaContextStruct.InvokerNew("get_area")
	})
	return err
}

// GetArea is a representation of the C type gtk_cell_area_context_get_area.
func (recv *CellAreaContext) GetArea() *CellArea {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellAreaContextGetAreaFunction_Set()
	if err == nil {
		ret = cellAreaContextGetAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellArea{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellAreaContextGetPreferredHeightFunction *gi.Function
var cellAreaContextGetPreferredHeightFunction_Once sync.Once

func cellAreaContextGetPreferredHeightFunction_Set() error {
	var err error
	cellAreaContextGetPreferredHeightFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetPreferredHeightFunction, err = cellAreaContextStruct.InvokerNew("get_preferred_height")
	})
	return err
}

// GetPreferredHeight is a representation of the C type gtk_cell_area_context_get_preferred_height.
func (recv *CellAreaContext) GetPreferredHeight() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellAreaContextGetPreferredHeightFunction_Set()
	if err == nil {
		cellAreaContextGetPreferredHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaContextGetPreferredHeightForWidthFunction *gi.Function
var cellAreaContextGetPreferredHeightForWidthFunction_Once sync.Once

func cellAreaContextGetPreferredHeightForWidthFunction_Set() error {
	var err error
	cellAreaContextGetPreferredHeightForWidthFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetPreferredHeightForWidthFunction, err = cellAreaContextStruct.InvokerNew("get_preferred_height_for_width")
	})
	return err
}

// GetPreferredHeightForWidth is a representation of the C type gtk_cell_area_context_get_preferred_height_for_width.
func (recv *CellAreaContext) GetPreferredHeightForWidth(width int32) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	var outArgs [2]gi.Argument

	err := cellAreaContextGetPreferredHeightForWidthFunction_Set()
	if err == nil {
		cellAreaContextGetPreferredHeightForWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaContextGetPreferredWidthFunction *gi.Function
var cellAreaContextGetPreferredWidthFunction_Once sync.Once

func cellAreaContextGetPreferredWidthFunction_Set() error {
	var err error
	cellAreaContextGetPreferredWidthFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetPreferredWidthFunction, err = cellAreaContextStruct.InvokerNew("get_preferred_width")
	})
	return err
}

// GetPreferredWidth is a representation of the C type gtk_cell_area_context_get_preferred_width.
func (recv *CellAreaContext) GetPreferredWidth() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellAreaContextGetPreferredWidthFunction_Set()
	if err == nil {
		cellAreaContextGetPreferredWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaContextGetPreferredWidthForHeightFunction *gi.Function
var cellAreaContextGetPreferredWidthForHeightFunction_Once sync.Once

func cellAreaContextGetPreferredWidthForHeightFunction_Set() error {
	var err error
	cellAreaContextGetPreferredWidthForHeightFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextGetPreferredWidthForHeightFunction, err = cellAreaContextStruct.InvokerNew("get_preferred_width_for_height")
	})
	return err
}

// GetPreferredWidthForHeight is a representation of the C type gtk_cell_area_context_get_preferred_width_for_height.
func (recv *CellAreaContext) GetPreferredWidthForHeight(height int32) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(height)

	var outArgs [2]gi.Argument

	err := cellAreaContextGetPreferredWidthForHeightFunction_Set()
	if err == nil {
		cellAreaContextGetPreferredWidthForHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellAreaContextPushPreferredHeightFunction *gi.Function
var cellAreaContextPushPreferredHeightFunction_Once sync.Once

func cellAreaContextPushPreferredHeightFunction_Set() error {
	var err error
	cellAreaContextPushPreferredHeightFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextPushPreferredHeightFunction, err = cellAreaContextStruct.InvokerNew("push_preferred_height")
	})
	return err
}

// PushPreferredHeight is a representation of the C type gtk_cell_area_context_push_preferred_height.
func (recv *CellAreaContext) PushPreferredHeight(minimumHeight int32, naturalHeight int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(minimumHeight)
	inArgs[2].SetInt32(naturalHeight)

	err := cellAreaContextPushPreferredHeightFunction_Set()
	if err == nil {
		cellAreaContextPushPreferredHeightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaContextPushPreferredWidthFunction *gi.Function
var cellAreaContextPushPreferredWidthFunction_Once sync.Once

func cellAreaContextPushPreferredWidthFunction_Set() error {
	var err error
	cellAreaContextPushPreferredWidthFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextPushPreferredWidthFunction, err = cellAreaContextStruct.InvokerNew("push_preferred_width")
	})
	return err
}

// PushPreferredWidth is a representation of the C type gtk_cell_area_context_push_preferred_width.
func (recv *CellAreaContext) PushPreferredWidth(minimumWidth int32, naturalWidth int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(minimumWidth)
	inArgs[2].SetInt32(naturalWidth)

	err := cellAreaContextPushPreferredWidthFunction_Set()
	if err == nil {
		cellAreaContextPushPreferredWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellAreaContextResetFunction *gi.Function
var cellAreaContextResetFunction_Once sync.Once

func cellAreaContextResetFunction_Set() error {
	var err error
	cellAreaContextResetFunction_Once.Do(func() {
		err = cellAreaContextStruct_Set()
		if err != nil {
			return
		}
		cellAreaContextResetFunction, err = cellAreaContextStruct.InvokerNew("reset")
	})
	return err
}

// Reset is a representation of the C type gtk_cell_area_context_reset.
func (recv *CellAreaContext) Reset() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := cellAreaContextResetFunction_Set()
	if err == nil {
		cellAreaContextResetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// CellAreaContextStruct creates an uninitialised CellAreaContext.
func CellAreaContextStruct() *CellAreaContext {
	err := cellAreaContextStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &CellAreaContext{}
	structGo.Native = cellAreaContextStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeCellAreaContext)
	return structGo
}
func finalizeCellAreaContext(obj *CellAreaContext) {
	cellAreaContextStruct.Free(obj.Native)
}

var cellRendererStruct *gi.Struct
var cellRendererStruct_Once sync.Once

func cellRendererStruct_Set() error {
	var err error
	cellRendererStruct_Once.Do(func() {
		cellRendererStruct, err = gi.StructNew("Gtk", "CellRenderer")
	})
	return err
}

type CellRenderer struct {
	gobject.InitiallyUnowned
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'gtk_cell_renderer_activate' : parameter 'event' of type 'Gdk.Event' not supported

// UNSUPPORTED : C value 'gtk_cell_renderer_get_aligned_area' : parameter 'flags' of type 'CellRendererState' not supported

var cellRendererGetAlignmentFunction *gi.Function
var cellRendererGetAlignmentFunction_Once sync.Once

func cellRendererGetAlignmentFunction_Set() error {
	var err error
	cellRendererGetAlignmentFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetAlignmentFunction, err = cellRendererStruct.InvokerNew("get_alignment")
	})
	return err
}

// GetAlignment is a representation of the C type gtk_cell_renderer_get_alignment.
func (recv *CellRenderer) GetAlignment() (float32, float32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetAlignmentFunction_Set()
	if err == nil {
		cellRendererGetAlignmentFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float32()
	out1 := outArgs[1].Float32()

	return out0, out1
}

var cellRendererGetFixedSizeFunction *gi.Function
var cellRendererGetFixedSizeFunction_Once sync.Once

func cellRendererGetFixedSizeFunction_Set() error {
	var err error
	cellRendererGetFixedSizeFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetFixedSizeFunction, err = cellRendererStruct.InvokerNew("get_fixed_size")
	})
	return err
}

// GetFixedSize is a representation of the C type gtk_cell_renderer_get_fixed_size.
func (recv *CellRenderer) GetFixedSize() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetFixedSizeFunction_Set()
	if err == nil {
		cellRendererGetFixedSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellRendererGetPaddingFunction *gi.Function
var cellRendererGetPaddingFunction_Once sync.Once

func cellRendererGetPaddingFunction_Set() error {
	var err error
	cellRendererGetPaddingFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPaddingFunction, err = cellRendererStruct.InvokerNew("get_padding")
	})
	return err
}

// GetPadding is a representation of the C type gtk_cell_renderer_get_padding.
func (recv *CellRenderer) GetPadding() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetPaddingFunction_Set()
	if err == nil {
		cellRendererGetPaddingFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellRendererGetPreferredHeightFunction *gi.Function
var cellRendererGetPreferredHeightFunction_Once sync.Once

func cellRendererGetPreferredHeightFunction_Set() error {
	var err error
	cellRendererGetPreferredHeightFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPreferredHeightFunction, err = cellRendererStruct.InvokerNew("get_preferred_height")
	})
	return err
}

// GetPreferredHeight is a representation of the C type gtk_cell_renderer_get_preferred_height.
func (recv *CellRenderer) GetPreferredHeight(widget *Widget) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetPreferredHeightFunction_Set()
	if err == nil {
		cellRendererGetPreferredHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellRendererGetPreferredHeightForWidthFunction *gi.Function
var cellRendererGetPreferredHeightForWidthFunction_Once sync.Once

func cellRendererGetPreferredHeightForWidthFunction_Set() error {
	var err error
	cellRendererGetPreferredHeightForWidthFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPreferredHeightForWidthFunction, err = cellRendererStruct.InvokerNew("get_preferred_height_for_width")
	})
	return err
}

// GetPreferredHeightForWidth is a representation of the C type gtk_cell_renderer_get_preferred_height_for_width.
func (recv *CellRenderer) GetPreferredHeightForWidth(widget *Widget, width int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetInt32(width)

	var outArgs [2]gi.Argument

	err := cellRendererGetPreferredHeightForWidthFunction_Set()
	if err == nil {
		cellRendererGetPreferredHeightForWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellRendererGetPreferredSizeFunction *gi.Function
var cellRendererGetPreferredSizeFunction_Once sync.Once

func cellRendererGetPreferredSizeFunction_Set() error {
	var err error
	cellRendererGetPreferredSizeFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPreferredSizeFunction, err = cellRendererStruct.InvokerNew("get_preferred_size")
	})
	return err
}

// GetPreferredSize is a representation of the C type gtk_cell_renderer_get_preferred_size.
func (recv *CellRenderer) GetPreferredSize(widget *Widget) (*Requisition, *Requisition) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetPreferredSizeFunction_Set()
	if err == nil {
		cellRendererGetPreferredSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()
	out1 := &Requisition{}
	out1.Native = outArgs[1].Pointer()

	return out0, out1
}

var cellRendererGetPreferredWidthFunction *gi.Function
var cellRendererGetPreferredWidthFunction_Once sync.Once

func cellRendererGetPreferredWidthFunction_Set() error {
	var err error
	cellRendererGetPreferredWidthFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPreferredWidthFunction, err = cellRendererStruct.InvokerNew("get_preferred_width")
	})
	return err
}

// GetPreferredWidth is a representation of the C type gtk_cell_renderer_get_preferred_width.
func (recv *CellRenderer) GetPreferredWidth(widget *Widget) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var outArgs [2]gi.Argument

	err := cellRendererGetPreferredWidthFunction_Set()
	if err == nil {
		cellRendererGetPreferredWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var cellRendererGetPreferredWidthForHeightFunction *gi.Function
var cellRendererGetPreferredWidthForHeightFunction_Once sync.Once

func cellRendererGetPreferredWidthForHeightFunction_Set() error {
	var err error
	cellRendererGetPreferredWidthForHeightFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetPreferredWidthForHeightFunction, err = cellRendererStruct.InvokerNew("get_preferred_width_for_height")
	})
	return err
}

// GetPreferredWidthForHeight is a representation of the C type gtk_cell_renderer_get_preferred_width_for_height.
func (recv *CellRenderer) GetPreferredWidthForHeight(widget *Widget, height int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetInt32(height)

	var outArgs [2]gi.Argument

	err := cellRendererGetPreferredWidthForHeightFunction_Set()
	if err == nil {
		cellRendererGetPreferredWidthForHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_cell_renderer_get_request_mode' : return type 'SizeRequestMode' not supported

var cellRendererGetSensitiveFunction *gi.Function
var cellRendererGetSensitiveFunction_Once sync.Once

func cellRendererGetSensitiveFunction_Set() error {
	var err error
	cellRendererGetSensitiveFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetSensitiveFunction, err = cellRendererStruct.InvokerNew("get_sensitive")
	})
	return err
}

// GetSensitive is a representation of the C type gtk_cell_renderer_get_sensitive.
func (recv *CellRenderer) GetSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererGetSensitiveFunction_Set()
	if err == nil {
		ret = cellRendererGetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_renderer_get_size' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_cell_renderer_get_state' : parameter 'cell_state' of type 'CellRendererState' not supported

var cellRendererGetVisibleFunction *gi.Function
var cellRendererGetVisibleFunction_Once sync.Once

func cellRendererGetVisibleFunction_Set() error {
	var err error
	cellRendererGetVisibleFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererGetVisibleFunction, err = cellRendererStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_cell_renderer_get_visible.
func (recv *CellRenderer) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererGetVisibleFunction_Set()
	if err == nil {
		ret = cellRendererGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellRendererIsActivatableFunction *gi.Function
var cellRendererIsActivatableFunction_Once sync.Once

func cellRendererIsActivatableFunction_Set() error {
	var err error
	cellRendererIsActivatableFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererIsActivatableFunction, err = cellRendererStruct.InvokerNew("is_activatable")
	})
	return err
}

// IsActivatable is a representation of the C type gtk_cell_renderer_is_activatable.
func (recv *CellRenderer) IsActivatable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererIsActivatableFunction_Set()
	if err == nil {
		ret = cellRendererIsActivatableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_renderer_render' : parameter 'cr' of type 'cairo.Context' not supported

var cellRendererSetAlignmentFunction *gi.Function
var cellRendererSetAlignmentFunction_Once sync.Once

func cellRendererSetAlignmentFunction_Set() error {
	var err error
	cellRendererSetAlignmentFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererSetAlignmentFunction, err = cellRendererStruct.InvokerNew("set_alignment")
	})
	return err
}

// SetAlignment is a representation of the C type gtk_cell_renderer_set_alignment.
func (recv *CellRenderer) SetAlignment(xalign float32, yalign float32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)

	err := cellRendererSetAlignmentFunction_Set()
	if err == nil {
		cellRendererSetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererSetFixedSizeFunction *gi.Function
var cellRendererSetFixedSizeFunction_Once sync.Once

func cellRendererSetFixedSizeFunction_Set() error {
	var err error
	cellRendererSetFixedSizeFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererSetFixedSizeFunction, err = cellRendererStruct.InvokerNew("set_fixed_size")
	})
	return err
}

// SetFixedSize is a representation of the C type gtk_cell_renderer_set_fixed_size.
func (recv *CellRenderer) SetFixedSize(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := cellRendererSetFixedSizeFunction_Set()
	if err == nil {
		cellRendererSetFixedSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererSetPaddingFunction *gi.Function
var cellRendererSetPaddingFunction_Once sync.Once

func cellRendererSetPaddingFunction_Set() error {
	var err error
	cellRendererSetPaddingFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererSetPaddingFunction, err = cellRendererStruct.InvokerNew("set_padding")
	})
	return err
}

// SetPadding is a representation of the C type gtk_cell_renderer_set_padding.
func (recv *CellRenderer) SetPadding(xpad int32, ypad int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(xpad)
	inArgs[2].SetInt32(ypad)

	err := cellRendererSetPaddingFunction_Set()
	if err == nil {
		cellRendererSetPaddingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererSetSensitiveFunction *gi.Function
var cellRendererSetSensitiveFunction_Once sync.Once

func cellRendererSetSensitiveFunction_Set() error {
	var err error
	cellRendererSetSensitiveFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererSetSensitiveFunction, err = cellRendererStruct.InvokerNew("set_sensitive")
	})
	return err
}

// SetSensitive is a representation of the C type gtk_cell_renderer_set_sensitive.
func (recv *CellRenderer) SetSensitive(sensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sensitive)

	err := cellRendererSetSensitiveFunction_Set()
	if err == nil {
		cellRendererSetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererSetVisibleFunction *gi.Function
var cellRendererSetVisibleFunction_Once sync.Once

func cellRendererSetVisibleFunction_Set() error {
	var err error
	cellRendererSetVisibleFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererSetVisibleFunction, err = cellRendererStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_cell_renderer_set_visible.
func (recv *CellRenderer) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := cellRendererSetVisibleFunction_Set()
	if err == nil {
		cellRendererSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_cell_renderer_start_editing' : parameter 'event' of type 'Gdk.Event' not supported

var cellRendererStopEditingFunction *gi.Function
var cellRendererStopEditingFunction_Once sync.Once

func cellRendererStopEditingFunction_Set() error {
	var err error
	cellRendererStopEditingFunction_Once.Do(func() {
		err = cellRendererStruct_Set()
		if err != nil {
			return
		}
		cellRendererStopEditingFunction, err = cellRendererStruct.InvokerNew("stop_editing")
	})
	return err
}

// StopEditing is a representation of the C type gtk_cell_renderer_stop_editing.
func (recv *CellRenderer) StopEditing(canceled bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(canceled)

	err := cellRendererStopEditingFunction_Set()
	if err == nil {
		cellRendererStopEditingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// CellRendererStruct creates an uninitialised CellRenderer.
func CellRendererStruct() *CellRenderer {
	err := cellRendererStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &CellRenderer{}
	structGo.Native = cellRendererStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeCellRenderer)
	return structGo
}
func finalizeCellRenderer(obj *CellRenderer) {
	cellRendererStruct.Free(obj.Native)
}

var cellRendererAccelStruct *gi.Struct
var cellRendererAccelStruct_Once sync.Once

func cellRendererAccelStruct_Set() error {
	var err error
	cellRendererAccelStruct_Once.Do(func() {
		cellRendererAccelStruct, err = gi.StructNew("Gtk", "CellRendererAccel")
	})
	return err
}

type CellRendererAccel struct {
	CellRendererText
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererAccel) FieldParent() *CellRendererText {
	argValue := gi.FieldGet(cellRendererAccelStruct, recv.Native, "parent")
	value := &CellRendererText{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererAccel) SetFieldParent(value *CellRendererText) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererAccelStruct, recv.Native, "parent", argValue)
}

var cellRendererAccelNewFunction *gi.Function
var cellRendererAccelNewFunction_Once sync.Once

func cellRendererAccelNewFunction_Set() error {
	var err error
	cellRendererAccelNewFunction_Once.Do(func() {
		err = cellRendererAccelStruct_Set()
		if err != nil {
			return
		}
		cellRendererAccelNewFunction, err = cellRendererAccelStruct.InvokerNew("new")
	})
	return err
}

// CellRendererAccelNew is a representation of the C type gtk_cell_renderer_accel_new.
func CellRendererAccelNew() *CellRendererAccel {

	var ret gi.Argument

	err := cellRendererAccelNewFunction_Set()
	if err == nil {
		ret = cellRendererAccelNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererAccel{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererComboStruct *gi.Struct
var cellRendererComboStruct_Once sync.Once

func cellRendererComboStruct_Set() error {
	var err error
	cellRendererComboStruct_Once.Do(func() {
		cellRendererComboStruct, err = gi.StructNew("Gtk", "CellRendererCombo")
	})
	return err
}

type CellRendererCombo struct {
	CellRendererText
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererCombo) FieldParent() *CellRendererText {
	argValue := gi.FieldGet(cellRendererComboStruct, recv.Native, "parent")
	value := &CellRendererText{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererCombo) SetFieldParent(value *CellRendererText) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererComboStruct, recv.Native, "parent", argValue)
}

var cellRendererComboNewFunction *gi.Function
var cellRendererComboNewFunction_Once sync.Once

func cellRendererComboNewFunction_Set() error {
	var err error
	cellRendererComboNewFunction_Once.Do(func() {
		err = cellRendererComboStruct_Set()
		if err != nil {
			return
		}
		cellRendererComboNewFunction, err = cellRendererComboStruct.InvokerNew("new")
	})
	return err
}

// CellRendererComboNew is a representation of the C type gtk_cell_renderer_combo_new.
func CellRendererComboNew() *CellRendererCombo {

	var ret gi.Argument

	err := cellRendererComboNewFunction_Set()
	if err == nil {
		ret = cellRendererComboNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererCombo{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererPixbufStruct *gi.Struct
var cellRendererPixbufStruct_Once sync.Once

func cellRendererPixbufStruct_Set() error {
	var err error
	cellRendererPixbufStruct_Once.Do(func() {
		cellRendererPixbufStruct, err = gi.StructNew("Gtk", "CellRendererPixbuf")
	})
	return err
}

type CellRendererPixbuf struct {
	CellRenderer
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererPixbuf) FieldParent() *CellRenderer {
	argValue := gi.FieldGet(cellRendererPixbufStruct, recv.Native, "parent")
	value := &CellRenderer{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererPixbuf) SetFieldParent(value *CellRenderer) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererPixbufStruct, recv.Native, "parent", argValue)
}

var cellRendererPixbufNewFunction *gi.Function
var cellRendererPixbufNewFunction_Once sync.Once

func cellRendererPixbufNewFunction_Set() error {
	var err error
	cellRendererPixbufNewFunction_Once.Do(func() {
		err = cellRendererPixbufStruct_Set()
		if err != nil {
			return
		}
		cellRendererPixbufNewFunction, err = cellRendererPixbufStruct.InvokerNew("new")
	})
	return err
}

// CellRendererPixbufNew is a representation of the C type gtk_cell_renderer_pixbuf_new.
func CellRendererPixbufNew() *CellRendererPixbuf {

	var ret gi.Argument

	err := cellRendererPixbufNewFunction_Set()
	if err == nil {
		ret = cellRendererPixbufNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererPixbuf{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererProgressStruct *gi.Struct
var cellRendererProgressStruct_Once sync.Once

func cellRendererProgressStruct_Set() error {
	var err error
	cellRendererProgressStruct_Once.Do(func() {
		cellRendererProgressStruct, err = gi.StructNew("Gtk", "CellRendererProgress")
	})
	return err
}

type CellRendererProgress struct {
	CellRenderer
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *CellRendererProgress) FieldParentInstance() *CellRenderer {
	argValue := gi.FieldGet(cellRendererProgressStruct, recv.Native, "parent_instance")
	value := &CellRenderer{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *CellRendererProgress) SetFieldParentInstance(value *CellRenderer) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererProgressStruct, recv.Native, "parent_instance", argValue)
}

var cellRendererProgressNewFunction *gi.Function
var cellRendererProgressNewFunction_Once sync.Once

func cellRendererProgressNewFunction_Set() error {
	var err error
	cellRendererProgressNewFunction_Once.Do(func() {
		err = cellRendererProgressStruct_Set()
		if err != nil {
			return
		}
		cellRendererProgressNewFunction, err = cellRendererProgressStruct.InvokerNew("new")
	})
	return err
}

// CellRendererProgressNew is a representation of the C type gtk_cell_renderer_progress_new.
func CellRendererProgressNew() *CellRendererProgress {

	var ret gi.Argument

	err := cellRendererProgressNewFunction_Set()
	if err == nil {
		ret = cellRendererProgressNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererProgress{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererSpinStruct *gi.Struct
var cellRendererSpinStruct_Once sync.Once

func cellRendererSpinStruct_Set() error {
	var err error
	cellRendererSpinStruct_Once.Do(func() {
		cellRendererSpinStruct, err = gi.StructNew("Gtk", "CellRendererSpin")
	})
	return err
}

type CellRendererSpin struct {
	CellRendererText
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererSpin) FieldParent() *CellRendererText {
	argValue := gi.FieldGet(cellRendererSpinStruct, recv.Native, "parent")
	value := &CellRendererText{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererSpin) SetFieldParent(value *CellRendererText) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererSpinStruct, recv.Native, "parent", argValue)
}

var cellRendererSpinNewFunction *gi.Function
var cellRendererSpinNewFunction_Once sync.Once

func cellRendererSpinNewFunction_Set() error {
	var err error
	cellRendererSpinNewFunction_Once.Do(func() {
		err = cellRendererSpinStruct_Set()
		if err != nil {
			return
		}
		cellRendererSpinNewFunction, err = cellRendererSpinStruct.InvokerNew("new")
	})
	return err
}

// CellRendererSpinNew is a representation of the C type gtk_cell_renderer_spin_new.
func CellRendererSpinNew() *CellRendererSpin {

	var ret gi.Argument

	err := cellRendererSpinNewFunction_Set()
	if err == nil {
		ret = cellRendererSpinNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererSpin{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererSpinnerStruct *gi.Struct
var cellRendererSpinnerStruct_Once sync.Once

func cellRendererSpinnerStruct_Set() error {
	var err error
	cellRendererSpinnerStruct_Once.Do(func() {
		cellRendererSpinnerStruct, err = gi.StructNew("Gtk", "CellRendererSpinner")
	})
	return err
}

type CellRendererSpinner struct {
	CellRenderer
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererSpinner) FieldParent() *CellRenderer {
	argValue := gi.FieldGet(cellRendererSpinnerStruct, recv.Native, "parent")
	value := &CellRenderer{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererSpinner) SetFieldParent(value *CellRenderer) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererSpinnerStruct, recv.Native, "parent", argValue)
}

var cellRendererSpinnerNewFunction *gi.Function
var cellRendererSpinnerNewFunction_Once sync.Once

func cellRendererSpinnerNewFunction_Set() error {
	var err error
	cellRendererSpinnerNewFunction_Once.Do(func() {
		err = cellRendererSpinnerStruct_Set()
		if err != nil {
			return
		}
		cellRendererSpinnerNewFunction, err = cellRendererSpinnerStruct.InvokerNew("new")
	})
	return err
}

// CellRendererSpinnerNew is a representation of the C type gtk_cell_renderer_spinner_new.
func CellRendererSpinnerNew() *CellRendererSpinner {

	var ret gi.Argument

	err := cellRendererSpinnerNewFunction_Set()
	if err == nil {
		ret = cellRendererSpinnerNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererSpinner{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererTextStruct *gi.Struct
var cellRendererTextStruct_Once sync.Once

func cellRendererTextStruct_Set() error {
	var err error
	cellRendererTextStruct_Once.Do(func() {
		cellRendererTextStruct, err = gi.StructNew("Gtk", "CellRendererText")
	})
	return err
}

type CellRendererText struct {
	CellRenderer
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererText) FieldParent() *CellRenderer {
	argValue := gi.FieldGet(cellRendererTextStruct, recv.Native, "parent")
	value := &CellRenderer{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererText) SetFieldParent(value *CellRenderer) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererTextStruct, recv.Native, "parent", argValue)
}

var cellRendererTextNewFunction *gi.Function
var cellRendererTextNewFunction_Once sync.Once

func cellRendererTextNewFunction_Set() error {
	var err error
	cellRendererTextNewFunction_Once.Do(func() {
		err = cellRendererTextStruct_Set()
		if err != nil {
			return
		}
		cellRendererTextNewFunction, err = cellRendererTextStruct.InvokerNew("new")
	})
	return err
}

// CellRendererTextNew is a representation of the C type gtk_cell_renderer_text_new.
func CellRendererTextNew() *CellRendererText {

	var ret gi.Argument

	err := cellRendererTextNewFunction_Set()
	if err == nil {
		ret = cellRendererTextNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererText{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererTextSetFixedHeightFromFontFunction *gi.Function
var cellRendererTextSetFixedHeightFromFontFunction_Once sync.Once

func cellRendererTextSetFixedHeightFromFontFunction_Set() error {
	var err error
	cellRendererTextSetFixedHeightFromFontFunction_Once.Do(func() {
		err = cellRendererTextStruct_Set()
		if err != nil {
			return
		}
		cellRendererTextSetFixedHeightFromFontFunction, err = cellRendererTextStruct.InvokerNew("set_fixed_height_from_font")
	})
	return err
}

// SetFixedHeightFromFont is a representation of the C type gtk_cell_renderer_text_set_fixed_height_from_font.
func (recv *CellRendererText) SetFixedHeightFromFont(numberOfRows int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(numberOfRows)

	err := cellRendererTextSetFixedHeightFromFontFunction_Set()
	if err == nil {
		cellRendererTextSetFixedHeightFromFontFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererToggleStruct *gi.Struct
var cellRendererToggleStruct_Once sync.Once

func cellRendererToggleStruct_Set() error {
	var err error
	cellRendererToggleStruct_Once.Do(func() {
		cellRendererToggleStruct, err = gi.StructNew("Gtk", "CellRendererToggle")
	})
	return err
}

type CellRendererToggle struct {
	CellRenderer
}

// FieldParent returns the C field 'parent'.
func (recv *CellRendererToggle) FieldParent() *CellRenderer {
	argValue := gi.FieldGet(cellRendererToggleStruct, recv.Native, "parent")
	value := &CellRenderer{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CellRendererToggle) SetFieldParent(value *CellRenderer) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellRendererToggleStruct, recv.Native, "parent", argValue)
}

var cellRendererToggleNewFunction *gi.Function
var cellRendererToggleNewFunction_Once sync.Once

func cellRendererToggleNewFunction_Set() error {
	var err error
	cellRendererToggleNewFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleNewFunction, err = cellRendererToggleStruct.InvokerNew("new")
	})
	return err
}

// CellRendererToggleNew is a representation of the C type gtk_cell_renderer_toggle_new.
func CellRendererToggleNew() *CellRendererToggle {

	var ret gi.Argument

	err := cellRendererToggleNewFunction_Set()
	if err == nil {
		ret = cellRendererToggleNewFunction.Invoke(nil, nil)
	}

	retGo := &CellRendererToggle{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellRendererToggleGetActivatableFunction *gi.Function
var cellRendererToggleGetActivatableFunction_Once sync.Once

func cellRendererToggleGetActivatableFunction_Set() error {
	var err error
	cellRendererToggleGetActivatableFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleGetActivatableFunction, err = cellRendererToggleStruct.InvokerNew("get_activatable")
	})
	return err
}

// GetActivatable is a representation of the C type gtk_cell_renderer_toggle_get_activatable.
func (recv *CellRendererToggle) GetActivatable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererToggleGetActivatableFunction_Set()
	if err == nil {
		ret = cellRendererToggleGetActivatableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellRendererToggleGetActiveFunction *gi.Function
var cellRendererToggleGetActiveFunction_Once sync.Once

func cellRendererToggleGetActiveFunction_Set() error {
	var err error
	cellRendererToggleGetActiveFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleGetActiveFunction, err = cellRendererToggleStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_cell_renderer_toggle_get_active.
func (recv *CellRendererToggle) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererToggleGetActiveFunction_Set()
	if err == nil {
		ret = cellRendererToggleGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellRendererToggleGetRadioFunction *gi.Function
var cellRendererToggleGetRadioFunction_Once sync.Once

func cellRendererToggleGetRadioFunction_Set() error {
	var err error
	cellRendererToggleGetRadioFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleGetRadioFunction, err = cellRendererToggleStruct.InvokerNew("get_radio")
	})
	return err
}

// GetRadio is a representation of the C type gtk_cell_renderer_toggle_get_radio.
func (recv *CellRendererToggle) GetRadio() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellRendererToggleGetRadioFunction_Set()
	if err == nil {
		ret = cellRendererToggleGetRadioFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellRendererToggleSetActivatableFunction *gi.Function
var cellRendererToggleSetActivatableFunction_Once sync.Once

func cellRendererToggleSetActivatableFunction_Set() error {
	var err error
	cellRendererToggleSetActivatableFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleSetActivatableFunction, err = cellRendererToggleStruct.InvokerNew("set_activatable")
	})
	return err
}

// SetActivatable is a representation of the C type gtk_cell_renderer_toggle_set_activatable.
func (recv *CellRendererToggle) SetActivatable(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := cellRendererToggleSetActivatableFunction_Set()
	if err == nil {
		cellRendererToggleSetActivatableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererToggleSetActiveFunction *gi.Function
var cellRendererToggleSetActiveFunction_Once sync.Once

func cellRendererToggleSetActiveFunction_Set() error {
	var err error
	cellRendererToggleSetActiveFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleSetActiveFunction, err = cellRendererToggleStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_cell_renderer_toggle_set_active.
func (recv *CellRendererToggle) SetActive(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := cellRendererToggleSetActiveFunction_Set()
	if err == nil {
		cellRendererToggleSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellRendererToggleSetRadioFunction *gi.Function
var cellRendererToggleSetRadioFunction_Once sync.Once

func cellRendererToggleSetRadioFunction_Set() error {
	var err error
	cellRendererToggleSetRadioFunction_Once.Do(func() {
		err = cellRendererToggleStruct_Set()
		if err != nil {
			return
		}
		cellRendererToggleSetRadioFunction, err = cellRendererToggleStruct.InvokerNew("set_radio")
	})
	return err
}

// SetRadio is a representation of the C type gtk_cell_renderer_toggle_set_radio.
func (recv *CellRendererToggle) SetRadio(radio bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(radio)

	err := cellRendererToggleSetRadioFunction_Set()
	if err == nil {
		cellRendererToggleSetRadioFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellViewStruct *gi.Struct
var cellViewStruct_Once sync.Once

func cellViewStruct_Set() error {
	var err error
	cellViewStruct_Once.Do(func() {
		cellViewStruct, err = gi.StructNew("Gtk", "CellView")
	})
	return err
}

type CellView struct {
	Widget
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *CellView) FieldParentInstance() *Widget {
	argValue := gi.FieldGet(cellViewStruct, recv.Native, "parent_instance")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *CellView) SetFieldParentInstance(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cellViewStruct, recv.Native, "parent_instance", argValue)
}

var cellViewNewFunction *gi.Function
var cellViewNewFunction_Once sync.Once

func cellViewNewFunction_Set() error {
	var err error
	cellViewNewFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewNewFunction, err = cellViewStruct.InvokerNew("new")
	})
	return err
}

// CellViewNew is a representation of the C type gtk_cell_view_new.
func CellViewNew() *CellView {

	var ret gi.Argument

	err := cellViewNewFunction_Set()
	if err == nil {
		ret = cellViewNewFunction.Invoke(nil, nil)
	}

	retGo := &CellView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellViewNewWithContextFunction *gi.Function
var cellViewNewWithContextFunction_Once sync.Once

func cellViewNewWithContextFunction_Set() error {
	var err error
	cellViewNewWithContextFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewNewWithContextFunction, err = cellViewStruct.InvokerNew("new_with_context")
	})
	return err
}

// CellViewNewWithContext is a representation of the C type gtk_cell_view_new_with_context.
func CellViewNewWithContext(area *CellArea, context *CellAreaContext) *CellView {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(area.Native)
	inArgs[1].SetPointer(context.Native)

	var ret gi.Argument

	err := cellViewNewWithContextFunction_Set()
	if err == nil {
		ret = cellViewNewWithContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellViewNewWithMarkupFunction *gi.Function
var cellViewNewWithMarkupFunction_Once sync.Once

func cellViewNewWithMarkupFunction_Set() error {
	var err error
	cellViewNewWithMarkupFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewNewWithMarkupFunction, err = cellViewStruct.InvokerNew("new_with_markup")
	})
	return err
}

// CellViewNewWithMarkup is a representation of the C type gtk_cell_view_new_with_markup.
func CellViewNewWithMarkup(markup string) *CellView {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(markup)

	var ret gi.Argument

	err := cellViewNewWithMarkupFunction_Set()
	if err == nil {
		ret = cellViewNewWithMarkupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellView{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_view_new_with_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var cellViewNewWithTextFunction *gi.Function
var cellViewNewWithTextFunction_Once sync.Once

func cellViewNewWithTextFunction_Set() error {
	var err error
	cellViewNewWithTextFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewNewWithTextFunction, err = cellViewStruct.InvokerNew("new_with_text")
	})
	return err
}

// CellViewNewWithText is a representation of the C type gtk_cell_view_new_with_text.
func CellViewNewWithText(text string) *CellView {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(text)

	var ret gi.Argument

	err := cellViewNewWithTextFunction_Set()
	if err == nil {
		ret = cellViewNewWithTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CellView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellViewGetDisplayedRowFunction *gi.Function
var cellViewGetDisplayedRowFunction_Once sync.Once

func cellViewGetDisplayedRowFunction_Set() error {
	var err error
	cellViewGetDisplayedRowFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewGetDisplayedRowFunction, err = cellViewStruct.InvokerNew("get_displayed_row")
	})
	return err
}

// GetDisplayedRow is a representation of the C type gtk_cell_view_get_displayed_row.
func (recv *CellView) GetDisplayedRow() *TreePath {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellViewGetDisplayedRowFunction_Set()
	if err == nil {
		ret = cellViewGetDisplayedRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

var cellViewGetDrawSensitiveFunction *gi.Function
var cellViewGetDrawSensitiveFunction_Once sync.Once

func cellViewGetDrawSensitiveFunction_Set() error {
	var err error
	cellViewGetDrawSensitiveFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewGetDrawSensitiveFunction, err = cellViewStruct.InvokerNew("get_draw_sensitive")
	})
	return err
}

// GetDrawSensitive is a representation of the C type gtk_cell_view_get_draw_sensitive.
func (recv *CellView) GetDrawSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellViewGetDrawSensitiveFunction_Set()
	if err == nil {
		ret = cellViewGetDrawSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cellViewGetFitModelFunction *gi.Function
var cellViewGetFitModelFunction_Once sync.Once

func cellViewGetFitModelFunction_Set() error {
	var err error
	cellViewGetFitModelFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewGetFitModelFunction, err = cellViewStruct.InvokerNew("get_fit_model")
	})
	return err
}

// GetFitModel is a representation of the C type gtk_cell_view_get_fit_model.
func (recv *CellView) GetFitModel() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cellViewGetFitModelFunction_Set()
	if err == nil {
		ret = cellViewGetFitModelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_cell_view_get_model' : return type 'TreeModel' not supported

var cellViewGetSizeOfRowFunction *gi.Function
var cellViewGetSizeOfRowFunction_Once sync.Once

func cellViewGetSizeOfRowFunction_Set() error {
	var err error
	cellViewGetSizeOfRowFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewGetSizeOfRowFunction, err = cellViewStruct.InvokerNew("get_size_of_row")
	})
	return err
}

// GetSizeOfRow is a representation of the C type gtk_cell_view_get_size_of_row.
func (recv *CellView) GetSizeOfRow(path *TreePath) (bool, *Requisition) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := cellViewGetSizeOfRowFunction_Set()
	if err == nil {
		ret = cellViewGetSizeOfRowFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()

	return retGo, out0
}

// UNSUPPORTED : C value 'gtk_cell_view_set_background_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_cell_view_set_background_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var cellViewSetDisplayedRowFunction *gi.Function
var cellViewSetDisplayedRowFunction_Once sync.Once

func cellViewSetDisplayedRowFunction_Set() error {
	var err error
	cellViewSetDisplayedRowFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewSetDisplayedRowFunction, err = cellViewStruct.InvokerNew("set_displayed_row")
	})
	return err
}

// SetDisplayedRow is a representation of the C type gtk_cell_view_set_displayed_row.
func (recv *CellView) SetDisplayedRow(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := cellViewSetDisplayedRowFunction_Set()
	if err == nil {
		cellViewSetDisplayedRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellViewSetDrawSensitiveFunction *gi.Function
var cellViewSetDrawSensitiveFunction_Once sync.Once

func cellViewSetDrawSensitiveFunction_Set() error {
	var err error
	cellViewSetDrawSensitiveFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewSetDrawSensitiveFunction, err = cellViewStruct.InvokerNew("set_draw_sensitive")
	})
	return err
}

// SetDrawSensitive is a representation of the C type gtk_cell_view_set_draw_sensitive.
func (recv *CellView) SetDrawSensitive(drawSensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(drawSensitive)

	err := cellViewSetDrawSensitiveFunction_Set()
	if err == nil {
		cellViewSetDrawSensitiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cellViewSetFitModelFunction *gi.Function
var cellViewSetFitModelFunction_Once sync.Once

func cellViewSetFitModelFunction_Set() error {
	var err error
	cellViewSetFitModelFunction_Once.Do(func() {
		err = cellViewStruct_Set()
		if err != nil {
			return
		}
		cellViewSetFitModelFunction, err = cellViewStruct.InvokerNew("set_fit_model")
	})
	return err
}

// SetFitModel is a representation of the C type gtk_cell_view_set_fit_model.
func (recv *CellView) SetFitModel(fitModel bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(fitModel)

	err := cellViewSetFitModelFunction_Set()
	if err == nil {
		cellViewSetFitModelFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_cell_view_set_model' : parameter 'model' of type 'TreeModel' not supported

var checkButtonStruct *gi.Struct
var checkButtonStruct_Once sync.Once

func checkButtonStruct_Set() error {
	var err error
	checkButtonStruct_Once.Do(func() {
		checkButtonStruct, err = gi.StructNew("Gtk", "CheckButton")
	})
	return err
}

type CheckButton struct {
	ToggleButton
}

// FieldToggleButton returns the C field 'toggle_button'.
func (recv *CheckButton) FieldToggleButton() *ToggleButton {
	argValue := gi.FieldGet(checkButtonStruct, recv.Native, "toggle_button")
	value := &ToggleButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldToggleButton sets the value of the C field 'toggle_button'.
func (recv *CheckButton) SetFieldToggleButton(value *ToggleButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(checkButtonStruct, recv.Native, "toggle_button", argValue)
}

var checkButtonNewFunction *gi.Function
var checkButtonNewFunction_Once sync.Once

func checkButtonNewFunction_Set() error {
	var err error
	checkButtonNewFunction_Once.Do(func() {
		err = checkButtonStruct_Set()
		if err != nil {
			return
		}
		checkButtonNewFunction, err = checkButtonStruct.InvokerNew("new")
	})
	return err
}

// CheckButtonNew is a representation of the C type gtk_check_button_new.
func CheckButtonNew() *CheckButton {

	var ret gi.Argument

	err := checkButtonNewFunction_Set()
	if err == nil {
		ret = checkButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &CheckButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkButtonNewWithLabelFunction *gi.Function
var checkButtonNewWithLabelFunction_Once sync.Once

func checkButtonNewWithLabelFunction_Set() error {
	var err error
	checkButtonNewWithLabelFunction_Once.Do(func() {
		err = checkButtonStruct_Set()
		if err != nil {
			return
		}
		checkButtonNewWithLabelFunction, err = checkButtonStruct.InvokerNew("new_with_label")
	})
	return err
}

// CheckButtonNewWithLabel is a representation of the C type gtk_check_button_new_with_label.
func CheckButtonNewWithLabel(label string) *CheckButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := checkButtonNewWithLabelFunction_Set()
	if err == nil {
		ret = checkButtonNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CheckButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkButtonNewWithMnemonicFunction *gi.Function
var checkButtonNewWithMnemonicFunction_Once sync.Once

func checkButtonNewWithMnemonicFunction_Set() error {
	var err error
	checkButtonNewWithMnemonicFunction_Once.Do(func() {
		err = checkButtonStruct_Set()
		if err != nil {
			return
		}
		checkButtonNewWithMnemonicFunction, err = checkButtonStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// CheckButtonNewWithMnemonic is a representation of the C type gtk_check_button_new_with_mnemonic.
func CheckButtonNewWithMnemonic(label string) *CheckButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := checkButtonNewWithMnemonicFunction_Set()
	if err == nil {
		ret = checkButtonNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CheckButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkMenuItemStruct *gi.Struct
var checkMenuItemStruct_Once sync.Once

func checkMenuItemStruct_Set() error {
	var err error
	checkMenuItemStruct_Once.Do(func() {
		checkMenuItemStruct, err = gi.StructNew("Gtk", "CheckMenuItem")
	})
	return err
}

type CheckMenuItem struct {
	MenuItem
}

// FieldMenuItem returns the C field 'menu_item'.
func (recv *CheckMenuItem) FieldMenuItem() *MenuItem {
	argValue := gi.FieldGet(checkMenuItemStruct, recv.Native, "menu_item")
	value := &MenuItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuItem sets the value of the C field 'menu_item'.
func (recv *CheckMenuItem) SetFieldMenuItem(value *MenuItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(checkMenuItemStruct, recv.Native, "menu_item", argValue)
}

var checkMenuItemNewFunction *gi.Function
var checkMenuItemNewFunction_Once sync.Once

func checkMenuItemNewFunction_Set() error {
	var err error
	checkMenuItemNewFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemNewFunction, err = checkMenuItemStruct.InvokerNew("new")
	})
	return err
}

// CheckMenuItemNew is a representation of the C type gtk_check_menu_item_new.
func CheckMenuItemNew() *CheckMenuItem {

	var ret gi.Argument

	err := checkMenuItemNewFunction_Set()
	if err == nil {
		ret = checkMenuItemNewFunction.Invoke(nil, nil)
	}

	retGo := &CheckMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkMenuItemNewWithLabelFunction *gi.Function
var checkMenuItemNewWithLabelFunction_Once sync.Once

func checkMenuItemNewWithLabelFunction_Set() error {
	var err error
	checkMenuItemNewWithLabelFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemNewWithLabelFunction, err = checkMenuItemStruct.InvokerNew("new_with_label")
	})
	return err
}

// CheckMenuItemNewWithLabel is a representation of the C type gtk_check_menu_item_new_with_label.
func CheckMenuItemNewWithLabel(label string) *CheckMenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := checkMenuItemNewWithLabelFunction_Set()
	if err == nil {
		ret = checkMenuItemNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CheckMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkMenuItemNewWithMnemonicFunction *gi.Function
var checkMenuItemNewWithMnemonicFunction_Once sync.Once

func checkMenuItemNewWithMnemonicFunction_Set() error {
	var err error
	checkMenuItemNewWithMnemonicFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemNewWithMnemonicFunction, err = checkMenuItemStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// CheckMenuItemNewWithMnemonic is a representation of the C type gtk_check_menu_item_new_with_mnemonic.
func CheckMenuItemNewWithMnemonic(label string) *CheckMenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := checkMenuItemNewWithMnemonicFunction_Set()
	if err == nil {
		ret = checkMenuItemNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CheckMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var checkMenuItemGetActiveFunction *gi.Function
var checkMenuItemGetActiveFunction_Once sync.Once

func checkMenuItemGetActiveFunction_Set() error {
	var err error
	checkMenuItemGetActiveFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemGetActiveFunction, err = checkMenuItemStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_check_menu_item_get_active.
func (recv *CheckMenuItem) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := checkMenuItemGetActiveFunction_Set()
	if err == nil {
		ret = checkMenuItemGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var checkMenuItemGetDrawAsRadioFunction *gi.Function
var checkMenuItemGetDrawAsRadioFunction_Once sync.Once

func checkMenuItemGetDrawAsRadioFunction_Set() error {
	var err error
	checkMenuItemGetDrawAsRadioFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemGetDrawAsRadioFunction, err = checkMenuItemStruct.InvokerNew("get_draw_as_radio")
	})
	return err
}

// GetDrawAsRadio is a representation of the C type gtk_check_menu_item_get_draw_as_radio.
func (recv *CheckMenuItem) GetDrawAsRadio() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := checkMenuItemGetDrawAsRadioFunction_Set()
	if err == nil {
		ret = checkMenuItemGetDrawAsRadioFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var checkMenuItemGetInconsistentFunction *gi.Function
var checkMenuItemGetInconsistentFunction_Once sync.Once

func checkMenuItemGetInconsistentFunction_Set() error {
	var err error
	checkMenuItemGetInconsistentFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemGetInconsistentFunction, err = checkMenuItemStruct.InvokerNew("get_inconsistent")
	})
	return err
}

// GetInconsistent is a representation of the C type gtk_check_menu_item_get_inconsistent.
func (recv *CheckMenuItem) GetInconsistent() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := checkMenuItemGetInconsistentFunction_Set()
	if err == nil {
		ret = checkMenuItemGetInconsistentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var checkMenuItemSetActiveFunction *gi.Function
var checkMenuItemSetActiveFunction_Once sync.Once

func checkMenuItemSetActiveFunction_Set() error {
	var err error
	checkMenuItemSetActiveFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemSetActiveFunction, err = checkMenuItemStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_check_menu_item_set_active.
func (recv *CheckMenuItem) SetActive(isActive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isActive)

	err := checkMenuItemSetActiveFunction_Set()
	if err == nil {
		checkMenuItemSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var checkMenuItemSetDrawAsRadioFunction *gi.Function
var checkMenuItemSetDrawAsRadioFunction_Once sync.Once

func checkMenuItemSetDrawAsRadioFunction_Set() error {
	var err error
	checkMenuItemSetDrawAsRadioFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemSetDrawAsRadioFunction, err = checkMenuItemStruct.InvokerNew("set_draw_as_radio")
	})
	return err
}

// SetDrawAsRadio is a representation of the C type gtk_check_menu_item_set_draw_as_radio.
func (recv *CheckMenuItem) SetDrawAsRadio(drawAsRadio bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(drawAsRadio)

	err := checkMenuItemSetDrawAsRadioFunction_Set()
	if err == nil {
		checkMenuItemSetDrawAsRadioFunction.Invoke(inArgs[:], nil)
	}

	return
}

var checkMenuItemSetInconsistentFunction *gi.Function
var checkMenuItemSetInconsistentFunction_Once sync.Once

func checkMenuItemSetInconsistentFunction_Set() error {
	var err error
	checkMenuItemSetInconsistentFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemSetInconsistentFunction, err = checkMenuItemStruct.InvokerNew("set_inconsistent")
	})
	return err
}

// SetInconsistent is a representation of the C type gtk_check_menu_item_set_inconsistent.
func (recv *CheckMenuItem) SetInconsistent(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := checkMenuItemSetInconsistentFunction_Set()
	if err == nil {
		checkMenuItemSetInconsistentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var checkMenuItemToggledFunction *gi.Function
var checkMenuItemToggledFunction_Once sync.Once

func checkMenuItemToggledFunction_Set() error {
	var err error
	checkMenuItemToggledFunction_Once.Do(func() {
		err = checkMenuItemStruct_Set()
		if err != nil {
			return
		}
		checkMenuItemToggledFunction, err = checkMenuItemStruct.InvokerNew("toggled")
	})
	return err
}

// Toggled is a representation of the C type gtk_check_menu_item_toggled.
func (recv *CheckMenuItem) Toggled() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := checkMenuItemToggledFunction_Set()
	if err == nil {
		checkMenuItemToggledFunction.Invoke(inArgs[:], nil)
	}

	return
}

var checkMenuItemAccessibleStruct *gi.Struct
var checkMenuItemAccessibleStruct_Once sync.Once

func checkMenuItemAccessibleStruct_Set() error {
	var err error
	checkMenuItemAccessibleStruct_Once.Do(func() {
		checkMenuItemAccessibleStruct, err = gi.StructNew("Gtk", "CheckMenuItemAccessible")
	})
	return err
}

type CheckMenuItemAccessible struct {
	MenuItemAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *CheckMenuItemAccessible) FieldParent() *MenuItemAccessible {
	argValue := gi.FieldGet(checkMenuItemAccessibleStruct, recv.Native, "parent")
	value := &MenuItemAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *CheckMenuItemAccessible) SetFieldParent(value *MenuItemAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(checkMenuItemAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *CheckMenuItemAccessible) FieldPriv() *CheckMenuItemAccessiblePrivate {
	argValue := gi.FieldGet(checkMenuItemAccessibleStruct, recv.Native, "priv")
	value := &CheckMenuItemAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *CheckMenuItemAccessible) SetFieldPriv(value *CheckMenuItemAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(checkMenuItemAccessibleStruct, recv.Native, "priv", argValue)
}

// CheckMenuItemAccessibleStruct creates an uninitialised CheckMenuItemAccessible.
func CheckMenuItemAccessibleStruct() *CheckMenuItemAccessible {
	err := checkMenuItemAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &CheckMenuItemAccessible{}
	structGo.Native = checkMenuItemAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeCheckMenuItemAccessible)
	return structGo
}
func finalizeCheckMenuItemAccessible(obj *CheckMenuItemAccessible) {
	checkMenuItemAccessibleStruct.Free(obj.Native)
}

var clipboardStruct *gi.Struct
var clipboardStruct_Once sync.Once

func clipboardStruct_Set() error {
	var err error
	clipboardStruct_Once.Do(func() {
		clipboardStruct, err = gi.StructNew("Gtk", "Clipboard")
	})
	return err
}

type Clipboard struct {
	gobject.Object
}

var clipboardClearFunction *gi.Function
var clipboardClearFunction_Once sync.Once

func clipboardClearFunction_Set() error {
	var err error
	clipboardClearFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardClearFunction, err = clipboardStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_clipboard_clear.
func (recv *Clipboard) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := clipboardClearFunction_Set()
	if err == nil {
		clipboardClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_clipboard_get_display' : return type 'Gdk.Display' not supported

// UNSUPPORTED : C value 'gtk_clipboard_get_owner' : return type 'GObject.Object' not supported

// UNSUPPORTED : C value 'gtk_clipboard_get_selection' : return type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_contents' : parameter 'target' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_image' : parameter 'callback' of type 'ClipboardImageReceivedFunc' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_rich_text' : parameter 'callback' of type 'ClipboardRichTextReceivedFunc' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_targets' : parameter 'callback' of type 'ClipboardTargetsReceivedFunc' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_text' : parameter 'callback' of type 'ClipboardTextReceivedFunc' not supported

// UNSUPPORTED : C value 'gtk_clipboard_request_uris' : parameter 'callback' of type 'ClipboardURIReceivedFunc' not supported

// UNSUPPORTED : C value 'gtk_clipboard_set_can_store' : parameter 'targets' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_clipboard_set_image' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var clipboardSetTextFunction *gi.Function
var clipboardSetTextFunction_Once sync.Once

func clipboardSetTextFunction_Set() error {
	var err error
	clipboardSetTextFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardSetTextFunction, err = clipboardStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_clipboard_set_text.
func (recv *Clipboard) SetText(text string, len int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)
	inArgs[2].SetInt32(len)

	err := clipboardSetTextFunction_Set()
	if err == nil {
		clipboardSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_clipboard_set_with_data' : parameter 'targets' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_clipboard_set_with_owner' : parameter 'targets' of type 'nil' not supported

var clipboardStoreFunction *gi.Function
var clipboardStoreFunction_Once sync.Once

func clipboardStoreFunction_Set() error {
	var err error
	clipboardStoreFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardStoreFunction, err = clipboardStruct.InvokerNew("store")
	})
	return err
}

// Store is a representation of the C type gtk_clipboard_store.
func (recv *Clipboard) Store() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := clipboardStoreFunction_Set()
	if err == nil {
		clipboardStoreFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_clipboard_wait_for_contents' : parameter 'target' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_clipboard_wait_for_image' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_clipboard_wait_for_rich_text' : parameter 'format' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_clipboard_wait_for_targets' : parameter 'targets' of type 'nil' not supported

var clipboardWaitForTextFunction *gi.Function
var clipboardWaitForTextFunction_Once sync.Once

func clipboardWaitForTextFunction_Set() error {
	var err error
	clipboardWaitForTextFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitForTextFunction, err = clipboardStruct.InvokerNew("wait_for_text")
	})
	return err
}

// WaitForText is a representation of the C type gtk_clipboard_wait_for_text.
func (recv *Clipboard) WaitForText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := clipboardWaitForTextFunction_Set()
	if err == nil {
		ret = clipboardWaitForTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var clipboardWaitForUrisFunction *gi.Function
var clipboardWaitForUrisFunction_Once sync.Once

func clipboardWaitForUrisFunction_Set() error {
	var err error
	clipboardWaitForUrisFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitForUrisFunction, err = clipboardStruct.InvokerNew("wait_for_uris")
	})
	return err
}

// WaitForUris is a representation of the C type gtk_clipboard_wait_for_uris.
func (recv *Clipboard) WaitForUris() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := clipboardWaitForUrisFunction_Set()
	if err == nil {
		clipboardWaitForUrisFunction.Invoke(inArgs[:], nil)
	}

	return
}

var clipboardWaitIsImageAvailableFunction *gi.Function
var clipboardWaitIsImageAvailableFunction_Once sync.Once

func clipboardWaitIsImageAvailableFunction_Set() error {
	var err error
	clipboardWaitIsImageAvailableFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitIsImageAvailableFunction, err = clipboardStruct.InvokerNew("wait_is_image_available")
	})
	return err
}

// WaitIsImageAvailable is a representation of the C type gtk_clipboard_wait_is_image_available.
func (recv *Clipboard) WaitIsImageAvailable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := clipboardWaitIsImageAvailableFunction_Set()
	if err == nil {
		ret = clipboardWaitIsImageAvailableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var clipboardWaitIsRichTextAvailableFunction *gi.Function
var clipboardWaitIsRichTextAvailableFunction_Once sync.Once

func clipboardWaitIsRichTextAvailableFunction_Set() error {
	var err error
	clipboardWaitIsRichTextAvailableFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitIsRichTextAvailableFunction, err = clipboardStruct.InvokerNew("wait_is_rich_text_available")
	})
	return err
}

// WaitIsRichTextAvailable is a representation of the C type gtk_clipboard_wait_is_rich_text_available.
func (recv *Clipboard) WaitIsRichTextAvailable(buffer *TextBuffer) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(buffer.Native)

	var ret gi.Argument

	err := clipboardWaitIsRichTextAvailableFunction_Set()
	if err == nil {
		ret = clipboardWaitIsRichTextAvailableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_clipboard_wait_is_target_available' : parameter 'target' of type 'Gdk.Atom' not supported

var clipboardWaitIsTextAvailableFunction *gi.Function
var clipboardWaitIsTextAvailableFunction_Once sync.Once

func clipboardWaitIsTextAvailableFunction_Set() error {
	var err error
	clipboardWaitIsTextAvailableFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitIsTextAvailableFunction, err = clipboardStruct.InvokerNew("wait_is_text_available")
	})
	return err
}

// WaitIsTextAvailable is a representation of the C type gtk_clipboard_wait_is_text_available.
func (recv *Clipboard) WaitIsTextAvailable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := clipboardWaitIsTextAvailableFunction_Set()
	if err == nil {
		ret = clipboardWaitIsTextAvailableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var clipboardWaitIsUrisAvailableFunction *gi.Function
var clipboardWaitIsUrisAvailableFunction_Once sync.Once

func clipboardWaitIsUrisAvailableFunction_Set() error {
	var err error
	clipboardWaitIsUrisAvailableFunction_Once.Do(func() {
		err = clipboardStruct_Set()
		if err != nil {
			return
		}
		clipboardWaitIsUrisAvailableFunction, err = clipboardStruct.InvokerNew("wait_is_uris_available")
	})
	return err
}

// WaitIsUrisAvailable is a representation of the C type gtk_clipboard_wait_is_uris_available.
func (recv *Clipboard) WaitIsUrisAvailable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := clipboardWaitIsUrisAvailableFunction_Set()
	if err == nil {
		ret = clipboardWaitIsUrisAvailableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// ClipboardStruct creates an uninitialised Clipboard.
func ClipboardStruct() *Clipboard {
	err := clipboardStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Clipboard{}
	structGo.Native = clipboardStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeClipboard)
	return structGo
}
func finalizeClipboard(obj *Clipboard) {
	clipboardStruct.Free(obj.Native)
}

var colorButtonStruct *gi.Struct
var colorButtonStruct_Once sync.Once

func colorButtonStruct_Set() error {
	var err error
	colorButtonStruct_Once.Do(func() {
		colorButtonStruct, err = gi.StructNew("Gtk", "ColorButton")
	})
	return err
}

type ColorButton struct {
	Button
}

// FieldButton returns the C field 'button'.
func (recv *ColorButton) FieldButton() *Button {
	argValue := gi.FieldGet(colorButtonStruct, recv.Native, "button")
	value := &Button{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldButton sets the value of the C field 'button'.
func (recv *ColorButton) SetFieldButton(value *Button) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(colorButtonStruct, recv.Native, "button", argValue)
}

var colorButtonNewFunction *gi.Function
var colorButtonNewFunction_Once sync.Once

func colorButtonNewFunction_Set() error {
	var err error
	colorButtonNewFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonNewFunction, err = colorButtonStruct.InvokerNew("new")
	})
	return err
}

// ColorButtonNew is a representation of the C type gtk_color_button_new.
func ColorButtonNew() *ColorButton {

	var ret gi.Argument

	err := colorButtonNewFunction_Set()
	if err == nil {
		ret = colorButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &ColorButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_color_button_new_with_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_button_new_with_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorButtonGetAlphaFunction *gi.Function
var colorButtonGetAlphaFunction_Once sync.Once

func colorButtonGetAlphaFunction_Set() error {
	var err error
	colorButtonGetAlphaFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonGetAlphaFunction, err = colorButtonStruct.InvokerNew("get_alpha")
	})
	return err
}

// GetAlpha is a representation of the C type gtk_color_button_get_alpha.
func (recv *ColorButton) GetAlpha() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorButtonGetAlphaFunction_Set()
	if err == nil {
		ret = colorButtonGetAlphaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

// UNSUPPORTED : C value 'gtk_color_button_get_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_button_get_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorButtonGetTitleFunction *gi.Function
var colorButtonGetTitleFunction_Once sync.Once

func colorButtonGetTitleFunction_Set() error {
	var err error
	colorButtonGetTitleFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonGetTitleFunction, err = colorButtonStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_color_button_get_title.
func (recv *ColorButton) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorButtonGetTitleFunction_Set()
	if err == nil {
		ret = colorButtonGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var colorButtonGetUseAlphaFunction *gi.Function
var colorButtonGetUseAlphaFunction_Once sync.Once

func colorButtonGetUseAlphaFunction_Set() error {
	var err error
	colorButtonGetUseAlphaFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonGetUseAlphaFunction, err = colorButtonStruct.InvokerNew("get_use_alpha")
	})
	return err
}

// GetUseAlpha is a representation of the C type gtk_color_button_get_use_alpha.
func (recv *ColorButton) GetUseAlpha() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorButtonGetUseAlphaFunction_Set()
	if err == nil {
		ret = colorButtonGetUseAlphaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var colorButtonSetAlphaFunction *gi.Function
var colorButtonSetAlphaFunction_Once sync.Once

func colorButtonSetAlphaFunction_Set() error {
	var err error
	colorButtonSetAlphaFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonSetAlphaFunction, err = colorButtonStruct.InvokerNew("set_alpha")
	})
	return err
}

// SetAlpha is a representation of the C type gtk_color_button_set_alpha.
func (recv *ColorButton) SetAlpha(alpha uint16) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint16(alpha)

	err := colorButtonSetAlphaFunction_Set()
	if err == nil {
		colorButtonSetAlphaFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_color_button_set_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_button_set_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorButtonSetTitleFunction *gi.Function
var colorButtonSetTitleFunction_Once sync.Once

func colorButtonSetTitleFunction_Set() error {
	var err error
	colorButtonSetTitleFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonSetTitleFunction, err = colorButtonStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_color_button_set_title.
func (recv *ColorButton) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := colorButtonSetTitleFunction_Set()
	if err == nil {
		colorButtonSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var colorButtonSetUseAlphaFunction *gi.Function
var colorButtonSetUseAlphaFunction_Once sync.Once

func colorButtonSetUseAlphaFunction_Set() error {
	var err error
	colorButtonSetUseAlphaFunction_Once.Do(func() {
		err = colorButtonStruct_Set()
		if err != nil {
			return
		}
		colorButtonSetUseAlphaFunction, err = colorButtonStruct.InvokerNew("set_use_alpha")
	})
	return err
}

// SetUseAlpha is a representation of the C type gtk_color_button_set_use_alpha.
func (recv *ColorButton) SetUseAlpha(useAlpha bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useAlpha)

	err := colorButtonSetUseAlphaFunction_Set()
	if err == nil {
		colorButtonSetUseAlphaFunction.Invoke(inArgs[:], nil)
	}

	return
}

var colorChooserDialogStruct *gi.Struct
var colorChooserDialogStruct_Once sync.Once

func colorChooserDialogStruct_Set() error {
	var err error
	colorChooserDialogStruct_Once.Do(func() {
		colorChooserDialogStruct, err = gi.StructNew("Gtk", "ColorChooserDialog")
	})
	return err
}

type ColorChooserDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ColorChooserDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(colorChooserDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ColorChooserDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(colorChooserDialogStruct, recv.Native, "parent_instance", argValue)
}

var colorChooserDialogNewFunction *gi.Function
var colorChooserDialogNewFunction_Once sync.Once

func colorChooserDialogNewFunction_Set() error {
	var err error
	colorChooserDialogNewFunction_Once.Do(func() {
		err = colorChooserDialogStruct_Set()
		if err != nil {
			return
		}
		colorChooserDialogNewFunction, err = colorChooserDialogStruct.InvokerNew("new")
	})
	return err
}

// ColorChooserDialogNew is a representation of the C type gtk_color_chooser_dialog_new.
func ColorChooserDialogNew(title string, parent *Window) *ColorChooserDialog {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(title)
	inArgs[1].SetPointer(parent.Native)

	var ret gi.Argument

	err := colorChooserDialogNewFunction_Set()
	if err == nil {
		ret = colorChooserDialogNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ColorChooserDialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

var colorChooserWidgetStruct *gi.Struct
var colorChooserWidgetStruct_Once sync.Once

func colorChooserWidgetStruct_Set() error {
	var err error
	colorChooserWidgetStruct_Once.Do(func() {
		colorChooserWidgetStruct, err = gi.StructNew("Gtk", "ColorChooserWidget")
	})
	return err
}

type ColorChooserWidget struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ColorChooserWidget) FieldParentInstance() *Box {
	argValue := gi.FieldGet(colorChooserWidgetStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ColorChooserWidget) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(colorChooserWidgetStruct, recv.Native, "parent_instance", argValue)
}

var colorChooserWidgetNewFunction *gi.Function
var colorChooserWidgetNewFunction_Once sync.Once

func colorChooserWidgetNewFunction_Set() error {
	var err error
	colorChooserWidgetNewFunction_Once.Do(func() {
		err = colorChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		colorChooserWidgetNewFunction, err = colorChooserWidgetStruct.InvokerNew("new")
	})
	return err
}

// ColorChooserWidgetNew is a representation of the C type gtk_color_chooser_widget_new.
func ColorChooserWidgetNew() *ColorChooserWidget {

	var ret gi.Argument

	err := colorChooserWidgetNewFunction_Set()
	if err == nil {
		ret = colorChooserWidgetNewFunction.Invoke(nil, nil)
	}

	retGo := &ColorChooserWidget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var colorSelectionStruct *gi.Struct
var colorSelectionStruct_Once sync.Once

func colorSelectionStruct_Set() error {
	var err error
	colorSelectionStruct_Once.Do(func() {
		colorSelectionStruct, err = gi.StructNew("Gtk", "ColorSelection")
	})
	return err
}

type ColorSelection struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ColorSelection) FieldParentInstance() *Box {
	argValue := gi.FieldGet(colorSelectionStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ColorSelection) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(colorSelectionStruct, recv.Native, "parent_instance", argValue)
}

var colorSelectionNewFunction *gi.Function
var colorSelectionNewFunction_Once sync.Once

func colorSelectionNewFunction_Set() error {
	var err error
	colorSelectionNewFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionNewFunction, err = colorSelectionStruct.InvokerNew("new")
	})
	return err
}

// ColorSelectionNew is a representation of the C type gtk_color_selection_new.
func ColorSelectionNew() *ColorSelection {

	var ret gi.Argument

	err := colorSelectionNewFunction_Set()
	if err == nil {
		ret = colorSelectionNewFunction.Invoke(nil, nil)
	}

	retGo := &ColorSelection{}
	retGo.Native = ret.Pointer()

	return retGo
}

var colorSelectionGetCurrentAlphaFunction *gi.Function
var colorSelectionGetCurrentAlphaFunction_Once sync.Once

func colorSelectionGetCurrentAlphaFunction_Set() error {
	var err error
	colorSelectionGetCurrentAlphaFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionGetCurrentAlphaFunction, err = colorSelectionStruct.InvokerNew("get_current_alpha")
	})
	return err
}

// GetCurrentAlpha is a representation of the C type gtk_color_selection_get_current_alpha.
func (recv *ColorSelection) GetCurrentAlpha() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionGetCurrentAlphaFunction_Set()
	if err == nil {
		ret = colorSelectionGetCurrentAlphaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

// UNSUPPORTED : C value 'gtk_color_selection_get_current_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_selection_get_current_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorSelectionGetHasOpacityControlFunction *gi.Function
var colorSelectionGetHasOpacityControlFunction_Once sync.Once

func colorSelectionGetHasOpacityControlFunction_Set() error {
	var err error
	colorSelectionGetHasOpacityControlFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionGetHasOpacityControlFunction, err = colorSelectionStruct.InvokerNew("get_has_opacity_control")
	})
	return err
}

// GetHasOpacityControl is a representation of the C type gtk_color_selection_get_has_opacity_control.
func (recv *ColorSelection) GetHasOpacityControl() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionGetHasOpacityControlFunction_Set()
	if err == nil {
		ret = colorSelectionGetHasOpacityControlFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var colorSelectionGetHasPaletteFunction *gi.Function
var colorSelectionGetHasPaletteFunction_Once sync.Once

func colorSelectionGetHasPaletteFunction_Set() error {
	var err error
	colorSelectionGetHasPaletteFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionGetHasPaletteFunction, err = colorSelectionStruct.InvokerNew("get_has_palette")
	})
	return err
}

// GetHasPalette is a representation of the C type gtk_color_selection_get_has_palette.
func (recv *ColorSelection) GetHasPalette() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionGetHasPaletteFunction_Set()
	if err == nil {
		ret = colorSelectionGetHasPaletteFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var colorSelectionGetPreviousAlphaFunction *gi.Function
var colorSelectionGetPreviousAlphaFunction_Once sync.Once

func colorSelectionGetPreviousAlphaFunction_Set() error {
	var err error
	colorSelectionGetPreviousAlphaFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionGetPreviousAlphaFunction, err = colorSelectionStruct.InvokerNew("get_previous_alpha")
	})
	return err
}

// GetPreviousAlpha is a representation of the C type gtk_color_selection_get_previous_alpha.
func (recv *ColorSelection) GetPreviousAlpha() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionGetPreviousAlphaFunction_Set()
	if err == nil {
		ret = colorSelectionGetPreviousAlphaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

// UNSUPPORTED : C value 'gtk_color_selection_get_previous_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_selection_get_previous_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorSelectionIsAdjustingFunction *gi.Function
var colorSelectionIsAdjustingFunction_Once sync.Once

func colorSelectionIsAdjustingFunction_Set() error {
	var err error
	colorSelectionIsAdjustingFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionIsAdjustingFunction, err = colorSelectionStruct.InvokerNew("is_adjusting")
	})
	return err
}

// IsAdjusting is a representation of the C type gtk_color_selection_is_adjusting.
func (recv *ColorSelection) IsAdjusting() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionIsAdjustingFunction_Set()
	if err == nil {
		ret = colorSelectionIsAdjustingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var colorSelectionSetCurrentAlphaFunction *gi.Function
var colorSelectionSetCurrentAlphaFunction_Once sync.Once

func colorSelectionSetCurrentAlphaFunction_Set() error {
	var err error
	colorSelectionSetCurrentAlphaFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionSetCurrentAlphaFunction, err = colorSelectionStruct.InvokerNew("set_current_alpha")
	})
	return err
}

// SetCurrentAlpha is a representation of the C type gtk_color_selection_set_current_alpha.
func (recv *ColorSelection) SetCurrentAlpha(alpha uint16) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint16(alpha)

	err := colorSelectionSetCurrentAlphaFunction_Set()
	if err == nil {
		colorSelectionSetCurrentAlphaFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_color_selection_set_current_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_selection_set_current_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorSelectionSetHasOpacityControlFunction *gi.Function
var colorSelectionSetHasOpacityControlFunction_Once sync.Once

func colorSelectionSetHasOpacityControlFunction_Set() error {
	var err error
	colorSelectionSetHasOpacityControlFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionSetHasOpacityControlFunction, err = colorSelectionStruct.InvokerNew("set_has_opacity_control")
	})
	return err
}

// SetHasOpacityControl is a representation of the C type gtk_color_selection_set_has_opacity_control.
func (recv *ColorSelection) SetHasOpacityControl(hasOpacity bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasOpacity)

	err := colorSelectionSetHasOpacityControlFunction_Set()
	if err == nil {
		colorSelectionSetHasOpacityControlFunction.Invoke(inArgs[:], nil)
	}

	return
}

var colorSelectionSetHasPaletteFunction *gi.Function
var colorSelectionSetHasPaletteFunction_Once sync.Once

func colorSelectionSetHasPaletteFunction_Set() error {
	var err error
	colorSelectionSetHasPaletteFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionSetHasPaletteFunction, err = colorSelectionStruct.InvokerNew("set_has_palette")
	})
	return err
}

// SetHasPalette is a representation of the C type gtk_color_selection_set_has_palette.
func (recv *ColorSelection) SetHasPalette(hasPalette bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasPalette)

	err := colorSelectionSetHasPaletteFunction_Set()
	if err == nil {
		colorSelectionSetHasPaletteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var colorSelectionSetPreviousAlphaFunction *gi.Function
var colorSelectionSetPreviousAlphaFunction_Once sync.Once

func colorSelectionSetPreviousAlphaFunction_Set() error {
	var err error
	colorSelectionSetPreviousAlphaFunction_Once.Do(func() {
		err = colorSelectionStruct_Set()
		if err != nil {
			return
		}
		colorSelectionSetPreviousAlphaFunction, err = colorSelectionStruct.InvokerNew("set_previous_alpha")
	})
	return err
}

// SetPreviousAlpha is a representation of the C type gtk_color_selection_set_previous_alpha.
func (recv *ColorSelection) SetPreviousAlpha(alpha uint16) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint16(alpha)

	err := colorSelectionSetPreviousAlphaFunction_Set()
	if err == nil {
		colorSelectionSetPreviousAlphaFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_color_selection_set_previous_color' : parameter 'color' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_color_selection_set_previous_rgba' : parameter 'rgba' of type 'Gdk.RGBA' not supported

var colorSelectionDialogStruct *gi.Struct
var colorSelectionDialogStruct_Once sync.Once

func colorSelectionDialogStruct_Set() error {
	var err error
	colorSelectionDialogStruct_Once.Do(func() {
		colorSelectionDialogStruct, err = gi.StructNew("Gtk", "ColorSelectionDialog")
	})
	return err
}

type ColorSelectionDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ColorSelectionDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(colorSelectionDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ColorSelectionDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(colorSelectionDialogStruct, recv.Native, "parent_instance", argValue)
}

var colorSelectionDialogNewFunction *gi.Function
var colorSelectionDialogNewFunction_Once sync.Once

func colorSelectionDialogNewFunction_Set() error {
	var err error
	colorSelectionDialogNewFunction_Once.Do(func() {
		err = colorSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		colorSelectionDialogNewFunction, err = colorSelectionDialogStruct.InvokerNew("new")
	})
	return err
}

// ColorSelectionDialogNew is a representation of the C type gtk_color_selection_dialog_new.
func ColorSelectionDialogNew(title string) *ColorSelectionDialog {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(title)

	var ret gi.Argument

	err := colorSelectionDialogNewFunction_Set()
	if err == nil {
		ret = colorSelectionDialogNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ColorSelectionDialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

var colorSelectionDialogGetColorSelectionFunction *gi.Function
var colorSelectionDialogGetColorSelectionFunction_Once sync.Once

func colorSelectionDialogGetColorSelectionFunction_Set() error {
	var err error
	colorSelectionDialogGetColorSelectionFunction_Once.Do(func() {
		err = colorSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		colorSelectionDialogGetColorSelectionFunction, err = colorSelectionDialogStruct.InvokerNew("get_color_selection")
	})
	return err
}

// GetColorSelection is a representation of the C type gtk_color_selection_dialog_get_color_selection.
func (recv *ColorSelectionDialog) GetColorSelection() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := colorSelectionDialogGetColorSelectionFunction_Set()
	if err == nil {
		ret = colorSelectionDialogGetColorSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxStruct *gi.Struct
var comboBoxStruct_Once sync.Once

func comboBoxStruct_Set() error {
	var err error
	comboBoxStruct_Once.Do(func() {
		comboBoxStruct, err = gi.StructNew("Gtk", "ComboBox")
	})
	return err
}

type ComboBox struct {
	Bin
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ComboBox) FieldParentInstance() *Bin {
	argValue := gi.FieldGet(comboBoxStruct, recv.Native, "parent_instance")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ComboBox) SetFieldParentInstance(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(comboBoxStruct, recv.Native, "parent_instance", argValue)
}

var comboBoxNewFunction *gi.Function
var comboBoxNewFunction_Once sync.Once

func comboBoxNewFunction_Set() error {
	var err error
	comboBoxNewFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxNewFunction, err = comboBoxStruct.InvokerNew("new")
	})
	return err
}

// ComboBoxNew is a representation of the C type gtk_combo_box_new.
func ComboBoxNew() *ComboBox {

	var ret gi.Argument

	err := comboBoxNewFunction_Set()
	if err == nil {
		ret = comboBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &ComboBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxNewWithAreaFunction *gi.Function
var comboBoxNewWithAreaFunction_Once sync.Once

func comboBoxNewWithAreaFunction_Set() error {
	var err error
	comboBoxNewWithAreaFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxNewWithAreaFunction, err = comboBoxStruct.InvokerNew("new_with_area")
	})
	return err
}

// ComboBoxNewWithArea is a representation of the C type gtk_combo_box_new_with_area.
func ComboBoxNewWithArea(area *CellArea) *ComboBox {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(area.Native)

	var ret gi.Argument

	err := comboBoxNewWithAreaFunction_Set()
	if err == nil {
		ret = comboBoxNewWithAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ComboBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxNewWithAreaAndEntryFunction *gi.Function
var comboBoxNewWithAreaAndEntryFunction_Once sync.Once

func comboBoxNewWithAreaAndEntryFunction_Set() error {
	var err error
	comboBoxNewWithAreaAndEntryFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxNewWithAreaAndEntryFunction, err = comboBoxStruct.InvokerNew("new_with_area_and_entry")
	})
	return err
}

// ComboBoxNewWithAreaAndEntry is a representation of the C type gtk_combo_box_new_with_area_and_entry.
func ComboBoxNewWithAreaAndEntry(area *CellArea) *ComboBox {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(area.Native)

	var ret gi.Argument

	err := comboBoxNewWithAreaAndEntryFunction_Set()
	if err == nil {
		ret = comboBoxNewWithAreaAndEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ComboBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxNewWithEntryFunction *gi.Function
var comboBoxNewWithEntryFunction_Once sync.Once

func comboBoxNewWithEntryFunction_Set() error {
	var err error
	comboBoxNewWithEntryFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxNewWithEntryFunction, err = comboBoxStruct.InvokerNew("new_with_entry")
	})
	return err
}

// ComboBoxNewWithEntry is a representation of the C type gtk_combo_box_new_with_entry.
func ComboBoxNewWithEntry() *ComboBox {

	var ret gi.Argument

	err := comboBoxNewWithEntryFunction_Set()
	if err == nil {
		ret = comboBoxNewWithEntryFunction.Invoke(nil, nil)
	}

	retGo := &ComboBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_combo_box_new_with_model' : parameter 'model' of type 'TreeModel' not supported

// UNSUPPORTED : C value 'gtk_combo_box_new_with_model_and_entry' : parameter 'model' of type 'TreeModel' not supported

var comboBoxGetActiveFunction *gi.Function
var comboBoxGetActiveFunction_Once sync.Once

func comboBoxGetActiveFunction_Set() error {
	var err error
	comboBoxGetActiveFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetActiveFunction, err = comboBoxStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_combo_box_get_active.
func (recv *ComboBox) GetActive() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetActiveFunction_Set()
	if err == nil {
		ret = comboBoxGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var comboBoxGetActiveIdFunction *gi.Function
var comboBoxGetActiveIdFunction_Once sync.Once

func comboBoxGetActiveIdFunction_Set() error {
	var err error
	comboBoxGetActiveIdFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetActiveIdFunction, err = comboBoxStruct.InvokerNew("get_active_id")
	})
	return err
}

// GetActiveId is a representation of the C type gtk_combo_box_get_active_id.
func (recv *ComboBox) GetActiveId() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetActiveIdFunction_Set()
	if err == nil {
		ret = comboBoxGetActiveIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var comboBoxGetActiveIterFunction *gi.Function
var comboBoxGetActiveIterFunction_Once sync.Once

func comboBoxGetActiveIterFunction_Set() error {
	var err error
	comboBoxGetActiveIterFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetActiveIterFunction, err = comboBoxStruct.InvokerNew("get_active_iter")
	})
	return err
}

// GetActiveIter is a representation of the C type gtk_combo_box_get_active_iter.
func (recv *ComboBox) GetActiveIter() (bool, *TreeIter) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := comboBoxGetActiveIterFunction_Set()
	if err == nil {
		ret = comboBoxGetActiveIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return retGo, out0
}

var comboBoxGetAddTearoffsFunction *gi.Function
var comboBoxGetAddTearoffsFunction_Once sync.Once

func comboBoxGetAddTearoffsFunction_Set() error {
	var err error
	comboBoxGetAddTearoffsFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetAddTearoffsFunction, err = comboBoxStruct.InvokerNew("get_add_tearoffs")
	})
	return err
}

// GetAddTearoffs is a representation of the C type gtk_combo_box_get_add_tearoffs.
func (recv *ComboBox) GetAddTearoffs() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetAddTearoffsFunction_Set()
	if err == nil {
		ret = comboBoxGetAddTearoffsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_combo_box_get_button_sensitivity' : return type 'SensitivityType' not supported

var comboBoxGetColumnSpanColumnFunction *gi.Function
var comboBoxGetColumnSpanColumnFunction_Once sync.Once

func comboBoxGetColumnSpanColumnFunction_Set() error {
	var err error
	comboBoxGetColumnSpanColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetColumnSpanColumnFunction, err = comboBoxStruct.InvokerNew("get_column_span_column")
	})
	return err
}

// GetColumnSpanColumn is a representation of the C type gtk_combo_box_get_column_span_column.
func (recv *ComboBox) GetColumnSpanColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetColumnSpanColumnFunction_Set()
	if err == nil {
		ret = comboBoxGetColumnSpanColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var comboBoxGetEntryTextColumnFunction *gi.Function
var comboBoxGetEntryTextColumnFunction_Once sync.Once

func comboBoxGetEntryTextColumnFunction_Set() error {
	var err error
	comboBoxGetEntryTextColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetEntryTextColumnFunction, err = comboBoxStruct.InvokerNew("get_entry_text_column")
	})
	return err
}

// GetEntryTextColumn is a representation of the C type gtk_combo_box_get_entry_text_column.
func (recv *ComboBox) GetEntryTextColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetEntryTextColumnFunction_Set()
	if err == nil {
		ret = comboBoxGetEntryTextColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var comboBoxGetFocusOnClickFunction *gi.Function
var comboBoxGetFocusOnClickFunction_Once sync.Once

func comboBoxGetFocusOnClickFunction_Set() error {
	var err error
	comboBoxGetFocusOnClickFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetFocusOnClickFunction, err = comboBoxStruct.InvokerNew("get_focus_on_click")
	})
	return err
}

// GetFocusOnClick is a representation of the C type gtk_combo_box_get_focus_on_click.
func (recv *ComboBox) GetFocusOnClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetFocusOnClickFunction_Set()
	if err == nil {
		ret = comboBoxGetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var comboBoxGetHasEntryFunction *gi.Function
var comboBoxGetHasEntryFunction_Once sync.Once

func comboBoxGetHasEntryFunction_Set() error {
	var err error
	comboBoxGetHasEntryFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetHasEntryFunction, err = comboBoxStruct.InvokerNew("get_has_entry")
	})
	return err
}

// GetHasEntry is a representation of the C type gtk_combo_box_get_has_entry.
func (recv *ComboBox) GetHasEntry() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetHasEntryFunction_Set()
	if err == nil {
		ret = comboBoxGetHasEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var comboBoxGetIdColumnFunction *gi.Function
var comboBoxGetIdColumnFunction_Once sync.Once

func comboBoxGetIdColumnFunction_Set() error {
	var err error
	comboBoxGetIdColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetIdColumnFunction, err = comboBoxStruct.InvokerNew("get_id_column")
	})
	return err
}

// GetIdColumn is a representation of the C type gtk_combo_box_get_id_column.
func (recv *ComboBox) GetIdColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetIdColumnFunction_Set()
	if err == nil {
		ret = comboBoxGetIdColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_combo_box_get_model' : return type 'TreeModel' not supported

// UNSUPPORTED : C value 'gtk_combo_box_get_popup_accessible' : return type 'Atk.Object' not supported

var comboBoxGetPopupFixedWidthFunction *gi.Function
var comboBoxGetPopupFixedWidthFunction_Once sync.Once

func comboBoxGetPopupFixedWidthFunction_Set() error {
	var err error
	comboBoxGetPopupFixedWidthFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetPopupFixedWidthFunction, err = comboBoxStruct.InvokerNew("get_popup_fixed_width")
	})
	return err
}

// GetPopupFixedWidth is a representation of the C type gtk_combo_box_get_popup_fixed_width.
func (recv *ComboBox) GetPopupFixedWidth() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetPopupFixedWidthFunction_Set()
	if err == nil {
		ret = comboBoxGetPopupFixedWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_combo_box_get_row_separator_func' : return type 'TreeViewRowSeparatorFunc' not supported

var comboBoxGetRowSpanColumnFunction *gi.Function
var comboBoxGetRowSpanColumnFunction_Once sync.Once

func comboBoxGetRowSpanColumnFunction_Set() error {
	var err error
	comboBoxGetRowSpanColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetRowSpanColumnFunction, err = comboBoxStruct.InvokerNew("get_row_span_column")
	})
	return err
}

// GetRowSpanColumn is a representation of the C type gtk_combo_box_get_row_span_column.
func (recv *ComboBox) GetRowSpanColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetRowSpanColumnFunction_Set()
	if err == nil {
		ret = comboBoxGetRowSpanColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var comboBoxGetTitleFunction *gi.Function
var comboBoxGetTitleFunction_Once sync.Once

func comboBoxGetTitleFunction_Set() error {
	var err error
	comboBoxGetTitleFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetTitleFunction, err = comboBoxStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_combo_box_get_title.
func (recv *ComboBox) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetTitleFunction_Set()
	if err == nil {
		ret = comboBoxGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var comboBoxGetWrapWidthFunction *gi.Function
var comboBoxGetWrapWidthFunction_Once sync.Once

func comboBoxGetWrapWidthFunction_Set() error {
	var err error
	comboBoxGetWrapWidthFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxGetWrapWidthFunction, err = comboBoxStruct.InvokerNew("get_wrap_width")
	})
	return err
}

// GetWrapWidth is a representation of the C type gtk_combo_box_get_wrap_width.
func (recv *ComboBox) GetWrapWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxGetWrapWidthFunction_Set()
	if err == nil {
		ret = comboBoxGetWrapWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var comboBoxPopdownFunction *gi.Function
var comboBoxPopdownFunction_Once sync.Once

func comboBoxPopdownFunction_Set() error {
	var err error
	comboBoxPopdownFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxPopdownFunction, err = comboBoxStruct.InvokerNew("popdown")
	})
	return err
}

// Popdown is a representation of the C type gtk_combo_box_popdown.
func (recv *ComboBox) Popdown() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := comboBoxPopdownFunction_Set()
	if err == nil {
		comboBoxPopdownFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxPopupFunction *gi.Function
var comboBoxPopupFunction_Once sync.Once

func comboBoxPopupFunction_Set() error {
	var err error
	comboBoxPopupFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxPopupFunction, err = comboBoxStruct.InvokerNew("popup")
	})
	return err
}

// Popup is a representation of the C type gtk_combo_box_popup.
func (recv *ComboBox) Popup() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := comboBoxPopupFunction_Set()
	if err == nil {
		comboBoxPopupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_combo_box_popup_for_device' : parameter 'device' of type 'Gdk.Device' not supported

var comboBoxSetActiveFunction *gi.Function
var comboBoxSetActiveFunction_Once sync.Once

func comboBoxSetActiveFunction_Set() error {
	var err error
	comboBoxSetActiveFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetActiveFunction, err = comboBoxStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_combo_box_set_active.
func (recv *ComboBox) SetActive(index int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(index)

	err := comboBoxSetActiveFunction_Set()
	if err == nil {
		comboBoxSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetActiveIdFunction *gi.Function
var comboBoxSetActiveIdFunction_Once sync.Once

func comboBoxSetActiveIdFunction_Set() error {
	var err error
	comboBoxSetActiveIdFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetActiveIdFunction, err = comboBoxStruct.InvokerNew("set_active_id")
	})
	return err
}

// SetActiveId is a representation of the C type gtk_combo_box_set_active_id.
func (recv *ComboBox) SetActiveId(activeId string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(activeId)

	var ret gi.Argument

	err := comboBoxSetActiveIdFunction_Set()
	if err == nil {
		ret = comboBoxSetActiveIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var comboBoxSetActiveIterFunction *gi.Function
var comboBoxSetActiveIterFunction_Once sync.Once

func comboBoxSetActiveIterFunction_Set() error {
	var err error
	comboBoxSetActiveIterFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetActiveIterFunction, err = comboBoxStruct.InvokerNew("set_active_iter")
	})
	return err
}

// SetActiveIter is a representation of the C type gtk_combo_box_set_active_iter.
func (recv *ComboBox) SetActiveIter(iter *TreeIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	err := comboBoxSetActiveIterFunction_Set()
	if err == nil {
		comboBoxSetActiveIterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetAddTearoffsFunction *gi.Function
var comboBoxSetAddTearoffsFunction_Once sync.Once

func comboBoxSetAddTearoffsFunction_Set() error {
	var err error
	comboBoxSetAddTearoffsFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetAddTearoffsFunction, err = comboBoxStruct.InvokerNew("set_add_tearoffs")
	})
	return err
}

// SetAddTearoffs is a representation of the C type gtk_combo_box_set_add_tearoffs.
func (recv *ComboBox) SetAddTearoffs(addTearoffs bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(addTearoffs)

	err := comboBoxSetAddTearoffsFunction_Set()
	if err == nil {
		comboBoxSetAddTearoffsFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_combo_box_set_button_sensitivity' : parameter 'sensitivity' of type 'SensitivityType' not supported

var comboBoxSetColumnSpanColumnFunction *gi.Function
var comboBoxSetColumnSpanColumnFunction_Once sync.Once

func comboBoxSetColumnSpanColumnFunction_Set() error {
	var err error
	comboBoxSetColumnSpanColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetColumnSpanColumnFunction, err = comboBoxStruct.InvokerNew("set_column_span_column")
	})
	return err
}

// SetColumnSpanColumn is a representation of the C type gtk_combo_box_set_column_span_column.
func (recv *ComboBox) SetColumnSpanColumn(columnSpan int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(columnSpan)

	err := comboBoxSetColumnSpanColumnFunction_Set()
	if err == nil {
		comboBoxSetColumnSpanColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetEntryTextColumnFunction *gi.Function
var comboBoxSetEntryTextColumnFunction_Once sync.Once

func comboBoxSetEntryTextColumnFunction_Set() error {
	var err error
	comboBoxSetEntryTextColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetEntryTextColumnFunction, err = comboBoxStruct.InvokerNew("set_entry_text_column")
	})
	return err
}

// SetEntryTextColumn is a representation of the C type gtk_combo_box_set_entry_text_column.
func (recv *ComboBox) SetEntryTextColumn(textColumn int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(textColumn)

	err := comboBoxSetEntryTextColumnFunction_Set()
	if err == nil {
		comboBoxSetEntryTextColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetFocusOnClickFunction *gi.Function
var comboBoxSetFocusOnClickFunction_Once sync.Once

func comboBoxSetFocusOnClickFunction_Set() error {
	var err error
	comboBoxSetFocusOnClickFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetFocusOnClickFunction, err = comboBoxStruct.InvokerNew("set_focus_on_click")
	})
	return err
}

// SetFocusOnClick is a representation of the C type gtk_combo_box_set_focus_on_click.
func (recv *ComboBox) SetFocusOnClick(focusOnClick bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(focusOnClick)

	err := comboBoxSetFocusOnClickFunction_Set()
	if err == nil {
		comboBoxSetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetIdColumnFunction *gi.Function
var comboBoxSetIdColumnFunction_Once sync.Once

func comboBoxSetIdColumnFunction_Set() error {
	var err error
	comboBoxSetIdColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetIdColumnFunction, err = comboBoxStruct.InvokerNew("set_id_column")
	})
	return err
}

// SetIdColumn is a representation of the C type gtk_combo_box_set_id_column.
func (recv *ComboBox) SetIdColumn(idColumn int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(idColumn)

	err := comboBoxSetIdColumnFunction_Set()
	if err == nil {
		comboBoxSetIdColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_combo_box_set_model' : parameter 'model' of type 'TreeModel' not supported

var comboBoxSetPopupFixedWidthFunction *gi.Function
var comboBoxSetPopupFixedWidthFunction_Once sync.Once

func comboBoxSetPopupFixedWidthFunction_Set() error {
	var err error
	comboBoxSetPopupFixedWidthFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetPopupFixedWidthFunction, err = comboBoxStruct.InvokerNew("set_popup_fixed_width")
	})
	return err
}

// SetPopupFixedWidth is a representation of the C type gtk_combo_box_set_popup_fixed_width.
func (recv *ComboBox) SetPopupFixedWidth(fixed bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(fixed)

	err := comboBoxSetPopupFixedWidthFunction_Set()
	if err == nil {
		comboBoxSetPopupFixedWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_combo_box_set_row_separator_func' : parameter 'func' of type 'TreeViewRowSeparatorFunc' not supported

var comboBoxSetRowSpanColumnFunction *gi.Function
var comboBoxSetRowSpanColumnFunction_Once sync.Once

func comboBoxSetRowSpanColumnFunction_Set() error {
	var err error
	comboBoxSetRowSpanColumnFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetRowSpanColumnFunction, err = comboBoxStruct.InvokerNew("set_row_span_column")
	})
	return err
}

// SetRowSpanColumn is a representation of the C type gtk_combo_box_set_row_span_column.
func (recv *ComboBox) SetRowSpanColumn(rowSpan int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(rowSpan)

	err := comboBoxSetRowSpanColumnFunction_Set()
	if err == nil {
		comboBoxSetRowSpanColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetTitleFunction *gi.Function
var comboBoxSetTitleFunction_Once sync.Once

func comboBoxSetTitleFunction_Set() error {
	var err error
	comboBoxSetTitleFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetTitleFunction, err = comboBoxStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_combo_box_set_title.
func (recv *ComboBox) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := comboBoxSetTitleFunction_Set()
	if err == nil {
		comboBoxSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxSetWrapWidthFunction *gi.Function
var comboBoxSetWrapWidthFunction_Once sync.Once

func comboBoxSetWrapWidthFunction_Set() error {
	var err error
	comboBoxSetWrapWidthFunction_Once.Do(func() {
		err = comboBoxStruct_Set()
		if err != nil {
			return
		}
		comboBoxSetWrapWidthFunction, err = comboBoxStruct.InvokerNew("set_wrap_width")
	})
	return err
}

// SetWrapWidth is a representation of the C type gtk_combo_box_set_wrap_width.
func (recv *ComboBox) SetWrapWidth(width int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	err := comboBoxSetWrapWidthFunction_Set()
	if err == nil {
		comboBoxSetWrapWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxAccessibleStruct *gi.Struct
var comboBoxAccessibleStruct_Once sync.Once

func comboBoxAccessibleStruct_Set() error {
	var err error
	comboBoxAccessibleStruct_Once.Do(func() {
		comboBoxAccessibleStruct, err = gi.StructNew("Gtk", "ComboBoxAccessible")
	})
	return err
}

type ComboBoxAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ComboBoxAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(comboBoxAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ComboBoxAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(comboBoxAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ComboBoxAccessible) FieldPriv() *ComboBoxAccessiblePrivate {
	argValue := gi.FieldGet(comboBoxAccessibleStruct, recv.Native, "priv")
	value := &ComboBoxAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ComboBoxAccessible) SetFieldPriv(value *ComboBoxAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(comboBoxAccessibleStruct, recv.Native, "priv", argValue)
}

// ComboBoxAccessibleStruct creates an uninitialised ComboBoxAccessible.
func ComboBoxAccessibleStruct() *ComboBoxAccessible {
	err := comboBoxAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ComboBoxAccessible{}
	structGo.Native = comboBoxAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeComboBoxAccessible)
	return structGo
}
func finalizeComboBoxAccessible(obj *ComboBoxAccessible) {
	comboBoxAccessibleStruct.Free(obj.Native)
}

var comboBoxTextStruct *gi.Struct
var comboBoxTextStruct_Once sync.Once

func comboBoxTextStruct_Set() error {
	var err error
	comboBoxTextStruct_Once.Do(func() {
		comboBoxTextStruct, err = gi.StructNew("Gtk", "ComboBoxText")
	})
	return err
}

type ComboBoxText struct {
	ComboBox
}

var comboBoxTextNewFunction *gi.Function
var comboBoxTextNewFunction_Once sync.Once

func comboBoxTextNewFunction_Set() error {
	var err error
	comboBoxTextNewFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextNewFunction, err = comboBoxTextStruct.InvokerNew("new")
	})
	return err
}

// ComboBoxTextNew is a representation of the C type gtk_combo_box_text_new.
func ComboBoxTextNew() *ComboBoxText {

	var ret gi.Argument

	err := comboBoxTextNewFunction_Set()
	if err == nil {
		ret = comboBoxTextNewFunction.Invoke(nil, nil)
	}

	retGo := &ComboBoxText{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxTextNewWithEntryFunction *gi.Function
var comboBoxTextNewWithEntryFunction_Once sync.Once

func comboBoxTextNewWithEntryFunction_Set() error {
	var err error
	comboBoxTextNewWithEntryFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextNewWithEntryFunction, err = comboBoxTextStruct.InvokerNew("new_with_entry")
	})
	return err
}

// ComboBoxTextNewWithEntry is a representation of the C type gtk_combo_box_text_new_with_entry.
func ComboBoxTextNewWithEntry() *ComboBoxText {

	var ret gi.Argument

	err := comboBoxTextNewWithEntryFunction_Set()
	if err == nil {
		ret = comboBoxTextNewWithEntryFunction.Invoke(nil, nil)
	}

	retGo := &ComboBoxText{}
	retGo.Native = ret.Pointer()

	return retGo
}

var comboBoxTextAppendFunction *gi.Function
var comboBoxTextAppendFunction_Once sync.Once

func comboBoxTextAppendFunction_Set() error {
	var err error
	comboBoxTextAppendFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextAppendFunction, err = comboBoxTextStruct.InvokerNew("append")
	})
	return err
}

// Append is a representation of the C type gtk_combo_box_text_append.
func (recv *ComboBoxText) Append(id string, text string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(id)
	inArgs[2].SetString(text)

	err := comboBoxTextAppendFunction_Set()
	if err == nil {
		comboBoxTextAppendFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextAppendTextFunction *gi.Function
var comboBoxTextAppendTextFunction_Once sync.Once

func comboBoxTextAppendTextFunction_Set() error {
	var err error
	comboBoxTextAppendTextFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextAppendTextFunction, err = comboBoxTextStruct.InvokerNew("append_text")
	})
	return err
}

// AppendText is a representation of the C type gtk_combo_box_text_append_text.
func (recv *ComboBoxText) AppendText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := comboBoxTextAppendTextFunction_Set()
	if err == nil {
		comboBoxTextAppendTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextGetActiveTextFunction *gi.Function
var comboBoxTextGetActiveTextFunction_Once sync.Once

func comboBoxTextGetActiveTextFunction_Set() error {
	var err error
	comboBoxTextGetActiveTextFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextGetActiveTextFunction, err = comboBoxTextStruct.InvokerNew("get_active_text")
	})
	return err
}

// GetActiveText is a representation of the C type gtk_combo_box_text_get_active_text.
func (recv *ComboBoxText) GetActiveText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := comboBoxTextGetActiveTextFunction_Set()
	if err == nil {
		ret = comboBoxTextGetActiveTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var comboBoxTextInsertFunction *gi.Function
var comboBoxTextInsertFunction_Once sync.Once

func comboBoxTextInsertFunction_Set() error {
	var err error
	comboBoxTextInsertFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextInsertFunction, err = comboBoxTextStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_combo_box_text_insert.
func (recv *ComboBoxText) Insert(position int32, id string, text string) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)
	inArgs[2].SetString(id)
	inArgs[3].SetString(text)

	err := comboBoxTextInsertFunction_Set()
	if err == nil {
		comboBoxTextInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextInsertTextFunction *gi.Function
var comboBoxTextInsertTextFunction_Once sync.Once

func comboBoxTextInsertTextFunction_Set() error {
	var err error
	comboBoxTextInsertTextFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextInsertTextFunction, err = comboBoxTextStruct.InvokerNew("insert_text")
	})
	return err
}

// InsertText is a representation of the C type gtk_combo_box_text_insert_text.
func (recv *ComboBoxText) InsertText(position int32, text string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)
	inArgs[2].SetString(text)

	err := comboBoxTextInsertTextFunction_Set()
	if err == nil {
		comboBoxTextInsertTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextPrependFunction *gi.Function
var comboBoxTextPrependFunction_Once sync.Once

func comboBoxTextPrependFunction_Set() error {
	var err error
	comboBoxTextPrependFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextPrependFunction, err = comboBoxTextStruct.InvokerNew("prepend")
	})
	return err
}

// Prepend is a representation of the C type gtk_combo_box_text_prepend.
func (recv *ComboBoxText) Prepend(id string, text string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(id)
	inArgs[2].SetString(text)

	err := comboBoxTextPrependFunction_Set()
	if err == nil {
		comboBoxTextPrependFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextPrependTextFunction *gi.Function
var comboBoxTextPrependTextFunction_Once sync.Once

func comboBoxTextPrependTextFunction_Set() error {
	var err error
	comboBoxTextPrependTextFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextPrependTextFunction, err = comboBoxTextStruct.InvokerNew("prepend_text")
	})
	return err
}

// PrependText is a representation of the C type gtk_combo_box_text_prepend_text.
func (recv *ComboBoxText) PrependText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := comboBoxTextPrependTextFunction_Set()
	if err == nil {
		comboBoxTextPrependTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextRemoveFunction *gi.Function
var comboBoxTextRemoveFunction_Once sync.Once

func comboBoxTextRemoveFunction_Set() error {
	var err error
	comboBoxTextRemoveFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextRemoveFunction, err = comboBoxTextStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_combo_box_text_remove.
func (recv *ComboBoxText) Remove(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := comboBoxTextRemoveFunction_Set()
	if err == nil {
		comboBoxTextRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var comboBoxTextRemoveAllFunction *gi.Function
var comboBoxTextRemoveAllFunction_Once sync.Once

func comboBoxTextRemoveAllFunction_Set() error {
	var err error
	comboBoxTextRemoveAllFunction_Once.Do(func() {
		err = comboBoxTextStruct_Set()
		if err != nil {
			return
		}
		comboBoxTextRemoveAllFunction, err = comboBoxTextStruct.InvokerNew("remove_all")
	})
	return err
}

// RemoveAll is a representation of the C type gtk_combo_box_text_remove_all.
func (recv *ComboBoxText) RemoveAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := comboBoxTextRemoveAllFunction_Set()
	if err == nil {
		comboBoxTextRemoveAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerStruct *gi.Struct
var containerStruct_Once sync.Once

func containerStruct_Set() error {
	var err error
	containerStruct_Once.Do(func() {
		containerStruct, err = gi.StructNew("Gtk", "Container")
	})
	return err
}

type Container struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Container) FieldWidget() *Widget {
	argValue := gi.FieldGet(containerStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Container) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(containerStruct, recv.Native, "widget", argValue)
}

var containerAddFunction *gi.Function
var containerAddFunction_Once sync.Once

func containerAddFunction_Set() error {
	var err error
	containerAddFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerAddFunction, err = containerStruct.InvokerNew("add")
	})
	return err
}

// Add is a representation of the C type gtk_container_add.
func (recv *Container) Add(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := containerAddFunction_Set()
	if err == nil {
		containerAddFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_add_with_properties' : parameter '...' of type 'nil' not supported

var containerCheckResizeFunction *gi.Function
var containerCheckResizeFunction_Once sync.Once

func containerCheckResizeFunction_Set() error {
	var err error
	containerCheckResizeFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerCheckResizeFunction, err = containerStruct.InvokerNew("check_resize")
	})
	return err
}

// CheckResize is a representation of the C type gtk_container_check_resize.
func (recv *Container) CheckResize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := containerCheckResizeFunction_Set()
	if err == nil {
		containerCheckResizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_child_get' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_container_child_get_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_container_child_get_valist' : parameter 'var_args' of type 'va_list' not supported

var containerChildNotifyFunction *gi.Function
var containerChildNotifyFunction_Once sync.Once

func containerChildNotifyFunction_Set() error {
	var err error
	containerChildNotifyFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerChildNotifyFunction, err = containerStruct.InvokerNew("child_notify")
	})
	return err
}

// ChildNotify is a representation of the C type gtk_container_child_notify.
func (recv *Container) ChildNotify(child *Widget, childProperty string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetString(childProperty)

	err := containerChildNotifyFunction_Set()
	if err == nil {
		containerChildNotifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_child_notify_by_pspec' : parameter 'pspec' of type 'GObject.ParamSpec' not supported

// UNSUPPORTED : C value 'gtk_container_child_set' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_container_child_set_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_container_child_set_valist' : parameter 'var_args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_container_child_type' : return type 'GType' not supported

// UNSUPPORTED : C value 'gtk_container_forall' : parameter 'callback' of type 'Callback' not supported

// UNSUPPORTED : C value 'gtk_container_foreach' : parameter 'callback' of type 'Callback' not supported

var containerGetBorderWidthFunction *gi.Function
var containerGetBorderWidthFunction_Once sync.Once

func containerGetBorderWidthFunction_Set() error {
	var err error
	containerGetBorderWidthFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerGetBorderWidthFunction, err = containerStruct.InvokerNew("get_border_width")
	})
	return err
}

// GetBorderWidth is a representation of the C type gtk_container_get_border_width.
func (recv *Container) GetBorderWidth() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := containerGetBorderWidthFunction_Set()
	if err == nil {
		ret = containerGetBorderWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_container_get_children' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_container_get_focus_chain' : parameter 'focusable_widgets' of type 'GLib.List' not supported

var containerGetFocusChildFunction *gi.Function
var containerGetFocusChildFunction_Once sync.Once

func containerGetFocusChildFunction_Set() error {
	var err error
	containerGetFocusChildFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerGetFocusChildFunction, err = containerStruct.InvokerNew("get_focus_child")
	})
	return err
}

// GetFocusChild is a representation of the C type gtk_container_get_focus_child.
func (recv *Container) GetFocusChild() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := containerGetFocusChildFunction_Set()
	if err == nil {
		ret = containerGetFocusChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var containerGetFocusHadjustmentFunction *gi.Function
var containerGetFocusHadjustmentFunction_Once sync.Once

func containerGetFocusHadjustmentFunction_Set() error {
	var err error
	containerGetFocusHadjustmentFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerGetFocusHadjustmentFunction, err = containerStruct.InvokerNew("get_focus_hadjustment")
	})
	return err
}

// GetFocusHadjustment is a representation of the C type gtk_container_get_focus_hadjustment.
func (recv *Container) GetFocusHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := containerGetFocusHadjustmentFunction_Set()
	if err == nil {
		ret = containerGetFocusHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var containerGetFocusVadjustmentFunction *gi.Function
var containerGetFocusVadjustmentFunction_Once sync.Once

func containerGetFocusVadjustmentFunction_Set() error {
	var err error
	containerGetFocusVadjustmentFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerGetFocusVadjustmentFunction, err = containerStruct.InvokerNew("get_focus_vadjustment")
	})
	return err
}

// GetFocusVadjustment is a representation of the C type gtk_container_get_focus_vadjustment.
func (recv *Container) GetFocusVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := containerGetFocusVadjustmentFunction_Set()
	if err == nil {
		ret = containerGetFocusVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var containerGetPathForChildFunction *gi.Function
var containerGetPathForChildFunction_Once sync.Once

func containerGetPathForChildFunction_Set() error {
	var err error
	containerGetPathForChildFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerGetPathForChildFunction, err = containerStruct.InvokerNew("get_path_for_child")
	})
	return err
}

// GetPathForChild is a representation of the C type gtk_container_get_path_for_child.
func (recv *Container) GetPathForChild(child *Widget) *WidgetPath {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := containerGetPathForChildFunction_Set()
	if err == nil {
		ret = containerGetPathForChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := &WidgetPath{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_container_get_resize_mode' : return type 'ResizeMode' not supported

// UNSUPPORTED : C value 'gtk_container_propagate_draw' : parameter 'cr' of type 'cairo.Context' not supported

var containerRemoveFunction *gi.Function
var containerRemoveFunction_Once sync.Once

func containerRemoveFunction_Set() error {
	var err error
	containerRemoveFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerRemoveFunction, err = containerStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_container_remove.
func (recv *Container) Remove(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := containerRemoveFunction_Set()
	if err == nil {
		containerRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerResizeChildrenFunction *gi.Function
var containerResizeChildrenFunction_Once sync.Once

func containerResizeChildrenFunction_Set() error {
	var err error
	containerResizeChildrenFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerResizeChildrenFunction, err = containerStruct.InvokerNew("resize_children")
	})
	return err
}

// ResizeChildren is a representation of the C type gtk_container_resize_children.
func (recv *Container) ResizeChildren() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := containerResizeChildrenFunction_Set()
	if err == nil {
		containerResizeChildrenFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerSetBorderWidthFunction *gi.Function
var containerSetBorderWidthFunction_Once sync.Once

func containerSetBorderWidthFunction_Set() error {
	var err error
	containerSetBorderWidthFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerSetBorderWidthFunction, err = containerStruct.InvokerNew("set_border_width")
	})
	return err
}

// SetBorderWidth is a representation of the C type gtk_container_set_border_width.
func (recv *Container) SetBorderWidth(borderWidth uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(borderWidth)

	err := containerSetBorderWidthFunction_Set()
	if err == nil {
		containerSetBorderWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_set_focus_chain' : parameter 'focusable_widgets' of type 'GLib.List' not supported

var containerSetFocusChildFunction *gi.Function
var containerSetFocusChildFunction_Once sync.Once

func containerSetFocusChildFunction_Set() error {
	var err error
	containerSetFocusChildFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerSetFocusChildFunction, err = containerStruct.InvokerNew("set_focus_child")
	})
	return err
}

// SetFocusChild is a representation of the C type gtk_container_set_focus_child.
func (recv *Container) SetFocusChild(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := containerSetFocusChildFunction_Set()
	if err == nil {
		containerSetFocusChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerSetFocusHadjustmentFunction *gi.Function
var containerSetFocusHadjustmentFunction_Once sync.Once

func containerSetFocusHadjustmentFunction_Set() error {
	var err error
	containerSetFocusHadjustmentFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerSetFocusHadjustmentFunction, err = containerStruct.InvokerNew("set_focus_hadjustment")
	})
	return err
}

// SetFocusHadjustment is a representation of the C type gtk_container_set_focus_hadjustment.
func (recv *Container) SetFocusHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := containerSetFocusHadjustmentFunction_Set()
	if err == nil {
		containerSetFocusHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerSetFocusVadjustmentFunction *gi.Function
var containerSetFocusVadjustmentFunction_Once sync.Once

func containerSetFocusVadjustmentFunction_Set() error {
	var err error
	containerSetFocusVadjustmentFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerSetFocusVadjustmentFunction, err = containerStruct.InvokerNew("set_focus_vadjustment")
	})
	return err
}

// SetFocusVadjustment is a representation of the C type gtk_container_set_focus_vadjustment.
func (recv *Container) SetFocusVadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := containerSetFocusVadjustmentFunction_Set()
	if err == nil {
		containerSetFocusVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var containerSetReallocateRedrawsFunction *gi.Function
var containerSetReallocateRedrawsFunction_Once sync.Once

func containerSetReallocateRedrawsFunction_Set() error {
	var err error
	containerSetReallocateRedrawsFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerSetReallocateRedrawsFunction, err = containerStruct.InvokerNew("set_reallocate_redraws")
	})
	return err
}

// SetReallocateRedraws is a representation of the C type gtk_container_set_reallocate_redraws.
func (recv *Container) SetReallocateRedraws(needsRedraws bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(needsRedraws)

	err := containerSetReallocateRedrawsFunction_Set()
	if err == nil {
		containerSetReallocateRedrawsFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_set_resize_mode' : parameter 'resize_mode' of type 'ResizeMode' not supported

var containerUnsetFocusChainFunction *gi.Function
var containerUnsetFocusChainFunction_Once sync.Once

func containerUnsetFocusChainFunction_Set() error {
	var err error
	containerUnsetFocusChainFunction_Once.Do(func() {
		err = containerStruct_Set()
		if err != nil {
			return
		}
		containerUnsetFocusChainFunction, err = containerStruct.InvokerNew("unset_focus_chain")
	})
	return err
}

// UnsetFocusChain is a representation of the C type gtk_container_unset_focus_chain.
func (recv *Container) UnsetFocusChain() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := containerUnsetFocusChainFunction_Set()
	if err == nil {
		containerUnsetFocusChainFunction.Invoke(inArgs[:], nil)
	}

	return
}

// ContainerStruct creates an uninitialised Container.
func ContainerStruct() *Container {
	err := containerStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Container{}
	structGo.Native = containerStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeContainer)
	return structGo
}
func finalizeContainer(obj *Container) {
	containerStruct.Free(obj.Native)
}

var containerAccessibleStruct *gi.Struct
var containerAccessibleStruct_Once sync.Once

func containerAccessibleStruct_Set() error {
	var err error
	containerAccessibleStruct_Once.Do(func() {
		containerAccessibleStruct, err = gi.StructNew("Gtk", "ContainerAccessible")
	})
	return err
}

type ContainerAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ContainerAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(containerAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ContainerAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(containerAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ContainerAccessible) FieldPriv() *ContainerAccessiblePrivate {
	argValue := gi.FieldGet(containerAccessibleStruct, recv.Native, "priv")
	value := &ContainerAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ContainerAccessible) SetFieldPriv(value *ContainerAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(containerAccessibleStruct, recv.Native, "priv", argValue)
}

// ContainerAccessibleStruct creates an uninitialised ContainerAccessible.
func ContainerAccessibleStruct() *ContainerAccessible {
	err := containerAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ContainerAccessible{}
	structGo.Native = containerAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeContainerAccessible)
	return structGo
}
func finalizeContainerAccessible(obj *ContainerAccessible) {
	containerAccessibleStruct.Free(obj.Native)
}

var containerCellAccessibleStruct *gi.Struct
var containerCellAccessibleStruct_Once sync.Once

func containerCellAccessibleStruct_Set() error {
	var err error
	containerCellAccessibleStruct_Once.Do(func() {
		containerCellAccessibleStruct, err = gi.StructNew("Gtk", "ContainerCellAccessible")
	})
	return err
}

type ContainerCellAccessible struct {
	CellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ContainerCellAccessible) FieldParent() *CellAccessible {
	argValue := gi.FieldGet(containerCellAccessibleStruct, recv.Native, "parent")
	value := &CellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ContainerCellAccessible) SetFieldParent(value *CellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(containerCellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ContainerCellAccessible) FieldPriv() *ContainerCellAccessiblePrivate {
	argValue := gi.FieldGet(containerCellAccessibleStruct, recv.Native, "priv")
	value := &ContainerCellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ContainerCellAccessible) SetFieldPriv(value *ContainerCellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(containerCellAccessibleStruct, recv.Native, "priv", argValue)
}

var containerCellAccessibleNewFunction *gi.Function
var containerCellAccessibleNewFunction_Once sync.Once

func containerCellAccessibleNewFunction_Set() error {
	var err error
	containerCellAccessibleNewFunction_Once.Do(func() {
		err = containerCellAccessibleStruct_Set()
		if err != nil {
			return
		}
		containerCellAccessibleNewFunction, err = containerCellAccessibleStruct.InvokerNew("new")
	})
	return err
}

// ContainerCellAccessibleNew is a representation of the C type gtk_container_cell_accessible_new.
func ContainerCellAccessibleNew() *ContainerCellAccessible {

	var ret gi.Argument

	err := containerCellAccessibleNewFunction_Set()
	if err == nil {
		ret = containerCellAccessibleNewFunction.Invoke(nil, nil)
	}

	retGo := &ContainerCellAccessible{}
	retGo.Native = ret.Pointer()

	return retGo
}

var containerCellAccessibleAddChildFunction *gi.Function
var containerCellAccessibleAddChildFunction_Once sync.Once

func containerCellAccessibleAddChildFunction_Set() error {
	var err error
	containerCellAccessibleAddChildFunction_Once.Do(func() {
		err = containerCellAccessibleStruct_Set()
		if err != nil {
			return
		}
		containerCellAccessibleAddChildFunction, err = containerCellAccessibleStruct.InvokerNew("add_child")
	})
	return err
}

// AddChild is a representation of the C type gtk_container_cell_accessible_add_child.
func (recv *ContainerCellAccessible) AddChild(child *CellAccessible) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := containerCellAccessibleAddChildFunction_Set()
	if err == nil {
		containerCellAccessibleAddChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_container_cell_accessible_get_children' : return type 'GLib.List' not supported

var containerCellAccessibleRemoveChildFunction *gi.Function
var containerCellAccessibleRemoveChildFunction_Once sync.Once

func containerCellAccessibleRemoveChildFunction_Set() error {
	var err error
	containerCellAccessibleRemoveChildFunction_Once.Do(func() {
		err = containerCellAccessibleStruct_Set()
		if err != nil {
			return
		}
		containerCellAccessibleRemoveChildFunction, err = containerCellAccessibleStruct.InvokerNew("remove_child")
	})
	return err
}

// RemoveChild is a representation of the C type gtk_container_cell_accessible_remove_child.
func (recv *ContainerCellAccessible) RemoveChild(child *CellAccessible) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := containerCellAccessibleRemoveChildFunction_Set()
	if err == nil {
		containerCellAccessibleRemoveChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cssProviderStruct *gi.Struct
var cssProviderStruct_Once sync.Once

func cssProviderStruct_Set() error {
	var err error
	cssProviderStruct_Once.Do(func() {
		cssProviderStruct, err = gi.StructNew("Gtk", "CssProvider")
	})
	return err
}

type CssProvider struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *CssProvider) FieldPriv() *CssProviderPrivate {
	argValue := gi.FieldGet(cssProviderStruct, recv.Native, "priv")
	value := &CssProviderPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *CssProvider) SetFieldPriv(value *CssProviderPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(cssProviderStruct, recv.Native, "priv", argValue)
}

var cssProviderNewFunction *gi.Function
var cssProviderNewFunction_Once sync.Once

func cssProviderNewFunction_Set() error {
	var err error
	cssProviderNewFunction_Once.Do(func() {
		err = cssProviderStruct_Set()
		if err != nil {
			return
		}
		cssProviderNewFunction, err = cssProviderStruct.InvokerNew("new")
	})
	return err
}

// CssProviderNew is a representation of the C type gtk_css_provider_new.
func CssProviderNew() *CssProvider {

	var ret gi.Argument

	err := cssProviderNewFunction_Set()
	if err == nil {
		ret = cssProviderNewFunction.Invoke(nil, nil)
	}

	retGo := &CssProvider{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_css_provider_load_from_data' : parameter 'data' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_css_provider_load_from_file' : parameter 'file' of type 'Gio.File' not supported

var cssProviderLoadFromPathFunction *gi.Function
var cssProviderLoadFromPathFunction_Once sync.Once

func cssProviderLoadFromPathFunction_Set() error {
	var err error
	cssProviderLoadFromPathFunction_Once.Do(func() {
		err = cssProviderStruct_Set()
		if err != nil {
			return
		}
		cssProviderLoadFromPathFunction, err = cssProviderStruct.InvokerNew("load_from_path")
	})
	return err
}

// LoadFromPath is a representation of the C type gtk_css_provider_load_from_path.
func (recv *CssProvider) LoadFromPath(path string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	var ret gi.Argument

	err := cssProviderLoadFromPathFunction_Set()
	if err == nil {
		ret = cssProviderLoadFromPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var cssProviderLoadFromResourceFunction *gi.Function
var cssProviderLoadFromResourceFunction_Once sync.Once

func cssProviderLoadFromResourceFunction_Set() error {
	var err error
	cssProviderLoadFromResourceFunction_Once.Do(func() {
		err = cssProviderStruct_Set()
		if err != nil {
			return
		}
		cssProviderLoadFromResourceFunction, err = cssProviderStruct.InvokerNew("load_from_resource")
	})
	return err
}

// LoadFromResource is a representation of the C type gtk_css_provider_load_from_resource.
func (recv *CssProvider) LoadFromResource(resourcePath string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(resourcePath)

	err := cssProviderLoadFromResourceFunction_Set()
	if err == nil {
		cssProviderLoadFromResourceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var cssProviderToStringFunction *gi.Function
var cssProviderToStringFunction_Once sync.Once

func cssProviderToStringFunction_Set() error {
	var err error
	cssProviderToStringFunction_Once.Do(func() {
		err = cssProviderStruct_Set()
		if err != nil {
			return
		}
		cssProviderToStringFunction, err = cssProviderStruct.InvokerNew("to_string")
	})
	return err
}

// ToString is a representation of the C type gtk_css_provider_to_string.
func (recv *CssProvider) ToString() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := cssProviderToStringFunction_Set()
	if err == nil {
		ret = cssProviderToStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var dialogStruct *gi.Struct
var dialogStruct_Once sync.Once

func dialogStruct_Set() error {
	var err error
	dialogStruct_Once.Do(func() {
		dialogStruct, err = gi.StructNew("Gtk", "Dialog")
	})
	return err
}

type Dialog struct {
	Window
}

// FieldWindow returns the C field 'window'.
func (recv *Dialog) FieldWindow() *Window {
	argValue := gi.FieldGet(dialogStruct, recv.Native, "window")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWindow sets the value of the C field 'window'.
func (recv *Dialog) SetFieldWindow(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(dialogStruct, recv.Native, "window", argValue)
}

var dialogNewFunction *gi.Function
var dialogNewFunction_Once sync.Once

func dialogNewFunction_Set() error {
	var err error
	dialogNewFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogNewFunction, err = dialogStruct.InvokerNew("new")
	})
	return err
}

// DialogNew is a representation of the C type gtk_dialog_new.
func DialogNew() *Dialog {

	var ret gi.Argument

	err := dialogNewFunction_Set()
	if err == nil {
		ret = dialogNewFunction.Invoke(nil, nil)
	}

	retGo := &Dialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_dialog_new_with_buttons' : parameter 'flags' of type 'DialogFlags' not supported

// UNSUPPORTED : C value 'gtk_dialog_add_action_widget' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_dialog_add_button' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_dialog_add_buttons' : parameter '...' of type 'nil' not supported

var dialogGetActionAreaFunction *gi.Function
var dialogGetActionAreaFunction_Once sync.Once

func dialogGetActionAreaFunction_Set() error {
	var err error
	dialogGetActionAreaFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogGetActionAreaFunction, err = dialogStruct.InvokerNew("get_action_area")
	})
	return err
}

// GetActionArea is a representation of the C type gtk_dialog_get_action_area.
func (recv *Dialog) GetActionArea() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := dialogGetActionAreaFunction_Set()
	if err == nil {
		ret = dialogGetActionAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var dialogGetContentAreaFunction *gi.Function
var dialogGetContentAreaFunction_Once sync.Once

func dialogGetContentAreaFunction_Set() error {
	var err error
	dialogGetContentAreaFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogGetContentAreaFunction, err = dialogStruct.InvokerNew("get_content_area")
	})
	return err
}

// GetContentArea is a representation of the C type gtk_dialog_get_content_area.
func (recv *Dialog) GetContentArea() *Box {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := dialogGetContentAreaFunction_Set()
	if err == nil {
		ret = dialogGetContentAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Box{}
	retGo.Native = ret.Pointer()

	return retGo
}

var dialogGetHeaderBarFunction *gi.Function
var dialogGetHeaderBarFunction_Once sync.Once

func dialogGetHeaderBarFunction_Set() error {
	var err error
	dialogGetHeaderBarFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogGetHeaderBarFunction, err = dialogStruct.InvokerNew("get_header_bar")
	})
	return err
}

// GetHeaderBar is a representation of the C type gtk_dialog_get_header_bar.
func (recv *Dialog) GetHeaderBar() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := dialogGetHeaderBarFunction_Set()
	if err == nil {
		ret = dialogGetHeaderBarFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var dialogGetResponseForWidgetFunction *gi.Function
var dialogGetResponseForWidgetFunction_Once sync.Once

func dialogGetResponseForWidgetFunction_Set() error {
	var err error
	dialogGetResponseForWidgetFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogGetResponseForWidgetFunction, err = dialogStruct.InvokerNew("get_response_for_widget")
	})
	return err
}

// GetResponseForWidget is a representation of the C type gtk_dialog_get_response_for_widget.
func (recv *Dialog) GetResponseForWidget(widget *Widget) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var ret gi.Argument

	err := dialogGetResponseForWidgetFunction_Set()
	if err == nil {
		ret = dialogGetResponseForWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_dialog_get_widget_for_response' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_dialog_response' : parameter 'response_id' of type 'ResponseType' not supported

var dialogRunFunction *gi.Function
var dialogRunFunction_Once sync.Once

func dialogRunFunction_Set() error {
	var err error
	dialogRunFunction_Once.Do(func() {
		err = dialogStruct_Set()
		if err != nil {
			return
		}
		dialogRunFunction, err = dialogStruct.InvokerNew("run")
	})
	return err
}

// Run is a representation of the C type gtk_dialog_run.
func (recv *Dialog) Run() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := dialogRunFunction_Set()
	if err == nil {
		ret = dialogRunFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_dialog_set_alternative_button_order' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_dialog_set_alternative_button_order_from_array' : parameter 'new_order' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_dialog_set_default_response' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_dialog_set_response_sensitive' : parameter 'response_id' of type 'ResponseType' not supported

var drawingAreaStruct *gi.Struct
var drawingAreaStruct_Once sync.Once

func drawingAreaStruct_Set() error {
	var err error
	drawingAreaStruct_Once.Do(func() {
		drawingAreaStruct, err = gi.StructNew("Gtk", "DrawingArea")
	})
	return err
}

type DrawingArea struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *DrawingArea) FieldWidget() *Widget {
	argValue := gi.FieldGet(drawingAreaStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *DrawingArea) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(drawingAreaStruct, recv.Native, "widget", argValue)
}

var drawingAreaNewFunction *gi.Function
var drawingAreaNewFunction_Once sync.Once

func drawingAreaNewFunction_Set() error {
	var err error
	drawingAreaNewFunction_Once.Do(func() {
		err = drawingAreaStruct_Set()
		if err != nil {
			return
		}
		drawingAreaNewFunction, err = drawingAreaStruct.InvokerNew("new")
	})
	return err
}

// DrawingAreaNew is a representation of the C type gtk_drawing_area_new.
func DrawingAreaNew() *DrawingArea {

	var ret gi.Argument

	err := drawingAreaNewFunction_Set()
	if err == nil {
		ret = drawingAreaNewFunction.Invoke(nil, nil)
	}

	retGo := &DrawingArea{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryStruct *gi.Struct
var entryStruct_Once sync.Once

func entryStruct_Set() error {
	var err error
	entryStruct_Once.Do(func() {
		entryStruct, err = gi.StructNew("Gtk", "Entry")
	})
	return err
}

type Entry struct {
	Widget
}

var entryNewFunction *gi.Function
var entryNewFunction_Once sync.Once

func entryNewFunction_Set() error {
	var err error
	entryNewFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryNewFunction, err = entryStruct.InvokerNew("new")
	})
	return err
}

// EntryNew is a representation of the C type gtk_entry_new.
func EntryNew() *Entry {

	var ret gi.Argument

	err := entryNewFunction_Set()
	if err == nil {
		ret = entryNewFunction.Invoke(nil, nil)
	}

	retGo := &Entry{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryNewWithBufferFunction *gi.Function
var entryNewWithBufferFunction_Once sync.Once

func entryNewWithBufferFunction_Set() error {
	var err error
	entryNewWithBufferFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryNewWithBufferFunction, err = entryStruct.InvokerNew("new_with_buffer")
	})
	return err
}

// EntryNewWithBuffer is a representation of the C type gtk_entry_new_with_buffer.
func EntryNewWithBuffer(buffer *EntryBuffer) *Entry {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(buffer.Native)

	var ret gi.Argument

	err := entryNewWithBufferFunction_Set()
	if err == nil {
		ret = entryNewWithBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Entry{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryGetActivatesDefaultFunction *gi.Function
var entryGetActivatesDefaultFunction_Once sync.Once

func entryGetActivatesDefaultFunction_Set() error {
	var err error
	entryGetActivatesDefaultFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetActivatesDefaultFunction, err = entryStruct.InvokerNew("get_activates_default")
	})
	return err
}

// GetActivatesDefault is a representation of the C type gtk_entry_get_activates_default.
func (recv *Entry) GetActivatesDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetActivatesDefaultFunction_Set()
	if err == nil {
		ret = entryGetActivatesDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryGetAlignmentFunction *gi.Function
var entryGetAlignmentFunction_Once sync.Once

func entryGetAlignmentFunction_Set() error {
	var err error
	entryGetAlignmentFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetAlignmentFunction, err = entryStruct.InvokerNew("get_alignment")
	})
	return err
}

// GetAlignment is a representation of the C type gtk_entry_get_alignment.
func (recv *Entry) GetAlignment() float32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetAlignmentFunction_Set()
	if err == nil {
		ret = entryGetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_attributes' : return type 'Pango.AttrList' not supported

var entryGetBufferFunction *gi.Function
var entryGetBufferFunction_Once sync.Once

func entryGetBufferFunction_Set() error {
	var err error
	entryGetBufferFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetBufferFunction, err = entryStruct.InvokerNew("get_buffer")
	})
	return err
}

// GetBuffer is a representation of the C type gtk_entry_get_buffer.
func (recv *Entry) GetBuffer() *EntryBuffer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetBufferFunction_Set()
	if err == nil {
		ret = entryGetBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EntryBuffer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryGetCompletionFunction *gi.Function
var entryGetCompletionFunction_Once sync.Once

func entryGetCompletionFunction_Set() error {
	var err error
	entryGetCompletionFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetCompletionFunction, err = entryStruct.InvokerNew("get_completion")
	})
	return err
}

// GetCompletion is a representation of the C type gtk_entry_get_completion.
func (recv *Entry) GetCompletion() *EntryCompletion {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetCompletionFunction_Set()
	if err == nil {
		ret = entryGetCompletionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EntryCompletion{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryGetCurrentIconDragSourceFunction *gi.Function
var entryGetCurrentIconDragSourceFunction_Once sync.Once

func entryGetCurrentIconDragSourceFunction_Set() error {
	var err error
	entryGetCurrentIconDragSourceFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetCurrentIconDragSourceFunction, err = entryStruct.InvokerNew("get_current_icon_drag_source")
	})
	return err
}

// GetCurrentIconDragSource is a representation of the C type gtk_entry_get_current_icon_drag_source.
func (recv *Entry) GetCurrentIconDragSource() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetCurrentIconDragSourceFunction_Set()
	if err == nil {
		ret = entryGetCurrentIconDragSourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryGetCursorHadjustmentFunction *gi.Function
var entryGetCursorHadjustmentFunction_Once sync.Once

func entryGetCursorHadjustmentFunction_Set() error {
	var err error
	entryGetCursorHadjustmentFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetCursorHadjustmentFunction, err = entryStruct.InvokerNew("get_cursor_hadjustment")
	})
	return err
}

// GetCursorHadjustment is a representation of the C type gtk_entry_get_cursor_hadjustment.
func (recv *Entry) GetCursorHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetCursorHadjustmentFunction_Set()
	if err == nil {
		ret = entryGetCursorHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryGetHasFrameFunction *gi.Function
var entryGetHasFrameFunction_Once sync.Once

func entryGetHasFrameFunction_Set() error {
	var err error
	entryGetHasFrameFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetHasFrameFunction, err = entryStruct.InvokerNew("get_has_frame")
	})
	return err
}

// GetHasFrame is a representation of the C type gtk_entry_get_has_frame.
func (recv *Entry) GetHasFrame() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetHasFrameFunction_Set()
	if err == nil {
		ret = entryGetHasFrameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_icon_activatable' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_area' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

var entryGetIconAtPosFunction *gi.Function
var entryGetIconAtPosFunction_Once sync.Once

func entryGetIconAtPosFunction_Set() error {
	var err error
	entryGetIconAtPosFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetIconAtPosFunction, err = entryStruct.InvokerNew("get_icon_at_pos")
	})
	return err
}

// GetIconAtPos is a representation of the C type gtk_entry_get_icon_at_pos.
func (recv *Entry) GetIconAtPos(x int32, y int32) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := entryGetIconAtPosFunction_Set()
	if err == nil {
		ret = entryGetIconAtPosFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_icon_gicon' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_name' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_pixbuf' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_sensitive' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_stock' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_storage_type' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_tooltip_markup' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_get_icon_tooltip_text' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

var entryGetInnerBorderFunction *gi.Function
var entryGetInnerBorderFunction_Once sync.Once

func entryGetInnerBorderFunction_Set() error {
	var err error
	entryGetInnerBorderFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetInnerBorderFunction, err = entryStruct.InvokerNew("get_inner_border")
	})
	return err
}

// GetInnerBorder is a representation of the C type gtk_entry_get_inner_border.
func (recv *Entry) GetInnerBorder() *Border {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetInnerBorderFunction_Set()
	if err == nil {
		ret = entryGetInnerBorderFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Border{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_input_hints' : return type 'InputHints' not supported

// UNSUPPORTED : C value 'gtk_entry_get_input_purpose' : return type 'InputPurpose' not supported

// UNSUPPORTED : C value 'gtk_entry_get_invisible_char' : return type 'gunichar' not supported

// UNSUPPORTED : C value 'gtk_entry_get_layout' : return type 'Pango.Layout' not supported

var entryGetLayoutOffsetsFunction *gi.Function
var entryGetLayoutOffsetsFunction_Once sync.Once

func entryGetLayoutOffsetsFunction_Set() error {
	var err error
	entryGetLayoutOffsetsFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetLayoutOffsetsFunction, err = entryStruct.InvokerNew("get_layout_offsets")
	})
	return err
}

// GetLayoutOffsets is a representation of the C type gtk_entry_get_layout_offsets.
func (recv *Entry) GetLayoutOffsets() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := entryGetLayoutOffsetsFunction_Set()
	if err == nil {
		entryGetLayoutOffsetsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var entryGetMaxLengthFunction *gi.Function
var entryGetMaxLengthFunction_Once sync.Once

func entryGetMaxLengthFunction_Set() error {
	var err error
	entryGetMaxLengthFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetMaxLengthFunction, err = entryStruct.InvokerNew("get_max_length")
	})
	return err
}

// GetMaxLength is a representation of the C type gtk_entry_get_max_length.
func (recv *Entry) GetMaxLength() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetMaxLengthFunction_Set()
	if err == nil {
		ret = entryGetMaxLengthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryGetMaxWidthCharsFunction *gi.Function
var entryGetMaxWidthCharsFunction_Once sync.Once

func entryGetMaxWidthCharsFunction_Set() error {
	var err error
	entryGetMaxWidthCharsFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetMaxWidthCharsFunction, err = entryStruct.InvokerNew("get_max_width_chars")
	})
	return err
}

// GetMaxWidthChars is a representation of the C type gtk_entry_get_max_width_chars.
func (recv *Entry) GetMaxWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetMaxWidthCharsFunction_Set()
	if err == nil {
		ret = entryGetMaxWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryGetOverwriteModeFunction *gi.Function
var entryGetOverwriteModeFunction_Once sync.Once

func entryGetOverwriteModeFunction_Set() error {
	var err error
	entryGetOverwriteModeFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetOverwriteModeFunction, err = entryStruct.InvokerNew("get_overwrite_mode")
	})
	return err
}

// GetOverwriteMode is a representation of the C type gtk_entry_get_overwrite_mode.
func (recv *Entry) GetOverwriteMode() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetOverwriteModeFunction_Set()
	if err == nil {
		ret = entryGetOverwriteModeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryGetPlaceholderTextFunction *gi.Function
var entryGetPlaceholderTextFunction_Once sync.Once

func entryGetPlaceholderTextFunction_Set() error {
	var err error
	entryGetPlaceholderTextFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetPlaceholderTextFunction, err = entryStruct.InvokerNew("get_placeholder_text")
	})
	return err
}

// GetPlaceholderText is a representation of the C type gtk_entry_get_placeholder_text.
func (recv *Entry) GetPlaceholderText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetPlaceholderTextFunction_Set()
	if err == nil {
		ret = entryGetPlaceholderTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var entryGetProgressFractionFunction *gi.Function
var entryGetProgressFractionFunction_Once sync.Once

func entryGetProgressFractionFunction_Set() error {
	var err error
	entryGetProgressFractionFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetProgressFractionFunction, err = entryStruct.InvokerNew("get_progress_fraction")
	})
	return err
}

// GetProgressFraction is a representation of the C type gtk_entry_get_progress_fraction.
func (recv *Entry) GetProgressFraction() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetProgressFractionFunction_Set()
	if err == nil {
		ret = entryGetProgressFractionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var entryGetProgressPulseStepFunction *gi.Function
var entryGetProgressPulseStepFunction_Once sync.Once

func entryGetProgressPulseStepFunction_Set() error {
	var err error
	entryGetProgressPulseStepFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetProgressPulseStepFunction, err = entryStruct.InvokerNew("get_progress_pulse_step")
	})
	return err
}

// GetProgressPulseStep is a representation of the C type gtk_entry_get_progress_pulse_step.
func (recv *Entry) GetProgressPulseStep() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetProgressPulseStepFunction_Set()
	if err == nil {
		ret = entryGetProgressPulseStepFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_tabs' : return type 'Pango.TabArray' not supported

var entryGetTextFunction *gi.Function
var entryGetTextFunction_Once sync.Once

func entryGetTextFunction_Set() error {
	var err error
	entryGetTextFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetTextFunction, err = entryStruct.InvokerNew("get_text")
	})
	return err
}

// GetText is a representation of the C type gtk_entry_get_text.
func (recv *Entry) GetText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetTextFunction_Set()
	if err == nil {
		ret = entryGetTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_get_text_area' : parameter 'text_area' of type 'Gdk.Rectangle' not supported

var entryGetTextLengthFunction *gi.Function
var entryGetTextLengthFunction_Once sync.Once

func entryGetTextLengthFunction_Set() error {
	var err error
	entryGetTextLengthFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetTextLengthFunction, err = entryStruct.InvokerNew("get_text_length")
	})
	return err
}

// GetTextLength is a representation of the C type gtk_entry_get_text_length.
func (recv *Entry) GetTextLength() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetTextLengthFunction_Set()
	if err == nil {
		ret = entryGetTextLengthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

var entryGetVisibilityFunction *gi.Function
var entryGetVisibilityFunction_Once sync.Once

func entryGetVisibilityFunction_Set() error {
	var err error
	entryGetVisibilityFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetVisibilityFunction, err = entryStruct.InvokerNew("get_visibility")
	})
	return err
}

// GetVisibility is a representation of the C type gtk_entry_get_visibility.
func (recv *Entry) GetVisibility() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetVisibilityFunction_Set()
	if err == nil {
		ret = entryGetVisibilityFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryGetWidthCharsFunction *gi.Function
var entryGetWidthCharsFunction_Once sync.Once

func entryGetWidthCharsFunction_Set() error {
	var err error
	entryGetWidthCharsFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGetWidthCharsFunction, err = entryStruct.InvokerNew("get_width_chars")
	})
	return err
}

// GetWidthChars is a representation of the C type gtk_entry_get_width_chars.
func (recv *Entry) GetWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryGetWidthCharsFunction_Set()
	if err == nil {
		ret = entryGetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryGrabFocusWithoutSelectingFunction *gi.Function
var entryGrabFocusWithoutSelectingFunction_Once sync.Once

func entryGrabFocusWithoutSelectingFunction_Set() error {
	var err error
	entryGrabFocusWithoutSelectingFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryGrabFocusWithoutSelectingFunction, err = entryStruct.InvokerNew("grab_focus_without_selecting")
	})
	return err
}

// GrabFocusWithoutSelecting is a representation of the C type gtk_entry_grab_focus_without_selecting.
func (recv *Entry) GrabFocusWithoutSelecting() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryGrabFocusWithoutSelectingFunction_Set()
	if err == nil {
		entryGrabFocusWithoutSelectingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_im_context_filter_keypress' : parameter 'event' of type 'Gdk.EventKey' not supported

var entryLayoutIndexToTextIndexFunction *gi.Function
var entryLayoutIndexToTextIndexFunction_Once sync.Once

func entryLayoutIndexToTextIndexFunction_Set() error {
	var err error
	entryLayoutIndexToTextIndexFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryLayoutIndexToTextIndexFunction, err = entryStruct.InvokerNew("layout_index_to_text_index")
	})
	return err
}

// LayoutIndexToTextIndex is a representation of the C type gtk_entry_layout_index_to_text_index.
func (recv *Entry) LayoutIndexToTextIndex(layoutIndex int32) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(layoutIndex)

	var ret gi.Argument

	err := entryLayoutIndexToTextIndexFunction_Set()
	if err == nil {
		ret = entryLayoutIndexToTextIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryProgressPulseFunction *gi.Function
var entryProgressPulseFunction_Once sync.Once

func entryProgressPulseFunction_Set() error {
	var err error
	entryProgressPulseFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryProgressPulseFunction, err = entryStruct.InvokerNew("progress_pulse")
	})
	return err
}

// ProgressPulse is a representation of the C type gtk_entry_progress_pulse.
func (recv *Entry) ProgressPulse() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryProgressPulseFunction_Set()
	if err == nil {
		entryProgressPulseFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryResetImContextFunction *gi.Function
var entryResetImContextFunction_Once sync.Once

func entryResetImContextFunction_Set() error {
	var err error
	entryResetImContextFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryResetImContextFunction, err = entryStruct.InvokerNew("reset_im_context")
	})
	return err
}

// ResetImContext is a representation of the C type gtk_entry_reset_im_context.
func (recv *Entry) ResetImContext() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryResetImContextFunction_Set()
	if err == nil {
		entryResetImContextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetActivatesDefaultFunction *gi.Function
var entrySetActivatesDefaultFunction_Once sync.Once

func entrySetActivatesDefaultFunction_Set() error {
	var err error
	entrySetActivatesDefaultFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetActivatesDefaultFunction, err = entryStruct.InvokerNew("set_activates_default")
	})
	return err
}

// SetActivatesDefault is a representation of the C type gtk_entry_set_activates_default.
func (recv *Entry) SetActivatesDefault(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := entrySetActivatesDefaultFunction_Set()
	if err == nil {
		entrySetActivatesDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetAlignmentFunction *gi.Function
var entrySetAlignmentFunction_Once sync.Once

func entrySetAlignmentFunction_Set() error {
	var err error
	entrySetAlignmentFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetAlignmentFunction, err = entryStruct.InvokerNew("set_alignment")
	})
	return err
}

// SetAlignment is a representation of the C type gtk_entry_set_alignment.
func (recv *Entry) SetAlignment(xalign float32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)

	err := entrySetAlignmentFunction_Set()
	if err == nil {
		entrySetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_set_attributes' : parameter 'attrs' of type 'Pango.AttrList' not supported

var entrySetBufferFunction *gi.Function
var entrySetBufferFunction_Once sync.Once

func entrySetBufferFunction_Set() error {
	var err error
	entrySetBufferFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetBufferFunction, err = entryStruct.InvokerNew("set_buffer")
	})
	return err
}

// SetBuffer is a representation of the C type gtk_entry_set_buffer.
func (recv *Entry) SetBuffer(buffer *EntryBuffer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(buffer.Native)

	err := entrySetBufferFunction_Set()
	if err == nil {
		entrySetBufferFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetCompletionFunction *gi.Function
var entrySetCompletionFunction_Once sync.Once

func entrySetCompletionFunction_Set() error {
	var err error
	entrySetCompletionFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetCompletionFunction, err = entryStruct.InvokerNew("set_completion")
	})
	return err
}

// SetCompletion is a representation of the C type gtk_entry_set_completion.
func (recv *Entry) SetCompletion(completion *EntryCompletion) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(completion.Native)

	err := entrySetCompletionFunction_Set()
	if err == nil {
		entrySetCompletionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetCursorHadjustmentFunction *gi.Function
var entrySetCursorHadjustmentFunction_Once sync.Once

func entrySetCursorHadjustmentFunction_Set() error {
	var err error
	entrySetCursorHadjustmentFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetCursorHadjustmentFunction, err = entryStruct.InvokerNew("set_cursor_hadjustment")
	})
	return err
}

// SetCursorHadjustment is a representation of the C type gtk_entry_set_cursor_hadjustment.
func (recv *Entry) SetCursorHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := entrySetCursorHadjustmentFunction_Set()
	if err == nil {
		entrySetCursorHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetHasFrameFunction *gi.Function
var entrySetHasFrameFunction_Once sync.Once

func entrySetHasFrameFunction_Set() error {
	var err error
	entrySetHasFrameFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetHasFrameFunction, err = entryStruct.InvokerNew("set_has_frame")
	})
	return err
}

// SetHasFrame is a representation of the C type gtk_entry_set_has_frame.
func (recv *Entry) SetHasFrame(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := entrySetHasFrameFunction_Set()
	if err == nil {
		entrySetHasFrameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_set_icon_activatable' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_drag_source' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_from_gicon' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_from_icon_name' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_from_pixbuf' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_from_stock' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_sensitive' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_tooltip_markup' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

// UNSUPPORTED : C value 'gtk_entry_set_icon_tooltip_text' : parameter 'icon_pos' of type 'EntryIconPosition' not supported

var entrySetInnerBorderFunction *gi.Function
var entrySetInnerBorderFunction_Once sync.Once

func entrySetInnerBorderFunction_Set() error {
	var err error
	entrySetInnerBorderFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetInnerBorderFunction, err = entryStruct.InvokerNew("set_inner_border")
	})
	return err
}

// SetInnerBorder is a representation of the C type gtk_entry_set_inner_border.
func (recv *Entry) SetInnerBorder(border *Border) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(border.Native)

	err := entrySetInnerBorderFunction_Set()
	if err == nil {
		entrySetInnerBorderFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_set_input_hints' : parameter 'hints' of type 'InputHints' not supported

// UNSUPPORTED : C value 'gtk_entry_set_input_purpose' : parameter 'purpose' of type 'InputPurpose' not supported

// UNSUPPORTED : C value 'gtk_entry_set_invisible_char' : parameter 'ch' of type 'gunichar' not supported

var entrySetMaxLengthFunction *gi.Function
var entrySetMaxLengthFunction_Once sync.Once

func entrySetMaxLengthFunction_Set() error {
	var err error
	entrySetMaxLengthFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetMaxLengthFunction, err = entryStruct.InvokerNew("set_max_length")
	})
	return err
}

// SetMaxLength is a representation of the C type gtk_entry_set_max_length.
func (recv *Entry) SetMaxLength(max int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(max)

	err := entrySetMaxLengthFunction_Set()
	if err == nil {
		entrySetMaxLengthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetMaxWidthCharsFunction *gi.Function
var entrySetMaxWidthCharsFunction_Once sync.Once

func entrySetMaxWidthCharsFunction_Set() error {
	var err error
	entrySetMaxWidthCharsFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetMaxWidthCharsFunction, err = entryStruct.InvokerNew("set_max_width_chars")
	})
	return err
}

// SetMaxWidthChars is a representation of the C type gtk_entry_set_max_width_chars.
func (recv *Entry) SetMaxWidthChars(nChars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nChars)

	err := entrySetMaxWidthCharsFunction_Set()
	if err == nil {
		entrySetMaxWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetOverwriteModeFunction *gi.Function
var entrySetOverwriteModeFunction_Once sync.Once

func entrySetOverwriteModeFunction_Set() error {
	var err error
	entrySetOverwriteModeFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetOverwriteModeFunction, err = entryStruct.InvokerNew("set_overwrite_mode")
	})
	return err
}

// SetOverwriteMode is a representation of the C type gtk_entry_set_overwrite_mode.
func (recv *Entry) SetOverwriteMode(overwrite bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(overwrite)

	err := entrySetOverwriteModeFunction_Set()
	if err == nil {
		entrySetOverwriteModeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetPlaceholderTextFunction *gi.Function
var entrySetPlaceholderTextFunction_Once sync.Once

func entrySetPlaceholderTextFunction_Set() error {
	var err error
	entrySetPlaceholderTextFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetPlaceholderTextFunction, err = entryStruct.InvokerNew("set_placeholder_text")
	})
	return err
}

// SetPlaceholderText is a representation of the C type gtk_entry_set_placeholder_text.
func (recv *Entry) SetPlaceholderText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := entrySetPlaceholderTextFunction_Set()
	if err == nil {
		entrySetPlaceholderTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetProgressFractionFunction *gi.Function
var entrySetProgressFractionFunction_Once sync.Once

func entrySetProgressFractionFunction_Set() error {
	var err error
	entrySetProgressFractionFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetProgressFractionFunction, err = entryStruct.InvokerNew("set_progress_fraction")
	})
	return err
}

// SetProgressFraction is a representation of the C type gtk_entry_set_progress_fraction.
func (recv *Entry) SetProgressFraction(fraction float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(fraction)

	err := entrySetProgressFractionFunction_Set()
	if err == nil {
		entrySetProgressFractionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetProgressPulseStepFunction *gi.Function
var entrySetProgressPulseStepFunction_Once sync.Once

func entrySetProgressPulseStepFunction_Set() error {
	var err error
	entrySetProgressPulseStepFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetProgressPulseStepFunction, err = entryStruct.InvokerNew("set_progress_pulse_step")
	})
	return err
}

// SetProgressPulseStep is a representation of the C type gtk_entry_set_progress_pulse_step.
func (recv *Entry) SetProgressPulseStep(fraction float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(fraction)

	err := entrySetProgressPulseStepFunction_Set()
	if err == nil {
		entrySetProgressPulseStepFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_set_tabs' : parameter 'tabs' of type 'Pango.TabArray' not supported

var entrySetTextFunction *gi.Function
var entrySetTextFunction_Once sync.Once

func entrySetTextFunction_Set() error {
	var err error
	entrySetTextFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetTextFunction, err = entryStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_entry_set_text.
func (recv *Entry) SetText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := entrySetTextFunction_Set()
	if err == nil {
		entrySetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetVisibilityFunction *gi.Function
var entrySetVisibilityFunction_Once sync.Once

func entrySetVisibilityFunction_Set() error {
	var err error
	entrySetVisibilityFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetVisibilityFunction, err = entryStruct.InvokerNew("set_visibility")
	})
	return err
}

// SetVisibility is a representation of the C type gtk_entry_set_visibility.
func (recv *Entry) SetVisibility(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := entrySetVisibilityFunction_Set()
	if err == nil {
		entrySetVisibilityFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entrySetWidthCharsFunction *gi.Function
var entrySetWidthCharsFunction_Once sync.Once

func entrySetWidthCharsFunction_Set() error {
	var err error
	entrySetWidthCharsFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entrySetWidthCharsFunction, err = entryStruct.InvokerNew("set_width_chars")
	})
	return err
}

// SetWidthChars is a representation of the C type gtk_entry_set_width_chars.
func (recv *Entry) SetWidthChars(nChars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nChars)

	err := entrySetWidthCharsFunction_Set()
	if err == nil {
		entrySetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryTextIndexToLayoutIndexFunction *gi.Function
var entryTextIndexToLayoutIndexFunction_Once sync.Once

func entryTextIndexToLayoutIndexFunction_Set() error {
	var err error
	entryTextIndexToLayoutIndexFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryTextIndexToLayoutIndexFunction, err = entryStruct.InvokerNew("text_index_to_layout_index")
	})
	return err
}

// TextIndexToLayoutIndex is a representation of the C type gtk_entry_text_index_to_layout_index.
func (recv *Entry) TextIndexToLayoutIndex(textIndex int32) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(textIndex)

	var ret gi.Argument

	err := entryTextIndexToLayoutIndexFunction_Set()
	if err == nil {
		ret = entryTextIndexToLayoutIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryUnsetInvisibleCharFunction *gi.Function
var entryUnsetInvisibleCharFunction_Once sync.Once

func entryUnsetInvisibleCharFunction_Set() error {
	var err error
	entryUnsetInvisibleCharFunction_Once.Do(func() {
		err = entryStruct_Set()
		if err != nil {
			return
		}
		entryUnsetInvisibleCharFunction, err = entryStruct.InvokerNew("unset_invisible_char")
	})
	return err
}

// UnsetInvisibleChar is a representation of the C type gtk_entry_unset_invisible_char.
func (recv *Entry) UnsetInvisibleChar() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryUnsetInvisibleCharFunction_Set()
	if err == nil {
		entryUnsetInvisibleCharFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryAccessibleStruct *gi.Struct
var entryAccessibleStruct_Once sync.Once

func entryAccessibleStruct_Set() error {
	var err error
	entryAccessibleStruct_Once.Do(func() {
		entryAccessibleStruct, err = gi.StructNew("Gtk", "EntryAccessible")
	})
	return err
}

type EntryAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *EntryAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(entryAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *EntryAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(entryAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *EntryAccessible) FieldPriv() *EntryAccessiblePrivate {
	argValue := gi.FieldGet(entryAccessibleStruct, recv.Native, "priv")
	value := &EntryAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *EntryAccessible) SetFieldPriv(value *EntryAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(entryAccessibleStruct, recv.Native, "priv", argValue)
}

// EntryAccessibleStruct creates an uninitialised EntryAccessible.
func EntryAccessibleStruct() *EntryAccessible {
	err := entryAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &EntryAccessible{}
	structGo.Native = entryAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeEntryAccessible)
	return structGo
}
func finalizeEntryAccessible(obj *EntryAccessible) {
	entryAccessibleStruct.Free(obj.Native)
}

var entryBufferStruct *gi.Struct
var entryBufferStruct_Once sync.Once

func entryBufferStruct_Set() error {
	var err error
	entryBufferStruct_Once.Do(func() {
		entryBufferStruct, err = gi.StructNew("Gtk", "EntryBuffer")
	})
	return err
}

type EntryBuffer struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var entryBufferNewFunction *gi.Function
var entryBufferNewFunction_Once sync.Once

func entryBufferNewFunction_Set() error {
	var err error
	entryBufferNewFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferNewFunction, err = entryBufferStruct.InvokerNew("new")
	})
	return err
}

// EntryBufferNew is a representation of the C type gtk_entry_buffer_new.
func EntryBufferNew(initialChars string, nInitialChars int32) *EntryBuffer {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(initialChars)
	inArgs[1].SetInt32(nInitialChars)

	var ret gi.Argument

	err := entryBufferNewFunction_Set()
	if err == nil {
		ret = entryBufferNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EntryBuffer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryBufferDeleteTextFunction *gi.Function
var entryBufferDeleteTextFunction_Once sync.Once

func entryBufferDeleteTextFunction_Set() error {
	var err error
	entryBufferDeleteTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferDeleteTextFunction, err = entryBufferStruct.InvokerNew("delete_text")
	})
	return err
}

// DeleteText is a representation of the C type gtk_entry_buffer_delete_text.
func (recv *EntryBuffer) DeleteText(position uint32, nChars int32) uint32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(position)
	inArgs[2].SetInt32(nChars)

	var ret gi.Argument

	err := entryBufferDeleteTextFunction_Set()
	if err == nil {
		ret = entryBufferDeleteTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var entryBufferEmitDeletedTextFunction *gi.Function
var entryBufferEmitDeletedTextFunction_Once sync.Once

func entryBufferEmitDeletedTextFunction_Set() error {
	var err error
	entryBufferEmitDeletedTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferEmitDeletedTextFunction, err = entryBufferStruct.InvokerNew("emit_deleted_text")
	})
	return err
}

// EmitDeletedText is a representation of the C type gtk_entry_buffer_emit_deleted_text.
func (recv *EntryBuffer) EmitDeletedText(position uint32, nChars uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(position)
	inArgs[2].SetUint32(nChars)

	err := entryBufferEmitDeletedTextFunction_Set()
	if err == nil {
		entryBufferEmitDeletedTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryBufferEmitInsertedTextFunction *gi.Function
var entryBufferEmitInsertedTextFunction_Once sync.Once

func entryBufferEmitInsertedTextFunction_Set() error {
	var err error
	entryBufferEmitInsertedTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferEmitInsertedTextFunction, err = entryBufferStruct.InvokerNew("emit_inserted_text")
	})
	return err
}

// EmitInsertedText is a representation of the C type gtk_entry_buffer_emit_inserted_text.
func (recv *EntryBuffer) EmitInsertedText(position uint32, chars string, nChars uint32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(position)
	inArgs[2].SetString(chars)
	inArgs[3].SetUint32(nChars)

	err := entryBufferEmitInsertedTextFunction_Set()
	if err == nil {
		entryBufferEmitInsertedTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryBufferGetBytesFunction *gi.Function
var entryBufferGetBytesFunction_Once sync.Once

func entryBufferGetBytesFunction_Set() error {
	var err error
	entryBufferGetBytesFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferGetBytesFunction, err = entryBufferStruct.InvokerNew("get_bytes")
	})
	return err
}

// GetBytes is a representation of the C type gtk_entry_buffer_get_bytes.
func (recv *EntryBuffer) GetBytes() uint64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryBufferGetBytesFunction_Set()
	if err == nil {
		ret = entryBufferGetBytesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint64()

	return retGo
}

var entryBufferGetLengthFunction *gi.Function
var entryBufferGetLengthFunction_Once sync.Once

func entryBufferGetLengthFunction_Set() error {
	var err error
	entryBufferGetLengthFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferGetLengthFunction, err = entryBufferStruct.InvokerNew("get_length")
	})
	return err
}

// GetLength is a representation of the C type gtk_entry_buffer_get_length.
func (recv *EntryBuffer) GetLength() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryBufferGetLengthFunction_Set()
	if err == nil {
		ret = entryBufferGetLengthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var entryBufferGetMaxLengthFunction *gi.Function
var entryBufferGetMaxLengthFunction_Once sync.Once

func entryBufferGetMaxLengthFunction_Set() error {
	var err error
	entryBufferGetMaxLengthFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferGetMaxLengthFunction, err = entryBufferStruct.InvokerNew("get_max_length")
	})
	return err
}

// GetMaxLength is a representation of the C type gtk_entry_buffer_get_max_length.
func (recv *EntryBuffer) GetMaxLength() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryBufferGetMaxLengthFunction_Set()
	if err == nil {
		ret = entryBufferGetMaxLengthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryBufferGetTextFunction *gi.Function
var entryBufferGetTextFunction_Once sync.Once

func entryBufferGetTextFunction_Set() error {
	var err error
	entryBufferGetTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferGetTextFunction, err = entryBufferStruct.InvokerNew("get_text")
	})
	return err
}

// GetText is a representation of the C type gtk_entry_buffer_get_text.
func (recv *EntryBuffer) GetText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryBufferGetTextFunction_Set()
	if err == nil {
		ret = entryBufferGetTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var entryBufferInsertTextFunction *gi.Function
var entryBufferInsertTextFunction_Once sync.Once

func entryBufferInsertTextFunction_Set() error {
	var err error
	entryBufferInsertTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferInsertTextFunction, err = entryBufferStruct.InvokerNew("insert_text")
	})
	return err
}

// InsertText is a representation of the C type gtk_entry_buffer_insert_text.
func (recv *EntryBuffer) InsertText(position uint32, chars string, nChars int32) uint32 {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(position)
	inArgs[2].SetString(chars)
	inArgs[3].SetInt32(nChars)

	var ret gi.Argument

	err := entryBufferInsertTextFunction_Set()
	if err == nil {
		ret = entryBufferInsertTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var entryBufferSetMaxLengthFunction *gi.Function
var entryBufferSetMaxLengthFunction_Once sync.Once

func entryBufferSetMaxLengthFunction_Set() error {
	var err error
	entryBufferSetMaxLengthFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferSetMaxLengthFunction, err = entryBufferStruct.InvokerNew("set_max_length")
	})
	return err
}

// SetMaxLength is a representation of the C type gtk_entry_buffer_set_max_length.
func (recv *EntryBuffer) SetMaxLength(maxLength int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(maxLength)

	err := entryBufferSetMaxLengthFunction_Set()
	if err == nil {
		entryBufferSetMaxLengthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryBufferSetTextFunction *gi.Function
var entryBufferSetTextFunction_Once sync.Once

func entryBufferSetTextFunction_Set() error {
	var err error
	entryBufferSetTextFunction_Once.Do(func() {
		err = entryBufferStruct_Set()
		if err != nil {
			return
		}
		entryBufferSetTextFunction, err = entryBufferStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_entry_buffer_set_text.
func (recv *EntryBuffer) SetText(chars string, nChars int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(chars)
	inArgs[2].SetInt32(nChars)

	err := entryBufferSetTextFunction_Set()
	if err == nil {
		entryBufferSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionStruct *gi.Struct
var entryCompletionStruct_Once sync.Once

func entryCompletionStruct_Set() error {
	var err error
	entryCompletionStruct_Once.Do(func() {
		entryCompletionStruct, err = gi.StructNew("Gtk", "EntryCompletion")
	})
	return err
}

type EntryCompletion struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var entryCompletionNewFunction *gi.Function
var entryCompletionNewFunction_Once sync.Once

func entryCompletionNewFunction_Set() error {
	var err error
	entryCompletionNewFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionNewFunction, err = entryCompletionStruct.InvokerNew("new")
	})
	return err
}

// EntryCompletionNew is a representation of the C type gtk_entry_completion_new.
func EntryCompletionNew() *EntryCompletion {

	var ret gi.Argument

	err := entryCompletionNewFunction_Set()
	if err == nil {
		ret = entryCompletionNewFunction.Invoke(nil, nil)
	}

	retGo := &EntryCompletion{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryCompletionNewWithAreaFunction *gi.Function
var entryCompletionNewWithAreaFunction_Once sync.Once

func entryCompletionNewWithAreaFunction_Set() error {
	var err error
	entryCompletionNewWithAreaFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionNewWithAreaFunction, err = entryCompletionStruct.InvokerNew("new_with_area")
	})
	return err
}

// EntryCompletionNewWithArea is a representation of the C type gtk_entry_completion_new_with_area.
func EntryCompletionNewWithArea(area *CellArea) *EntryCompletion {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(area.Native)

	var ret gi.Argument

	err := entryCompletionNewWithAreaFunction_Set()
	if err == nil {
		ret = entryCompletionNewWithAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EntryCompletion{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryCompletionCompleteFunction *gi.Function
var entryCompletionCompleteFunction_Once sync.Once

func entryCompletionCompleteFunction_Set() error {
	var err error
	entryCompletionCompleteFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionCompleteFunction, err = entryCompletionStruct.InvokerNew("complete")
	})
	return err
}

// Complete is a representation of the C type gtk_entry_completion_complete.
func (recv *EntryCompletion) Complete() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryCompletionCompleteFunction_Set()
	if err == nil {
		entryCompletionCompleteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionComputePrefixFunction *gi.Function
var entryCompletionComputePrefixFunction_Once sync.Once

func entryCompletionComputePrefixFunction_Set() error {
	var err error
	entryCompletionComputePrefixFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionComputePrefixFunction, err = entryCompletionStruct.InvokerNew("compute_prefix")
	})
	return err
}

// ComputePrefix is a representation of the C type gtk_entry_completion_compute_prefix.
func (recv *EntryCompletion) ComputePrefix(key string) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := entryCompletionComputePrefixFunction_Set()
	if err == nil {
		ret = entryCompletionComputePrefixFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var entryCompletionDeleteActionFunction *gi.Function
var entryCompletionDeleteActionFunction_Once sync.Once

func entryCompletionDeleteActionFunction_Set() error {
	var err error
	entryCompletionDeleteActionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionDeleteActionFunction, err = entryCompletionStruct.InvokerNew("delete_action")
	})
	return err
}

// DeleteAction is a representation of the C type gtk_entry_completion_delete_action.
func (recv *EntryCompletion) DeleteAction(index int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(index)

	err := entryCompletionDeleteActionFunction_Set()
	if err == nil {
		entryCompletionDeleteActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionGetCompletionPrefixFunction *gi.Function
var entryCompletionGetCompletionPrefixFunction_Once sync.Once

func entryCompletionGetCompletionPrefixFunction_Set() error {
	var err error
	entryCompletionGetCompletionPrefixFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetCompletionPrefixFunction, err = entryCompletionStruct.InvokerNew("get_completion_prefix")
	})
	return err
}

// GetCompletionPrefix is a representation of the C type gtk_entry_completion_get_completion_prefix.
func (recv *EntryCompletion) GetCompletionPrefix() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetCompletionPrefixFunction_Set()
	if err == nil {
		ret = entryCompletionGetCompletionPrefixFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var entryCompletionGetEntryFunction *gi.Function
var entryCompletionGetEntryFunction_Once sync.Once

func entryCompletionGetEntryFunction_Set() error {
	var err error
	entryCompletionGetEntryFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetEntryFunction, err = entryCompletionStruct.InvokerNew("get_entry")
	})
	return err
}

// GetEntry is a representation of the C type gtk_entry_completion_get_entry.
func (recv *EntryCompletion) GetEntry() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetEntryFunction_Set()
	if err == nil {
		ret = entryCompletionGetEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var entryCompletionGetInlineCompletionFunction *gi.Function
var entryCompletionGetInlineCompletionFunction_Once sync.Once

func entryCompletionGetInlineCompletionFunction_Set() error {
	var err error
	entryCompletionGetInlineCompletionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetInlineCompletionFunction, err = entryCompletionStruct.InvokerNew("get_inline_completion")
	})
	return err
}

// GetInlineCompletion is a representation of the C type gtk_entry_completion_get_inline_completion.
func (recv *EntryCompletion) GetInlineCompletion() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetInlineCompletionFunction_Set()
	if err == nil {
		ret = entryCompletionGetInlineCompletionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryCompletionGetInlineSelectionFunction *gi.Function
var entryCompletionGetInlineSelectionFunction_Once sync.Once

func entryCompletionGetInlineSelectionFunction_Set() error {
	var err error
	entryCompletionGetInlineSelectionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetInlineSelectionFunction, err = entryCompletionStruct.InvokerNew("get_inline_selection")
	})
	return err
}

// GetInlineSelection is a representation of the C type gtk_entry_completion_get_inline_selection.
func (recv *EntryCompletion) GetInlineSelection() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetInlineSelectionFunction_Set()
	if err == nil {
		ret = entryCompletionGetInlineSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryCompletionGetMinimumKeyLengthFunction *gi.Function
var entryCompletionGetMinimumKeyLengthFunction_Once sync.Once

func entryCompletionGetMinimumKeyLengthFunction_Set() error {
	var err error
	entryCompletionGetMinimumKeyLengthFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetMinimumKeyLengthFunction, err = entryCompletionStruct.InvokerNew("get_minimum_key_length")
	})
	return err
}

// GetMinimumKeyLength is a representation of the C type gtk_entry_completion_get_minimum_key_length.
func (recv *EntryCompletion) GetMinimumKeyLength() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetMinimumKeyLengthFunction_Set()
	if err == nil {
		ret = entryCompletionGetMinimumKeyLengthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_entry_completion_get_model' : return type 'TreeModel' not supported

var entryCompletionGetPopupCompletionFunction *gi.Function
var entryCompletionGetPopupCompletionFunction_Once sync.Once

func entryCompletionGetPopupCompletionFunction_Set() error {
	var err error
	entryCompletionGetPopupCompletionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetPopupCompletionFunction, err = entryCompletionStruct.InvokerNew("get_popup_completion")
	})
	return err
}

// GetPopupCompletion is a representation of the C type gtk_entry_completion_get_popup_completion.
func (recv *EntryCompletion) GetPopupCompletion() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetPopupCompletionFunction_Set()
	if err == nil {
		ret = entryCompletionGetPopupCompletionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryCompletionGetPopupSetWidthFunction *gi.Function
var entryCompletionGetPopupSetWidthFunction_Once sync.Once

func entryCompletionGetPopupSetWidthFunction_Set() error {
	var err error
	entryCompletionGetPopupSetWidthFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetPopupSetWidthFunction, err = entryCompletionStruct.InvokerNew("get_popup_set_width")
	})
	return err
}

// GetPopupSetWidth is a representation of the C type gtk_entry_completion_get_popup_set_width.
func (recv *EntryCompletion) GetPopupSetWidth() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetPopupSetWidthFunction_Set()
	if err == nil {
		ret = entryCompletionGetPopupSetWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryCompletionGetPopupSingleMatchFunction *gi.Function
var entryCompletionGetPopupSingleMatchFunction_Once sync.Once

func entryCompletionGetPopupSingleMatchFunction_Set() error {
	var err error
	entryCompletionGetPopupSingleMatchFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetPopupSingleMatchFunction, err = entryCompletionStruct.InvokerNew("get_popup_single_match")
	})
	return err
}

// GetPopupSingleMatch is a representation of the C type gtk_entry_completion_get_popup_single_match.
func (recv *EntryCompletion) GetPopupSingleMatch() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetPopupSingleMatchFunction_Set()
	if err == nil {
		ret = entryCompletionGetPopupSingleMatchFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var entryCompletionGetTextColumnFunction *gi.Function
var entryCompletionGetTextColumnFunction_Once sync.Once

func entryCompletionGetTextColumnFunction_Set() error {
	var err error
	entryCompletionGetTextColumnFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionGetTextColumnFunction, err = entryCompletionStruct.InvokerNew("get_text_column")
	})
	return err
}

// GetTextColumn is a representation of the C type gtk_entry_completion_get_text_column.
func (recv *EntryCompletion) GetTextColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := entryCompletionGetTextColumnFunction_Set()
	if err == nil {
		ret = entryCompletionGetTextColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var entryCompletionInsertActionMarkupFunction *gi.Function
var entryCompletionInsertActionMarkupFunction_Once sync.Once

func entryCompletionInsertActionMarkupFunction_Set() error {
	var err error
	entryCompletionInsertActionMarkupFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionInsertActionMarkupFunction, err = entryCompletionStruct.InvokerNew("insert_action_markup")
	})
	return err
}

// InsertActionMarkup is a representation of the C type gtk_entry_completion_insert_action_markup.
func (recv *EntryCompletion) InsertActionMarkup(index int32, markup string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(index)
	inArgs[2].SetString(markup)

	err := entryCompletionInsertActionMarkupFunction_Set()
	if err == nil {
		entryCompletionInsertActionMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionInsertActionTextFunction *gi.Function
var entryCompletionInsertActionTextFunction_Once sync.Once

func entryCompletionInsertActionTextFunction_Set() error {
	var err error
	entryCompletionInsertActionTextFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionInsertActionTextFunction, err = entryCompletionStruct.InvokerNew("insert_action_text")
	})
	return err
}

// InsertActionText is a representation of the C type gtk_entry_completion_insert_action_text.
func (recv *EntryCompletion) InsertActionText(index int32, text string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(index)
	inArgs[2].SetString(text)

	err := entryCompletionInsertActionTextFunction_Set()
	if err == nil {
		entryCompletionInsertActionTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionInsertPrefixFunction *gi.Function
var entryCompletionInsertPrefixFunction_Once sync.Once

func entryCompletionInsertPrefixFunction_Set() error {
	var err error
	entryCompletionInsertPrefixFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionInsertPrefixFunction, err = entryCompletionStruct.InvokerNew("insert_prefix")
	})
	return err
}

// InsertPrefix is a representation of the C type gtk_entry_completion_insert_prefix.
func (recv *EntryCompletion) InsertPrefix() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := entryCompletionInsertPrefixFunction_Set()
	if err == nil {
		entryCompletionInsertPrefixFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionSetInlineCompletionFunction *gi.Function
var entryCompletionSetInlineCompletionFunction_Once sync.Once

func entryCompletionSetInlineCompletionFunction_Set() error {
	var err error
	entryCompletionSetInlineCompletionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetInlineCompletionFunction, err = entryCompletionStruct.InvokerNew("set_inline_completion")
	})
	return err
}

// SetInlineCompletion is a representation of the C type gtk_entry_completion_set_inline_completion.
func (recv *EntryCompletion) SetInlineCompletion(inlineCompletion bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(inlineCompletion)

	err := entryCompletionSetInlineCompletionFunction_Set()
	if err == nil {
		entryCompletionSetInlineCompletionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionSetInlineSelectionFunction *gi.Function
var entryCompletionSetInlineSelectionFunction_Once sync.Once

func entryCompletionSetInlineSelectionFunction_Set() error {
	var err error
	entryCompletionSetInlineSelectionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetInlineSelectionFunction, err = entryCompletionStruct.InvokerNew("set_inline_selection")
	})
	return err
}

// SetInlineSelection is a representation of the C type gtk_entry_completion_set_inline_selection.
func (recv *EntryCompletion) SetInlineSelection(inlineSelection bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(inlineSelection)

	err := entryCompletionSetInlineSelectionFunction_Set()
	if err == nil {
		entryCompletionSetInlineSelectionFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_completion_set_match_func' : parameter 'func' of type 'EntryCompletionMatchFunc' not supported

var entryCompletionSetMinimumKeyLengthFunction *gi.Function
var entryCompletionSetMinimumKeyLengthFunction_Once sync.Once

func entryCompletionSetMinimumKeyLengthFunction_Set() error {
	var err error
	entryCompletionSetMinimumKeyLengthFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetMinimumKeyLengthFunction, err = entryCompletionStruct.InvokerNew("set_minimum_key_length")
	})
	return err
}

// SetMinimumKeyLength is a representation of the C type gtk_entry_completion_set_minimum_key_length.
func (recv *EntryCompletion) SetMinimumKeyLength(length int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(length)

	err := entryCompletionSetMinimumKeyLengthFunction_Set()
	if err == nil {
		entryCompletionSetMinimumKeyLengthFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_entry_completion_set_model' : parameter 'model' of type 'TreeModel' not supported

var entryCompletionSetPopupCompletionFunction *gi.Function
var entryCompletionSetPopupCompletionFunction_Once sync.Once

func entryCompletionSetPopupCompletionFunction_Set() error {
	var err error
	entryCompletionSetPopupCompletionFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetPopupCompletionFunction, err = entryCompletionStruct.InvokerNew("set_popup_completion")
	})
	return err
}

// SetPopupCompletion is a representation of the C type gtk_entry_completion_set_popup_completion.
func (recv *EntryCompletion) SetPopupCompletion(popupCompletion bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(popupCompletion)

	err := entryCompletionSetPopupCompletionFunction_Set()
	if err == nil {
		entryCompletionSetPopupCompletionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionSetPopupSetWidthFunction *gi.Function
var entryCompletionSetPopupSetWidthFunction_Once sync.Once

func entryCompletionSetPopupSetWidthFunction_Set() error {
	var err error
	entryCompletionSetPopupSetWidthFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetPopupSetWidthFunction, err = entryCompletionStruct.InvokerNew("set_popup_set_width")
	})
	return err
}

// SetPopupSetWidth is a representation of the C type gtk_entry_completion_set_popup_set_width.
func (recv *EntryCompletion) SetPopupSetWidth(popupSetWidth bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(popupSetWidth)

	err := entryCompletionSetPopupSetWidthFunction_Set()
	if err == nil {
		entryCompletionSetPopupSetWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionSetPopupSingleMatchFunction *gi.Function
var entryCompletionSetPopupSingleMatchFunction_Once sync.Once

func entryCompletionSetPopupSingleMatchFunction_Set() error {
	var err error
	entryCompletionSetPopupSingleMatchFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetPopupSingleMatchFunction, err = entryCompletionStruct.InvokerNew("set_popup_single_match")
	})
	return err
}

// SetPopupSingleMatch is a representation of the C type gtk_entry_completion_set_popup_single_match.
func (recv *EntryCompletion) SetPopupSingleMatch(popupSingleMatch bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(popupSingleMatch)

	err := entryCompletionSetPopupSingleMatchFunction_Set()
	if err == nil {
		entryCompletionSetPopupSingleMatchFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryCompletionSetTextColumnFunction *gi.Function
var entryCompletionSetTextColumnFunction_Once sync.Once

func entryCompletionSetTextColumnFunction_Set() error {
	var err error
	entryCompletionSetTextColumnFunction_Once.Do(func() {
		err = entryCompletionStruct_Set()
		if err != nil {
			return
		}
		entryCompletionSetTextColumnFunction, err = entryCompletionStruct.InvokerNew("set_text_column")
	})
	return err
}

// SetTextColumn is a representation of the C type gtk_entry_completion_set_text_column.
func (recv *EntryCompletion) SetTextColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := entryCompletionSetTextColumnFunction_Set()
	if err == nil {
		entryCompletionSetTextColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var entryIconAccessibleStruct *gi.Struct
var entryIconAccessibleStruct_Once sync.Once

func entryIconAccessibleStruct_Set() error {
	var err error
	entryIconAccessibleStruct_Once.Do(func() {
		entryIconAccessibleStruct, err = gi.StructNew("Gtk", "EntryIconAccessible")
	})
	return err
}

type EntryIconAccessible struct {
	atk.Object
}

// EntryIconAccessibleStruct creates an uninitialised EntryIconAccessible.
func EntryIconAccessibleStruct() *EntryIconAccessible {
	err := entryIconAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &EntryIconAccessible{}
	structGo.Native = entryIconAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeEntryIconAccessible)
	return structGo
}
func finalizeEntryIconAccessible(obj *EntryIconAccessible) {
	entryIconAccessibleStruct.Free(obj.Native)
}

var eventBoxStruct *gi.Struct
var eventBoxStruct_Once sync.Once

func eventBoxStruct_Set() error {
	var err error
	eventBoxStruct_Once.Do(func() {
		eventBoxStruct, err = gi.StructNew("Gtk", "EventBox")
	})
	return err
}

type EventBox struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *EventBox) FieldBin() *Bin {
	argValue := gi.FieldGet(eventBoxStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *EventBox) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(eventBoxStruct, recv.Native, "bin", argValue)
}

var eventBoxNewFunction *gi.Function
var eventBoxNewFunction_Once sync.Once

func eventBoxNewFunction_Set() error {
	var err error
	eventBoxNewFunction_Once.Do(func() {
		err = eventBoxStruct_Set()
		if err != nil {
			return
		}
		eventBoxNewFunction, err = eventBoxStruct.InvokerNew("new")
	})
	return err
}

// EventBoxNew is a representation of the C type gtk_event_box_new.
func EventBoxNew() *EventBox {

	var ret gi.Argument

	err := eventBoxNewFunction_Set()
	if err == nil {
		ret = eventBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &EventBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var eventBoxGetAboveChildFunction *gi.Function
var eventBoxGetAboveChildFunction_Once sync.Once

func eventBoxGetAboveChildFunction_Set() error {
	var err error
	eventBoxGetAboveChildFunction_Once.Do(func() {
		err = eventBoxStruct_Set()
		if err != nil {
			return
		}
		eventBoxGetAboveChildFunction, err = eventBoxStruct.InvokerNew("get_above_child")
	})
	return err
}

// GetAboveChild is a representation of the C type gtk_event_box_get_above_child.
func (recv *EventBox) GetAboveChild() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := eventBoxGetAboveChildFunction_Set()
	if err == nil {
		ret = eventBoxGetAboveChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var eventBoxGetVisibleWindowFunction *gi.Function
var eventBoxGetVisibleWindowFunction_Once sync.Once

func eventBoxGetVisibleWindowFunction_Set() error {
	var err error
	eventBoxGetVisibleWindowFunction_Once.Do(func() {
		err = eventBoxStruct_Set()
		if err != nil {
			return
		}
		eventBoxGetVisibleWindowFunction, err = eventBoxStruct.InvokerNew("get_visible_window")
	})
	return err
}

// GetVisibleWindow is a representation of the C type gtk_event_box_get_visible_window.
func (recv *EventBox) GetVisibleWindow() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := eventBoxGetVisibleWindowFunction_Set()
	if err == nil {
		ret = eventBoxGetVisibleWindowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var eventBoxSetAboveChildFunction *gi.Function
var eventBoxSetAboveChildFunction_Once sync.Once

func eventBoxSetAboveChildFunction_Set() error {
	var err error
	eventBoxSetAboveChildFunction_Once.Do(func() {
		err = eventBoxStruct_Set()
		if err != nil {
			return
		}
		eventBoxSetAboveChildFunction, err = eventBoxStruct.InvokerNew("set_above_child")
	})
	return err
}

// SetAboveChild is a representation of the C type gtk_event_box_set_above_child.
func (recv *EventBox) SetAboveChild(aboveChild bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(aboveChild)

	err := eventBoxSetAboveChildFunction_Set()
	if err == nil {
		eventBoxSetAboveChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var eventBoxSetVisibleWindowFunction *gi.Function
var eventBoxSetVisibleWindowFunction_Once sync.Once

func eventBoxSetVisibleWindowFunction_Set() error {
	var err error
	eventBoxSetVisibleWindowFunction_Once.Do(func() {
		err = eventBoxStruct_Set()
		if err != nil {
			return
		}
		eventBoxSetVisibleWindowFunction, err = eventBoxStruct.InvokerNew("set_visible_window")
	})
	return err
}

// SetVisibleWindow is a representation of the C type gtk_event_box_set_visible_window.
func (recv *EventBox) SetVisibleWindow(visibleWindow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visibleWindow)

	err := eventBoxSetVisibleWindowFunction_Set()
	if err == nil {
		eventBoxSetVisibleWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var eventControllerStruct *gi.Struct
var eventControllerStruct_Once sync.Once

func eventControllerStruct_Set() error {
	var err error
	eventControllerStruct_Once.Do(func() {
		eventControllerStruct, err = gi.StructNew("Gtk", "EventController")
	})
	return err
}

type EventController struct {
	gobject.Object
}

// UNSUPPORTED : C value 'gtk_event_controller_get_propagation_phase' : return type 'PropagationPhase' not supported

var eventControllerGetWidgetFunction *gi.Function
var eventControllerGetWidgetFunction_Once sync.Once

func eventControllerGetWidgetFunction_Set() error {
	var err error
	eventControllerGetWidgetFunction_Once.Do(func() {
		err = eventControllerStruct_Set()
		if err != nil {
			return
		}
		eventControllerGetWidgetFunction, err = eventControllerStruct.InvokerNew("get_widget")
	})
	return err
}

// GetWidget is a representation of the C type gtk_event_controller_get_widget.
func (recv *EventController) GetWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := eventControllerGetWidgetFunction_Set()
	if err == nil {
		ret = eventControllerGetWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_event_controller_handle_event' : parameter 'event' of type 'Gdk.Event' not supported

var eventControllerResetFunction *gi.Function
var eventControllerResetFunction_Once sync.Once

func eventControllerResetFunction_Set() error {
	var err error
	eventControllerResetFunction_Once.Do(func() {
		err = eventControllerStruct_Set()
		if err != nil {
			return
		}
		eventControllerResetFunction, err = eventControllerStruct.InvokerNew("reset")
	})
	return err
}

// Reset is a representation of the C type gtk_event_controller_reset.
func (recv *EventController) Reset() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := eventControllerResetFunction_Set()
	if err == nil {
		eventControllerResetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_event_controller_set_propagation_phase' : parameter 'phase' of type 'PropagationPhase' not supported

// EventControllerStruct creates an uninitialised EventController.
func EventControllerStruct() *EventController {
	err := eventControllerStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &EventController{}
	structGo.Native = eventControllerStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeEventController)
	return structGo
}
func finalizeEventController(obj *EventController) {
	eventControllerStruct.Free(obj.Native)
}

var eventControllerKeyStruct *gi.Struct
var eventControllerKeyStruct_Once sync.Once

func eventControllerKeyStruct_Set() error {
	var err error
	eventControllerKeyStruct_Once.Do(func() {
		eventControllerKeyStruct, err = gi.StructNew("Gtk", "EventControllerKey")
	})
	return err
}

type EventControllerKey struct {
	EventController
}

var eventControllerKeyNewFunction *gi.Function
var eventControllerKeyNewFunction_Once sync.Once

func eventControllerKeyNewFunction_Set() error {
	var err error
	eventControllerKeyNewFunction_Once.Do(func() {
		err = eventControllerKeyStruct_Set()
		if err != nil {
			return
		}
		eventControllerKeyNewFunction, err = eventControllerKeyStruct.InvokerNew("new")
	})
	return err
}

// EventControllerKeyNew is a representation of the C type gtk_event_controller_key_new.
func EventControllerKeyNew(widget *Widget) *EventControllerKey {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := eventControllerKeyNewFunction_Set()
	if err == nil {
		ret = eventControllerKeyNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EventControllerKey{}
	retGo.Native = ret.Pointer()

	return retGo
}

var eventControllerKeyForwardFunction *gi.Function
var eventControllerKeyForwardFunction_Once sync.Once

func eventControllerKeyForwardFunction_Set() error {
	var err error
	eventControllerKeyForwardFunction_Once.Do(func() {
		err = eventControllerKeyStruct_Set()
		if err != nil {
			return
		}
		eventControllerKeyForwardFunction, err = eventControllerKeyStruct.InvokerNew("forward")
	})
	return err
}

// Forward is a representation of the C type gtk_event_controller_key_forward.
func (recv *EventControllerKey) Forward(widget *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var ret gi.Argument

	err := eventControllerKeyForwardFunction_Set()
	if err == nil {
		ret = eventControllerKeyForwardFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var eventControllerKeyGetGroupFunction *gi.Function
var eventControllerKeyGetGroupFunction_Once sync.Once

func eventControllerKeyGetGroupFunction_Set() error {
	var err error
	eventControllerKeyGetGroupFunction_Once.Do(func() {
		err = eventControllerKeyStruct_Set()
		if err != nil {
			return
		}
		eventControllerKeyGetGroupFunction, err = eventControllerKeyStruct.InvokerNew("get_group")
	})
	return err
}

// GetGroup is a representation of the C type gtk_event_controller_key_get_group.
func (recv *EventControllerKey) GetGroup() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := eventControllerKeyGetGroupFunction_Set()
	if err == nil {
		ret = eventControllerKeyGetGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var eventControllerKeyGetImContextFunction *gi.Function
var eventControllerKeyGetImContextFunction_Once sync.Once

func eventControllerKeyGetImContextFunction_Set() error {
	var err error
	eventControllerKeyGetImContextFunction_Once.Do(func() {
		err = eventControllerKeyStruct_Set()
		if err != nil {
			return
		}
		eventControllerKeyGetImContextFunction, err = eventControllerKeyStruct.InvokerNew("get_im_context")
	})
	return err
}

// GetImContext is a representation of the C type gtk_event_controller_key_get_im_context.
func (recv *EventControllerKey) GetImContext() *IMContext {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := eventControllerKeyGetImContextFunction_Set()
	if err == nil {
		ret = eventControllerKeyGetImContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IMContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var eventControllerKeySetImContextFunction *gi.Function
var eventControllerKeySetImContextFunction_Once sync.Once

func eventControllerKeySetImContextFunction_Set() error {
	var err error
	eventControllerKeySetImContextFunction_Once.Do(func() {
		err = eventControllerKeyStruct_Set()
		if err != nil {
			return
		}
		eventControllerKeySetImContextFunction, err = eventControllerKeyStruct.InvokerNew("set_im_context")
	})
	return err
}

// SetImContext is a representation of the C type gtk_event_controller_key_set_im_context.
func (recv *EventControllerKey) SetImContext(imContext *IMContext) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(imContext.Native)

	err := eventControllerKeySetImContextFunction_Set()
	if err == nil {
		eventControllerKeySetImContextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var eventControllerMotionStruct *gi.Struct
var eventControllerMotionStruct_Once sync.Once

func eventControllerMotionStruct_Set() error {
	var err error
	eventControllerMotionStruct_Once.Do(func() {
		eventControllerMotionStruct, err = gi.StructNew("Gtk", "EventControllerMotion")
	})
	return err
}

type EventControllerMotion struct {
	EventController
}

var eventControllerMotionNewFunction *gi.Function
var eventControllerMotionNewFunction_Once sync.Once

func eventControllerMotionNewFunction_Set() error {
	var err error
	eventControllerMotionNewFunction_Once.Do(func() {
		err = eventControllerMotionStruct_Set()
		if err != nil {
			return
		}
		eventControllerMotionNewFunction, err = eventControllerMotionStruct.InvokerNew("new")
	})
	return err
}

// EventControllerMotionNew is a representation of the C type gtk_event_controller_motion_new.
func EventControllerMotionNew(widget *Widget) *EventControllerMotion {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := eventControllerMotionNewFunction_Set()
	if err == nil {
		ret = eventControllerMotionNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &EventControllerMotion{}
	retGo.Native = ret.Pointer()

	return retGo
}

var eventControllerScrollStruct *gi.Struct
var eventControllerScrollStruct_Once sync.Once

func eventControllerScrollStruct_Set() error {
	var err error
	eventControllerScrollStruct_Once.Do(func() {
		eventControllerScrollStruct, err = gi.StructNew("Gtk", "EventControllerScroll")
	})
	return err
}

type EventControllerScroll struct {
	EventController
}

// UNSUPPORTED : C value 'gtk_event_controller_scroll_new' : parameter 'flags' of type 'EventControllerScrollFlags' not supported

// UNSUPPORTED : C value 'gtk_event_controller_scroll_get_flags' : return type 'EventControllerScrollFlags' not supported

// UNSUPPORTED : C value 'gtk_event_controller_scroll_set_flags' : parameter 'flags' of type 'EventControllerScrollFlags' not supported

var expanderStruct *gi.Struct
var expanderStruct_Once sync.Once

func expanderStruct_Set() error {
	var err error
	expanderStruct_Once.Do(func() {
		expanderStruct, err = gi.StructNew("Gtk", "Expander")
	})
	return err
}

type Expander struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *Expander) FieldBin() *Bin {
	argValue := gi.FieldGet(expanderStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *Expander) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(expanderStruct, recv.Native, "bin", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Expander) FieldPriv() *ExpanderPrivate {
	argValue := gi.FieldGet(expanderStruct, recv.Native, "priv")
	value := &ExpanderPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Expander) SetFieldPriv(value *ExpanderPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(expanderStruct, recv.Native, "priv", argValue)
}

var expanderNewFunction *gi.Function
var expanderNewFunction_Once sync.Once

func expanderNewFunction_Set() error {
	var err error
	expanderNewFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderNewFunction, err = expanderStruct.InvokerNew("new")
	})
	return err
}

// ExpanderNew is a representation of the C type gtk_expander_new.
func ExpanderNew(label string) *Expander {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := expanderNewFunction_Set()
	if err == nil {
		ret = expanderNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Expander{}
	retGo.Native = ret.Pointer()

	return retGo
}

var expanderNewWithMnemonicFunction *gi.Function
var expanderNewWithMnemonicFunction_Once sync.Once

func expanderNewWithMnemonicFunction_Set() error {
	var err error
	expanderNewWithMnemonicFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderNewWithMnemonicFunction, err = expanderStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// ExpanderNewWithMnemonic is a representation of the C type gtk_expander_new_with_mnemonic.
func ExpanderNewWithMnemonic(label string) *Expander {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := expanderNewWithMnemonicFunction_Set()
	if err == nil {
		ret = expanderNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Expander{}
	retGo.Native = ret.Pointer()

	return retGo
}

var expanderGetExpandedFunction *gi.Function
var expanderGetExpandedFunction_Once sync.Once

func expanderGetExpandedFunction_Set() error {
	var err error
	expanderGetExpandedFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetExpandedFunction, err = expanderStruct.InvokerNew("get_expanded")
	})
	return err
}

// GetExpanded is a representation of the C type gtk_expander_get_expanded.
func (recv *Expander) GetExpanded() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetExpandedFunction_Set()
	if err == nil {
		ret = expanderGetExpandedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var expanderGetLabelFunction *gi.Function
var expanderGetLabelFunction_Once sync.Once

func expanderGetLabelFunction_Set() error {
	var err error
	expanderGetLabelFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetLabelFunction, err = expanderStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_expander_get_label.
func (recv *Expander) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetLabelFunction_Set()
	if err == nil {
		ret = expanderGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var expanderGetLabelFillFunction *gi.Function
var expanderGetLabelFillFunction_Once sync.Once

func expanderGetLabelFillFunction_Set() error {
	var err error
	expanderGetLabelFillFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetLabelFillFunction, err = expanderStruct.InvokerNew("get_label_fill")
	})
	return err
}

// GetLabelFill is a representation of the C type gtk_expander_get_label_fill.
func (recv *Expander) GetLabelFill() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetLabelFillFunction_Set()
	if err == nil {
		ret = expanderGetLabelFillFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var expanderGetLabelWidgetFunction *gi.Function
var expanderGetLabelWidgetFunction_Once sync.Once

func expanderGetLabelWidgetFunction_Set() error {
	var err error
	expanderGetLabelWidgetFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetLabelWidgetFunction, err = expanderStruct.InvokerNew("get_label_widget")
	})
	return err
}

// GetLabelWidget is a representation of the C type gtk_expander_get_label_widget.
func (recv *Expander) GetLabelWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetLabelWidgetFunction_Set()
	if err == nil {
		ret = expanderGetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var expanderGetResizeToplevelFunction *gi.Function
var expanderGetResizeToplevelFunction_Once sync.Once

func expanderGetResizeToplevelFunction_Set() error {
	var err error
	expanderGetResizeToplevelFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetResizeToplevelFunction, err = expanderStruct.InvokerNew("get_resize_toplevel")
	})
	return err
}

// GetResizeToplevel is a representation of the C type gtk_expander_get_resize_toplevel.
func (recv *Expander) GetResizeToplevel() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetResizeToplevelFunction_Set()
	if err == nil {
		ret = expanderGetResizeToplevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var expanderGetSpacingFunction *gi.Function
var expanderGetSpacingFunction_Once sync.Once

func expanderGetSpacingFunction_Set() error {
	var err error
	expanderGetSpacingFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetSpacingFunction, err = expanderStruct.InvokerNew("get_spacing")
	})
	return err
}

// GetSpacing is a representation of the C type gtk_expander_get_spacing.
func (recv *Expander) GetSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetSpacingFunction_Set()
	if err == nil {
		ret = expanderGetSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var expanderGetUseMarkupFunction *gi.Function
var expanderGetUseMarkupFunction_Once sync.Once

func expanderGetUseMarkupFunction_Set() error {
	var err error
	expanderGetUseMarkupFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetUseMarkupFunction, err = expanderStruct.InvokerNew("get_use_markup")
	})
	return err
}

// GetUseMarkup is a representation of the C type gtk_expander_get_use_markup.
func (recv *Expander) GetUseMarkup() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetUseMarkupFunction_Set()
	if err == nil {
		ret = expanderGetUseMarkupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var expanderGetUseUnderlineFunction *gi.Function
var expanderGetUseUnderlineFunction_Once sync.Once

func expanderGetUseUnderlineFunction_Set() error {
	var err error
	expanderGetUseUnderlineFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderGetUseUnderlineFunction, err = expanderStruct.InvokerNew("get_use_underline")
	})
	return err
}

// GetUseUnderline is a representation of the C type gtk_expander_get_use_underline.
func (recv *Expander) GetUseUnderline() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := expanderGetUseUnderlineFunction_Set()
	if err == nil {
		ret = expanderGetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var expanderSetExpandedFunction *gi.Function
var expanderSetExpandedFunction_Once sync.Once

func expanderSetExpandedFunction_Set() error {
	var err error
	expanderSetExpandedFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetExpandedFunction, err = expanderStruct.InvokerNew("set_expanded")
	})
	return err
}

// SetExpanded is a representation of the C type gtk_expander_set_expanded.
func (recv *Expander) SetExpanded(expanded bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expanded)

	err := expanderSetExpandedFunction_Set()
	if err == nil {
		expanderSetExpandedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetLabelFunction *gi.Function
var expanderSetLabelFunction_Once sync.Once

func expanderSetLabelFunction_Set() error {
	var err error
	expanderSetLabelFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetLabelFunction, err = expanderStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_expander_set_label.
func (recv *Expander) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := expanderSetLabelFunction_Set()
	if err == nil {
		expanderSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetLabelFillFunction *gi.Function
var expanderSetLabelFillFunction_Once sync.Once

func expanderSetLabelFillFunction_Set() error {
	var err error
	expanderSetLabelFillFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetLabelFillFunction, err = expanderStruct.InvokerNew("set_label_fill")
	})
	return err
}

// SetLabelFill is a representation of the C type gtk_expander_set_label_fill.
func (recv *Expander) SetLabelFill(labelFill bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(labelFill)

	err := expanderSetLabelFillFunction_Set()
	if err == nil {
		expanderSetLabelFillFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetLabelWidgetFunction *gi.Function
var expanderSetLabelWidgetFunction_Once sync.Once

func expanderSetLabelWidgetFunction_Set() error {
	var err error
	expanderSetLabelWidgetFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetLabelWidgetFunction, err = expanderStruct.InvokerNew("set_label_widget")
	})
	return err
}

// SetLabelWidget is a representation of the C type gtk_expander_set_label_widget.
func (recv *Expander) SetLabelWidget(labelWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(labelWidget.Native)

	err := expanderSetLabelWidgetFunction_Set()
	if err == nil {
		expanderSetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetResizeToplevelFunction *gi.Function
var expanderSetResizeToplevelFunction_Once sync.Once

func expanderSetResizeToplevelFunction_Set() error {
	var err error
	expanderSetResizeToplevelFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetResizeToplevelFunction, err = expanderStruct.InvokerNew("set_resize_toplevel")
	})
	return err
}

// SetResizeToplevel is a representation of the C type gtk_expander_set_resize_toplevel.
func (recv *Expander) SetResizeToplevel(resizeToplevel bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(resizeToplevel)

	err := expanderSetResizeToplevelFunction_Set()
	if err == nil {
		expanderSetResizeToplevelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetSpacingFunction *gi.Function
var expanderSetSpacingFunction_Once sync.Once

func expanderSetSpacingFunction_Set() error {
	var err error
	expanderSetSpacingFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetSpacingFunction, err = expanderStruct.InvokerNew("set_spacing")
	})
	return err
}

// SetSpacing is a representation of the C type gtk_expander_set_spacing.
func (recv *Expander) SetSpacing(spacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(spacing)

	err := expanderSetSpacingFunction_Set()
	if err == nil {
		expanderSetSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetUseMarkupFunction *gi.Function
var expanderSetUseMarkupFunction_Once sync.Once

func expanderSetUseMarkupFunction_Set() error {
	var err error
	expanderSetUseMarkupFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetUseMarkupFunction, err = expanderStruct.InvokerNew("set_use_markup")
	})
	return err
}

// SetUseMarkup is a representation of the C type gtk_expander_set_use_markup.
func (recv *Expander) SetUseMarkup(useMarkup bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useMarkup)

	err := expanderSetUseMarkupFunction_Set()
	if err == nil {
		expanderSetUseMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderSetUseUnderlineFunction *gi.Function
var expanderSetUseUnderlineFunction_Once sync.Once

func expanderSetUseUnderlineFunction_Set() error {
	var err error
	expanderSetUseUnderlineFunction_Once.Do(func() {
		err = expanderStruct_Set()
		if err != nil {
			return
		}
		expanderSetUseUnderlineFunction, err = expanderStruct.InvokerNew("set_use_underline")
	})
	return err
}

// SetUseUnderline is a representation of the C type gtk_expander_set_use_underline.
func (recv *Expander) SetUseUnderline(useUnderline bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useUnderline)

	err := expanderSetUseUnderlineFunction_Set()
	if err == nil {
		expanderSetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var expanderAccessibleStruct *gi.Struct
var expanderAccessibleStruct_Once sync.Once

func expanderAccessibleStruct_Set() error {
	var err error
	expanderAccessibleStruct_Once.Do(func() {
		expanderAccessibleStruct, err = gi.StructNew("Gtk", "ExpanderAccessible")
	})
	return err
}

type ExpanderAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ExpanderAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(expanderAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ExpanderAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(expanderAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ExpanderAccessible) FieldPriv() *ExpanderAccessiblePrivate {
	argValue := gi.FieldGet(expanderAccessibleStruct, recv.Native, "priv")
	value := &ExpanderAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ExpanderAccessible) SetFieldPriv(value *ExpanderAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(expanderAccessibleStruct, recv.Native, "priv", argValue)
}

// ExpanderAccessibleStruct creates an uninitialised ExpanderAccessible.
func ExpanderAccessibleStruct() *ExpanderAccessible {
	err := expanderAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ExpanderAccessible{}
	structGo.Native = expanderAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeExpanderAccessible)
	return structGo
}
func finalizeExpanderAccessible(obj *ExpanderAccessible) {
	expanderAccessibleStruct.Free(obj.Native)
}

var fileChooserButtonStruct *gi.Struct
var fileChooserButtonStruct_Once sync.Once

func fileChooserButtonStruct_Set() error {
	var err error
	fileChooserButtonStruct_Once.Do(func() {
		fileChooserButtonStruct, err = gi.StructNew("Gtk", "FileChooserButton")
	})
	return err
}

type FileChooserButton struct {
	Box
}

// FieldParent returns the C field 'parent'.
func (recv *FileChooserButton) FieldParent() *Box {
	argValue := gi.FieldGet(fileChooserButtonStruct, recv.Native, "parent")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *FileChooserButton) SetFieldParent(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fileChooserButtonStruct, recv.Native, "parent", argValue)
}

// UNSUPPORTED : C value 'gtk_file_chooser_button_new' : parameter 'action' of type 'FileChooserAction' not supported

var fileChooserButtonNewWithDialogFunction *gi.Function
var fileChooserButtonNewWithDialogFunction_Once sync.Once

func fileChooserButtonNewWithDialogFunction_Set() error {
	var err error
	fileChooserButtonNewWithDialogFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonNewWithDialogFunction, err = fileChooserButtonStruct.InvokerNew("new_with_dialog")
	})
	return err
}

// FileChooserButtonNewWithDialog is a representation of the C type gtk_file_chooser_button_new_with_dialog.
func FileChooserButtonNewWithDialog(dialog *Dialog) *FileChooserButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(dialog.Native)

	var ret gi.Argument

	err := fileChooserButtonNewWithDialogFunction_Set()
	if err == nil {
		ret = fileChooserButtonNewWithDialogFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FileChooserButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fileChooserButtonGetFocusOnClickFunction *gi.Function
var fileChooserButtonGetFocusOnClickFunction_Once sync.Once

func fileChooserButtonGetFocusOnClickFunction_Set() error {
	var err error
	fileChooserButtonGetFocusOnClickFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonGetFocusOnClickFunction, err = fileChooserButtonStruct.InvokerNew("get_focus_on_click")
	})
	return err
}

// GetFocusOnClick is a representation of the C type gtk_file_chooser_button_get_focus_on_click.
func (recv *FileChooserButton) GetFocusOnClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileChooserButtonGetFocusOnClickFunction_Set()
	if err == nil {
		ret = fileChooserButtonGetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fileChooserButtonGetTitleFunction *gi.Function
var fileChooserButtonGetTitleFunction_Once sync.Once

func fileChooserButtonGetTitleFunction_Set() error {
	var err error
	fileChooserButtonGetTitleFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonGetTitleFunction, err = fileChooserButtonStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_file_chooser_button_get_title.
func (recv *FileChooserButton) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileChooserButtonGetTitleFunction_Set()
	if err == nil {
		ret = fileChooserButtonGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fileChooserButtonGetWidthCharsFunction *gi.Function
var fileChooserButtonGetWidthCharsFunction_Once sync.Once

func fileChooserButtonGetWidthCharsFunction_Set() error {
	var err error
	fileChooserButtonGetWidthCharsFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonGetWidthCharsFunction, err = fileChooserButtonStruct.InvokerNew("get_width_chars")
	})
	return err
}

// GetWidthChars is a representation of the C type gtk_file_chooser_button_get_width_chars.
func (recv *FileChooserButton) GetWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileChooserButtonGetWidthCharsFunction_Set()
	if err == nil {
		ret = fileChooserButtonGetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var fileChooserButtonSetFocusOnClickFunction *gi.Function
var fileChooserButtonSetFocusOnClickFunction_Once sync.Once

func fileChooserButtonSetFocusOnClickFunction_Set() error {
	var err error
	fileChooserButtonSetFocusOnClickFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonSetFocusOnClickFunction, err = fileChooserButtonStruct.InvokerNew("set_focus_on_click")
	})
	return err
}

// SetFocusOnClick is a representation of the C type gtk_file_chooser_button_set_focus_on_click.
func (recv *FileChooserButton) SetFocusOnClick(focusOnClick bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(focusOnClick)

	err := fileChooserButtonSetFocusOnClickFunction_Set()
	if err == nil {
		fileChooserButtonSetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileChooserButtonSetTitleFunction *gi.Function
var fileChooserButtonSetTitleFunction_Once sync.Once

func fileChooserButtonSetTitleFunction_Set() error {
	var err error
	fileChooserButtonSetTitleFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonSetTitleFunction, err = fileChooserButtonStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_file_chooser_button_set_title.
func (recv *FileChooserButton) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := fileChooserButtonSetTitleFunction_Set()
	if err == nil {
		fileChooserButtonSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileChooserButtonSetWidthCharsFunction *gi.Function
var fileChooserButtonSetWidthCharsFunction_Once sync.Once

func fileChooserButtonSetWidthCharsFunction_Set() error {
	var err error
	fileChooserButtonSetWidthCharsFunction_Once.Do(func() {
		err = fileChooserButtonStruct_Set()
		if err != nil {
			return
		}
		fileChooserButtonSetWidthCharsFunction, err = fileChooserButtonStruct.InvokerNew("set_width_chars")
	})
	return err
}

// SetWidthChars is a representation of the C type gtk_file_chooser_button_set_width_chars.
func (recv *FileChooserButton) SetWidthChars(nChars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nChars)

	err := fileChooserButtonSetWidthCharsFunction_Set()
	if err == nil {
		fileChooserButtonSetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileChooserDialogStruct *gi.Struct
var fileChooserDialogStruct_Once sync.Once

func fileChooserDialogStruct_Set() error {
	var err error
	fileChooserDialogStruct_Once.Do(func() {
		fileChooserDialogStruct, err = gi.StructNew("Gtk", "FileChooserDialog")
	})
	return err
}

type FileChooserDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FileChooserDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(fileChooserDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FileChooserDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fileChooserDialogStruct, recv.Native, "parent_instance", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *FileChooserDialog) FieldPriv() *FileChooserDialogPrivate {
	argValue := gi.FieldGet(fileChooserDialogStruct, recv.Native, "priv")
	value := &FileChooserDialogPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *FileChooserDialog) SetFieldPriv(value *FileChooserDialogPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fileChooserDialogStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_file_chooser_dialog_new' : parameter 'action' of type 'FileChooserAction' not supported

var fileChooserNativeStruct *gi.Struct
var fileChooserNativeStruct_Once sync.Once

func fileChooserNativeStruct_Set() error {
	var err error
	fileChooserNativeStruct_Once.Do(func() {
		fileChooserNativeStruct, err = gi.StructNew("Gtk", "FileChooserNative")
	})
	return err
}

type FileChooserNative struct {
	NativeDialog
}

// UNSUPPORTED : C value 'gtk_file_chooser_native_new' : parameter 'action' of type 'FileChooserAction' not supported

var fileChooserNativeGetAcceptLabelFunction *gi.Function
var fileChooserNativeGetAcceptLabelFunction_Once sync.Once

func fileChooserNativeGetAcceptLabelFunction_Set() error {
	var err error
	fileChooserNativeGetAcceptLabelFunction_Once.Do(func() {
		err = fileChooserNativeStruct_Set()
		if err != nil {
			return
		}
		fileChooserNativeGetAcceptLabelFunction, err = fileChooserNativeStruct.InvokerNew("get_accept_label")
	})
	return err
}

// GetAcceptLabel is a representation of the C type gtk_file_chooser_native_get_accept_label.
func (recv *FileChooserNative) GetAcceptLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileChooserNativeGetAcceptLabelFunction_Set()
	if err == nil {
		ret = fileChooserNativeGetAcceptLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fileChooserNativeGetCancelLabelFunction *gi.Function
var fileChooserNativeGetCancelLabelFunction_Once sync.Once

func fileChooserNativeGetCancelLabelFunction_Set() error {
	var err error
	fileChooserNativeGetCancelLabelFunction_Once.Do(func() {
		err = fileChooserNativeStruct_Set()
		if err != nil {
			return
		}
		fileChooserNativeGetCancelLabelFunction, err = fileChooserNativeStruct.InvokerNew("get_cancel_label")
	})
	return err
}

// GetCancelLabel is a representation of the C type gtk_file_chooser_native_get_cancel_label.
func (recv *FileChooserNative) GetCancelLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileChooserNativeGetCancelLabelFunction_Set()
	if err == nil {
		ret = fileChooserNativeGetCancelLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fileChooserNativeSetAcceptLabelFunction *gi.Function
var fileChooserNativeSetAcceptLabelFunction_Once sync.Once

func fileChooserNativeSetAcceptLabelFunction_Set() error {
	var err error
	fileChooserNativeSetAcceptLabelFunction_Once.Do(func() {
		err = fileChooserNativeStruct_Set()
		if err != nil {
			return
		}
		fileChooserNativeSetAcceptLabelFunction, err = fileChooserNativeStruct.InvokerNew("set_accept_label")
	})
	return err
}

// SetAcceptLabel is a representation of the C type gtk_file_chooser_native_set_accept_label.
func (recv *FileChooserNative) SetAcceptLabel(acceptLabel string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(acceptLabel)

	err := fileChooserNativeSetAcceptLabelFunction_Set()
	if err == nil {
		fileChooserNativeSetAcceptLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileChooserNativeSetCancelLabelFunction *gi.Function
var fileChooserNativeSetCancelLabelFunction_Once sync.Once

func fileChooserNativeSetCancelLabelFunction_Set() error {
	var err error
	fileChooserNativeSetCancelLabelFunction_Once.Do(func() {
		err = fileChooserNativeStruct_Set()
		if err != nil {
			return
		}
		fileChooserNativeSetCancelLabelFunction, err = fileChooserNativeStruct.InvokerNew("set_cancel_label")
	})
	return err
}

// SetCancelLabel is a representation of the C type gtk_file_chooser_native_set_cancel_label.
func (recv *FileChooserNative) SetCancelLabel(cancelLabel string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(cancelLabel)

	err := fileChooserNativeSetCancelLabelFunction_Set()
	if err == nil {
		fileChooserNativeSetCancelLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileChooserWidgetStruct *gi.Struct
var fileChooserWidgetStruct_Once sync.Once

func fileChooserWidgetStruct_Set() error {
	var err error
	fileChooserWidgetStruct_Once.Do(func() {
		fileChooserWidgetStruct, err = gi.StructNew("Gtk", "FileChooserWidget")
	})
	return err
}

type FileChooserWidget struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FileChooserWidget) FieldParentInstance() *Box {
	argValue := gi.FieldGet(fileChooserWidgetStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FileChooserWidget) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fileChooserWidgetStruct, recv.Native, "parent_instance", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *FileChooserWidget) FieldPriv() *FileChooserWidgetPrivate {
	argValue := gi.FieldGet(fileChooserWidgetStruct, recv.Native, "priv")
	value := &FileChooserWidgetPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *FileChooserWidget) SetFieldPriv(value *FileChooserWidgetPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fileChooserWidgetStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_file_chooser_widget_new' : parameter 'action' of type 'FileChooserAction' not supported

var fileFilterStruct *gi.Struct
var fileFilterStruct_Once sync.Once

func fileFilterStruct_Set() error {
	var err error
	fileFilterStruct_Once.Do(func() {
		fileFilterStruct, err = gi.StructNew("Gtk", "FileFilter")
	})
	return err
}

type FileFilter struct {
	gobject.InitiallyUnowned
}

var fileFilterNewFunction *gi.Function
var fileFilterNewFunction_Once sync.Once

func fileFilterNewFunction_Set() error {
	var err error
	fileFilterNewFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterNewFunction, err = fileFilterStruct.InvokerNew("new")
	})
	return err
}

// FileFilterNew is a representation of the C type gtk_file_filter_new.
func FileFilterNew() *FileFilter {

	var ret gi.Argument

	err := fileFilterNewFunction_Set()
	if err == nil {
		ret = fileFilterNewFunction.Invoke(nil, nil)
	}

	retGo := &FileFilter{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_file_filter_new_from_gvariant' : parameter 'variant' of type 'GLib.Variant' not supported

// UNSUPPORTED : C value 'gtk_file_filter_add_custom' : parameter 'needed' of type 'FileFilterFlags' not supported

var fileFilterAddMimeTypeFunction *gi.Function
var fileFilterAddMimeTypeFunction_Once sync.Once

func fileFilterAddMimeTypeFunction_Set() error {
	var err error
	fileFilterAddMimeTypeFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterAddMimeTypeFunction, err = fileFilterStruct.InvokerNew("add_mime_type")
	})
	return err
}

// AddMimeType is a representation of the C type gtk_file_filter_add_mime_type.
func (recv *FileFilter) AddMimeType(mimeType string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(mimeType)

	err := fileFilterAddMimeTypeFunction_Set()
	if err == nil {
		fileFilterAddMimeTypeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileFilterAddPatternFunction *gi.Function
var fileFilterAddPatternFunction_Once sync.Once

func fileFilterAddPatternFunction_Set() error {
	var err error
	fileFilterAddPatternFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterAddPatternFunction, err = fileFilterStruct.InvokerNew("add_pattern")
	})
	return err
}

// AddPattern is a representation of the C type gtk_file_filter_add_pattern.
func (recv *FileFilter) AddPattern(pattern string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(pattern)

	err := fileFilterAddPatternFunction_Set()
	if err == nil {
		fileFilterAddPatternFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileFilterAddPixbufFormatsFunction *gi.Function
var fileFilterAddPixbufFormatsFunction_Once sync.Once

func fileFilterAddPixbufFormatsFunction_Set() error {
	var err error
	fileFilterAddPixbufFormatsFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterAddPixbufFormatsFunction, err = fileFilterStruct.InvokerNew("add_pixbuf_formats")
	})
	return err
}

// AddPixbufFormats is a representation of the C type gtk_file_filter_add_pixbuf_formats.
func (recv *FileFilter) AddPixbufFormats() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := fileFilterAddPixbufFormatsFunction_Set()
	if err == nil {
		fileFilterAddPixbufFormatsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fileFilterFilterFunction *gi.Function
var fileFilterFilterFunction_Once sync.Once

func fileFilterFilterFunction_Set() error {
	var err error
	fileFilterFilterFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterFilterFunction, err = fileFilterStruct.InvokerNew("filter")
	})
	return err
}

// Filter is a representation of the C type gtk_file_filter_filter.
func (recv *FileFilter) Filter(filterInfo *FileFilterInfo) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(filterInfo.Native)

	var ret gi.Argument

	err := fileFilterFilterFunction_Set()
	if err == nil {
		ret = fileFilterFilterFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fileFilterGetNameFunction *gi.Function
var fileFilterGetNameFunction_Once sync.Once

func fileFilterGetNameFunction_Set() error {
	var err error
	fileFilterGetNameFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterGetNameFunction, err = fileFilterStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_file_filter_get_name.
func (recv *FileFilter) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fileFilterGetNameFunction_Set()
	if err == nil {
		ret = fileFilterGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_file_filter_get_needed' : return type 'FileFilterFlags' not supported

var fileFilterSetNameFunction *gi.Function
var fileFilterSetNameFunction_Once sync.Once

func fileFilterSetNameFunction_Set() error {
	var err error
	fileFilterSetNameFunction_Once.Do(func() {
		err = fileFilterStruct_Set()
		if err != nil {
			return
		}
		fileFilterSetNameFunction, err = fileFilterStruct.InvokerNew("set_name")
	})
	return err
}

// SetName is a representation of the C type gtk_file_filter_set_name.
func (recv *FileFilter) SetName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := fileFilterSetNameFunction_Set()
	if err == nil {
		fileFilterSetNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_file_filter_to_gvariant' : return type 'GLib.Variant' not supported

var fixedStruct *gi.Struct
var fixedStruct_Once sync.Once

func fixedStruct_Set() error {
	var err error
	fixedStruct_Once.Do(func() {
		fixedStruct, err = gi.StructNew("Gtk", "Fixed")
	})
	return err
}

type Fixed struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Fixed) FieldContainer() *Container {
	argValue := gi.FieldGet(fixedStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Fixed) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fixedStruct, recv.Native, "container", argValue)
}

var fixedNewFunction *gi.Function
var fixedNewFunction_Once sync.Once

func fixedNewFunction_Set() error {
	var err error
	fixedNewFunction_Once.Do(func() {
		err = fixedStruct_Set()
		if err != nil {
			return
		}
		fixedNewFunction, err = fixedStruct.InvokerNew("new")
	})
	return err
}

// FixedNew is a representation of the C type gtk_fixed_new.
func FixedNew() *Fixed {

	var ret gi.Argument

	err := fixedNewFunction_Set()
	if err == nil {
		ret = fixedNewFunction.Invoke(nil, nil)
	}

	retGo := &Fixed{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fixedMoveFunction *gi.Function
var fixedMoveFunction_Once sync.Once

func fixedMoveFunction_Set() error {
	var err error
	fixedMoveFunction_Once.Do(func() {
		err = fixedStruct_Set()
		if err != nil {
			return
		}
		fixedMoveFunction, err = fixedStruct.InvokerNew("move")
	})
	return err
}

// Move is a representation of the C type gtk_fixed_move.
func (recv *Fixed) Move(widget *Widget, x int32, y int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetInt32(x)
	inArgs[3].SetInt32(y)

	err := fixedMoveFunction_Set()
	if err == nil {
		fixedMoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fixedPutFunction *gi.Function
var fixedPutFunction_Once sync.Once

func fixedPutFunction_Set() error {
	var err error
	fixedPutFunction_Once.Do(func() {
		err = fixedStruct_Set()
		if err != nil {
			return
		}
		fixedPutFunction, err = fixedStruct.InvokerNew("put")
	})
	return err
}

// Put is a representation of the C type gtk_fixed_put.
func (recv *Fixed) Put(widget *Widget, x int32, y int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetInt32(x)
	inArgs[3].SetInt32(y)

	err := fixedPutFunction_Set()
	if err == nil {
		fixedPutFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxStruct *gi.Struct
var flowBoxStruct_Once sync.Once

func flowBoxStruct_Set() error {
	var err error
	flowBoxStruct_Once.Do(func() {
		flowBoxStruct, err = gi.StructNew("Gtk", "FlowBox")
	})
	return err
}

type FlowBox struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *FlowBox) FieldContainer() *Container {
	argValue := gi.FieldGet(flowBoxStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *FlowBox) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(flowBoxStruct, recv.Native, "container", argValue)
}

var flowBoxNewFunction *gi.Function
var flowBoxNewFunction_Once sync.Once

func flowBoxNewFunction_Set() error {
	var err error
	flowBoxNewFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxNewFunction, err = flowBoxStruct.InvokerNew("new")
	})
	return err
}

// FlowBoxNew is a representation of the C type gtk_flow_box_new.
func FlowBoxNew() *FlowBox {

	var ret gi.Argument

	err := flowBoxNewFunction_Set()
	if err == nil {
		ret = flowBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &FlowBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_flow_box_bind_model' : parameter 'model' of type 'Gio.ListModel' not supported

var flowBoxGetActivateOnSingleClickFunction *gi.Function
var flowBoxGetActivateOnSingleClickFunction_Once sync.Once

func flowBoxGetActivateOnSingleClickFunction_Set() error {
	var err error
	flowBoxGetActivateOnSingleClickFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetActivateOnSingleClickFunction, err = flowBoxStruct.InvokerNew("get_activate_on_single_click")
	})
	return err
}

// GetActivateOnSingleClick is a representation of the C type gtk_flow_box_get_activate_on_single_click.
func (recv *FlowBox) GetActivateOnSingleClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetActivateOnSingleClickFunction_Set()
	if err == nil {
		ret = flowBoxGetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var flowBoxGetChildAtIndexFunction *gi.Function
var flowBoxGetChildAtIndexFunction_Once sync.Once

func flowBoxGetChildAtIndexFunction_Set() error {
	var err error
	flowBoxGetChildAtIndexFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetChildAtIndexFunction, err = flowBoxStruct.InvokerNew("get_child_at_index")
	})
	return err
}

// GetChildAtIndex is a representation of the C type gtk_flow_box_get_child_at_index.
func (recv *FlowBox) GetChildAtIndex(idx int32) *FlowBoxChild {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(idx)

	var ret gi.Argument

	err := flowBoxGetChildAtIndexFunction_Set()
	if err == nil {
		ret = flowBoxGetChildAtIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FlowBoxChild{}
	retGo.Native = ret.Pointer()

	return retGo
}

var flowBoxGetChildAtPosFunction *gi.Function
var flowBoxGetChildAtPosFunction_Once sync.Once

func flowBoxGetChildAtPosFunction_Set() error {
	var err error
	flowBoxGetChildAtPosFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetChildAtPosFunction, err = flowBoxStruct.InvokerNew("get_child_at_pos")
	})
	return err
}

// GetChildAtPos is a representation of the C type gtk_flow_box_get_child_at_pos.
func (recv *FlowBox) GetChildAtPos(x int32, y int32) *FlowBoxChild {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := flowBoxGetChildAtPosFunction_Set()
	if err == nil {
		ret = flowBoxGetChildAtPosFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FlowBoxChild{}
	retGo.Native = ret.Pointer()

	return retGo
}

var flowBoxGetColumnSpacingFunction *gi.Function
var flowBoxGetColumnSpacingFunction_Once sync.Once

func flowBoxGetColumnSpacingFunction_Set() error {
	var err error
	flowBoxGetColumnSpacingFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetColumnSpacingFunction, err = flowBoxStruct.InvokerNew("get_column_spacing")
	})
	return err
}

// GetColumnSpacing is a representation of the C type gtk_flow_box_get_column_spacing.
func (recv *FlowBox) GetColumnSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetColumnSpacingFunction_Set()
	if err == nil {
		ret = flowBoxGetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var flowBoxGetHomogeneousFunction *gi.Function
var flowBoxGetHomogeneousFunction_Once sync.Once

func flowBoxGetHomogeneousFunction_Set() error {
	var err error
	flowBoxGetHomogeneousFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetHomogeneousFunction, err = flowBoxStruct.InvokerNew("get_homogeneous")
	})
	return err
}

// GetHomogeneous is a representation of the C type gtk_flow_box_get_homogeneous.
func (recv *FlowBox) GetHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetHomogeneousFunction_Set()
	if err == nil {
		ret = flowBoxGetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var flowBoxGetMaxChildrenPerLineFunction *gi.Function
var flowBoxGetMaxChildrenPerLineFunction_Once sync.Once

func flowBoxGetMaxChildrenPerLineFunction_Set() error {
	var err error
	flowBoxGetMaxChildrenPerLineFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetMaxChildrenPerLineFunction, err = flowBoxStruct.InvokerNew("get_max_children_per_line")
	})
	return err
}

// GetMaxChildrenPerLine is a representation of the C type gtk_flow_box_get_max_children_per_line.
func (recv *FlowBox) GetMaxChildrenPerLine() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetMaxChildrenPerLineFunction_Set()
	if err == nil {
		ret = flowBoxGetMaxChildrenPerLineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var flowBoxGetMinChildrenPerLineFunction *gi.Function
var flowBoxGetMinChildrenPerLineFunction_Once sync.Once

func flowBoxGetMinChildrenPerLineFunction_Set() error {
	var err error
	flowBoxGetMinChildrenPerLineFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetMinChildrenPerLineFunction, err = flowBoxStruct.InvokerNew("get_min_children_per_line")
	})
	return err
}

// GetMinChildrenPerLine is a representation of the C type gtk_flow_box_get_min_children_per_line.
func (recv *FlowBox) GetMinChildrenPerLine() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetMinChildrenPerLineFunction_Set()
	if err == nil {
		ret = flowBoxGetMinChildrenPerLineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var flowBoxGetRowSpacingFunction *gi.Function
var flowBoxGetRowSpacingFunction_Once sync.Once

func flowBoxGetRowSpacingFunction_Set() error {
	var err error
	flowBoxGetRowSpacingFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxGetRowSpacingFunction, err = flowBoxStruct.InvokerNew("get_row_spacing")
	})
	return err
}

// GetRowSpacing is a representation of the C type gtk_flow_box_get_row_spacing.
func (recv *FlowBox) GetRowSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxGetRowSpacingFunction_Set()
	if err == nil {
		ret = flowBoxGetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_flow_box_get_selected_children' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_flow_box_get_selection_mode' : return type 'SelectionMode' not supported

var flowBoxInsertFunction *gi.Function
var flowBoxInsertFunction_Once sync.Once

func flowBoxInsertFunction_Set() error {
	var err error
	flowBoxInsertFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxInsertFunction, err = flowBoxStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_flow_box_insert.
func (recv *FlowBox) Insert(widget *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetInt32(position)

	err := flowBoxInsertFunction_Set()
	if err == nil {
		flowBoxInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxInvalidateFilterFunction *gi.Function
var flowBoxInvalidateFilterFunction_Once sync.Once

func flowBoxInvalidateFilterFunction_Set() error {
	var err error
	flowBoxInvalidateFilterFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxInvalidateFilterFunction, err = flowBoxStruct.InvokerNew("invalidate_filter")
	})
	return err
}

// InvalidateFilter is a representation of the C type gtk_flow_box_invalidate_filter.
func (recv *FlowBox) InvalidateFilter() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := flowBoxInvalidateFilterFunction_Set()
	if err == nil {
		flowBoxInvalidateFilterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxInvalidateSortFunction *gi.Function
var flowBoxInvalidateSortFunction_Once sync.Once

func flowBoxInvalidateSortFunction_Set() error {
	var err error
	flowBoxInvalidateSortFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxInvalidateSortFunction, err = flowBoxStruct.InvokerNew("invalidate_sort")
	})
	return err
}

// InvalidateSort is a representation of the C type gtk_flow_box_invalidate_sort.
func (recv *FlowBox) InvalidateSort() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := flowBoxInvalidateSortFunction_Set()
	if err == nil {
		flowBoxInvalidateSortFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSelectAllFunction *gi.Function
var flowBoxSelectAllFunction_Once sync.Once

func flowBoxSelectAllFunction_Set() error {
	var err error
	flowBoxSelectAllFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSelectAllFunction, err = flowBoxStruct.InvokerNew("select_all")
	})
	return err
}

// SelectAll is a representation of the C type gtk_flow_box_select_all.
func (recv *FlowBox) SelectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := flowBoxSelectAllFunction_Set()
	if err == nil {
		flowBoxSelectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSelectChildFunction *gi.Function
var flowBoxSelectChildFunction_Once sync.Once

func flowBoxSelectChildFunction_Set() error {
	var err error
	flowBoxSelectChildFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSelectChildFunction, err = flowBoxStruct.InvokerNew("select_child")
	})
	return err
}

// SelectChild is a representation of the C type gtk_flow_box_select_child.
func (recv *FlowBox) SelectChild(child *FlowBoxChild) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := flowBoxSelectChildFunction_Set()
	if err == nil {
		flowBoxSelectChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_flow_box_selected_foreach' : parameter 'func' of type 'FlowBoxForeachFunc' not supported

var flowBoxSetActivateOnSingleClickFunction *gi.Function
var flowBoxSetActivateOnSingleClickFunction_Once sync.Once

func flowBoxSetActivateOnSingleClickFunction_Set() error {
	var err error
	flowBoxSetActivateOnSingleClickFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetActivateOnSingleClickFunction, err = flowBoxStruct.InvokerNew("set_activate_on_single_click")
	})
	return err
}

// SetActivateOnSingleClick is a representation of the C type gtk_flow_box_set_activate_on_single_click.
func (recv *FlowBox) SetActivateOnSingleClick(single bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(single)

	err := flowBoxSetActivateOnSingleClickFunction_Set()
	if err == nil {
		flowBoxSetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSetColumnSpacingFunction *gi.Function
var flowBoxSetColumnSpacingFunction_Once sync.Once

func flowBoxSetColumnSpacingFunction_Set() error {
	var err error
	flowBoxSetColumnSpacingFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetColumnSpacingFunction, err = flowBoxStruct.InvokerNew("set_column_spacing")
	})
	return err
}

// SetColumnSpacing is a representation of the C type gtk_flow_box_set_column_spacing.
func (recv *FlowBox) SetColumnSpacing(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := flowBoxSetColumnSpacingFunction_Set()
	if err == nil {
		flowBoxSetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_flow_box_set_filter_func' : parameter 'filter_func' of type 'FlowBoxFilterFunc' not supported

var flowBoxSetHadjustmentFunction *gi.Function
var flowBoxSetHadjustmentFunction_Once sync.Once

func flowBoxSetHadjustmentFunction_Set() error {
	var err error
	flowBoxSetHadjustmentFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetHadjustmentFunction, err = flowBoxStruct.InvokerNew("set_hadjustment")
	})
	return err
}

// SetHadjustment is a representation of the C type gtk_flow_box_set_hadjustment.
func (recv *FlowBox) SetHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := flowBoxSetHadjustmentFunction_Set()
	if err == nil {
		flowBoxSetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSetHomogeneousFunction *gi.Function
var flowBoxSetHomogeneousFunction_Once sync.Once

func flowBoxSetHomogeneousFunction_Set() error {
	var err error
	flowBoxSetHomogeneousFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetHomogeneousFunction, err = flowBoxStruct.InvokerNew("set_homogeneous")
	})
	return err
}

// SetHomogeneous is a representation of the C type gtk_flow_box_set_homogeneous.
func (recv *FlowBox) SetHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := flowBoxSetHomogeneousFunction_Set()
	if err == nil {
		flowBoxSetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSetMaxChildrenPerLineFunction *gi.Function
var flowBoxSetMaxChildrenPerLineFunction_Once sync.Once

func flowBoxSetMaxChildrenPerLineFunction_Set() error {
	var err error
	flowBoxSetMaxChildrenPerLineFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetMaxChildrenPerLineFunction, err = flowBoxStruct.InvokerNew("set_max_children_per_line")
	})
	return err
}

// SetMaxChildrenPerLine is a representation of the C type gtk_flow_box_set_max_children_per_line.
func (recv *FlowBox) SetMaxChildrenPerLine(nChildren uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(nChildren)

	err := flowBoxSetMaxChildrenPerLineFunction_Set()
	if err == nil {
		flowBoxSetMaxChildrenPerLineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSetMinChildrenPerLineFunction *gi.Function
var flowBoxSetMinChildrenPerLineFunction_Once sync.Once

func flowBoxSetMinChildrenPerLineFunction_Set() error {
	var err error
	flowBoxSetMinChildrenPerLineFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetMinChildrenPerLineFunction, err = flowBoxStruct.InvokerNew("set_min_children_per_line")
	})
	return err
}

// SetMinChildrenPerLine is a representation of the C type gtk_flow_box_set_min_children_per_line.
func (recv *FlowBox) SetMinChildrenPerLine(nChildren uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(nChildren)

	err := flowBoxSetMinChildrenPerLineFunction_Set()
	if err == nil {
		flowBoxSetMinChildrenPerLineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxSetRowSpacingFunction *gi.Function
var flowBoxSetRowSpacingFunction_Once sync.Once

func flowBoxSetRowSpacingFunction_Set() error {
	var err error
	flowBoxSetRowSpacingFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetRowSpacingFunction, err = flowBoxStruct.InvokerNew("set_row_spacing")
	})
	return err
}

// SetRowSpacing is a representation of the C type gtk_flow_box_set_row_spacing.
func (recv *FlowBox) SetRowSpacing(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := flowBoxSetRowSpacingFunction_Set()
	if err == nil {
		flowBoxSetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_flow_box_set_selection_mode' : parameter 'mode' of type 'SelectionMode' not supported

// UNSUPPORTED : C value 'gtk_flow_box_set_sort_func' : parameter 'sort_func' of type 'FlowBoxSortFunc' not supported

var flowBoxSetVadjustmentFunction *gi.Function
var flowBoxSetVadjustmentFunction_Once sync.Once

func flowBoxSetVadjustmentFunction_Set() error {
	var err error
	flowBoxSetVadjustmentFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxSetVadjustmentFunction, err = flowBoxStruct.InvokerNew("set_vadjustment")
	})
	return err
}

// SetVadjustment is a representation of the C type gtk_flow_box_set_vadjustment.
func (recv *FlowBox) SetVadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := flowBoxSetVadjustmentFunction_Set()
	if err == nil {
		flowBoxSetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxUnselectAllFunction *gi.Function
var flowBoxUnselectAllFunction_Once sync.Once

func flowBoxUnselectAllFunction_Set() error {
	var err error
	flowBoxUnselectAllFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxUnselectAllFunction, err = flowBoxStruct.InvokerNew("unselect_all")
	})
	return err
}

// UnselectAll is a representation of the C type gtk_flow_box_unselect_all.
func (recv *FlowBox) UnselectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := flowBoxUnselectAllFunction_Set()
	if err == nil {
		flowBoxUnselectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxUnselectChildFunction *gi.Function
var flowBoxUnselectChildFunction_Once sync.Once

func flowBoxUnselectChildFunction_Set() error {
	var err error
	flowBoxUnselectChildFunction_Once.Do(func() {
		err = flowBoxStruct_Set()
		if err != nil {
			return
		}
		flowBoxUnselectChildFunction, err = flowBoxStruct.InvokerNew("unselect_child")
	})
	return err
}

// UnselectChild is a representation of the C type gtk_flow_box_unselect_child.
func (recv *FlowBox) UnselectChild(child *FlowBoxChild) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := flowBoxUnselectChildFunction_Set()
	if err == nil {
		flowBoxUnselectChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxAccessibleStruct *gi.Struct
var flowBoxAccessibleStruct_Once sync.Once

func flowBoxAccessibleStruct_Set() error {
	var err error
	flowBoxAccessibleStruct_Once.Do(func() {
		flowBoxAccessibleStruct, err = gi.StructNew("Gtk", "FlowBoxAccessible")
	})
	return err
}

type FlowBoxAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *FlowBoxAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(flowBoxAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *FlowBoxAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(flowBoxAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *FlowBoxAccessible) FieldPriv() *FlowBoxAccessiblePrivate {
	argValue := gi.FieldGet(flowBoxAccessibleStruct, recv.Native, "priv")
	value := &FlowBoxAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *FlowBoxAccessible) SetFieldPriv(value *FlowBoxAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(flowBoxAccessibleStruct, recv.Native, "priv", argValue)
}

// FlowBoxAccessibleStruct creates an uninitialised FlowBoxAccessible.
func FlowBoxAccessibleStruct() *FlowBoxAccessible {
	err := flowBoxAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &FlowBoxAccessible{}
	structGo.Native = flowBoxAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeFlowBoxAccessible)
	return structGo
}
func finalizeFlowBoxAccessible(obj *FlowBoxAccessible) {
	flowBoxAccessibleStruct.Free(obj.Native)
}

var flowBoxChildStruct *gi.Struct
var flowBoxChildStruct_Once sync.Once

func flowBoxChildStruct_Set() error {
	var err error
	flowBoxChildStruct_Once.Do(func() {
		flowBoxChildStruct, err = gi.StructNew("Gtk", "FlowBoxChild")
	})
	return err
}

type FlowBoxChild struct {
	Bin
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FlowBoxChild) FieldParentInstance() *Bin {
	argValue := gi.FieldGet(flowBoxChildStruct, recv.Native, "parent_instance")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FlowBoxChild) SetFieldParentInstance(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(flowBoxChildStruct, recv.Native, "parent_instance", argValue)
}

var flowBoxChildNewFunction *gi.Function
var flowBoxChildNewFunction_Once sync.Once

func flowBoxChildNewFunction_Set() error {
	var err error
	flowBoxChildNewFunction_Once.Do(func() {
		err = flowBoxChildStruct_Set()
		if err != nil {
			return
		}
		flowBoxChildNewFunction, err = flowBoxChildStruct.InvokerNew("new")
	})
	return err
}

// FlowBoxChildNew is a representation of the C type gtk_flow_box_child_new.
func FlowBoxChildNew() *FlowBoxChild {

	var ret gi.Argument

	err := flowBoxChildNewFunction_Set()
	if err == nil {
		ret = flowBoxChildNewFunction.Invoke(nil, nil)
	}

	retGo := &FlowBoxChild{}
	retGo.Native = ret.Pointer()

	return retGo
}

var flowBoxChildChangedFunction *gi.Function
var flowBoxChildChangedFunction_Once sync.Once

func flowBoxChildChangedFunction_Set() error {
	var err error
	flowBoxChildChangedFunction_Once.Do(func() {
		err = flowBoxChildStruct_Set()
		if err != nil {
			return
		}
		flowBoxChildChangedFunction, err = flowBoxChildStruct.InvokerNew("changed")
	})
	return err
}

// Changed is a representation of the C type gtk_flow_box_child_changed.
func (recv *FlowBoxChild) Changed() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := flowBoxChildChangedFunction_Set()
	if err == nil {
		flowBoxChildChangedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var flowBoxChildGetIndexFunction *gi.Function
var flowBoxChildGetIndexFunction_Once sync.Once

func flowBoxChildGetIndexFunction_Set() error {
	var err error
	flowBoxChildGetIndexFunction_Once.Do(func() {
		err = flowBoxChildStruct_Set()
		if err != nil {
			return
		}
		flowBoxChildGetIndexFunction, err = flowBoxChildStruct.InvokerNew("get_index")
	})
	return err
}

// GetIndex is a representation of the C type gtk_flow_box_child_get_index.
func (recv *FlowBoxChild) GetIndex() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxChildGetIndexFunction_Set()
	if err == nil {
		ret = flowBoxChildGetIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var flowBoxChildIsSelectedFunction *gi.Function
var flowBoxChildIsSelectedFunction_Once sync.Once

func flowBoxChildIsSelectedFunction_Set() error {
	var err error
	flowBoxChildIsSelectedFunction_Once.Do(func() {
		err = flowBoxChildStruct_Set()
		if err != nil {
			return
		}
		flowBoxChildIsSelectedFunction, err = flowBoxChildStruct.InvokerNew("is_selected")
	})
	return err
}

// IsSelected is a representation of the C type gtk_flow_box_child_is_selected.
func (recv *FlowBoxChild) IsSelected() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := flowBoxChildIsSelectedFunction_Set()
	if err == nil {
		ret = flowBoxChildIsSelectedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var flowBoxChildAccessibleStruct *gi.Struct
var flowBoxChildAccessibleStruct_Once sync.Once

func flowBoxChildAccessibleStruct_Set() error {
	var err error
	flowBoxChildAccessibleStruct_Once.Do(func() {
		flowBoxChildAccessibleStruct, err = gi.StructNew("Gtk", "FlowBoxChildAccessible")
	})
	return err
}

type FlowBoxChildAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *FlowBoxChildAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(flowBoxChildAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *FlowBoxChildAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(flowBoxChildAccessibleStruct, recv.Native, "parent", argValue)
}

// FlowBoxChildAccessibleStruct creates an uninitialised FlowBoxChildAccessible.
func FlowBoxChildAccessibleStruct() *FlowBoxChildAccessible {
	err := flowBoxChildAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &FlowBoxChildAccessible{}
	structGo.Native = flowBoxChildAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeFlowBoxChildAccessible)
	return structGo
}
func finalizeFlowBoxChildAccessible(obj *FlowBoxChildAccessible) {
	flowBoxChildAccessibleStruct.Free(obj.Native)
}

var fontButtonStruct *gi.Struct
var fontButtonStruct_Once sync.Once

func fontButtonStruct_Set() error {
	var err error
	fontButtonStruct_Once.Do(func() {
		fontButtonStruct, err = gi.StructNew("Gtk", "FontButton")
	})
	return err
}

type FontButton struct {
	Button
}

// FieldButton returns the C field 'button'.
func (recv *FontButton) FieldButton() *Button {
	argValue := gi.FieldGet(fontButtonStruct, recv.Native, "button")
	value := &Button{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldButton sets the value of the C field 'button'.
func (recv *FontButton) SetFieldButton(value *Button) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fontButtonStruct, recv.Native, "button", argValue)
}

var fontButtonNewFunction *gi.Function
var fontButtonNewFunction_Once sync.Once

func fontButtonNewFunction_Set() error {
	var err error
	fontButtonNewFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonNewFunction, err = fontButtonStruct.InvokerNew("new")
	})
	return err
}

// FontButtonNew is a representation of the C type gtk_font_button_new.
func FontButtonNew() *FontButton {

	var ret gi.Argument

	err := fontButtonNewFunction_Set()
	if err == nil {
		ret = fontButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &FontButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontButtonNewWithFontFunction *gi.Function
var fontButtonNewWithFontFunction_Once sync.Once

func fontButtonNewWithFontFunction_Set() error {
	var err error
	fontButtonNewWithFontFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonNewWithFontFunction, err = fontButtonStruct.InvokerNew("new_with_font")
	})
	return err
}

// FontButtonNewWithFont is a representation of the C type gtk_font_button_new_with_font.
func FontButtonNewWithFont(fontname string) *FontButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(fontname)

	var ret gi.Argument

	err := fontButtonNewWithFontFunction_Set()
	if err == nil {
		ret = fontButtonNewWithFontFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FontButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontButtonGetFontNameFunction *gi.Function
var fontButtonGetFontNameFunction_Once sync.Once

func fontButtonGetFontNameFunction_Set() error {
	var err error
	fontButtonGetFontNameFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetFontNameFunction, err = fontButtonStruct.InvokerNew("get_font_name")
	})
	return err
}

// GetFontName is a representation of the C type gtk_font_button_get_font_name.
func (recv *FontButton) GetFontName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetFontNameFunction_Set()
	if err == nil {
		ret = fontButtonGetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fontButtonGetShowSizeFunction *gi.Function
var fontButtonGetShowSizeFunction_Once sync.Once

func fontButtonGetShowSizeFunction_Set() error {
	var err error
	fontButtonGetShowSizeFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetShowSizeFunction, err = fontButtonStruct.InvokerNew("get_show_size")
	})
	return err
}

// GetShowSize is a representation of the C type gtk_font_button_get_show_size.
func (recv *FontButton) GetShowSize() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetShowSizeFunction_Set()
	if err == nil {
		ret = fontButtonGetShowSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontButtonGetShowStyleFunction *gi.Function
var fontButtonGetShowStyleFunction_Once sync.Once

func fontButtonGetShowStyleFunction_Set() error {
	var err error
	fontButtonGetShowStyleFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetShowStyleFunction, err = fontButtonStruct.InvokerNew("get_show_style")
	})
	return err
}

// GetShowStyle is a representation of the C type gtk_font_button_get_show_style.
func (recv *FontButton) GetShowStyle() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetShowStyleFunction_Set()
	if err == nil {
		ret = fontButtonGetShowStyleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontButtonGetTitleFunction *gi.Function
var fontButtonGetTitleFunction_Once sync.Once

func fontButtonGetTitleFunction_Set() error {
	var err error
	fontButtonGetTitleFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetTitleFunction, err = fontButtonStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_font_button_get_title.
func (recv *FontButton) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetTitleFunction_Set()
	if err == nil {
		ret = fontButtonGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fontButtonGetUseFontFunction *gi.Function
var fontButtonGetUseFontFunction_Once sync.Once

func fontButtonGetUseFontFunction_Set() error {
	var err error
	fontButtonGetUseFontFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetUseFontFunction, err = fontButtonStruct.InvokerNew("get_use_font")
	})
	return err
}

// GetUseFont is a representation of the C type gtk_font_button_get_use_font.
func (recv *FontButton) GetUseFont() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetUseFontFunction_Set()
	if err == nil {
		ret = fontButtonGetUseFontFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontButtonGetUseSizeFunction *gi.Function
var fontButtonGetUseSizeFunction_Once sync.Once

func fontButtonGetUseSizeFunction_Set() error {
	var err error
	fontButtonGetUseSizeFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonGetUseSizeFunction, err = fontButtonStruct.InvokerNew("get_use_size")
	})
	return err
}

// GetUseSize is a representation of the C type gtk_font_button_get_use_size.
func (recv *FontButton) GetUseSize() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontButtonGetUseSizeFunction_Set()
	if err == nil {
		ret = fontButtonGetUseSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontButtonSetFontNameFunction *gi.Function
var fontButtonSetFontNameFunction_Once sync.Once

func fontButtonSetFontNameFunction_Set() error {
	var err error
	fontButtonSetFontNameFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetFontNameFunction, err = fontButtonStruct.InvokerNew("set_font_name")
	})
	return err
}

// SetFontName is a representation of the C type gtk_font_button_set_font_name.
func (recv *FontButton) SetFontName(fontname string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fontname)

	var ret gi.Argument

	err := fontButtonSetFontNameFunction_Set()
	if err == nil {
		ret = fontButtonSetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontButtonSetShowSizeFunction *gi.Function
var fontButtonSetShowSizeFunction_Once sync.Once

func fontButtonSetShowSizeFunction_Set() error {
	var err error
	fontButtonSetShowSizeFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetShowSizeFunction, err = fontButtonStruct.InvokerNew("set_show_size")
	})
	return err
}

// SetShowSize is a representation of the C type gtk_font_button_set_show_size.
func (recv *FontButton) SetShowSize(showSize bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showSize)

	err := fontButtonSetShowSizeFunction_Set()
	if err == nil {
		fontButtonSetShowSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontButtonSetShowStyleFunction *gi.Function
var fontButtonSetShowStyleFunction_Once sync.Once

func fontButtonSetShowStyleFunction_Set() error {
	var err error
	fontButtonSetShowStyleFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetShowStyleFunction, err = fontButtonStruct.InvokerNew("set_show_style")
	})
	return err
}

// SetShowStyle is a representation of the C type gtk_font_button_set_show_style.
func (recv *FontButton) SetShowStyle(showStyle bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showStyle)

	err := fontButtonSetShowStyleFunction_Set()
	if err == nil {
		fontButtonSetShowStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontButtonSetTitleFunction *gi.Function
var fontButtonSetTitleFunction_Once sync.Once

func fontButtonSetTitleFunction_Set() error {
	var err error
	fontButtonSetTitleFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetTitleFunction, err = fontButtonStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_font_button_set_title.
func (recv *FontButton) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := fontButtonSetTitleFunction_Set()
	if err == nil {
		fontButtonSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontButtonSetUseFontFunction *gi.Function
var fontButtonSetUseFontFunction_Once sync.Once

func fontButtonSetUseFontFunction_Set() error {
	var err error
	fontButtonSetUseFontFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetUseFontFunction, err = fontButtonStruct.InvokerNew("set_use_font")
	})
	return err
}

// SetUseFont is a representation of the C type gtk_font_button_set_use_font.
func (recv *FontButton) SetUseFont(useFont bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useFont)

	err := fontButtonSetUseFontFunction_Set()
	if err == nil {
		fontButtonSetUseFontFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontButtonSetUseSizeFunction *gi.Function
var fontButtonSetUseSizeFunction_Once sync.Once

func fontButtonSetUseSizeFunction_Set() error {
	var err error
	fontButtonSetUseSizeFunction_Once.Do(func() {
		err = fontButtonStruct_Set()
		if err != nil {
			return
		}
		fontButtonSetUseSizeFunction, err = fontButtonStruct.InvokerNew("set_use_size")
	})
	return err
}

// SetUseSize is a representation of the C type gtk_font_button_set_use_size.
func (recv *FontButton) SetUseSize(useSize bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useSize)

	err := fontButtonSetUseSizeFunction_Set()
	if err == nil {
		fontButtonSetUseSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontChooserDialogStruct *gi.Struct
var fontChooserDialogStruct_Once sync.Once

func fontChooserDialogStruct_Set() error {
	var err error
	fontChooserDialogStruct_Once.Do(func() {
		fontChooserDialogStruct, err = gi.StructNew("Gtk", "FontChooserDialog")
	})
	return err
}

type FontChooserDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FontChooserDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(fontChooserDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FontChooserDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fontChooserDialogStruct, recv.Native, "parent_instance", argValue)
}

var fontChooserDialogNewFunction *gi.Function
var fontChooserDialogNewFunction_Once sync.Once

func fontChooserDialogNewFunction_Set() error {
	var err error
	fontChooserDialogNewFunction_Once.Do(func() {
		err = fontChooserDialogStruct_Set()
		if err != nil {
			return
		}
		fontChooserDialogNewFunction, err = fontChooserDialogStruct.InvokerNew("new")
	})
	return err
}

// FontChooserDialogNew is a representation of the C type gtk_font_chooser_dialog_new.
func FontChooserDialogNew(title string, parent *Window) *FontChooserDialog {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(title)
	inArgs[1].SetPointer(parent.Native)

	var ret gi.Argument

	err := fontChooserDialogNewFunction_Set()
	if err == nil {
		ret = fontChooserDialogNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FontChooserDialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontChooserWidgetStruct *gi.Struct
var fontChooserWidgetStruct_Once sync.Once

func fontChooserWidgetStruct_Set() error {
	var err error
	fontChooserWidgetStruct_Once.Do(func() {
		fontChooserWidgetStruct, err = gi.StructNew("Gtk", "FontChooserWidget")
	})
	return err
}

type FontChooserWidget struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FontChooserWidget) FieldParentInstance() *Box {
	argValue := gi.FieldGet(fontChooserWidgetStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FontChooserWidget) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fontChooserWidgetStruct, recv.Native, "parent_instance", argValue)
}

var fontChooserWidgetNewFunction *gi.Function
var fontChooserWidgetNewFunction_Once sync.Once

func fontChooserWidgetNewFunction_Set() error {
	var err error
	fontChooserWidgetNewFunction_Once.Do(func() {
		err = fontChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		fontChooserWidgetNewFunction, err = fontChooserWidgetStruct.InvokerNew("new")
	})
	return err
}

// FontChooserWidgetNew is a representation of the C type gtk_font_chooser_widget_new.
func FontChooserWidgetNew() *FontChooserWidget {

	var ret gi.Argument

	err := fontChooserWidgetNewFunction_Set()
	if err == nil {
		ret = fontChooserWidgetNewFunction.Invoke(nil, nil)
	}

	retGo := &FontChooserWidget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionStruct *gi.Struct
var fontSelectionStruct_Once sync.Once

func fontSelectionStruct_Set() error {
	var err error
	fontSelectionStruct_Once.Do(func() {
		fontSelectionStruct, err = gi.StructNew("Gtk", "FontSelection")
	})
	return err
}

type FontSelection struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FontSelection) FieldParentInstance() *Box {
	argValue := gi.FieldGet(fontSelectionStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FontSelection) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fontSelectionStruct, recv.Native, "parent_instance", argValue)
}

var fontSelectionNewFunction *gi.Function
var fontSelectionNewFunction_Once sync.Once

func fontSelectionNewFunction_Set() error {
	var err error
	fontSelectionNewFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionNewFunction, err = fontSelectionStruct.InvokerNew("new")
	})
	return err
}

// FontSelectionNew is a representation of the C type gtk_font_selection_new.
func FontSelectionNew() *FontSelection {

	var ret gi.Argument

	err := fontSelectionNewFunction_Set()
	if err == nil {
		ret = fontSelectionNewFunction.Invoke(nil, nil)
	}

	retGo := &FontSelection{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_font_selection_get_face' : return type 'Pango.FontFace' not supported

var fontSelectionGetFaceListFunction *gi.Function
var fontSelectionGetFaceListFunction_Once sync.Once

func fontSelectionGetFaceListFunction_Set() error {
	var err error
	fontSelectionGetFaceListFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetFaceListFunction, err = fontSelectionStruct.InvokerNew("get_face_list")
	})
	return err
}

// GetFaceList is a representation of the C type gtk_font_selection_get_face_list.
func (recv *FontSelection) GetFaceList() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetFaceListFunction_Set()
	if err == nil {
		ret = fontSelectionGetFaceListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_font_selection_get_family' : return type 'Pango.FontFamily' not supported

var fontSelectionGetFamilyListFunction *gi.Function
var fontSelectionGetFamilyListFunction_Once sync.Once

func fontSelectionGetFamilyListFunction_Set() error {
	var err error
	fontSelectionGetFamilyListFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetFamilyListFunction, err = fontSelectionStruct.InvokerNew("get_family_list")
	})
	return err
}

// GetFamilyList is a representation of the C type gtk_font_selection_get_family_list.
func (recv *FontSelection) GetFamilyList() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetFamilyListFunction_Set()
	if err == nil {
		ret = fontSelectionGetFamilyListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionGetFontNameFunction *gi.Function
var fontSelectionGetFontNameFunction_Once sync.Once

func fontSelectionGetFontNameFunction_Set() error {
	var err error
	fontSelectionGetFontNameFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetFontNameFunction, err = fontSelectionStruct.InvokerNew("get_font_name")
	})
	return err
}

// GetFontName is a representation of the C type gtk_font_selection_get_font_name.
func (recv *FontSelection) GetFontName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetFontNameFunction_Set()
	if err == nil {
		ret = fontSelectionGetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var fontSelectionGetPreviewEntryFunction *gi.Function
var fontSelectionGetPreviewEntryFunction_Once sync.Once

func fontSelectionGetPreviewEntryFunction_Set() error {
	var err error
	fontSelectionGetPreviewEntryFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetPreviewEntryFunction, err = fontSelectionStruct.InvokerNew("get_preview_entry")
	})
	return err
}

// GetPreviewEntry is a representation of the C type gtk_font_selection_get_preview_entry.
func (recv *FontSelection) GetPreviewEntry() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetPreviewEntryFunction_Set()
	if err == nil {
		ret = fontSelectionGetPreviewEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionGetPreviewTextFunction *gi.Function
var fontSelectionGetPreviewTextFunction_Once sync.Once

func fontSelectionGetPreviewTextFunction_Set() error {
	var err error
	fontSelectionGetPreviewTextFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetPreviewTextFunction, err = fontSelectionStruct.InvokerNew("get_preview_text")
	})
	return err
}

// GetPreviewText is a representation of the C type gtk_font_selection_get_preview_text.
func (recv *FontSelection) GetPreviewText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetPreviewTextFunction_Set()
	if err == nil {
		ret = fontSelectionGetPreviewTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fontSelectionGetSizeFunction *gi.Function
var fontSelectionGetSizeFunction_Once sync.Once

func fontSelectionGetSizeFunction_Set() error {
	var err error
	fontSelectionGetSizeFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetSizeFunction, err = fontSelectionStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_font_selection_get_size.
func (recv *FontSelection) GetSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetSizeFunction_Set()
	if err == nil {
		ret = fontSelectionGetSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var fontSelectionGetSizeEntryFunction *gi.Function
var fontSelectionGetSizeEntryFunction_Once sync.Once

func fontSelectionGetSizeEntryFunction_Set() error {
	var err error
	fontSelectionGetSizeEntryFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetSizeEntryFunction, err = fontSelectionStruct.InvokerNew("get_size_entry")
	})
	return err
}

// GetSizeEntry is a representation of the C type gtk_font_selection_get_size_entry.
func (recv *FontSelection) GetSizeEntry() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetSizeEntryFunction_Set()
	if err == nil {
		ret = fontSelectionGetSizeEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionGetSizeListFunction *gi.Function
var fontSelectionGetSizeListFunction_Once sync.Once

func fontSelectionGetSizeListFunction_Set() error {
	var err error
	fontSelectionGetSizeListFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionGetSizeListFunction, err = fontSelectionStruct.InvokerNew("get_size_list")
	})
	return err
}

// GetSizeList is a representation of the C type gtk_font_selection_get_size_list.
func (recv *FontSelection) GetSizeList() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionGetSizeListFunction_Set()
	if err == nil {
		ret = fontSelectionGetSizeListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionSetFontNameFunction *gi.Function
var fontSelectionSetFontNameFunction_Once sync.Once

func fontSelectionSetFontNameFunction_Set() error {
	var err error
	fontSelectionSetFontNameFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionSetFontNameFunction, err = fontSelectionStruct.InvokerNew("set_font_name")
	})
	return err
}

// SetFontName is a representation of the C type gtk_font_selection_set_font_name.
func (recv *FontSelection) SetFontName(fontname string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fontname)

	var ret gi.Argument

	err := fontSelectionSetFontNameFunction_Set()
	if err == nil {
		ret = fontSelectionSetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontSelectionSetPreviewTextFunction *gi.Function
var fontSelectionSetPreviewTextFunction_Once sync.Once

func fontSelectionSetPreviewTextFunction_Set() error {
	var err error
	fontSelectionSetPreviewTextFunction_Once.Do(func() {
		err = fontSelectionStruct_Set()
		if err != nil {
			return
		}
		fontSelectionSetPreviewTextFunction, err = fontSelectionStruct.InvokerNew("set_preview_text")
	})
	return err
}

// SetPreviewText is a representation of the C type gtk_font_selection_set_preview_text.
func (recv *FontSelection) SetPreviewText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := fontSelectionSetPreviewTextFunction_Set()
	if err == nil {
		fontSelectionSetPreviewTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var fontSelectionDialogStruct *gi.Struct
var fontSelectionDialogStruct_Once sync.Once

func fontSelectionDialogStruct_Set() error {
	var err error
	fontSelectionDialogStruct_Once.Do(func() {
		fontSelectionDialogStruct, err = gi.StructNew("Gtk", "FontSelectionDialog")
	})
	return err
}

type FontSelectionDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *FontSelectionDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(fontSelectionDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *FontSelectionDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(fontSelectionDialogStruct, recv.Native, "parent_instance", argValue)
}

var fontSelectionDialogNewFunction *gi.Function
var fontSelectionDialogNewFunction_Once sync.Once

func fontSelectionDialogNewFunction_Set() error {
	var err error
	fontSelectionDialogNewFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogNewFunction, err = fontSelectionDialogStruct.InvokerNew("new")
	})
	return err
}

// FontSelectionDialogNew is a representation of the C type gtk_font_selection_dialog_new.
func FontSelectionDialogNew(title string) *FontSelectionDialog {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(title)

	var ret gi.Argument

	err := fontSelectionDialogNewFunction_Set()
	if err == nil {
		ret = fontSelectionDialogNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &FontSelectionDialog{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionDialogGetCancelButtonFunction *gi.Function
var fontSelectionDialogGetCancelButtonFunction_Once sync.Once

func fontSelectionDialogGetCancelButtonFunction_Set() error {
	var err error
	fontSelectionDialogGetCancelButtonFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogGetCancelButtonFunction, err = fontSelectionDialogStruct.InvokerNew("get_cancel_button")
	})
	return err
}

// GetCancelButton is a representation of the C type gtk_font_selection_dialog_get_cancel_button.
func (recv *FontSelectionDialog) GetCancelButton() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionDialogGetCancelButtonFunction_Set()
	if err == nil {
		ret = fontSelectionDialogGetCancelButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionDialogGetFontNameFunction *gi.Function
var fontSelectionDialogGetFontNameFunction_Once sync.Once

func fontSelectionDialogGetFontNameFunction_Set() error {
	var err error
	fontSelectionDialogGetFontNameFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogGetFontNameFunction, err = fontSelectionDialogStruct.InvokerNew("get_font_name")
	})
	return err
}

// GetFontName is a representation of the C type gtk_font_selection_dialog_get_font_name.
func (recv *FontSelectionDialog) GetFontName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionDialogGetFontNameFunction_Set()
	if err == nil {
		ret = fontSelectionDialogGetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var fontSelectionDialogGetFontSelectionFunction *gi.Function
var fontSelectionDialogGetFontSelectionFunction_Once sync.Once

func fontSelectionDialogGetFontSelectionFunction_Set() error {
	var err error
	fontSelectionDialogGetFontSelectionFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogGetFontSelectionFunction, err = fontSelectionDialogStruct.InvokerNew("get_font_selection")
	})
	return err
}

// GetFontSelection is a representation of the C type gtk_font_selection_dialog_get_font_selection.
func (recv *FontSelectionDialog) GetFontSelection() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionDialogGetFontSelectionFunction_Set()
	if err == nil {
		ret = fontSelectionDialogGetFontSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionDialogGetOkButtonFunction *gi.Function
var fontSelectionDialogGetOkButtonFunction_Once sync.Once

func fontSelectionDialogGetOkButtonFunction_Set() error {
	var err error
	fontSelectionDialogGetOkButtonFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogGetOkButtonFunction, err = fontSelectionDialogStruct.InvokerNew("get_ok_button")
	})
	return err
}

// GetOkButton is a representation of the C type gtk_font_selection_dialog_get_ok_button.
func (recv *FontSelectionDialog) GetOkButton() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionDialogGetOkButtonFunction_Set()
	if err == nil {
		ret = fontSelectionDialogGetOkButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var fontSelectionDialogGetPreviewTextFunction *gi.Function
var fontSelectionDialogGetPreviewTextFunction_Once sync.Once

func fontSelectionDialogGetPreviewTextFunction_Set() error {
	var err error
	fontSelectionDialogGetPreviewTextFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogGetPreviewTextFunction, err = fontSelectionDialogStruct.InvokerNew("get_preview_text")
	})
	return err
}

// GetPreviewText is a representation of the C type gtk_font_selection_dialog_get_preview_text.
func (recv *FontSelectionDialog) GetPreviewText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := fontSelectionDialogGetPreviewTextFunction_Set()
	if err == nil {
		ret = fontSelectionDialogGetPreviewTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var fontSelectionDialogSetFontNameFunction *gi.Function
var fontSelectionDialogSetFontNameFunction_Once sync.Once

func fontSelectionDialogSetFontNameFunction_Set() error {
	var err error
	fontSelectionDialogSetFontNameFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogSetFontNameFunction, err = fontSelectionDialogStruct.InvokerNew("set_font_name")
	})
	return err
}

// SetFontName is a representation of the C type gtk_font_selection_dialog_set_font_name.
func (recv *FontSelectionDialog) SetFontName(fontname string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fontname)

	var ret gi.Argument

	err := fontSelectionDialogSetFontNameFunction_Set()
	if err == nil {
		ret = fontSelectionDialogSetFontNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var fontSelectionDialogSetPreviewTextFunction *gi.Function
var fontSelectionDialogSetPreviewTextFunction_Once sync.Once

func fontSelectionDialogSetPreviewTextFunction_Set() error {
	var err error
	fontSelectionDialogSetPreviewTextFunction_Once.Do(func() {
		err = fontSelectionDialogStruct_Set()
		if err != nil {
			return
		}
		fontSelectionDialogSetPreviewTextFunction, err = fontSelectionDialogStruct.InvokerNew("set_preview_text")
	})
	return err
}

// SetPreviewText is a representation of the C type gtk_font_selection_dialog_set_preview_text.
func (recv *FontSelectionDialog) SetPreviewText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := fontSelectionDialogSetPreviewTextFunction_Set()
	if err == nil {
		fontSelectionDialogSetPreviewTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var frameStruct *gi.Struct
var frameStruct_Once sync.Once

func frameStruct_Set() error {
	var err error
	frameStruct_Once.Do(func() {
		frameStruct, err = gi.StructNew("Gtk", "Frame")
	})
	return err
}

type Frame struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *Frame) FieldBin() *Bin {
	argValue := gi.FieldGet(frameStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *Frame) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(frameStruct, recv.Native, "bin", argValue)
}

var frameNewFunction *gi.Function
var frameNewFunction_Once sync.Once

func frameNewFunction_Set() error {
	var err error
	frameNewFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameNewFunction, err = frameStruct.InvokerNew("new")
	})
	return err
}

// FrameNew is a representation of the C type gtk_frame_new.
func FrameNew(label string) *Frame {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := frameNewFunction_Set()
	if err == nil {
		ret = frameNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Frame{}
	retGo.Native = ret.Pointer()

	return retGo
}

var frameGetLabelFunction *gi.Function
var frameGetLabelFunction_Once sync.Once

func frameGetLabelFunction_Set() error {
	var err error
	frameGetLabelFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameGetLabelFunction, err = frameStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_frame_get_label.
func (recv *Frame) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := frameGetLabelFunction_Set()
	if err == nil {
		ret = frameGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var frameGetLabelAlignFunction *gi.Function
var frameGetLabelAlignFunction_Once sync.Once

func frameGetLabelAlignFunction_Set() error {
	var err error
	frameGetLabelAlignFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameGetLabelAlignFunction, err = frameStruct.InvokerNew("get_label_align")
	})
	return err
}

// GetLabelAlign is a representation of the C type gtk_frame_get_label_align.
func (recv *Frame) GetLabelAlign() (float32, float32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := frameGetLabelAlignFunction_Set()
	if err == nil {
		frameGetLabelAlignFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float32()
	out1 := outArgs[1].Float32()

	return out0, out1
}

var frameGetLabelWidgetFunction *gi.Function
var frameGetLabelWidgetFunction_Once sync.Once

func frameGetLabelWidgetFunction_Set() error {
	var err error
	frameGetLabelWidgetFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameGetLabelWidgetFunction, err = frameStruct.InvokerNew("get_label_widget")
	})
	return err
}

// GetLabelWidget is a representation of the C type gtk_frame_get_label_widget.
func (recv *Frame) GetLabelWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := frameGetLabelWidgetFunction_Set()
	if err == nil {
		ret = frameGetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_frame_get_shadow_type' : return type 'ShadowType' not supported

var frameSetLabelFunction *gi.Function
var frameSetLabelFunction_Once sync.Once

func frameSetLabelFunction_Set() error {
	var err error
	frameSetLabelFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameSetLabelFunction, err = frameStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_frame_set_label.
func (recv *Frame) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := frameSetLabelFunction_Set()
	if err == nil {
		frameSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var frameSetLabelAlignFunction *gi.Function
var frameSetLabelAlignFunction_Once sync.Once

func frameSetLabelAlignFunction_Set() error {
	var err error
	frameSetLabelAlignFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameSetLabelAlignFunction, err = frameStruct.InvokerNew("set_label_align")
	})
	return err
}

// SetLabelAlign is a representation of the C type gtk_frame_set_label_align.
func (recv *Frame) SetLabelAlign(xalign float32, yalign float32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)

	err := frameSetLabelAlignFunction_Set()
	if err == nil {
		frameSetLabelAlignFunction.Invoke(inArgs[:], nil)
	}

	return
}

var frameSetLabelWidgetFunction *gi.Function
var frameSetLabelWidgetFunction_Once sync.Once

func frameSetLabelWidgetFunction_Set() error {
	var err error
	frameSetLabelWidgetFunction_Once.Do(func() {
		err = frameStruct_Set()
		if err != nil {
			return
		}
		frameSetLabelWidgetFunction, err = frameStruct.InvokerNew("set_label_widget")
	})
	return err
}

// SetLabelWidget is a representation of the C type gtk_frame_set_label_widget.
func (recv *Frame) SetLabelWidget(labelWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(labelWidget.Native)

	err := frameSetLabelWidgetFunction_Set()
	if err == nil {
		frameSetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_frame_set_shadow_type' : parameter 'type' of type 'ShadowType' not supported

var frameAccessibleStruct *gi.Struct
var frameAccessibleStruct_Once sync.Once

func frameAccessibleStruct_Set() error {
	var err error
	frameAccessibleStruct_Once.Do(func() {
		frameAccessibleStruct, err = gi.StructNew("Gtk", "FrameAccessible")
	})
	return err
}

type FrameAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *FrameAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(frameAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *FrameAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(frameAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *FrameAccessible) FieldPriv() *FrameAccessiblePrivate {
	argValue := gi.FieldGet(frameAccessibleStruct, recv.Native, "priv")
	value := &FrameAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *FrameAccessible) SetFieldPriv(value *FrameAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(frameAccessibleStruct, recv.Native, "priv", argValue)
}

// FrameAccessibleStruct creates an uninitialised FrameAccessible.
func FrameAccessibleStruct() *FrameAccessible {
	err := frameAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &FrameAccessible{}
	structGo.Native = frameAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeFrameAccessible)
	return structGo
}
func finalizeFrameAccessible(obj *FrameAccessible) {
	frameAccessibleStruct.Free(obj.Native)
}

var gLAreaStruct *gi.Struct
var gLAreaStruct_Once sync.Once

func gLAreaStruct_Set() error {
	var err error
	gLAreaStruct_Once.Do(func() {
		gLAreaStruct, err = gi.StructNew("Gtk", "GLArea")
	})
	return err
}

type GLArea struct {
	Widget
}

var gLAreaNewFunction *gi.Function
var gLAreaNewFunction_Once sync.Once

func gLAreaNewFunction_Set() error {
	var err error
	gLAreaNewFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaNewFunction, err = gLAreaStruct.InvokerNew("new")
	})
	return err
}

// GLAreaNew is a representation of the C type gtk_gl_area_new.
func GLAreaNew() *GLArea {

	var ret gi.Argument

	err := gLAreaNewFunction_Set()
	if err == nil {
		ret = gLAreaNewFunction.Invoke(nil, nil)
	}

	retGo := &GLArea{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gLAreaAttachBuffersFunction *gi.Function
var gLAreaAttachBuffersFunction_Once sync.Once

func gLAreaAttachBuffersFunction_Set() error {
	var err error
	gLAreaAttachBuffersFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaAttachBuffersFunction, err = gLAreaStruct.InvokerNew("attach_buffers")
	})
	return err
}

// AttachBuffers is a representation of the C type gtk_gl_area_attach_buffers.
func (recv *GLArea) AttachBuffers() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := gLAreaAttachBuffersFunction_Set()
	if err == nil {
		gLAreaAttachBuffersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaGetAutoRenderFunction *gi.Function
var gLAreaGetAutoRenderFunction_Once sync.Once

func gLAreaGetAutoRenderFunction_Set() error {
	var err error
	gLAreaGetAutoRenderFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetAutoRenderFunction, err = gLAreaStruct.InvokerNew("get_auto_render")
	})
	return err
}

// GetAutoRender is a representation of the C type gtk_gl_area_get_auto_render.
func (recv *GLArea) GetAutoRender() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gLAreaGetAutoRenderFunction_Set()
	if err == nil {
		ret = gLAreaGetAutoRenderFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_gl_area_get_context' : return type 'Gdk.GLContext' not supported

// UNSUPPORTED : C value 'gtk_gl_area_get_error' : return type 'GLib.Error' not supported

var gLAreaGetHasAlphaFunction *gi.Function
var gLAreaGetHasAlphaFunction_Once sync.Once

func gLAreaGetHasAlphaFunction_Set() error {
	var err error
	gLAreaGetHasAlphaFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetHasAlphaFunction, err = gLAreaStruct.InvokerNew("get_has_alpha")
	})
	return err
}

// GetHasAlpha is a representation of the C type gtk_gl_area_get_has_alpha.
func (recv *GLArea) GetHasAlpha() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gLAreaGetHasAlphaFunction_Set()
	if err == nil {
		ret = gLAreaGetHasAlphaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gLAreaGetHasDepthBufferFunction *gi.Function
var gLAreaGetHasDepthBufferFunction_Once sync.Once

func gLAreaGetHasDepthBufferFunction_Set() error {
	var err error
	gLAreaGetHasDepthBufferFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetHasDepthBufferFunction, err = gLAreaStruct.InvokerNew("get_has_depth_buffer")
	})
	return err
}

// GetHasDepthBuffer is a representation of the C type gtk_gl_area_get_has_depth_buffer.
func (recv *GLArea) GetHasDepthBuffer() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gLAreaGetHasDepthBufferFunction_Set()
	if err == nil {
		ret = gLAreaGetHasDepthBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gLAreaGetHasStencilBufferFunction *gi.Function
var gLAreaGetHasStencilBufferFunction_Once sync.Once

func gLAreaGetHasStencilBufferFunction_Set() error {
	var err error
	gLAreaGetHasStencilBufferFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetHasStencilBufferFunction, err = gLAreaStruct.InvokerNew("get_has_stencil_buffer")
	})
	return err
}

// GetHasStencilBuffer is a representation of the C type gtk_gl_area_get_has_stencil_buffer.
func (recv *GLArea) GetHasStencilBuffer() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gLAreaGetHasStencilBufferFunction_Set()
	if err == nil {
		ret = gLAreaGetHasStencilBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gLAreaGetRequiredVersionFunction *gi.Function
var gLAreaGetRequiredVersionFunction_Once sync.Once

func gLAreaGetRequiredVersionFunction_Set() error {
	var err error
	gLAreaGetRequiredVersionFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetRequiredVersionFunction, err = gLAreaStruct.InvokerNew("get_required_version")
	})
	return err
}

// GetRequiredVersion is a representation of the C type gtk_gl_area_get_required_version.
func (recv *GLArea) GetRequiredVersion() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := gLAreaGetRequiredVersionFunction_Set()
	if err == nil {
		gLAreaGetRequiredVersionFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var gLAreaGetUseEsFunction *gi.Function
var gLAreaGetUseEsFunction_Once sync.Once

func gLAreaGetUseEsFunction_Set() error {
	var err error
	gLAreaGetUseEsFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaGetUseEsFunction, err = gLAreaStruct.InvokerNew("get_use_es")
	})
	return err
}

// GetUseEs is a representation of the C type gtk_gl_area_get_use_es.
func (recv *GLArea) GetUseEs() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gLAreaGetUseEsFunction_Set()
	if err == nil {
		ret = gLAreaGetUseEsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gLAreaMakeCurrentFunction *gi.Function
var gLAreaMakeCurrentFunction_Once sync.Once

func gLAreaMakeCurrentFunction_Set() error {
	var err error
	gLAreaMakeCurrentFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaMakeCurrentFunction, err = gLAreaStruct.InvokerNew("make_current")
	})
	return err
}

// MakeCurrent is a representation of the C type gtk_gl_area_make_current.
func (recv *GLArea) MakeCurrent() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := gLAreaMakeCurrentFunction_Set()
	if err == nil {
		gLAreaMakeCurrentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaQueueRenderFunction *gi.Function
var gLAreaQueueRenderFunction_Once sync.Once

func gLAreaQueueRenderFunction_Set() error {
	var err error
	gLAreaQueueRenderFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaQueueRenderFunction, err = gLAreaStruct.InvokerNew("queue_render")
	})
	return err
}

// QueueRender is a representation of the C type gtk_gl_area_queue_render.
func (recv *GLArea) QueueRender() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := gLAreaQueueRenderFunction_Set()
	if err == nil {
		gLAreaQueueRenderFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaSetAutoRenderFunction *gi.Function
var gLAreaSetAutoRenderFunction_Once sync.Once

func gLAreaSetAutoRenderFunction_Set() error {
	var err error
	gLAreaSetAutoRenderFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetAutoRenderFunction, err = gLAreaStruct.InvokerNew("set_auto_render")
	})
	return err
}

// SetAutoRender is a representation of the C type gtk_gl_area_set_auto_render.
func (recv *GLArea) SetAutoRender(autoRender bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(autoRender)

	err := gLAreaSetAutoRenderFunction_Set()
	if err == nil {
		gLAreaSetAutoRenderFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_gl_area_set_error' : parameter 'error' of type 'GLib.Error' not supported

var gLAreaSetHasAlphaFunction *gi.Function
var gLAreaSetHasAlphaFunction_Once sync.Once

func gLAreaSetHasAlphaFunction_Set() error {
	var err error
	gLAreaSetHasAlphaFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetHasAlphaFunction, err = gLAreaStruct.InvokerNew("set_has_alpha")
	})
	return err
}

// SetHasAlpha is a representation of the C type gtk_gl_area_set_has_alpha.
func (recv *GLArea) SetHasAlpha(hasAlpha bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasAlpha)

	err := gLAreaSetHasAlphaFunction_Set()
	if err == nil {
		gLAreaSetHasAlphaFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaSetHasDepthBufferFunction *gi.Function
var gLAreaSetHasDepthBufferFunction_Once sync.Once

func gLAreaSetHasDepthBufferFunction_Set() error {
	var err error
	gLAreaSetHasDepthBufferFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetHasDepthBufferFunction, err = gLAreaStruct.InvokerNew("set_has_depth_buffer")
	})
	return err
}

// SetHasDepthBuffer is a representation of the C type gtk_gl_area_set_has_depth_buffer.
func (recv *GLArea) SetHasDepthBuffer(hasDepthBuffer bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasDepthBuffer)

	err := gLAreaSetHasDepthBufferFunction_Set()
	if err == nil {
		gLAreaSetHasDepthBufferFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaSetHasStencilBufferFunction *gi.Function
var gLAreaSetHasStencilBufferFunction_Once sync.Once

func gLAreaSetHasStencilBufferFunction_Set() error {
	var err error
	gLAreaSetHasStencilBufferFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetHasStencilBufferFunction, err = gLAreaStruct.InvokerNew("set_has_stencil_buffer")
	})
	return err
}

// SetHasStencilBuffer is a representation of the C type gtk_gl_area_set_has_stencil_buffer.
func (recv *GLArea) SetHasStencilBuffer(hasStencilBuffer bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasStencilBuffer)

	err := gLAreaSetHasStencilBufferFunction_Set()
	if err == nil {
		gLAreaSetHasStencilBufferFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaSetRequiredVersionFunction *gi.Function
var gLAreaSetRequiredVersionFunction_Once sync.Once

func gLAreaSetRequiredVersionFunction_Set() error {
	var err error
	gLAreaSetRequiredVersionFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetRequiredVersionFunction, err = gLAreaStruct.InvokerNew("set_required_version")
	})
	return err
}

// SetRequiredVersion is a representation of the C type gtk_gl_area_set_required_version.
func (recv *GLArea) SetRequiredVersion(major int32, minor int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(major)
	inArgs[2].SetInt32(minor)

	err := gLAreaSetRequiredVersionFunction_Set()
	if err == nil {
		gLAreaSetRequiredVersionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gLAreaSetUseEsFunction *gi.Function
var gLAreaSetUseEsFunction_Once sync.Once

func gLAreaSetUseEsFunction_Set() error {
	var err error
	gLAreaSetUseEsFunction_Once.Do(func() {
		err = gLAreaStruct_Set()
		if err != nil {
			return
		}
		gLAreaSetUseEsFunction, err = gLAreaStruct.InvokerNew("set_use_es")
	})
	return err
}

// SetUseEs is a representation of the C type gtk_gl_area_set_use_es.
func (recv *GLArea) SetUseEs(useEs bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useEs)

	err := gLAreaSetUseEsFunction_Set()
	if err == nil {
		gLAreaSetUseEsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gestureStruct *gi.Struct
var gestureStruct_Once sync.Once

func gestureStruct_Set() error {
	var err error
	gestureStruct_Once.Do(func() {
		gestureStruct, err = gi.StructNew("Gtk", "Gesture")
	})
	return err
}

type Gesture struct {
	EventController
}

// UNSUPPORTED : C value 'gtk_gesture_get_bounding_box' : parameter 'rect' of type 'Gdk.Rectangle' not supported

var gestureGetBoundingBoxCenterFunction *gi.Function
var gestureGetBoundingBoxCenterFunction_Once sync.Once

func gestureGetBoundingBoxCenterFunction_Set() error {
	var err error
	gestureGetBoundingBoxCenterFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureGetBoundingBoxCenterFunction, err = gestureStruct.InvokerNew("get_bounding_box_center")
	})
	return err
}

// GetBoundingBoxCenter is a representation of the C type gtk_gesture_get_bounding_box_center.
func (recv *Gesture) GetBoundingBoxCenter() (bool, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := gestureGetBoundingBoxCenterFunction_Set()
	if err == nil {
		ret = gestureGetBoundingBoxCenterFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return retGo, out0, out1
}

// UNSUPPORTED : C value 'gtk_gesture_get_device' : return type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_group' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_last_event' : parameter 'sequence' of type 'Gdk.EventSequence' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_last_updated_sequence' : return type 'Gdk.EventSequence' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_point' : parameter 'sequence' of type 'Gdk.EventSequence' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_sequence_state' : parameter 'sequence' of type 'Gdk.EventSequence' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_sequences' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_gesture_get_window' : return type 'Gdk.Window' not supported

var gestureGroupFunction *gi.Function
var gestureGroupFunction_Once sync.Once

func gestureGroupFunction_Set() error {
	var err error
	gestureGroupFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureGroupFunction, err = gestureStruct.InvokerNew("group")
	})
	return err
}

// Group is a representation of the C type gtk_gesture_group.
func (recv *Gesture) Group(gesture *Gesture) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(gesture.Native)

	err := gestureGroupFunction_Set()
	if err == nil {
		gestureGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_gesture_handles_sequence' : parameter 'sequence' of type 'Gdk.EventSequence' not supported

var gestureIsActiveFunction *gi.Function
var gestureIsActiveFunction_Once sync.Once

func gestureIsActiveFunction_Set() error {
	var err error
	gestureIsActiveFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureIsActiveFunction, err = gestureStruct.InvokerNew("is_active")
	})
	return err
}

// IsActive is a representation of the C type gtk_gesture_is_active.
func (recv *Gesture) IsActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureIsActiveFunction_Set()
	if err == nil {
		ret = gestureIsActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gestureIsGroupedWithFunction *gi.Function
var gestureIsGroupedWithFunction_Once sync.Once

func gestureIsGroupedWithFunction_Set() error {
	var err error
	gestureIsGroupedWithFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureIsGroupedWithFunction, err = gestureStruct.InvokerNew("is_grouped_with")
	})
	return err
}

// IsGroupedWith is a representation of the C type gtk_gesture_is_grouped_with.
func (recv *Gesture) IsGroupedWith(other *Gesture) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(other.Native)

	var ret gi.Argument

	err := gestureIsGroupedWithFunction_Set()
	if err == nil {
		ret = gestureIsGroupedWithFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gestureIsRecognizedFunction *gi.Function
var gestureIsRecognizedFunction_Once sync.Once

func gestureIsRecognizedFunction_Set() error {
	var err error
	gestureIsRecognizedFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureIsRecognizedFunction, err = gestureStruct.InvokerNew("is_recognized")
	})
	return err
}

// IsRecognized is a representation of the C type gtk_gesture_is_recognized.
func (recv *Gesture) IsRecognized() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureIsRecognizedFunction_Set()
	if err == nil {
		ret = gestureIsRecognizedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_gesture_set_sequence_state' : parameter 'sequence' of type 'Gdk.EventSequence' not supported

// UNSUPPORTED : C value 'gtk_gesture_set_state' : parameter 'state' of type 'EventSequenceState' not supported

// UNSUPPORTED : C value 'gtk_gesture_set_window' : parameter 'window' of type 'Gdk.Window' not supported

var gestureUngroupFunction *gi.Function
var gestureUngroupFunction_Once sync.Once

func gestureUngroupFunction_Set() error {
	var err error
	gestureUngroupFunction_Once.Do(func() {
		err = gestureStruct_Set()
		if err != nil {
			return
		}
		gestureUngroupFunction, err = gestureStruct.InvokerNew("ungroup")
	})
	return err
}

// Ungroup is a representation of the C type gtk_gesture_ungroup.
func (recv *Gesture) Ungroup() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := gestureUngroupFunction_Set()
	if err == nil {
		gestureUngroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// GestureStruct creates an uninitialised Gesture.
func GestureStruct() *Gesture {
	err := gestureStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Gesture{}
	structGo.Native = gestureStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeGesture)
	return structGo
}
func finalizeGesture(obj *Gesture) {
	gestureStruct.Free(obj.Native)
}

var gestureDragStruct *gi.Struct
var gestureDragStruct_Once sync.Once

func gestureDragStruct_Set() error {
	var err error
	gestureDragStruct_Once.Do(func() {
		gestureDragStruct, err = gi.StructNew("Gtk", "GestureDrag")
	})
	return err
}

type GestureDrag struct {
	GestureSingle
}

var gestureDragNewFunction *gi.Function
var gestureDragNewFunction_Once sync.Once

func gestureDragNewFunction_Set() error {
	var err error
	gestureDragNewFunction_Once.Do(func() {
		err = gestureDragStruct_Set()
		if err != nil {
			return
		}
		gestureDragNewFunction, err = gestureDragStruct.InvokerNew("new")
	})
	return err
}

// GestureDragNew is a representation of the C type gtk_gesture_drag_new.
func GestureDragNew(widget *Widget) *GestureDrag {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureDragNewFunction_Set()
	if err == nil {
		ret = gestureDragNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureDrag{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gestureDragGetOffsetFunction *gi.Function
var gestureDragGetOffsetFunction_Once sync.Once

func gestureDragGetOffsetFunction_Set() error {
	var err error
	gestureDragGetOffsetFunction_Once.Do(func() {
		err = gestureDragStruct_Set()
		if err != nil {
			return
		}
		gestureDragGetOffsetFunction, err = gestureDragStruct.InvokerNew("get_offset")
	})
	return err
}

// GetOffset is a representation of the C type gtk_gesture_drag_get_offset.
func (recv *GestureDrag) GetOffset() (bool, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := gestureDragGetOffsetFunction_Set()
	if err == nil {
		ret = gestureDragGetOffsetFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return retGo, out0, out1
}

var gestureDragGetStartPointFunction *gi.Function
var gestureDragGetStartPointFunction_Once sync.Once

func gestureDragGetStartPointFunction_Set() error {
	var err error
	gestureDragGetStartPointFunction_Once.Do(func() {
		err = gestureDragStruct_Set()
		if err != nil {
			return
		}
		gestureDragGetStartPointFunction, err = gestureDragStruct.InvokerNew("get_start_point")
	})
	return err
}

// GetStartPoint is a representation of the C type gtk_gesture_drag_get_start_point.
func (recv *GestureDrag) GetStartPoint() (bool, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := gestureDragGetStartPointFunction_Set()
	if err == nil {
		ret = gestureDragGetStartPointFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return retGo, out0, out1
}

var gestureLongPressStruct *gi.Struct
var gestureLongPressStruct_Once sync.Once

func gestureLongPressStruct_Set() error {
	var err error
	gestureLongPressStruct_Once.Do(func() {
		gestureLongPressStruct, err = gi.StructNew("Gtk", "GestureLongPress")
	})
	return err
}

type GestureLongPress struct {
	GestureSingle
}

var gestureLongPressNewFunction *gi.Function
var gestureLongPressNewFunction_Once sync.Once

func gestureLongPressNewFunction_Set() error {
	var err error
	gestureLongPressNewFunction_Once.Do(func() {
		err = gestureLongPressStruct_Set()
		if err != nil {
			return
		}
		gestureLongPressNewFunction, err = gestureLongPressStruct.InvokerNew("new")
	})
	return err
}

// GestureLongPressNew is a representation of the C type gtk_gesture_long_press_new.
func GestureLongPressNew(widget *Widget) *GestureLongPress {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureLongPressNewFunction_Set()
	if err == nil {
		ret = gestureLongPressNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureLongPress{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gestureMultiPressStruct *gi.Struct
var gestureMultiPressStruct_Once sync.Once

func gestureMultiPressStruct_Set() error {
	var err error
	gestureMultiPressStruct_Once.Do(func() {
		gestureMultiPressStruct, err = gi.StructNew("Gtk", "GestureMultiPress")
	})
	return err
}

type GestureMultiPress struct {
	GestureSingle
}

var gestureMultiPressNewFunction *gi.Function
var gestureMultiPressNewFunction_Once sync.Once

func gestureMultiPressNewFunction_Set() error {
	var err error
	gestureMultiPressNewFunction_Once.Do(func() {
		err = gestureMultiPressStruct_Set()
		if err != nil {
			return
		}
		gestureMultiPressNewFunction, err = gestureMultiPressStruct.InvokerNew("new")
	})
	return err
}

// GestureMultiPressNew is a representation of the C type gtk_gesture_multi_press_new.
func GestureMultiPressNew(widget *Widget) *GestureMultiPress {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureMultiPressNewFunction_Set()
	if err == nil {
		ret = gestureMultiPressNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureMultiPress{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_gesture_multi_press_get_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_gesture_multi_press_set_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

var gesturePanStruct *gi.Struct
var gesturePanStruct_Once sync.Once

func gesturePanStruct_Set() error {
	var err error
	gesturePanStruct_Once.Do(func() {
		gesturePanStruct, err = gi.StructNew("Gtk", "GesturePan")
	})
	return err
}

type GesturePan struct {
	GestureDrag
}

// UNSUPPORTED : C value 'gtk_gesture_pan_new' : parameter 'orientation' of type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_gesture_pan_get_orientation' : return type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_gesture_pan_set_orientation' : parameter 'orientation' of type 'Orientation' not supported

var gestureRotateStruct *gi.Struct
var gestureRotateStruct_Once sync.Once

func gestureRotateStruct_Set() error {
	var err error
	gestureRotateStruct_Once.Do(func() {
		gestureRotateStruct, err = gi.StructNew("Gtk", "GestureRotate")
	})
	return err
}

type GestureRotate struct {
	Gesture
}

var gestureRotateNewFunction *gi.Function
var gestureRotateNewFunction_Once sync.Once

func gestureRotateNewFunction_Set() error {
	var err error
	gestureRotateNewFunction_Once.Do(func() {
		err = gestureRotateStruct_Set()
		if err != nil {
			return
		}
		gestureRotateNewFunction, err = gestureRotateStruct.InvokerNew("new")
	})
	return err
}

// GestureRotateNew is a representation of the C type gtk_gesture_rotate_new.
func GestureRotateNew(widget *Widget) *GestureRotate {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureRotateNewFunction_Set()
	if err == nil {
		ret = gestureRotateNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureRotate{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gestureRotateGetAngleDeltaFunction *gi.Function
var gestureRotateGetAngleDeltaFunction_Once sync.Once

func gestureRotateGetAngleDeltaFunction_Set() error {
	var err error
	gestureRotateGetAngleDeltaFunction_Once.Do(func() {
		err = gestureRotateStruct_Set()
		if err != nil {
			return
		}
		gestureRotateGetAngleDeltaFunction, err = gestureRotateStruct.InvokerNew("get_angle_delta")
	})
	return err
}

// GetAngleDelta is a representation of the C type gtk_gesture_rotate_get_angle_delta.
func (recv *GestureRotate) GetAngleDelta() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureRotateGetAngleDeltaFunction_Set()
	if err == nil {
		ret = gestureRotateGetAngleDeltaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var gestureSingleStruct *gi.Struct
var gestureSingleStruct_Once sync.Once

func gestureSingleStruct_Set() error {
	var err error
	gestureSingleStruct_Once.Do(func() {
		gestureSingleStruct, err = gi.StructNew("Gtk", "GestureSingle")
	})
	return err
}

type GestureSingle struct {
	Gesture
}

var gestureSingleGetButtonFunction *gi.Function
var gestureSingleGetButtonFunction_Once sync.Once

func gestureSingleGetButtonFunction_Set() error {
	var err error
	gestureSingleGetButtonFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleGetButtonFunction, err = gestureSingleStruct.InvokerNew("get_button")
	})
	return err
}

// GetButton is a representation of the C type gtk_gesture_single_get_button.
func (recv *GestureSingle) GetButton() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureSingleGetButtonFunction_Set()
	if err == nil {
		ret = gestureSingleGetButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var gestureSingleGetCurrentButtonFunction *gi.Function
var gestureSingleGetCurrentButtonFunction_Once sync.Once

func gestureSingleGetCurrentButtonFunction_Set() error {
	var err error
	gestureSingleGetCurrentButtonFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleGetCurrentButtonFunction, err = gestureSingleStruct.InvokerNew("get_current_button")
	})
	return err
}

// GetCurrentButton is a representation of the C type gtk_gesture_single_get_current_button.
func (recv *GestureSingle) GetCurrentButton() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureSingleGetCurrentButtonFunction_Set()
	if err == nil {
		ret = gestureSingleGetCurrentButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_gesture_single_get_current_sequence' : return type 'Gdk.EventSequence' not supported

var gestureSingleGetExclusiveFunction *gi.Function
var gestureSingleGetExclusiveFunction_Once sync.Once

func gestureSingleGetExclusiveFunction_Set() error {
	var err error
	gestureSingleGetExclusiveFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleGetExclusiveFunction, err = gestureSingleStruct.InvokerNew("get_exclusive")
	})
	return err
}

// GetExclusive is a representation of the C type gtk_gesture_single_get_exclusive.
func (recv *GestureSingle) GetExclusive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureSingleGetExclusiveFunction_Set()
	if err == nil {
		ret = gestureSingleGetExclusiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gestureSingleGetTouchOnlyFunction *gi.Function
var gestureSingleGetTouchOnlyFunction_Once sync.Once

func gestureSingleGetTouchOnlyFunction_Set() error {
	var err error
	gestureSingleGetTouchOnlyFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleGetTouchOnlyFunction, err = gestureSingleStruct.InvokerNew("get_touch_only")
	})
	return err
}

// GetTouchOnly is a representation of the C type gtk_gesture_single_get_touch_only.
func (recv *GestureSingle) GetTouchOnly() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureSingleGetTouchOnlyFunction_Set()
	if err == nil {
		ret = gestureSingleGetTouchOnlyFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gestureSingleSetButtonFunction *gi.Function
var gestureSingleSetButtonFunction_Once sync.Once

func gestureSingleSetButtonFunction_Set() error {
	var err error
	gestureSingleSetButtonFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleSetButtonFunction, err = gestureSingleStruct.InvokerNew("set_button")
	})
	return err
}

// SetButton is a representation of the C type gtk_gesture_single_set_button.
func (recv *GestureSingle) SetButton(button uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(button)

	err := gestureSingleSetButtonFunction_Set()
	if err == nil {
		gestureSingleSetButtonFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gestureSingleSetExclusiveFunction *gi.Function
var gestureSingleSetExclusiveFunction_Once sync.Once

func gestureSingleSetExclusiveFunction_Set() error {
	var err error
	gestureSingleSetExclusiveFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleSetExclusiveFunction, err = gestureSingleStruct.InvokerNew("set_exclusive")
	})
	return err
}

// SetExclusive is a representation of the C type gtk_gesture_single_set_exclusive.
func (recv *GestureSingle) SetExclusive(exclusive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(exclusive)

	err := gestureSingleSetExclusiveFunction_Set()
	if err == nil {
		gestureSingleSetExclusiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gestureSingleSetTouchOnlyFunction *gi.Function
var gestureSingleSetTouchOnlyFunction_Once sync.Once

func gestureSingleSetTouchOnlyFunction_Set() error {
	var err error
	gestureSingleSetTouchOnlyFunction_Once.Do(func() {
		err = gestureSingleStruct_Set()
		if err != nil {
			return
		}
		gestureSingleSetTouchOnlyFunction, err = gestureSingleStruct.InvokerNew("set_touch_only")
	})
	return err
}

// SetTouchOnly is a representation of the C type gtk_gesture_single_set_touch_only.
func (recv *GestureSingle) SetTouchOnly(touchOnly bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(touchOnly)

	err := gestureSingleSetTouchOnlyFunction_Set()
	if err == nil {
		gestureSingleSetTouchOnlyFunction.Invoke(inArgs[:], nil)
	}

	return
}

// GestureSingleStruct creates an uninitialised GestureSingle.
func GestureSingleStruct() *GestureSingle {
	err := gestureSingleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &GestureSingle{}
	structGo.Native = gestureSingleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeGestureSingle)
	return structGo
}
func finalizeGestureSingle(obj *GestureSingle) {
	gestureSingleStruct.Free(obj.Native)
}

var gestureStylusStruct *gi.Struct
var gestureStylusStruct_Once sync.Once

func gestureStylusStruct_Set() error {
	var err error
	gestureStylusStruct_Once.Do(func() {
		gestureStylusStruct, err = gi.StructNew("Gtk", "GestureStylus")
	})
	return err
}

type GestureStylus struct {
	GestureSingle
}

var gestureStylusNewFunction *gi.Function
var gestureStylusNewFunction_Once sync.Once

func gestureStylusNewFunction_Set() error {
	var err error
	gestureStylusNewFunction_Once.Do(func() {
		err = gestureStylusStruct_Set()
		if err != nil {
			return
		}
		gestureStylusNewFunction, err = gestureStylusStruct.InvokerNew("new")
	})
	return err
}

// GestureStylusNew is a representation of the C type gtk_gesture_stylus_new.
func GestureStylusNew(widget *Widget) *GestureStylus {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureStylusNewFunction_Set()
	if err == nil {
		ret = gestureStylusNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureStylus{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_gesture_stylus_get_axes' : parameter 'axes' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_gesture_stylus_get_axis' : parameter 'axis' of type 'Gdk.AxisUse' not supported

// UNSUPPORTED : C value 'gtk_gesture_stylus_get_device_tool' : return type 'Gdk.DeviceTool' not supported

var gestureSwipeStruct *gi.Struct
var gestureSwipeStruct_Once sync.Once

func gestureSwipeStruct_Set() error {
	var err error
	gestureSwipeStruct_Once.Do(func() {
		gestureSwipeStruct, err = gi.StructNew("Gtk", "GestureSwipe")
	})
	return err
}

type GestureSwipe struct {
	GestureSingle
}

var gestureSwipeNewFunction *gi.Function
var gestureSwipeNewFunction_Once sync.Once

func gestureSwipeNewFunction_Set() error {
	var err error
	gestureSwipeNewFunction_Once.Do(func() {
		err = gestureSwipeStruct_Set()
		if err != nil {
			return
		}
		gestureSwipeNewFunction, err = gestureSwipeStruct.InvokerNew("new")
	})
	return err
}

// GestureSwipeNew is a representation of the C type gtk_gesture_swipe_new.
func GestureSwipeNew(widget *Widget) *GestureSwipe {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureSwipeNewFunction_Set()
	if err == nil {
		ret = gestureSwipeNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureSwipe{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gestureSwipeGetVelocityFunction *gi.Function
var gestureSwipeGetVelocityFunction_Once sync.Once

func gestureSwipeGetVelocityFunction_Set() error {
	var err error
	gestureSwipeGetVelocityFunction_Once.Do(func() {
		err = gestureSwipeStruct_Set()
		if err != nil {
			return
		}
		gestureSwipeGetVelocityFunction, err = gestureSwipeStruct.InvokerNew("get_velocity")
	})
	return err
}

// GetVelocity is a representation of the C type gtk_gesture_swipe_get_velocity.
func (recv *GestureSwipe) GetVelocity() (bool, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := gestureSwipeGetVelocityFunction_Set()
	if err == nil {
		ret = gestureSwipeGetVelocityFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return retGo, out0, out1
}

var gestureZoomStruct *gi.Struct
var gestureZoomStruct_Once sync.Once

func gestureZoomStruct_Set() error {
	var err error
	gestureZoomStruct_Once.Do(func() {
		gestureZoomStruct, err = gi.StructNew("Gtk", "GestureZoom")
	})
	return err
}

type GestureZoom struct {
	Gesture
}

var gestureZoomNewFunction *gi.Function
var gestureZoomNewFunction_Once sync.Once

func gestureZoomNewFunction_Set() error {
	var err error
	gestureZoomNewFunction_Once.Do(func() {
		err = gestureZoomStruct_Set()
		if err != nil {
			return
		}
		gestureZoomNewFunction, err = gestureZoomStruct.InvokerNew("new")
	})
	return err
}

// GestureZoomNew is a representation of the C type gtk_gesture_zoom_new.
func GestureZoomNew(widget *Widget) *GestureZoom {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(widget.Native)

	var ret gi.Argument

	err := gestureZoomNewFunction_Set()
	if err == nil {
		ret = gestureZoomNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &GestureZoom{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gestureZoomGetScaleDeltaFunction *gi.Function
var gestureZoomGetScaleDeltaFunction_Once sync.Once

func gestureZoomGetScaleDeltaFunction_Set() error {
	var err error
	gestureZoomGetScaleDeltaFunction_Once.Do(func() {
		err = gestureZoomStruct_Set()
		if err != nil {
			return
		}
		gestureZoomGetScaleDeltaFunction, err = gestureZoomStruct.InvokerNew("get_scale_delta")
	})
	return err
}

// GetScaleDelta is a representation of the C type gtk_gesture_zoom_get_scale_delta.
func (recv *GestureZoom) GetScaleDelta() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gestureZoomGetScaleDeltaFunction_Set()
	if err == nil {
		ret = gestureZoomGetScaleDeltaFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var gridStruct *gi.Struct
var gridStruct_Once sync.Once

func gridStruct_Set() error {
	var err error
	gridStruct_Once.Do(func() {
		gridStruct, err = gi.StructNew("Gtk", "Grid")
	})
	return err
}

type Grid struct {
	Container
}

var gridNewFunction *gi.Function
var gridNewFunction_Once sync.Once

func gridNewFunction_Set() error {
	var err error
	gridNewFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridNewFunction, err = gridStruct.InvokerNew("new")
	})
	return err
}

// GridNew is a representation of the C type gtk_grid_new.
func GridNew() *Grid {

	var ret gi.Argument

	err := gridNewFunction_Set()
	if err == nil {
		ret = gridNewFunction.Invoke(nil, nil)
	}

	retGo := &Grid{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gridAttachFunction *gi.Function
var gridAttachFunction_Once sync.Once

func gridAttachFunction_Set() error {
	var err error
	gridAttachFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridAttachFunction, err = gridStruct.InvokerNew("attach")
	})
	return err
}

// Attach is a representation of the C type gtk_grid_attach.
func (recv *Grid) Attach(child *Widget, left int32, top int32, width int32, height int32) {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(left)
	inArgs[3].SetInt32(top)
	inArgs[4].SetInt32(width)
	inArgs[5].SetInt32(height)

	err := gridAttachFunction_Set()
	if err == nil {
		gridAttachFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_grid_attach_next_to' : parameter 'side' of type 'PositionType' not supported

var gridGetBaselineRowFunction *gi.Function
var gridGetBaselineRowFunction_Once sync.Once

func gridGetBaselineRowFunction_Set() error {
	var err error
	gridGetBaselineRowFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetBaselineRowFunction, err = gridStruct.InvokerNew("get_baseline_row")
	})
	return err
}

// GetBaselineRow is a representation of the C type gtk_grid_get_baseline_row.
func (recv *Grid) GetBaselineRow() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gridGetBaselineRowFunction_Set()
	if err == nil {
		ret = gridGetBaselineRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var gridGetChildAtFunction *gi.Function
var gridGetChildAtFunction_Once sync.Once

func gridGetChildAtFunction_Set() error {
	var err error
	gridGetChildAtFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetChildAtFunction, err = gridStruct.InvokerNew("get_child_at")
	})
	return err
}

// GetChildAt is a representation of the C type gtk_grid_get_child_at.
func (recv *Grid) GetChildAt(left int32, top int32) *Widget {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(left)
	inArgs[2].SetInt32(top)

	var ret gi.Argument

	err := gridGetChildAtFunction_Set()
	if err == nil {
		ret = gridGetChildAtFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var gridGetColumnHomogeneousFunction *gi.Function
var gridGetColumnHomogeneousFunction_Once sync.Once

func gridGetColumnHomogeneousFunction_Set() error {
	var err error
	gridGetColumnHomogeneousFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetColumnHomogeneousFunction, err = gridStruct.InvokerNew("get_column_homogeneous")
	})
	return err
}

// GetColumnHomogeneous is a representation of the C type gtk_grid_get_column_homogeneous.
func (recv *Grid) GetColumnHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gridGetColumnHomogeneousFunction_Set()
	if err == nil {
		ret = gridGetColumnHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gridGetColumnSpacingFunction *gi.Function
var gridGetColumnSpacingFunction_Once sync.Once

func gridGetColumnSpacingFunction_Set() error {
	var err error
	gridGetColumnSpacingFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetColumnSpacingFunction, err = gridStruct.InvokerNew("get_column_spacing")
	})
	return err
}

// GetColumnSpacing is a representation of the C type gtk_grid_get_column_spacing.
func (recv *Grid) GetColumnSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gridGetColumnSpacingFunction_Set()
	if err == nil {
		ret = gridGetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_grid_get_row_baseline_position' : return type 'BaselinePosition' not supported

var gridGetRowHomogeneousFunction *gi.Function
var gridGetRowHomogeneousFunction_Once sync.Once

func gridGetRowHomogeneousFunction_Set() error {
	var err error
	gridGetRowHomogeneousFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetRowHomogeneousFunction, err = gridStruct.InvokerNew("get_row_homogeneous")
	})
	return err
}

// GetRowHomogeneous is a representation of the C type gtk_grid_get_row_homogeneous.
func (recv *Grid) GetRowHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gridGetRowHomogeneousFunction_Set()
	if err == nil {
		ret = gridGetRowHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var gridGetRowSpacingFunction *gi.Function
var gridGetRowSpacingFunction_Once sync.Once

func gridGetRowSpacingFunction_Set() error {
	var err error
	gridGetRowSpacingFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridGetRowSpacingFunction, err = gridStruct.InvokerNew("get_row_spacing")
	})
	return err
}

// GetRowSpacing is a representation of the C type gtk_grid_get_row_spacing.
func (recv *Grid) GetRowSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := gridGetRowSpacingFunction_Set()
	if err == nil {
		ret = gridGetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var gridInsertColumnFunction *gi.Function
var gridInsertColumnFunction_Once sync.Once

func gridInsertColumnFunction_Set() error {
	var err error
	gridInsertColumnFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridInsertColumnFunction, err = gridStruct.InvokerNew("insert_column")
	})
	return err
}

// InsertColumn is a representation of the C type gtk_grid_insert_column.
func (recv *Grid) InsertColumn(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := gridInsertColumnFunction_Set()
	if err == nil {
		gridInsertColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_grid_insert_next_to' : parameter 'side' of type 'PositionType' not supported

var gridInsertRowFunction *gi.Function
var gridInsertRowFunction_Once sync.Once

func gridInsertRowFunction_Set() error {
	var err error
	gridInsertRowFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridInsertRowFunction, err = gridStruct.InvokerNew("insert_row")
	})
	return err
}

// InsertRow is a representation of the C type gtk_grid_insert_row.
func (recv *Grid) InsertRow(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := gridInsertRowFunction_Set()
	if err == nil {
		gridInsertRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridRemoveColumnFunction *gi.Function
var gridRemoveColumnFunction_Once sync.Once

func gridRemoveColumnFunction_Set() error {
	var err error
	gridRemoveColumnFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridRemoveColumnFunction, err = gridStruct.InvokerNew("remove_column")
	})
	return err
}

// RemoveColumn is a representation of the C type gtk_grid_remove_column.
func (recv *Grid) RemoveColumn(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := gridRemoveColumnFunction_Set()
	if err == nil {
		gridRemoveColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridRemoveRowFunction *gi.Function
var gridRemoveRowFunction_Once sync.Once

func gridRemoveRowFunction_Set() error {
	var err error
	gridRemoveRowFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridRemoveRowFunction, err = gridStruct.InvokerNew("remove_row")
	})
	return err
}

// RemoveRow is a representation of the C type gtk_grid_remove_row.
func (recv *Grid) RemoveRow(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := gridRemoveRowFunction_Set()
	if err == nil {
		gridRemoveRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridSetBaselineRowFunction *gi.Function
var gridSetBaselineRowFunction_Once sync.Once

func gridSetBaselineRowFunction_Set() error {
	var err error
	gridSetBaselineRowFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridSetBaselineRowFunction, err = gridStruct.InvokerNew("set_baseline_row")
	})
	return err
}

// SetBaselineRow is a representation of the C type gtk_grid_set_baseline_row.
func (recv *Grid) SetBaselineRow(row int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(row)

	err := gridSetBaselineRowFunction_Set()
	if err == nil {
		gridSetBaselineRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridSetColumnHomogeneousFunction *gi.Function
var gridSetColumnHomogeneousFunction_Once sync.Once

func gridSetColumnHomogeneousFunction_Set() error {
	var err error
	gridSetColumnHomogeneousFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridSetColumnHomogeneousFunction, err = gridStruct.InvokerNew("set_column_homogeneous")
	})
	return err
}

// SetColumnHomogeneous is a representation of the C type gtk_grid_set_column_homogeneous.
func (recv *Grid) SetColumnHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := gridSetColumnHomogeneousFunction_Set()
	if err == nil {
		gridSetColumnHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridSetColumnSpacingFunction *gi.Function
var gridSetColumnSpacingFunction_Once sync.Once

func gridSetColumnSpacingFunction_Set() error {
	var err error
	gridSetColumnSpacingFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridSetColumnSpacingFunction, err = gridStruct.InvokerNew("set_column_spacing")
	})
	return err
}

// SetColumnSpacing is a representation of the C type gtk_grid_set_column_spacing.
func (recv *Grid) SetColumnSpacing(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := gridSetColumnSpacingFunction_Set()
	if err == nil {
		gridSetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_grid_set_row_baseline_position' : parameter 'pos' of type 'BaselinePosition' not supported

var gridSetRowHomogeneousFunction *gi.Function
var gridSetRowHomogeneousFunction_Once sync.Once

func gridSetRowHomogeneousFunction_Set() error {
	var err error
	gridSetRowHomogeneousFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridSetRowHomogeneousFunction, err = gridStruct.InvokerNew("set_row_homogeneous")
	})
	return err
}

// SetRowHomogeneous is a representation of the C type gtk_grid_set_row_homogeneous.
func (recv *Grid) SetRowHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := gridSetRowHomogeneousFunction_Set()
	if err == nil {
		gridSetRowHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var gridSetRowSpacingFunction *gi.Function
var gridSetRowSpacingFunction_Once sync.Once

func gridSetRowSpacingFunction_Set() error {
	var err error
	gridSetRowSpacingFunction_Once.Do(func() {
		err = gridStruct_Set()
		if err != nil {
			return
		}
		gridSetRowSpacingFunction, err = gridStruct.InvokerNew("set_row_spacing")
	})
	return err
}

// SetRowSpacing is a representation of the C type gtk_grid_set_row_spacing.
func (recv *Grid) SetRowSpacing(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := gridSetRowSpacingFunction_Set()
	if err == nil {
		gridSetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var hBoxStruct *gi.Struct
var hBoxStruct_Once sync.Once

func hBoxStruct_Set() error {
	var err error
	hBoxStruct_Once.Do(func() {
		hBoxStruct, err = gi.StructNew("Gtk", "HBox")
	})
	return err
}

type HBox struct {
	Box
}

// FieldBox returns the C field 'box'.
func (recv *HBox) FieldBox() *Box {
	argValue := gi.FieldGet(hBoxStruct, recv.Native, "box")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBox sets the value of the C field 'box'.
func (recv *HBox) SetFieldBox(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hBoxStruct, recv.Native, "box", argValue)
}

var hBoxNewFunction *gi.Function
var hBoxNewFunction_Once sync.Once

func hBoxNewFunction_Set() error {
	var err error
	hBoxNewFunction_Once.Do(func() {
		err = hBoxStruct_Set()
		if err != nil {
			return
		}
		hBoxNewFunction, err = hBoxStruct.InvokerNew("new")
	})
	return err
}

// HBoxNew is a representation of the C type gtk_hbox_new.
func HBoxNew(homogeneous bool, spacing int32) *HBox {
	var inArgs [2]gi.Argument
	inArgs[0].SetBoolean(homogeneous)
	inArgs[1].SetInt32(spacing)

	var ret gi.Argument

	err := hBoxNewFunction_Set()
	if err == nil {
		ret = hBoxNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &HBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hButtonBoxStruct *gi.Struct
var hButtonBoxStruct_Once sync.Once

func hButtonBoxStruct_Set() error {
	var err error
	hButtonBoxStruct_Once.Do(func() {
		hButtonBoxStruct, err = gi.StructNew("Gtk", "HButtonBox")
	})
	return err
}

type HButtonBox struct {
	ButtonBox
}

// FieldButtonBox returns the C field 'button_box'.
func (recv *HButtonBox) FieldButtonBox() *ButtonBox {
	argValue := gi.FieldGet(hButtonBoxStruct, recv.Native, "button_box")
	value := &ButtonBox{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldButtonBox sets the value of the C field 'button_box'.
func (recv *HButtonBox) SetFieldButtonBox(value *ButtonBox) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hButtonBoxStruct, recv.Native, "button_box", argValue)
}

var hButtonBoxNewFunction *gi.Function
var hButtonBoxNewFunction_Once sync.Once

func hButtonBoxNewFunction_Set() error {
	var err error
	hButtonBoxNewFunction_Once.Do(func() {
		err = hButtonBoxStruct_Set()
		if err != nil {
			return
		}
		hButtonBoxNewFunction, err = hButtonBoxStruct.InvokerNew("new")
	})
	return err
}

// HButtonBoxNew is a representation of the C type gtk_hbutton_box_new.
func HButtonBoxNew() *HButtonBox {

	var ret gi.Argument

	err := hButtonBoxNewFunction_Set()
	if err == nil {
		ret = hButtonBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &HButtonBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hPanedStruct *gi.Struct
var hPanedStruct_Once sync.Once

func hPanedStruct_Set() error {
	var err error
	hPanedStruct_Once.Do(func() {
		hPanedStruct, err = gi.StructNew("Gtk", "HPaned")
	})
	return err
}

type HPaned struct {
	Paned
}

// FieldPaned returns the C field 'paned'.
func (recv *HPaned) FieldPaned() *Paned {
	argValue := gi.FieldGet(hPanedStruct, recv.Native, "paned")
	value := &Paned{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPaned sets the value of the C field 'paned'.
func (recv *HPaned) SetFieldPaned(value *Paned) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hPanedStruct, recv.Native, "paned", argValue)
}

var hPanedNewFunction *gi.Function
var hPanedNewFunction_Once sync.Once

func hPanedNewFunction_Set() error {
	var err error
	hPanedNewFunction_Once.Do(func() {
		err = hPanedStruct_Set()
		if err != nil {
			return
		}
		hPanedNewFunction, err = hPanedStruct.InvokerNew("new")
	})
	return err
}

// HPanedNew is a representation of the C type gtk_hpaned_new.
func HPanedNew() *HPaned {

	var ret gi.Argument

	err := hPanedNewFunction_Set()
	if err == nil {
		ret = hPanedNewFunction.Invoke(nil, nil)
	}

	retGo := &HPaned{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hSVStruct *gi.Struct
var hSVStruct_Once sync.Once

func hSVStruct_Set() error {
	var err error
	hSVStruct_Once.Do(func() {
		hSVStruct, err = gi.StructNew("Gtk", "HSV")
	})
	return err
}

type HSV struct {
	Widget
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *HSV) FieldParentInstance() *Widget {
	argValue := gi.FieldGet(hSVStruct, recv.Native, "parent_instance")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *HSV) SetFieldParentInstance(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hSVStruct, recv.Native, "parent_instance", argValue)
}

var hSVNewFunction *gi.Function
var hSVNewFunction_Once sync.Once

func hSVNewFunction_Set() error {
	var err error
	hSVNewFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVNewFunction, err = hSVStruct.InvokerNew("new")
	})
	return err
}

// HSVNew is a representation of the C type gtk_hsv_new.
func HSVNew() *HSV {

	var ret gi.Argument

	err := hSVNewFunction_Set()
	if err == nil {
		ret = hSVNewFunction.Invoke(nil, nil)
	}

	retGo := &HSV{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hSVGetColorFunction *gi.Function
var hSVGetColorFunction_Once sync.Once

func hSVGetColorFunction_Set() error {
	var err error
	hSVGetColorFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVGetColorFunction, err = hSVStruct.InvokerNew("get_color")
	})
	return err
}

// GetColor is a representation of the C type gtk_hsv_get_color.
func (recv *HSV) GetColor() (float64, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [3]gi.Argument

	err := hSVGetColorFunction_Set()
	if err == nil {
		hSVGetColorFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()
	out2 := outArgs[2].Float64()

	return out0, out1, out2
}

var hSVGetMetricsFunction *gi.Function
var hSVGetMetricsFunction_Once sync.Once

func hSVGetMetricsFunction_Set() error {
	var err error
	hSVGetMetricsFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVGetMetricsFunction, err = hSVStruct.InvokerNew("get_metrics")
	})
	return err
}

// GetMetrics is a representation of the C type gtk_hsv_get_metrics.
func (recv *HSV) GetMetrics() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := hSVGetMetricsFunction_Set()
	if err == nil {
		hSVGetMetricsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var hSVIsAdjustingFunction *gi.Function
var hSVIsAdjustingFunction_Once sync.Once

func hSVIsAdjustingFunction_Set() error {
	var err error
	hSVIsAdjustingFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVIsAdjustingFunction, err = hSVStruct.InvokerNew("is_adjusting")
	})
	return err
}

// IsAdjusting is a representation of the C type gtk_hsv_is_adjusting.
func (recv *HSV) IsAdjusting() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := hSVIsAdjustingFunction_Set()
	if err == nil {
		ret = hSVIsAdjustingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var hSVSetColorFunction *gi.Function
var hSVSetColorFunction_Once sync.Once

func hSVSetColorFunction_Set() error {
	var err error
	hSVSetColorFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVSetColorFunction, err = hSVStruct.InvokerNew("set_color")
	})
	return err
}

// SetColor is a representation of the C type gtk_hsv_set_color.
func (recv *HSV) SetColor(h float64, s float64, v float64) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(h)
	inArgs[2].SetFloat64(s)
	inArgs[3].SetFloat64(v)

	err := hSVSetColorFunction_Set()
	if err == nil {
		hSVSetColorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var hSVSetMetricsFunction *gi.Function
var hSVSetMetricsFunction_Once sync.Once

func hSVSetMetricsFunction_Set() error {
	var err error
	hSVSetMetricsFunction_Once.Do(func() {
		err = hSVStruct_Set()
		if err != nil {
			return
		}
		hSVSetMetricsFunction, err = hSVStruct.InvokerNew("set_metrics")
	})
	return err
}

// SetMetrics is a representation of the C type gtk_hsv_set_metrics.
func (recv *HSV) SetMetrics(size int32, ringWidth int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(size)
	inArgs[2].SetInt32(ringWidth)

	err := hSVSetMetricsFunction_Set()
	if err == nil {
		hSVSetMetricsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var hScaleStruct *gi.Struct
var hScaleStruct_Once sync.Once

func hScaleStruct_Set() error {
	var err error
	hScaleStruct_Once.Do(func() {
		hScaleStruct, err = gi.StructNew("Gtk", "HScale")
	})
	return err
}

type HScale struct {
	Scale
}

// FieldScale returns the C field 'scale'.
func (recv *HScale) FieldScale() *Scale {
	argValue := gi.FieldGet(hScaleStruct, recv.Native, "scale")
	value := &Scale{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldScale sets the value of the C field 'scale'.
func (recv *HScale) SetFieldScale(value *Scale) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hScaleStruct, recv.Native, "scale", argValue)
}

var hScaleNewFunction *gi.Function
var hScaleNewFunction_Once sync.Once

func hScaleNewFunction_Set() error {
	var err error
	hScaleNewFunction_Once.Do(func() {
		err = hScaleStruct_Set()
		if err != nil {
			return
		}
		hScaleNewFunction, err = hScaleStruct.InvokerNew("new")
	})
	return err
}

// HScaleNew is a representation of the C type gtk_hscale_new.
func HScaleNew(adjustment *Adjustment) *HScale {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(adjustment.Native)

	var ret gi.Argument

	err := hScaleNewFunction_Set()
	if err == nil {
		ret = hScaleNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &HScale{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hScaleNewWithRangeFunction *gi.Function
var hScaleNewWithRangeFunction_Once sync.Once

func hScaleNewWithRangeFunction_Set() error {
	var err error
	hScaleNewWithRangeFunction_Once.Do(func() {
		err = hScaleStruct_Set()
		if err != nil {
			return
		}
		hScaleNewWithRangeFunction, err = hScaleStruct.InvokerNew("new_with_range")
	})
	return err
}

// HScaleNewWithRange is a representation of the C type gtk_hscale_new_with_range.
func HScaleNewWithRange(min float64, max float64, step float64) *HScale {
	var inArgs [3]gi.Argument
	inArgs[0].SetFloat64(min)
	inArgs[1].SetFloat64(max)
	inArgs[2].SetFloat64(step)

	var ret gi.Argument

	err := hScaleNewWithRangeFunction_Set()
	if err == nil {
		ret = hScaleNewWithRangeFunction.Invoke(inArgs[:], nil)
	}

	retGo := &HScale{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hScrollbarStruct *gi.Struct
var hScrollbarStruct_Once sync.Once

func hScrollbarStruct_Set() error {
	var err error
	hScrollbarStruct_Once.Do(func() {
		hScrollbarStruct, err = gi.StructNew("Gtk", "HScrollbar")
	})
	return err
}

type HScrollbar struct {
	Scrollbar
}

// FieldScrollbar returns the C field 'scrollbar'.
func (recv *HScrollbar) FieldScrollbar() *Scrollbar {
	argValue := gi.FieldGet(hScrollbarStruct, recv.Native, "scrollbar")
	value := &Scrollbar{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldScrollbar sets the value of the C field 'scrollbar'.
func (recv *HScrollbar) SetFieldScrollbar(value *Scrollbar) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hScrollbarStruct, recv.Native, "scrollbar", argValue)
}

var hScrollbarNewFunction *gi.Function
var hScrollbarNewFunction_Once sync.Once

func hScrollbarNewFunction_Set() error {
	var err error
	hScrollbarNewFunction_Once.Do(func() {
		err = hScrollbarStruct_Set()
		if err != nil {
			return
		}
		hScrollbarNewFunction, err = hScrollbarStruct.InvokerNew("new")
	})
	return err
}

// HScrollbarNew is a representation of the C type gtk_hscrollbar_new.
func HScrollbarNew(adjustment *Adjustment) *HScrollbar {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(adjustment.Native)

	var ret gi.Argument

	err := hScrollbarNewFunction_Set()
	if err == nil {
		ret = hScrollbarNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &HScrollbar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var hSeparatorStruct *gi.Struct
var hSeparatorStruct_Once sync.Once

func hSeparatorStruct_Set() error {
	var err error
	hSeparatorStruct_Once.Do(func() {
		hSeparatorStruct, err = gi.StructNew("Gtk", "HSeparator")
	})
	return err
}

type HSeparator struct {
	Separator
}

// FieldSeparator returns the C field 'separator'.
func (recv *HSeparator) FieldSeparator() *Separator {
	argValue := gi.FieldGet(hSeparatorStruct, recv.Native, "separator")
	value := &Separator{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldSeparator sets the value of the C field 'separator'.
func (recv *HSeparator) SetFieldSeparator(value *Separator) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(hSeparatorStruct, recv.Native, "separator", argValue)
}

var hSeparatorNewFunction *gi.Function
var hSeparatorNewFunction_Once sync.Once

func hSeparatorNewFunction_Set() error {
	var err error
	hSeparatorNewFunction_Once.Do(func() {
		err = hSeparatorStruct_Set()
		if err != nil {
			return
		}
		hSeparatorNewFunction, err = hSeparatorStruct.InvokerNew("new")
	})
	return err
}

// HSeparatorNew is a representation of the C type gtk_hseparator_new.
func HSeparatorNew() *HSeparator {

	var ret gi.Argument

	err := hSeparatorNewFunction_Set()
	if err == nil {
		ret = hSeparatorNewFunction.Invoke(nil, nil)
	}

	retGo := &HSeparator{}
	retGo.Native = ret.Pointer()

	return retGo
}

var handleBoxStruct *gi.Struct
var handleBoxStruct_Once sync.Once

func handleBoxStruct_Set() error {
	var err error
	handleBoxStruct_Once.Do(func() {
		handleBoxStruct, err = gi.StructNew("Gtk", "HandleBox")
	})
	return err
}

type HandleBox struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *HandleBox) FieldBin() *Bin {
	argValue := gi.FieldGet(handleBoxStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *HandleBox) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(handleBoxStruct, recv.Native, "bin", argValue)
}

var handleBoxNewFunction *gi.Function
var handleBoxNewFunction_Once sync.Once

func handleBoxNewFunction_Set() error {
	var err error
	handleBoxNewFunction_Once.Do(func() {
		err = handleBoxStruct_Set()
		if err != nil {
			return
		}
		handleBoxNewFunction, err = handleBoxStruct.InvokerNew("new")
	})
	return err
}

// HandleBoxNew is a representation of the C type gtk_handle_box_new.
func HandleBoxNew() *HandleBox {

	var ret gi.Argument

	err := handleBoxNewFunction_Set()
	if err == nil {
		ret = handleBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &HandleBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var handleBoxGetChildDetachedFunction *gi.Function
var handleBoxGetChildDetachedFunction_Once sync.Once

func handleBoxGetChildDetachedFunction_Set() error {
	var err error
	handleBoxGetChildDetachedFunction_Once.Do(func() {
		err = handleBoxStruct_Set()
		if err != nil {
			return
		}
		handleBoxGetChildDetachedFunction, err = handleBoxStruct.InvokerNew("get_child_detached")
	})
	return err
}

// GetChildDetached is a representation of the C type gtk_handle_box_get_child_detached.
func (recv *HandleBox) GetChildDetached() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := handleBoxGetChildDetachedFunction_Set()
	if err == nil {
		ret = handleBoxGetChildDetachedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_handle_box_get_handle_position' : return type 'PositionType' not supported

// UNSUPPORTED : C value 'gtk_handle_box_get_shadow_type' : return type 'ShadowType' not supported

// UNSUPPORTED : C value 'gtk_handle_box_get_snap_edge' : return type 'PositionType' not supported

// UNSUPPORTED : C value 'gtk_handle_box_set_handle_position' : parameter 'position' of type 'PositionType' not supported

// UNSUPPORTED : C value 'gtk_handle_box_set_shadow_type' : parameter 'type' of type 'ShadowType' not supported

// UNSUPPORTED : C value 'gtk_handle_box_set_snap_edge' : parameter 'edge' of type 'PositionType' not supported

var headerBarStruct *gi.Struct
var headerBarStruct_Once sync.Once

func headerBarStruct_Set() error {
	var err error
	headerBarStruct_Once.Do(func() {
		headerBarStruct, err = gi.StructNew("Gtk", "HeaderBar")
	})
	return err
}

type HeaderBar struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *HeaderBar) FieldContainer() *Container {
	argValue := gi.FieldGet(headerBarStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *HeaderBar) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(headerBarStruct, recv.Native, "container", argValue)
}

var headerBarNewFunction *gi.Function
var headerBarNewFunction_Once sync.Once

func headerBarNewFunction_Set() error {
	var err error
	headerBarNewFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarNewFunction, err = headerBarStruct.InvokerNew("new")
	})
	return err
}

// HeaderBarNew is a representation of the C type gtk_header_bar_new.
func HeaderBarNew() *HeaderBar {

	var ret gi.Argument

	err := headerBarNewFunction_Set()
	if err == nil {
		ret = headerBarNewFunction.Invoke(nil, nil)
	}

	retGo := &HeaderBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var headerBarGetCustomTitleFunction *gi.Function
var headerBarGetCustomTitleFunction_Once sync.Once

func headerBarGetCustomTitleFunction_Set() error {
	var err error
	headerBarGetCustomTitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetCustomTitleFunction, err = headerBarStruct.InvokerNew("get_custom_title")
	})
	return err
}

// GetCustomTitle is a representation of the C type gtk_header_bar_get_custom_title.
func (recv *HeaderBar) GetCustomTitle() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetCustomTitleFunction_Set()
	if err == nil {
		ret = headerBarGetCustomTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var headerBarGetDecorationLayoutFunction *gi.Function
var headerBarGetDecorationLayoutFunction_Once sync.Once

func headerBarGetDecorationLayoutFunction_Set() error {
	var err error
	headerBarGetDecorationLayoutFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetDecorationLayoutFunction, err = headerBarStruct.InvokerNew("get_decoration_layout")
	})
	return err
}

// GetDecorationLayout is a representation of the C type gtk_header_bar_get_decoration_layout.
func (recv *HeaderBar) GetDecorationLayout() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetDecorationLayoutFunction_Set()
	if err == nil {
		ret = headerBarGetDecorationLayoutFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var headerBarGetHasSubtitleFunction *gi.Function
var headerBarGetHasSubtitleFunction_Once sync.Once

func headerBarGetHasSubtitleFunction_Set() error {
	var err error
	headerBarGetHasSubtitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetHasSubtitleFunction, err = headerBarStruct.InvokerNew("get_has_subtitle")
	})
	return err
}

// GetHasSubtitle is a representation of the C type gtk_header_bar_get_has_subtitle.
func (recv *HeaderBar) GetHasSubtitle() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetHasSubtitleFunction_Set()
	if err == nil {
		ret = headerBarGetHasSubtitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var headerBarGetShowCloseButtonFunction *gi.Function
var headerBarGetShowCloseButtonFunction_Once sync.Once

func headerBarGetShowCloseButtonFunction_Set() error {
	var err error
	headerBarGetShowCloseButtonFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetShowCloseButtonFunction, err = headerBarStruct.InvokerNew("get_show_close_button")
	})
	return err
}

// GetShowCloseButton is a representation of the C type gtk_header_bar_get_show_close_button.
func (recv *HeaderBar) GetShowCloseButton() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetShowCloseButtonFunction_Set()
	if err == nil {
		ret = headerBarGetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var headerBarGetSubtitleFunction *gi.Function
var headerBarGetSubtitleFunction_Once sync.Once

func headerBarGetSubtitleFunction_Set() error {
	var err error
	headerBarGetSubtitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetSubtitleFunction, err = headerBarStruct.InvokerNew("get_subtitle")
	})
	return err
}

// GetSubtitle is a representation of the C type gtk_header_bar_get_subtitle.
func (recv *HeaderBar) GetSubtitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetSubtitleFunction_Set()
	if err == nil {
		ret = headerBarGetSubtitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var headerBarGetTitleFunction *gi.Function
var headerBarGetTitleFunction_Once sync.Once

func headerBarGetTitleFunction_Set() error {
	var err error
	headerBarGetTitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarGetTitleFunction, err = headerBarStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_header_bar_get_title.
func (recv *HeaderBar) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := headerBarGetTitleFunction_Set()
	if err == nil {
		ret = headerBarGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var headerBarPackEndFunction *gi.Function
var headerBarPackEndFunction_Once sync.Once

func headerBarPackEndFunction_Set() error {
	var err error
	headerBarPackEndFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarPackEndFunction, err = headerBarStruct.InvokerNew("pack_end")
	})
	return err
}

// PackEnd is a representation of the C type gtk_header_bar_pack_end.
func (recv *HeaderBar) PackEnd(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := headerBarPackEndFunction_Set()
	if err == nil {
		headerBarPackEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarPackStartFunction *gi.Function
var headerBarPackStartFunction_Once sync.Once

func headerBarPackStartFunction_Set() error {
	var err error
	headerBarPackStartFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarPackStartFunction, err = headerBarStruct.InvokerNew("pack_start")
	})
	return err
}

// PackStart is a representation of the C type gtk_header_bar_pack_start.
func (recv *HeaderBar) PackStart(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := headerBarPackStartFunction_Set()
	if err == nil {
		headerBarPackStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetCustomTitleFunction *gi.Function
var headerBarSetCustomTitleFunction_Once sync.Once

func headerBarSetCustomTitleFunction_Set() error {
	var err error
	headerBarSetCustomTitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetCustomTitleFunction, err = headerBarStruct.InvokerNew("set_custom_title")
	})
	return err
}

// SetCustomTitle is a representation of the C type gtk_header_bar_set_custom_title.
func (recv *HeaderBar) SetCustomTitle(titleWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(titleWidget.Native)

	err := headerBarSetCustomTitleFunction_Set()
	if err == nil {
		headerBarSetCustomTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetDecorationLayoutFunction *gi.Function
var headerBarSetDecorationLayoutFunction_Once sync.Once

func headerBarSetDecorationLayoutFunction_Set() error {
	var err error
	headerBarSetDecorationLayoutFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetDecorationLayoutFunction, err = headerBarStruct.InvokerNew("set_decoration_layout")
	})
	return err
}

// SetDecorationLayout is a representation of the C type gtk_header_bar_set_decoration_layout.
func (recv *HeaderBar) SetDecorationLayout(layout string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(layout)

	err := headerBarSetDecorationLayoutFunction_Set()
	if err == nil {
		headerBarSetDecorationLayoutFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetHasSubtitleFunction *gi.Function
var headerBarSetHasSubtitleFunction_Once sync.Once

func headerBarSetHasSubtitleFunction_Set() error {
	var err error
	headerBarSetHasSubtitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetHasSubtitleFunction, err = headerBarStruct.InvokerNew("set_has_subtitle")
	})
	return err
}

// SetHasSubtitle is a representation of the C type gtk_header_bar_set_has_subtitle.
func (recv *HeaderBar) SetHasSubtitle(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := headerBarSetHasSubtitleFunction_Set()
	if err == nil {
		headerBarSetHasSubtitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetShowCloseButtonFunction *gi.Function
var headerBarSetShowCloseButtonFunction_Once sync.Once

func headerBarSetShowCloseButtonFunction_Set() error {
	var err error
	headerBarSetShowCloseButtonFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetShowCloseButtonFunction, err = headerBarStruct.InvokerNew("set_show_close_button")
	})
	return err
}

// SetShowCloseButton is a representation of the C type gtk_header_bar_set_show_close_button.
func (recv *HeaderBar) SetShowCloseButton(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := headerBarSetShowCloseButtonFunction_Set()
	if err == nil {
		headerBarSetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetSubtitleFunction *gi.Function
var headerBarSetSubtitleFunction_Once sync.Once

func headerBarSetSubtitleFunction_Set() error {
	var err error
	headerBarSetSubtitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetSubtitleFunction, err = headerBarStruct.InvokerNew("set_subtitle")
	})
	return err
}

// SetSubtitle is a representation of the C type gtk_header_bar_set_subtitle.
func (recv *HeaderBar) SetSubtitle(subtitle string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(subtitle)

	err := headerBarSetSubtitleFunction_Set()
	if err == nil {
		headerBarSetSubtitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarSetTitleFunction *gi.Function
var headerBarSetTitleFunction_Once sync.Once

func headerBarSetTitleFunction_Set() error {
	var err error
	headerBarSetTitleFunction_Once.Do(func() {
		err = headerBarStruct_Set()
		if err != nil {
			return
		}
		headerBarSetTitleFunction, err = headerBarStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_header_bar_set_title.
func (recv *HeaderBar) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := headerBarSetTitleFunction_Set()
	if err == nil {
		headerBarSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var headerBarAccessibleStruct *gi.Struct
var headerBarAccessibleStruct_Once sync.Once

func headerBarAccessibleStruct_Set() error {
	var err error
	headerBarAccessibleStruct_Once.Do(func() {
		headerBarAccessibleStruct, err = gi.StructNew("Gtk", "HeaderBarAccessible")
	})
	return err
}

type HeaderBarAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *HeaderBarAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(headerBarAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *HeaderBarAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(headerBarAccessibleStruct, recv.Native, "parent", argValue)
}

// HeaderBarAccessibleStruct creates an uninitialised HeaderBarAccessible.
func HeaderBarAccessibleStruct() *HeaderBarAccessible {
	err := headerBarAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &HeaderBarAccessible{}
	structGo.Native = headerBarAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeHeaderBarAccessible)
	return structGo
}
func finalizeHeaderBarAccessible(obj *HeaderBarAccessible) {
	headerBarAccessibleStruct.Free(obj.Native)
}

var iMContextStruct *gi.Struct
var iMContextStruct_Once sync.Once

func iMContextStruct_Set() error {
	var err error
	iMContextStruct_Once.Do(func() {
		iMContextStruct, err = gi.StructNew("Gtk", "IMContext")
	})
	return err
}

type IMContext struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var iMContextDeleteSurroundingFunction *gi.Function
var iMContextDeleteSurroundingFunction_Once sync.Once

func iMContextDeleteSurroundingFunction_Set() error {
	var err error
	iMContextDeleteSurroundingFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextDeleteSurroundingFunction, err = iMContextStruct.InvokerNew("delete_surrounding")
	})
	return err
}

// DeleteSurrounding is a representation of the C type gtk_im_context_delete_surrounding.
func (recv *IMContext) DeleteSurrounding(offset int32, nChars int32) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(offset)
	inArgs[2].SetInt32(nChars)

	var ret gi.Argument

	err := iMContextDeleteSurroundingFunction_Set()
	if err == nil {
		ret = iMContextDeleteSurroundingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_im_context_filter_keypress' : parameter 'event' of type 'Gdk.EventKey' not supported

var iMContextFocusInFunction *gi.Function
var iMContextFocusInFunction_Once sync.Once

func iMContextFocusInFunction_Set() error {
	var err error
	iMContextFocusInFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextFocusInFunction, err = iMContextStruct.InvokerNew("focus_in")
	})
	return err
}

// FocusIn is a representation of the C type gtk_im_context_focus_in.
func (recv *IMContext) FocusIn() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iMContextFocusInFunction_Set()
	if err == nil {
		iMContextFocusInFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iMContextFocusOutFunction *gi.Function
var iMContextFocusOutFunction_Once sync.Once

func iMContextFocusOutFunction_Set() error {
	var err error
	iMContextFocusOutFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextFocusOutFunction, err = iMContextStruct.InvokerNew("focus_out")
	})
	return err
}

// FocusOut is a representation of the C type gtk_im_context_focus_out.
func (recv *IMContext) FocusOut() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iMContextFocusOutFunction_Set()
	if err == nil {
		iMContextFocusOutFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_im_context_get_preedit_string' : parameter 'attrs' of type 'Pango.AttrList' not supported

var iMContextGetSurroundingFunction *gi.Function
var iMContextGetSurroundingFunction_Once sync.Once

func iMContextGetSurroundingFunction_Set() error {
	var err error
	iMContextGetSurroundingFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextGetSurroundingFunction, err = iMContextStruct.InvokerNew("get_surrounding")
	})
	return err
}

// GetSurrounding is a representation of the C type gtk_im_context_get_surrounding.
func (recv *IMContext) GetSurrounding() (bool, string, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := iMContextGetSurroundingFunction_Set()
	if err == nil {
		ret = iMContextGetSurroundingFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].String(true)
	out1 := outArgs[1].Int32()

	return retGo, out0, out1
}

var iMContextResetFunction *gi.Function
var iMContextResetFunction_Once sync.Once

func iMContextResetFunction_Set() error {
	var err error
	iMContextResetFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextResetFunction, err = iMContextStruct.InvokerNew("reset")
	})
	return err
}

// Reset is a representation of the C type gtk_im_context_reset.
func (recv *IMContext) Reset() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iMContextResetFunction_Set()
	if err == nil {
		iMContextResetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_im_context_set_client_window' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_im_context_set_cursor_location' : parameter 'area' of type 'Gdk.Rectangle' not supported

var iMContextSetSurroundingFunction *gi.Function
var iMContextSetSurroundingFunction_Once sync.Once

func iMContextSetSurroundingFunction_Set() error {
	var err error
	iMContextSetSurroundingFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextSetSurroundingFunction, err = iMContextStruct.InvokerNew("set_surrounding")
	})
	return err
}

// SetSurrounding is a representation of the C type gtk_im_context_set_surrounding.
func (recv *IMContext) SetSurrounding(text string, len int32, cursorIndex int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)
	inArgs[2].SetInt32(len)
	inArgs[3].SetInt32(cursorIndex)

	err := iMContextSetSurroundingFunction_Set()
	if err == nil {
		iMContextSetSurroundingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iMContextSetUsePreeditFunction *gi.Function
var iMContextSetUsePreeditFunction_Once sync.Once

func iMContextSetUsePreeditFunction_Set() error {
	var err error
	iMContextSetUsePreeditFunction_Once.Do(func() {
		err = iMContextStruct_Set()
		if err != nil {
			return
		}
		iMContextSetUsePreeditFunction, err = iMContextStruct.InvokerNew("set_use_preedit")
	})
	return err
}

// SetUsePreedit is a representation of the C type gtk_im_context_set_use_preedit.
func (recv *IMContext) SetUsePreedit(usePreedit bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(usePreedit)

	err := iMContextSetUsePreeditFunction_Set()
	if err == nil {
		iMContextSetUsePreeditFunction.Invoke(inArgs[:], nil)
	}

	return
}

// IMContextStruct creates an uninitialised IMContext.
func IMContextStruct() *IMContext {
	err := iMContextStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &IMContext{}
	structGo.Native = iMContextStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeIMContext)
	return structGo
}
func finalizeIMContext(obj *IMContext) {
	iMContextStruct.Free(obj.Native)
}

var iMContextSimpleStruct *gi.Struct
var iMContextSimpleStruct_Once sync.Once

func iMContextSimpleStruct_Set() error {
	var err error
	iMContextSimpleStruct_Once.Do(func() {
		iMContextSimpleStruct, err = gi.StructNew("Gtk", "IMContextSimple")
	})
	return err
}

type IMContextSimple struct {
	IMContext
}

// FieldObject returns the C field 'object'.
func (recv *IMContextSimple) FieldObject() *IMContext {
	argValue := gi.FieldGet(iMContextSimpleStruct, recv.Native, "object")
	value := &IMContext{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldObject sets the value of the C field 'object'.
func (recv *IMContextSimple) SetFieldObject(value *IMContext) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(iMContextSimpleStruct, recv.Native, "object", argValue)
}

var iMContextSimpleNewFunction *gi.Function
var iMContextSimpleNewFunction_Once sync.Once

func iMContextSimpleNewFunction_Set() error {
	var err error
	iMContextSimpleNewFunction_Once.Do(func() {
		err = iMContextSimpleStruct_Set()
		if err != nil {
			return
		}
		iMContextSimpleNewFunction, err = iMContextSimpleStruct.InvokerNew("new")
	})
	return err
}

// IMContextSimpleNew is a representation of the C type gtk_im_context_simple_new.
func IMContextSimpleNew() *IMContextSimple {

	var ret gi.Argument

	err := iMContextSimpleNewFunction_Set()
	if err == nil {
		ret = iMContextSimpleNewFunction.Invoke(nil, nil)
	}

	retGo := &IMContextSimple{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iMContextSimpleAddComposeFileFunction *gi.Function
var iMContextSimpleAddComposeFileFunction_Once sync.Once

func iMContextSimpleAddComposeFileFunction_Set() error {
	var err error
	iMContextSimpleAddComposeFileFunction_Once.Do(func() {
		err = iMContextSimpleStruct_Set()
		if err != nil {
			return
		}
		iMContextSimpleAddComposeFileFunction, err = iMContextSimpleStruct.InvokerNew("add_compose_file")
	})
	return err
}

// AddComposeFile is a representation of the C type gtk_im_context_simple_add_compose_file.
func (recv *IMContextSimple) AddComposeFile(composeFile string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(composeFile)

	err := iMContextSimpleAddComposeFileFunction_Set()
	if err == nil {
		iMContextSimpleAddComposeFileFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_im_context_simple_add_table' : parameter 'data' of type 'nil' not supported

var iMMulticontextStruct *gi.Struct
var iMMulticontextStruct_Once sync.Once

func iMMulticontextStruct_Set() error {
	var err error
	iMMulticontextStruct_Once.Do(func() {
		iMMulticontextStruct, err = gi.StructNew("Gtk", "IMMulticontext")
	})
	return err
}

type IMMulticontext struct {
	IMContext
}

// FieldObject returns the C field 'object'.
func (recv *IMMulticontext) FieldObject() *IMContext {
	argValue := gi.FieldGet(iMMulticontextStruct, recv.Native, "object")
	value := &IMContext{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldObject sets the value of the C field 'object'.
func (recv *IMMulticontext) SetFieldObject(value *IMContext) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(iMMulticontextStruct, recv.Native, "object", argValue)
}

var iMMulticontextNewFunction *gi.Function
var iMMulticontextNewFunction_Once sync.Once

func iMMulticontextNewFunction_Set() error {
	var err error
	iMMulticontextNewFunction_Once.Do(func() {
		err = iMMulticontextStruct_Set()
		if err != nil {
			return
		}
		iMMulticontextNewFunction, err = iMMulticontextStruct.InvokerNew("new")
	})
	return err
}

// IMMulticontextNew is a representation of the C type gtk_im_multicontext_new.
func IMMulticontextNew() *IMMulticontext {

	var ret gi.Argument

	err := iMMulticontextNewFunction_Set()
	if err == nil {
		ret = iMMulticontextNewFunction.Invoke(nil, nil)
	}

	retGo := &IMMulticontext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iMMulticontextAppendMenuitemsFunction *gi.Function
var iMMulticontextAppendMenuitemsFunction_Once sync.Once

func iMMulticontextAppendMenuitemsFunction_Set() error {
	var err error
	iMMulticontextAppendMenuitemsFunction_Once.Do(func() {
		err = iMMulticontextStruct_Set()
		if err != nil {
			return
		}
		iMMulticontextAppendMenuitemsFunction, err = iMMulticontextStruct.InvokerNew("append_menuitems")
	})
	return err
}

// AppendMenuitems is a representation of the C type gtk_im_multicontext_append_menuitems.
func (recv *IMMulticontext) AppendMenuitems(menushell *MenuShell) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(menushell.Native)

	err := iMMulticontextAppendMenuitemsFunction_Set()
	if err == nil {
		iMMulticontextAppendMenuitemsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iMMulticontextGetContextIdFunction *gi.Function
var iMMulticontextGetContextIdFunction_Once sync.Once

func iMMulticontextGetContextIdFunction_Set() error {
	var err error
	iMMulticontextGetContextIdFunction_Once.Do(func() {
		err = iMMulticontextStruct_Set()
		if err != nil {
			return
		}
		iMMulticontextGetContextIdFunction, err = iMMulticontextStruct.InvokerNew("get_context_id")
	})
	return err
}

// GetContextId is a representation of the C type gtk_im_multicontext_get_context_id.
func (recv *IMMulticontext) GetContextId() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iMMulticontextGetContextIdFunction_Set()
	if err == nil {
		ret = iMMulticontextGetContextIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var iMMulticontextSetContextIdFunction *gi.Function
var iMMulticontextSetContextIdFunction_Once sync.Once

func iMMulticontextSetContextIdFunction_Set() error {
	var err error
	iMMulticontextSetContextIdFunction_Once.Do(func() {
		err = iMMulticontextStruct_Set()
		if err != nil {
			return
		}
		iMMulticontextSetContextIdFunction, err = iMMulticontextStruct.InvokerNew("set_context_id")
	})
	return err
}

// SetContextId is a representation of the C type gtk_im_multicontext_set_context_id.
func (recv *IMMulticontext) SetContextId(contextId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(contextId)

	err := iMMulticontextSetContextIdFunction_Set()
	if err == nil {
		iMMulticontextSetContextIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconFactoryStruct *gi.Struct
var iconFactoryStruct_Once sync.Once

func iconFactoryStruct_Set() error {
	var err error
	iconFactoryStruct_Once.Do(func() {
		iconFactoryStruct, err = gi.StructNew("Gtk", "IconFactory")
	})
	return err
}

type IconFactory struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var iconFactoryNewFunction *gi.Function
var iconFactoryNewFunction_Once sync.Once

func iconFactoryNewFunction_Set() error {
	var err error
	iconFactoryNewFunction_Once.Do(func() {
		err = iconFactoryStruct_Set()
		if err != nil {
			return
		}
		iconFactoryNewFunction, err = iconFactoryStruct.InvokerNew("new")
	})
	return err
}

// IconFactoryNew is a representation of the C type gtk_icon_factory_new.
func IconFactoryNew() *IconFactory {

	var ret gi.Argument

	err := iconFactoryNewFunction_Set()
	if err == nil {
		ret = iconFactoryNewFunction.Invoke(nil, nil)
	}

	retGo := &IconFactory{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconFactoryAddFunction *gi.Function
var iconFactoryAddFunction_Once sync.Once

func iconFactoryAddFunction_Set() error {
	var err error
	iconFactoryAddFunction_Once.Do(func() {
		err = iconFactoryStruct_Set()
		if err != nil {
			return
		}
		iconFactoryAddFunction, err = iconFactoryStruct.InvokerNew("add")
	})
	return err
}

// Add is a representation of the C type gtk_icon_factory_add.
func (recv *IconFactory) Add(stockId string, iconSet *IconSet) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)
	inArgs[2].SetPointer(iconSet.Native)

	err := iconFactoryAddFunction_Set()
	if err == nil {
		iconFactoryAddFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconFactoryAddDefaultFunction *gi.Function
var iconFactoryAddDefaultFunction_Once sync.Once

func iconFactoryAddDefaultFunction_Set() error {
	var err error
	iconFactoryAddDefaultFunction_Once.Do(func() {
		err = iconFactoryStruct_Set()
		if err != nil {
			return
		}
		iconFactoryAddDefaultFunction, err = iconFactoryStruct.InvokerNew("add_default")
	})
	return err
}

// AddDefault is a representation of the C type gtk_icon_factory_add_default.
func (recv *IconFactory) AddDefault() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconFactoryAddDefaultFunction_Set()
	if err == nil {
		iconFactoryAddDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconFactoryLookupFunction *gi.Function
var iconFactoryLookupFunction_Once sync.Once

func iconFactoryLookupFunction_Set() error {
	var err error
	iconFactoryLookupFunction_Once.Do(func() {
		err = iconFactoryStruct_Set()
		if err != nil {
			return
		}
		iconFactoryLookupFunction, err = iconFactoryStruct.InvokerNew("lookup")
	})
	return err
}

// Lookup is a representation of the C type gtk_icon_factory_lookup.
func (recv *IconFactory) Lookup(stockId string) *IconSet {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	var ret gi.Argument

	err := iconFactoryLookupFunction_Set()
	if err == nil {
		ret = iconFactoryLookupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IconSet{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconFactoryRemoveDefaultFunction *gi.Function
var iconFactoryRemoveDefaultFunction_Once sync.Once

func iconFactoryRemoveDefaultFunction_Set() error {
	var err error
	iconFactoryRemoveDefaultFunction_Once.Do(func() {
		err = iconFactoryStruct_Set()
		if err != nil {
			return
		}
		iconFactoryRemoveDefaultFunction, err = iconFactoryStruct.InvokerNew("remove_default")
	})
	return err
}

// RemoveDefault is a representation of the C type gtk_icon_factory_remove_default.
func (recv *IconFactory) RemoveDefault() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconFactoryRemoveDefaultFunction_Set()
	if err == nil {
		iconFactoryRemoveDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconInfoStruct *gi.Struct
var iconInfoStruct_Once sync.Once

func iconInfoStruct_Set() error {
	var err error
	iconInfoStruct_Once.Do(func() {
		iconInfoStruct, err = gi.StructNew("Gtk", "IconInfo")
	})
	return err
}

type IconInfo struct {
	gobject.Object
}

// UNSUPPORTED : C value 'gtk_icon_info_new_for_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var iconInfoCopyFunction *gi.Function
var iconInfoCopyFunction_Once sync.Once

func iconInfoCopyFunction_Set() error {
	var err error
	iconInfoCopyFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoCopyFunction, err = iconInfoStruct.InvokerNew("copy")
	})
	return err
}

// Copy is a representation of the C type gtk_icon_info_copy.
func (recv *IconInfo) Copy() *IconInfo {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoCopyFunction_Set()
	if err == nil {
		ret = iconInfoCopyFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IconInfo{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconInfoFreeFunction *gi.Function
var iconInfoFreeFunction_Once sync.Once

func iconInfoFreeFunction_Set() error {
	var err error
	iconInfoFreeFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoFreeFunction, err = iconInfoStruct.InvokerNew("free")
	})
	return err
}

// Free is a representation of the C type gtk_icon_info_free.
func (recv *IconInfo) Free() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconInfoFreeFunction_Set()
	if err == nil {
		iconInfoFreeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_info_get_attach_points' : parameter 'points' of type 'nil' not supported

var iconInfoGetBaseScaleFunction *gi.Function
var iconInfoGetBaseScaleFunction_Once sync.Once

func iconInfoGetBaseScaleFunction_Set() error {
	var err error
	iconInfoGetBaseScaleFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoGetBaseScaleFunction, err = iconInfoStruct.InvokerNew("get_base_scale")
	})
	return err
}

// GetBaseScale is a representation of the C type gtk_icon_info_get_base_scale.
func (recv *IconInfo) GetBaseScale() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoGetBaseScaleFunction_Set()
	if err == nil {
		ret = iconInfoGetBaseScaleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconInfoGetBaseSizeFunction *gi.Function
var iconInfoGetBaseSizeFunction_Once sync.Once

func iconInfoGetBaseSizeFunction_Set() error {
	var err error
	iconInfoGetBaseSizeFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoGetBaseSizeFunction, err = iconInfoStruct.InvokerNew("get_base_size")
	})
	return err
}

// GetBaseSize is a representation of the C type gtk_icon_info_get_base_size.
func (recv *IconInfo) GetBaseSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoGetBaseSizeFunction_Set()
	if err == nil {
		ret = iconInfoGetBaseSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_info_get_builtin_pixbuf' : return type 'GdkPixbuf.Pixbuf' not supported

var iconInfoGetDisplayNameFunction *gi.Function
var iconInfoGetDisplayNameFunction_Once sync.Once

func iconInfoGetDisplayNameFunction_Set() error {
	var err error
	iconInfoGetDisplayNameFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoGetDisplayNameFunction, err = iconInfoStruct.InvokerNew("get_display_name")
	})
	return err
}

// GetDisplayName is a representation of the C type gtk_icon_info_get_display_name.
func (recv *IconInfo) GetDisplayName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoGetDisplayNameFunction_Set()
	if err == nil {
		ret = iconInfoGetDisplayNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_info_get_embedded_rect' : parameter 'rectangle' of type 'Gdk.Rectangle' not supported

var iconInfoGetFilenameFunction *gi.Function
var iconInfoGetFilenameFunction_Once sync.Once

func iconInfoGetFilenameFunction_Set() error {
	var err error
	iconInfoGetFilenameFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoGetFilenameFunction, err = iconInfoStruct.InvokerNew("get_filename")
	})
	return err
}

// GetFilename is a representation of the C type gtk_icon_info_get_filename.
func (recv *IconInfo) GetFilename() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoGetFilenameFunction_Set()
	if err == nil {
		ret = iconInfoGetFilenameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var iconInfoIsSymbolicFunction *gi.Function
var iconInfoIsSymbolicFunction_Once sync.Once

func iconInfoIsSymbolicFunction_Set() error {
	var err error
	iconInfoIsSymbolicFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoIsSymbolicFunction, err = iconInfoStruct.InvokerNew("is_symbolic")
	})
	return err
}

// IsSymbolic is a representation of the C type gtk_icon_info_is_symbolic.
func (recv *IconInfo) IsSymbolic() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconInfoIsSymbolicFunction_Set()
	if err == nil {
		ret = iconInfoIsSymbolicFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_info_load_icon' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_icon_async' : parameter 'cancellable' of type 'Gio.Cancellable' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_icon_finish' : parameter 'res' of type 'Gio.AsyncResult' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_surface' : parameter 'for_window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic' : parameter 'fg' of type 'Gdk.RGBA' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_async' : parameter 'fg' of type 'Gdk.RGBA' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_finish' : parameter 'res' of type 'Gio.AsyncResult' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_for_context' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_for_context_async' : parameter 'cancellable' of type 'Gio.Cancellable' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_for_context_finish' : parameter 'res' of type 'Gio.AsyncResult' not supported

// UNSUPPORTED : C value 'gtk_icon_info_load_symbolic_for_style' : parameter 'state' of type 'StateType' not supported

var iconInfoSetRawCoordinatesFunction *gi.Function
var iconInfoSetRawCoordinatesFunction_Once sync.Once

func iconInfoSetRawCoordinatesFunction_Set() error {
	var err error
	iconInfoSetRawCoordinatesFunction_Once.Do(func() {
		err = iconInfoStruct_Set()
		if err != nil {
			return
		}
		iconInfoSetRawCoordinatesFunction, err = iconInfoStruct.InvokerNew("set_raw_coordinates")
	})
	return err
}

// SetRawCoordinates is a representation of the C type gtk_icon_info_set_raw_coordinates.
func (recv *IconInfo) SetRawCoordinates(rawCoordinates bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(rawCoordinates)

	err := iconInfoSetRawCoordinatesFunction_Set()
	if err == nil {
		iconInfoSetRawCoordinatesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconThemeStruct *gi.Struct
var iconThemeStruct_Once sync.Once

func iconThemeStruct_Set() error {
	var err error
	iconThemeStruct_Once.Do(func() {
		iconThemeStruct, err = gi.StructNew("Gtk", "IconTheme")
	})
	return err
}

type IconTheme struct {
	gobject.Object
}

var iconThemeNewFunction *gi.Function
var iconThemeNewFunction_Once sync.Once

func iconThemeNewFunction_Set() error {
	var err error
	iconThemeNewFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeNewFunction, err = iconThemeStruct.InvokerNew("new")
	})
	return err
}

// IconThemeNew is a representation of the C type gtk_icon_theme_new.
func IconThemeNew() *IconTheme {

	var ret gi.Argument

	err := iconThemeNewFunction_Set()
	if err == nil {
		ret = iconThemeNewFunction.Invoke(nil, nil)
	}

	retGo := &IconTheme{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconThemeAddResourcePathFunction *gi.Function
var iconThemeAddResourcePathFunction_Once sync.Once

func iconThemeAddResourcePathFunction_Set() error {
	var err error
	iconThemeAddResourcePathFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeAddResourcePathFunction, err = iconThemeStruct.InvokerNew("add_resource_path")
	})
	return err
}

// AddResourcePath is a representation of the C type gtk_icon_theme_add_resource_path.
func (recv *IconTheme) AddResourcePath(path string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	err := iconThemeAddResourcePathFunction_Set()
	if err == nil {
		iconThemeAddResourcePathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconThemeAppendSearchPathFunction *gi.Function
var iconThemeAppendSearchPathFunction_Once sync.Once

func iconThemeAppendSearchPathFunction_Set() error {
	var err error
	iconThemeAppendSearchPathFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeAppendSearchPathFunction, err = iconThemeStruct.InvokerNew("append_search_path")
	})
	return err
}

// AppendSearchPath is a representation of the C type gtk_icon_theme_append_search_path.
func (recv *IconTheme) AppendSearchPath(path string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	err := iconThemeAppendSearchPathFunction_Set()
	if err == nil {
		iconThemeAppendSearchPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_theme_choose_icon' : parameter 'icon_names' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_choose_icon_for_scale' : parameter 'icon_names' of type 'nil' not supported

var iconThemeGetExampleIconNameFunction *gi.Function
var iconThemeGetExampleIconNameFunction_Once sync.Once

func iconThemeGetExampleIconNameFunction_Set() error {
	var err error
	iconThemeGetExampleIconNameFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeGetExampleIconNameFunction, err = iconThemeStruct.InvokerNew("get_example_icon_name")
	})
	return err
}

// GetExampleIconName is a representation of the C type gtk_icon_theme_get_example_icon_name.
func (recv *IconTheme) GetExampleIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconThemeGetExampleIconNameFunction_Set()
	if err == nil {
		ret = iconThemeGetExampleIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var iconThemeGetIconSizesFunction *gi.Function
var iconThemeGetIconSizesFunction_Once sync.Once

func iconThemeGetIconSizesFunction_Set() error {
	var err error
	iconThemeGetIconSizesFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeGetIconSizesFunction, err = iconThemeStruct.InvokerNew("get_icon_sizes")
	})
	return err
}

// GetIconSizes is a representation of the C type gtk_icon_theme_get_icon_sizes.
func (recv *IconTheme) GetIconSizes(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := iconThemeGetIconSizesFunction_Set()
	if err == nil {
		iconThemeGetIconSizesFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_theme_get_search_path' : parameter 'path' of type 'nil' not supported

var iconThemeHasIconFunction *gi.Function
var iconThemeHasIconFunction_Once sync.Once

func iconThemeHasIconFunction_Set() error {
	var err error
	iconThemeHasIconFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeHasIconFunction, err = iconThemeStruct.InvokerNew("has_icon")
	})
	return err
}

// HasIcon is a representation of the C type gtk_icon_theme_has_icon.
func (recv *IconTheme) HasIcon(iconName string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	var ret gi.Argument

	err := iconThemeHasIconFunction_Set()
	if err == nil {
		ret = iconThemeHasIconFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_theme_list_contexts' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_list_icons' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_load_icon' : parameter 'flags' of type 'IconLookupFlags' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_load_icon_for_scale' : parameter 'flags' of type 'IconLookupFlags' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_load_surface' : parameter 'for_window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_lookup_by_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_lookup_by_gicon_for_scale' : parameter 'icon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_lookup_icon' : parameter 'flags' of type 'IconLookupFlags' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_lookup_icon_for_scale' : parameter 'flags' of type 'IconLookupFlags' not supported

var iconThemePrependSearchPathFunction *gi.Function
var iconThemePrependSearchPathFunction_Once sync.Once

func iconThemePrependSearchPathFunction_Set() error {
	var err error
	iconThemePrependSearchPathFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemePrependSearchPathFunction, err = iconThemeStruct.InvokerNew("prepend_search_path")
	})
	return err
}

// PrependSearchPath is a representation of the C type gtk_icon_theme_prepend_search_path.
func (recv *IconTheme) PrependSearchPath(path string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	err := iconThemePrependSearchPathFunction_Set()
	if err == nil {
		iconThemePrependSearchPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconThemeRescanIfNeededFunction *gi.Function
var iconThemeRescanIfNeededFunction_Once sync.Once

func iconThemeRescanIfNeededFunction_Set() error {
	var err error
	iconThemeRescanIfNeededFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeRescanIfNeededFunction, err = iconThemeStruct.InvokerNew("rescan_if_needed")
	})
	return err
}

// RescanIfNeeded is a representation of the C type gtk_icon_theme_rescan_if_needed.
func (recv *IconTheme) RescanIfNeeded() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconThemeRescanIfNeededFunction_Set()
	if err == nil {
		ret = iconThemeRescanIfNeededFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var iconThemeSetCustomThemeFunction *gi.Function
var iconThemeSetCustomThemeFunction_Once sync.Once

func iconThemeSetCustomThemeFunction_Set() error {
	var err error
	iconThemeSetCustomThemeFunction_Once.Do(func() {
		err = iconThemeStruct_Set()
		if err != nil {
			return
		}
		iconThemeSetCustomThemeFunction, err = iconThemeStruct.InvokerNew("set_custom_theme")
	})
	return err
}

// SetCustomTheme is a representation of the C type gtk_icon_theme_set_custom_theme.
func (recv *IconTheme) SetCustomTheme(themeName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(themeName)

	err := iconThemeSetCustomThemeFunction_Set()
	if err == nil {
		iconThemeSetCustomThemeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_theme_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_icon_theme_set_search_path' : parameter 'path' of type 'nil' not supported

var iconViewStruct *gi.Struct
var iconViewStruct_Once sync.Once

func iconViewStruct_Set() error {
	var err error
	iconViewStruct_Once.Do(func() {
		iconViewStruct, err = gi.StructNew("Gtk", "IconView")
	})
	return err
}

type IconView struct {
	Container
}

// FieldParent returns the C field 'parent'.
func (recv *IconView) FieldParent() *Container {
	argValue := gi.FieldGet(iconViewStruct, recv.Native, "parent")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *IconView) SetFieldParent(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(iconViewStruct, recv.Native, "parent", argValue)
}

var iconViewNewFunction *gi.Function
var iconViewNewFunction_Once sync.Once

func iconViewNewFunction_Set() error {
	var err error
	iconViewNewFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewNewFunction, err = iconViewStruct.InvokerNew("new")
	})
	return err
}

// IconViewNew is a representation of the C type gtk_icon_view_new.
func IconViewNew() *IconView {

	var ret gi.Argument

	err := iconViewNewFunction_Set()
	if err == nil {
		ret = iconViewNewFunction.Invoke(nil, nil)
	}

	retGo := &IconView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconViewNewWithAreaFunction *gi.Function
var iconViewNewWithAreaFunction_Once sync.Once

func iconViewNewWithAreaFunction_Set() error {
	var err error
	iconViewNewWithAreaFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewNewWithAreaFunction, err = iconViewStruct.InvokerNew("new_with_area")
	})
	return err
}

// IconViewNewWithArea is a representation of the C type gtk_icon_view_new_with_area.
func IconViewNewWithArea(area *CellArea) *IconView {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(area.Native)

	var ret gi.Argument

	err := iconViewNewWithAreaFunction_Set()
	if err == nil {
		ret = iconViewNewWithAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IconView{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_new_with_model' : parameter 'model' of type 'TreeModel' not supported

var iconViewConvertWidgetToBinWindowCoordsFunction *gi.Function
var iconViewConvertWidgetToBinWindowCoordsFunction_Once sync.Once

func iconViewConvertWidgetToBinWindowCoordsFunction_Set() error {
	var err error
	iconViewConvertWidgetToBinWindowCoordsFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewConvertWidgetToBinWindowCoordsFunction, err = iconViewStruct.InvokerNew("convert_widget_to_bin_window_coords")
	})
	return err
}

// ConvertWidgetToBinWindowCoords is a representation of the C type gtk_icon_view_convert_widget_to_bin_window_coords.
func (recv *IconView) ConvertWidgetToBinWindowCoords(wx int32, wy int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(wx)
	inArgs[2].SetInt32(wy)

	var outArgs [2]gi.Argument

	err := iconViewConvertWidgetToBinWindowCoordsFunction_Set()
	if err == nil {
		iconViewConvertWidgetToBinWindowCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_icon_view_create_drag_icon' : return type 'cairo.Surface' not supported

// UNSUPPORTED : C value 'gtk_icon_view_enable_model_drag_dest' : parameter 'targets' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_icon_view_enable_model_drag_source' : parameter 'start_button_mask' of type 'Gdk.ModifierType' not supported

var iconViewGetActivateOnSingleClickFunction *gi.Function
var iconViewGetActivateOnSingleClickFunction_Once sync.Once

func iconViewGetActivateOnSingleClickFunction_Set() error {
	var err error
	iconViewGetActivateOnSingleClickFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetActivateOnSingleClickFunction, err = iconViewStruct.InvokerNew("get_activate_on_single_click")
	})
	return err
}

// GetActivateOnSingleClick is a representation of the C type gtk_icon_view_get_activate_on_single_click.
func (recv *IconView) GetActivateOnSingleClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetActivateOnSingleClickFunction_Set()
	if err == nil {
		ret = iconViewGetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_get_cell_rect' : parameter 'rect' of type 'Gdk.Rectangle' not supported

var iconViewGetColumnSpacingFunction *gi.Function
var iconViewGetColumnSpacingFunction_Once sync.Once

func iconViewGetColumnSpacingFunction_Set() error {
	var err error
	iconViewGetColumnSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetColumnSpacingFunction, err = iconViewStruct.InvokerNew("get_column_spacing")
	})
	return err
}

// GetColumnSpacing is a representation of the C type gtk_icon_view_get_column_spacing.
func (recv *IconView) GetColumnSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetColumnSpacingFunction_Set()
	if err == nil {
		ret = iconViewGetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetColumnsFunction *gi.Function
var iconViewGetColumnsFunction_Once sync.Once

func iconViewGetColumnsFunction_Set() error {
	var err error
	iconViewGetColumnsFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetColumnsFunction, err = iconViewStruct.InvokerNew("get_columns")
	})
	return err
}

// GetColumns is a representation of the C type gtk_icon_view_get_columns.
func (recv *IconView) GetColumns() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetColumnsFunction_Set()
	if err == nil {
		ret = iconViewGetColumnsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetCursorFunction *gi.Function
var iconViewGetCursorFunction_Once sync.Once

func iconViewGetCursorFunction_Set() error {
	var err error
	iconViewGetCursorFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetCursorFunction, err = iconViewStruct.InvokerNew("get_cursor")
	})
	return err
}

// GetCursor is a representation of the C type gtk_icon_view_get_cursor.
func (recv *IconView) GetCursor() (bool, *TreePath, *CellRenderer) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := iconViewGetCursorFunction_Set()
	if err == nil {
		ret = iconViewGetCursorFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &CellRenderer{}
	out1.Native = outArgs[1].Pointer()

	return retGo, out0, out1
}

// UNSUPPORTED : C value 'gtk_icon_view_get_dest_item_at_pos' : parameter 'pos' of type 'IconViewDropPosition' not supported

// UNSUPPORTED : C value 'gtk_icon_view_get_drag_dest_item' : parameter 'pos' of type 'IconViewDropPosition' not supported

var iconViewGetItemAtPosFunction *gi.Function
var iconViewGetItemAtPosFunction_Once sync.Once

func iconViewGetItemAtPosFunction_Set() error {
	var err error
	iconViewGetItemAtPosFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetItemAtPosFunction, err = iconViewStruct.InvokerNew("get_item_at_pos")
	})
	return err
}

// GetItemAtPos is a representation of the C type gtk_icon_view_get_item_at_pos.
func (recv *IconView) GetItemAtPos(x int32, y int32) (bool, *TreePath, *CellRenderer) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := iconViewGetItemAtPosFunction_Set()
	if err == nil {
		ret = iconViewGetItemAtPosFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &CellRenderer{}
	out1.Native = outArgs[1].Pointer()

	return retGo, out0, out1
}

var iconViewGetItemColumnFunction *gi.Function
var iconViewGetItemColumnFunction_Once sync.Once

func iconViewGetItemColumnFunction_Set() error {
	var err error
	iconViewGetItemColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetItemColumnFunction, err = iconViewStruct.InvokerNew("get_item_column")
	})
	return err
}

// GetItemColumn is a representation of the C type gtk_icon_view_get_item_column.
func (recv *IconView) GetItemColumn(path *TreePath) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := iconViewGetItemColumnFunction_Set()
	if err == nil {
		ret = iconViewGetItemColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_get_item_orientation' : return type 'Orientation' not supported

var iconViewGetItemPaddingFunction *gi.Function
var iconViewGetItemPaddingFunction_Once sync.Once

func iconViewGetItemPaddingFunction_Set() error {
	var err error
	iconViewGetItemPaddingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetItemPaddingFunction, err = iconViewStruct.InvokerNew("get_item_padding")
	})
	return err
}

// GetItemPadding is a representation of the C type gtk_icon_view_get_item_padding.
func (recv *IconView) GetItemPadding() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetItemPaddingFunction_Set()
	if err == nil {
		ret = iconViewGetItemPaddingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetItemRowFunction *gi.Function
var iconViewGetItemRowFunction_Once sync.Once

func iconViewGetItemRowFunction_Set() error {
	var err error
	iconViewGetItemRowFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetItemRowFunction, err = iconViewStruct.InvokerNew("get_item_row")
	})
	return err
}

// GetItemRow is a representation of the C type gtk_icon_view_get_item_row.
func (recv *IconView) GetItemRow(path *TreePath) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := iconViewGetItemRowFunction_Set()
	if err == nil {
		ret = iconViewGetItemRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetItemWidthFunction *gi.Function
var iconViewGetItemWidthFunction_Once sync.Once

func iconViewGetItemWidthFunction_Set() error {
	var err error
	iconViewGetItemWidthFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetItemWidthFunction, err = iconViewStruct.InvokerNew("get_item_width")
	})
	return err
}

// GetItemWidth is a representation of the C type gtk_icon_view_get_item_width.
func (recv *IconView) GetItemWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetItemWidthFunction_Set()
	if err == nil {
		ret = iconViewGetItemWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetMarginFunction *gi.Function
var iconViewGetMarginFunction_Once sync.Once

func iconViewGetMarginFunction_Set() error {
	var err error
	iconViewGetMarginFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetMarginFunction, err = iconViewStruct.InvokerNew("get_margin")
	})
	return err
}

// GetMargin is a representation of the C type gtk_icon_view_get_margin.
func (recv *IconView) GetMargin() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetMarginFunction_Set()
	if err == nil {
		ret = iconViewGetMarginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetMarkupColumnFunction *gi.Function
var iconViewGetMarkupColumnFunction_Once sync.Once

func iconViewGetMarkupColumnFunction_Set() error {
	var err error
	iconViewGetMarkupColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetMarkupColumnFunction, err = iconViewStruct.InvokerNew("get_markup_column")
	})
	return err
}

// GetMarkupColumn is a representation of the C type gtk_icon_view_get_markup_column.
func (recv *IconView) GetMarkupColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetMarkupColumnFunction_Set()
	if err == nil {
		ret = iconViewGetMarkupColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_get_model' : return type 'TreeModel' not supported

var iconViewGetPathAtPosFunction *gi.Function
var iconViewGetPathAtPosFunction_Once sync.Once

func iconViewGetPathAtPosFunction_Set() error {
	var err error
	iconViewGetPathAtPosFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetPathAtPosFunction, err = iconViewStruct.InvokerNew("get_path_at_pos")
	})
	return err
}

// GetPathAtPos is a representation of the C type gtk_icon_view_get_path_at_pos.
func (recv *IconView) GetPathAtPos(x int32, y int32) *TreePath {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := iconViewGetPathAtPosFunction_Set()
	if err == nil {
		ret = iconViewGetPathAtPosFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

var iconViewGetPixbufColumnFunction *gi.Function
var iconViewGetPixbufColumnFunction_Once sync.Once

func iconViewGetPixbufColumnFunction_Set() error {
	var err error
	iconViewGetPixbufColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetPixbufColumnFunction, err = iconViewStruct.InvokerNew("get_pixbuf_column")
	})
	return err
}

// GetPixbufColumn is a representation of the C type gtk_icon_view_get_pixbuf_column.
func (recv *IconView) GetPixbufColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetPixbufColumnFunction_Set()
	if err == nil {
		ret = iconViewGetPixbufColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetReorderableFunction *gi.Function
var iconViewGetReorderableFunction_Once sync.Once

func iconViewGetReorderableFunction_Set() error {
	var err error
	iconViewGetReorderableFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetReorderableFunction, err = iconViewStruct.InvokerNew("get_reorderable")
	})
	return err
}

// GetReorderable is a representation of the C type gtk_icon_view_get_reorderable.
func (recv *IconView) GetReorderable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetReorderableFunction_Set()
	if err == nil {
		ret = iconViewGetReorderableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var iconViewGetRowSpacingFunction *gi.Function
var iconViewGetRowSpacingFunction_Once sync.Once

func iconViewGetRowSpacingFunction_Set() error {
	var err error
	iconViewGetRowSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetRowSpacingFunction, err = iconViewStruct.InvokerNew("get_row_spacing")
	})
	return err
}

// GetRowSpacing is a representation of the C type gtk_icon_view_get_row_spacing.
func (recv *IconView) GetRowSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetRowSpacingFunction_Set()
	if err == nil {
		ret = iconViewGetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_get_selected_items' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_icon_view_get_selection_mode' : return type 'SelectionMode' not supported

var iconViewGetSpacingFunction *gi.Function
var iconViewGetSpacingFunction_Once sync.Once

func iconViewGetSpacingFunction_Set() error {
	var err error
	iconViewGetSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetSpacingFunction, err = iconViewStruct.InvokerNew("get_spacing")
	})
	return err
}

// GetSpacing is a representation of the C type gtk_icon_view_get_spacing.
func (recv *IconView) GetSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetSpacingFunction_Set()
	if err == nil {
		ret = iconViewGetSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetTextColumnFunction *gi.Function
var iconViewGetTextColumnFunction_Once sync.Once

func iconViewGetTextColumnFunction_Set() error {
	var err error
	iconViewGetTextColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetTextColumnFunction, err = iconViewStruct.InvokerNew("get_text_column")
	})
	return err
}

// GetTextColumn is a representation of the C type gtk_icon_view_get_text_column.
func (recv *IconView) GetTextColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetTextColumnFunction_Set()
	if err == nil {
		ret = iconViewGetTextColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var iconViewGetTooltipColumnFunction *gi.Function
var iconViewGetTooltipColumnFunction_Once sync.Once

func iconViewGetTooltipColumnFunction_Set() error {
	var err error
	iconViewGetTooltipColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetTooltipColumnFunction, err = iconViewStruct.InvokerNew("get_tooltip_column")
	})
	return err
}

// GetTooltipColumn is a representation of the C type gtk_icon_view_get_tooltip_column.
func (recv *IconView) GetTooltipColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := iconViewGetTooltipColumnFunction_Set()
	if err == nil {
		ret = iconViewGetTooltipColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_icon_view_get_tooltip_context' : parameter 'model' of type 'TreeModel' not supported

var iconViewGetVisibleRangeFunction *gi.Function
var iconViewGetVisibleRangeFunction_Once sync.Once

func iconViewGetVisibleRangeFunction_Set() error {
	var err error
	iconViewGetVisibleRangeFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewGetVisibleRangeFunction, err = iconViewStruct.InvokerNew("get_visible_range")
	})
	return err
}

// GetVisibleRange is a representation of the C type gtk_icon_view_get_visible_range.
func (recv *IconView) GetVisibleRange() (bool, *TreePath, *TreePath) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := iconViewGetVisibleRangeFunction_Set()
	if err == nil {
		ret = iconViewGetVisibleRangeFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TreePath{}
	out1.Native = outArgs[1].Pointer()

	return retGo, out0, out1
}

var iconViewItemActivatedFunction *gi.Function
var iconViewItemActivatedFunction_Once sync.Once

func iconViewItemActivatedFunction_Set() error {
	var err error
	iconViewItemActivatedFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewItemActivatedFunction, err = iconViewStruct.InvokerNew("item_activated")
	})
	return err
}

// ItemActivated is a representation of the C type gtk_icon_view_item_activated.
func (recv *IconView) ItemActivated(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := iconViewItemActivatedFunction_Set()
	if err == nil {
		iconViewItemActivatedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewPathIsSelectedFunction *gi.Function
var iconViewPathIsSelectedFunction_Once sync.Once

func iconViewPathIsSelectedFunction_Set() error {
	var err error
	iconViewPathIsSelectedFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewPathIsSelectedFunction, err = iconViewStruct.InvokerNew("path_is_selected")
	})
	return err
}

// PathIsSelected is a representation of the C type gtk_icon_view_path_is_selected.
func (recv *IconView) PathIsSelected(path *TreePath) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := iconViewPathIsSelectedFunction_Set()
	if err == nil {
		ret = iconViewPathIsSelectedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var iconViewScrollToPathFunction *gi.Function
var iconViewScrollToPathFunction_Once sync.Once

func iconViewScrollToPathFunction_Set() error {
	var err error
	iconViewScrollToPathFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewScrollToPathFunction, err = iconViewStruct.InvokerNew("scroll_to_path")
	})
	return err
}

// ScrollToPath is a representation of the C type gtk_icon_view_scroll_to_path.
func (recv *IconView) ScrollToPath(path *TreePath, useAlign bool, rowAlign float32, colAlign float32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetBoolean(useAlign)
	inArgs[3].SetFloat32(rowAlign)
	inArgs[4].SetFloat32(colAlign)

	err := iconViewScrollToPathFunction_Set()
	if err == nil {
		iconViewScrollToPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSelectAllFunction *gi.Function
var iconViewSelectAllFunction_Once sync.Once

func iconViewSelectAllFunction_Set() error {
	var err error
	iconViewSelectAllFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSelectAllFunction, err = iconViewStruct.InvokerNew("select_all")
	})
	return err
}

// SelectAll is a representation of the C type gtk_icon_view_select_all.
func (recv *IconView) SelectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconViewSelectAllFunction_Set()
	if err == nil {
		iconViewSelectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSelectPathFunction *gi.Function
var iconViewSelectPathFunction_Once sync.Once

func iconViewSelectPathFunction_Set() error {
	var err error
	iconViewSelectPathFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSelectPathFunction, err = iconViewStruct.InvokerNew("select_path")
	})
	return err
}

// SelectPath is a representation of the C type gtk_icon_view_select_path.
func (recv *IconView) SelectPath(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := iconViewSelectPathFunction_Set()
	if err == nil {
		iconViewSelectPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_view_selected_foreach' : parameter 'func' of type 'IconViewForeachFunc' not supported

var iconViewSetActivateOnSingleClickFunction *gi.Function
var iconViewSetActivateOnSingleClickFunction_Once sync.Once

func iconViewSetActivateOnSingleClickFunction_Set() error {
	var err error
	iconViewSetActivateOnSingleClickFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetActivateOnSingleClickFunction, err = iconViewStruct.InvokerNew("set_activate_on_single_click")
	})
	return err
}

// SetActivateOnSingleClick is a representation of the C type gtk_icon_view_set_activate_on_single_click.
func (recv *IconView) SetActivateOnSingleClick(single bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(single)

	err := iconViewSetActivateOnSingleClickFunction_Set()
	if err == nil {
		iconViewSetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetColumnSpacingFunction *gi.Function
var iconViewSetColumnSpacingFunction_Once sync.Once

func iconViewSetColumnSpacingFunction_Set() error {
	var err error
	iconViewSetColumnSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetColumnSpacingFunction, err = iconViewStruct.InvokerNew("set_column_spacing")
	})
	return err
}

// SetColumnSpacing is a representation of the C type gtk_icon_view_set_column_spacing.
func (recv *IconView) SetColumnSpacing(columnSpacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(columnSpacing)

	err := iconViewSetColumnSpacingFunction_Set()
	if err == nil {
		iconViewSetColumnSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetColumnsFunction *gi.Function
var iconViewSetColumnsFunction_Once sync.Once

func iconViewSetColumnsFunction_Set() error {
	var err error
	iconViewSetColumnsFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetColumnsFunction, err = iconViewStruct.InvokerNew("set_columns")
	})
	return err
}

// SetColumns is a representation of the C type gtk_icon_view_set_columns.
func (recv *IconView) SetColumns(columns int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(columns)

	err := iconViewSetColumnsFunction_Set()
	if err == nil {
		iconViewSetColumnsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetCursorFunction *gi.Function
var iconViewSetCursorFunction_Once sync.Once

func iconViewSetCursorFunction_Set() error {
	var err error
	iconViewSetCursorFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetCursorFunction, err = iconViewStruct.InvokerNew("set_cursor")
	})
	return err
}

// SetCursor is a representation of the C type gtk_icon_view_set_cursor.
func (recv *IconView) SetCursor(path *TreePath, cell *CellRenderer, startEditing bool) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetPointer(cell.Native)
	inArgs[3].SetBoolean(startEditing)

	err := iconViewSetCursorFunction_Set()
	if err == nil {
		iconViewSetCursorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_view_set_drag_dest_item' : parameter 'pos' of type 'IconViewDropPosition' not supported

// UNSUPPORTED : C value 'gtk_icon_view_set_item_orientation' : parameter 'orientation' of type 'Orientation' not supported

var iconViewSetItemPaddingFunction *gi.Function
var iconViewSetItemPaddingFunction_Once sync.Once

func iconViewSetItemPaddingFunction_Set() error {
	var err error
	iconViewSetItemPaddingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetItemPaddingFunction, err = iconViewStruct.InvokerNew("set_item_padding")
	})
	return err
}

// SetItemPadding is a representation of the C type gtk_icon_view_set_item_padding.
func (recv *IconView) SetItemPadding(itemPadding int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(itemPadding)

	err := iconViewSetItemPaddingFunction_Set()
	if err == nil {
		iconViewSetItemPaddingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetItemWidthFunction *gi.Function
var iconViewSetItemWidthFunction_Once sync.Once

func iconViewSetItemWidthFunction_Set() error {
	var err error
	iconViewSetItemWidthFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetItemWidthFunction, err = iconViewStruct.InvokerNew("set_item_width")
	})
	return err
}

// SetItemWidth is a representation of the C type gtk_icon_view_set_item_width.
func (recv *IconView) SetItemWidth(itemWidth int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(itemWidth)

	err := iconViewSetItemWidthFunction_Set()
	if err == nil {
		iconViewSetItemWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetMarginFunction *gi.Function
var iconViewSetMarginFunction_Once sync.Once

func iconViewSetMarginFunction_Set() error {
	var err error
	iconViewSetMarginFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetMarginFunction, err = iconViewStruct.InvokerNew("set_margin")
	})
	return err
}

// SetMargin is a representation of the C type gtk_icon_view_set_margin.
func (recv *IconView) SetMargin(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := iconViewSetMarginFunction_Set()
	if err == nil {
		iconViewSetMarginFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetMarkupColumnFunction *gi.Function
var iconViewSetMarkupColumnFunction_Once sync.Once

func iconViewSetMarkupColumnFunction_Set() error {
	var err error
	iconViewSetMarkupColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetMarkupColumnFunction, err = iconViewStruct.InvokerNew("set_markup_column")
	})
	return err
}

// SetMarkupColumn is a representation of the C type gtk_icon_view_set_markup_column.
func (recv *IconView) SetMarkupColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := iconViewSetMarkupColumnFunction_Set()
	if err == nil {
		iconViewSetMarkupColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_view_set_model' : parameter 'model' of type 'TreeModel' not supported

var iconViewSetPixbufColumnFunction *gi.Function
var iconViewSetPixbufColumnFunction_Once sync.Once

func iconViewSetPixbufColumnFunction_Set() error {
	var err error
	iconViewSetPixbufColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetPixbufColumnFunction, err = iconViewStruct.InvokerNew("set_pixbuf_column")
	})
	return err
}

// SetPixbufColumn is a representation of the C type gtk_icon_view_set_pixbuf_column.
func (recv *IconView) SetPixbufColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := iconViewSetPixbufColumnFunction_Set()
	if err == nil {
		iconViewSetPixbufColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetReorderableFunction *gi.Function
var iconViewSetReorderableFunction_Once sync.Once

func iconViewSetReorderableFunction_Set() error {
	var err error
	iconViewSetReorderableFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetReorderableFunction, err = iconViewStruct.InvokerNew("set_reorderable")
	})
	return err
}

// SetReorderable is a representation of the C type gtk_icon_view_set_reorderable.
func (recv *IconView) SetReorderable(reorderable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reorderable)

	err := iconViewSetReorderableFunction_Set()
	if err == nil {
		iconViewSetReorderableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetRowSpacingFunction *gi.Function
var iconViewSetRowSpacingFunction_Once sync.Once

func iconViewSetRowSpacingFunction_Set() error {
	var err error
	iconViewSetRowSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetRowSpacingFunction, err = iconViewStruct.InvokerNew("set_row_spacing")
	})
	return err
}

// SetRowSpacing is a representation of the C type gtk_icon_view_set_row_spacing.
func (recv *IconView) SetRowSpacing(rowSpacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(rowSpacing)

	err := iconViewSetRowSpacingFunction_Set()
	if err == nil {
		iconViewSetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_icon_view_set_selection_mode' : parameter 'mode' of type 'SelectionMode' not supported

var iconViewSetSpacingFunction *gi.Function
var iconViewSetSpacingFunction_Once sync.Once

func iconViewSetSpacingFunction_Set() error {
	var err error
	iconViewSetSpacingFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetSpacingFunction, err = iconViewStruct.InvokerNew("set_spacing")
	})
	return err
}

// SetSpacing is a representation of the C type gtk_icon_view_set_spacing.
func (recv *IconView) SetSpacing(spacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(spacing)

	err := iconViewSetSpacingFunction_Set()
	if err == nil {
		iconViewSetSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetTextColumnFunction *gi.Function
var iconViewSetTextColumnFunction_Once sync.Once

func iconViewSetTextColumnFunction_Set() error {
	var err error
	iconViewSetTextColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetTextColumnFunction, err = iconViewStruct.InvokerNew("set_text_column")
	})
	return err
}

// SetTextColumn is a representation of the C type gtk_icon_view_set_text_column.
func (recv *IconView) SetTextColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := iconViewSetTextColumnFunction_Set()
	if err == nil {
		iconViewSetTextColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetTooltipCellFunction *gi.Function
var iconViewSetTooltipCellFunction_Once sync.Once

func iconViewSetTooltipCellFunction_Set() error {
	var err error
	iconViewSetTooltipCellFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetTooltipCellFunction, err = iconViewStruct.InvokerNew("set_tooltip_cell")
	})
	return err
}

// SetTooltipCell is a representation of the C type gtk_icon_view_set_tooltip_cell.
func (recv *IconView) SetTooltipCell(tooltip *Tooltip, path *TreePath, cell *CellRenderer) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tooltip.Native)
	inArgs[2].SetPointer(path.Native)
	inArgs[3].SetPointer(cell.Native)

	err := iconViewSetTooltipCellFunction_Set()
	if err == nil {
		iconViewSetTooltipCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetTooltipColumnFunction *gi.Function
var iconViewSetTooltipColumnFunction_Once sync.Once

func iconViewSetTooltipColumnFunction_Set() error {
	var err error
	iconViewSetTooltipColumnFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetTooltipColumnFunction, err = iconViewStruct.InvokerNew("set_tooltip_column")
	})
	return err
}

// SetTooltipColumn is a representation of the C type gtk_icon_view_set_tooltip_column.
func (recv *IconView) SetTooltipColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := iconViewSetTooltipColumnFunction_Set()
	if err == nil {
		iconViewSetTooltipColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewSetTooltipItemFunction *gi.Function
var iconViewSetTooltipItemFunction_Once sync.Once

func iconViewSetTooltipItemFunction_Set() error {
	var err error
	iconViewSetTooltipItemFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewSetTooltipItemFunction, err = iconViewStruct.InvokerNew("set_tooltip_item")
	})
	return err
}

// SetTooltipItem is a representation of the C type gtk_icon_view_set_tooltip_item.
func (recv *IconView) SetTooltipItem(tooltip *Tooltip, path *TreePath) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tooltip.Native)
	inArgs[2].SetPointer(path.Native)

	err := iconViewSetTooltipItemFunction_Set()
	if err == nil {
		iconViewSetTooltipItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewUnselectAllFunction *gi.Function
var iconViewUnselectAllFunction_Once sync.Once

func iconViewUnselectAllFunction_Set() error {
	var err error
	iconViewUnselectAllFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewUnselectAllFunction, err = iconViewStruct.InvokerNew("unselect_all")
	})
	return err
}

// UnselectAll is a representation of the C type gtk_icon_view_unselect_all.
func (recv *IconView) UnselectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconViewUnselectAllFunction_Set()
	if err == nil {
		iconViewUnselectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewUnselectPathFunction *gi.Function
var iconViewUnselectPathFunction_Once sync.Once

func iconViewUnselectPathFunction_Set() error {
	var err error
	iconViewUnselectPathFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewUnselectPathFunction, err = iconViewStruct.InvokerNew("unselect_path")
	})
	return err
}

// UnselectPath is a representation of the C type gtk_icon_view_unselect_path.
func (recv *IconView) UnselectPath(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := iconViewUnselectPathFunction_Set()
	if err == nil {
		iconViewUnselectPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewUnsetModelDragDestFunction *gi.Function
var iconViewUnsetModelDragDestFunction_Once sync.Once

func iconViewUnsetModelDragDestFunction_Set() error {
	var err error
	iconViewUnsetModelDragDestFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewUnsetModelDragDestFunction, err = iconViewStruct.InvokerNew("unset_model_drag_dest")
	})
	return err
}

// UnsetModelDragDest is a representation of the C type gtk_icon_view_unset_model_drag_dest.
func (recv *IconView) UnsetModelDragDest() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconViewUnsetModelDragDestFunction_Set()
	if err == nil {
		iconViewUnsetModelDragDestFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewUnsetModelDragSourceFunction *gi.Function
var iconViewUnsetModelDragSourceFunction_Once sync.Once

func iconViewUnsetModelDragSourceFunction_Set() error {
	var err error
	iconViewUnsetModelDragSourceFunction_Once.Do(func() {
		err = iconViewStruct_Set()
		if err != nil {
			return
		}
		iconViewUnsetModelDragSourceFunction, err = iconViewStruct.InvokerNew("unset_model_drag_source")
	})
	return err
}

// UnsetModelDragSource is a representation of the C type gtk_icon_view_unset_model_drag_source.
func (recv *IconView) UnsetModelDragSource() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := iconViewUnsetModelDragSourceFunction_Set()
	if err == nil {
		iconViewUnsetModelDragSourceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var iconViewAccessibleStruct *gi.Struct
var iconViewAccessibleStruct_Once sync.Once

func iconViewAccessibleStruct_Set() error {
	var err error
	iconViewAccessibleStruct_Once.Do(func() {
		iconViewAccessibleStruct, err = gi.StructNew("Gtk", "IconViewAccessible")
	})
	return err
}

type IconViewAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *IconViewAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(iconViewAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *IconViewAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(iconViewAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *IconViewAccessible) FieldPriv() *IconViewAccessiblePrivate {
	argValue := gi.FieldGet(iconViewAccessibleStruct, recv.Native, "priv")
	value := &IconViewAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *IconViewAccessible) SetFieldPriv(value *IconViewAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(iconViewAccessibleStruct, recv.Native, "priv", argValue)
}

// IconViewAccessibleStruct creates an uninitialised IconViewAccessible.
func IconViewAccessibleStruct() *IconViewAccessible {
	err := iconViewAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &IconViewAccessible{}
	structGo.Native = iconViewAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeIconViewAccessible)
	return structGo
}
func finalizeIconViewAccessible(obj *IconViewAccessible) {
	iconViewAccessibleStruct.Free(obj.Native)
}

var imageStruct *gi.Struct
var imageStruct_Once sync.Once

func imageStruct_Set() error {
	var err error
	imageStruct_Once.Do(func() {
		imageStruct, err = gi.StructNew("Gtk", "Image")
	})
	return err
}

type Image struct {
	Misc
}

// FieldMisc returns the C field 'misc'.
func (recv *Image) FieldMisc() *Misc {
	argValue := gi.FieldGet(imageStruct, recv.Native, "misc")
	value := &Misc{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMisc sets the value of the C field 'misc'.
func (recv *Image) SetFieldMisc(value *Misc) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageStruct, recv.Native, "misc", argValue)
}

var imageNewFunction *gi.Function
var imageNewFunction_Once sync.Once

func imageNewFunction_Set() error {
	var err error
	imageNewFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageNewFunction, err = imageStruct.InvokerNew("new")
	})
	return err
}

// ImageNew is a representation of the C type gtk_image_new.
func ImageNew() *Image {

	var ret gi.Argument

	err := imageNewFunction_Set()
	if err == nil {
		ret = imageNewFunction.Invoke(nil, nil)
	}

	retGo := &Image{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_image_new_from_animation' : parameter 'animation' of type 'GdkPixbuf.PixbufAnimation' not supported

var imageNewFromFileFunction *gi.Function
var imageNewFromFileFunction_Once sync.Once

func imageNewFromFileFunction_Set() error {
	var err error
	imageNewFromFileFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageNewFromFileFunction, err = imageStruct.InvokerNew("new_from_file")
	})
	return err
}

// ImageNewFromFile is a representation of the C type gtk_image_new_from_file.
func ImageNewFromFile(filename string) *Image {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(filename)

	var ret gi.Argument

	err := imageNewFromFileFunction_Set()
	if err == nil {
		ret = imageNewFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Image{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_image_new_from_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_image_new_from_icon_name' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_new_from_icon_set' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_new_from_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var imageNewFromResourceFunction *gi.Function
var imageNewFromResourceFunction_Once sync.Once

func imageNewFromResourceFunction_Set() error {
	var err error
	imageNewFromResourceFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageNewFromResourceFunction, err = imageStruct.InvokerNew("new_from_resource")
	})
	return err
}

// ImageNewFromResource is a representation of the C type gtk_image_new_from_resource.
func ImageNewFromResource(resourcePath string) *Image {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(resourcePath)

	var ret gi.Argument

	err := imageNewFromResourceFunction_Set()
	if err == nil {
		ret = imageNewFromResourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Image{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_image_new_from_stock' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_new_from_surface' : parameter 'surface' of type 'cairo.Surface' not supported

var imageClearFunction *gi.Function
var imageClearFunction_Once sync.Once

func imageClearFunction_Set() error {
	var err error
	imageClearFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageClearFunction, err = imageStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_image_clear.
func (recv *Image) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := imageClearFunction_Set()
	if err == nil {
		imageClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_image_get_animation' : return type 'GdkPixbuf.PixbufAnimation' not supported

// UNSUPPORTED : C value 'gtk_image_get_gicon' : parameter 'gicon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_image_get_icon_name' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_get_icon_set' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_get_pixbuf' : return type 'GdkPixbuf.Pixbuf' not supported

var imageGetPixelSizeFunction *gi.Function
var imageGetPixelSizeFunction_Once sync.Once

func imageGetPixelSizeFunction_Set() error {
	var err error
	imageGetPixelSizeFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageGetPixelSizeFunction, err = imageStruct.InvokerNew("get_pixel_size")
	})
	return err
}

// GetPixelSize is a representation of the C type gtk_image_get_pixel_size.
func (recv *Image) GetPixelSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := imageGetPixelSizeFunction_Set()
	if err == nil {
		ret = imageGetPixelSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_image_get_stock' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_get_storage_type' : return type 'ImageType' not supported

// UNSUPPORTED : C value 'gtk_image_set_from_animation' : parameter 'animation' of type 'GdkPixbuf.PixbufAnimation' not supported

var imageSetFromFileFunction *gi.Function
var imageSetFromFileFunction_Once sync.Once

func imageSetFromFileFunction_Set() error {
	var err error
	imageSetFromFileFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageSetFromFileFunction, err = imageStruct.InvokerNew("set_from_file")
	})
	return err
}

// SetFromFile is a representation of the C type gtk_image_set_from_file.
func (recv *Image) SetFromFile(filename string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	err := imageSetFromFileFunction_Set()
	if err == nil {
		imageSetFromFileFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_image_set_from_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_image_set_from_icon_name' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_set_from_icon_set' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_set_from_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var imageSetFromResourceFunction *gi.Function
var imageSetFromResourceFunction_Once sync.Once

func imageSetFromResourceFunction_Set() error {
	var err error
	imageSetFromResourceFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageSetFromResourceFunction, err = imageStruct.InvokerNew("set_from_resource")
	})
	return err
}

// SetFromResource is a representation of the C type gtk_image_set_from_resource.
func (recv *Image) SetFromResource(resourcePath string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(resourcePath)

	err := imageSetFromResourceFunction_Set()
	if err == nil {
		imageSetFromResourceFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_image_set_from_stock' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_image_set_from_surface' : parameter 'surface' of type 'cairo.Surface' not supported

var imageSetPixelSizeFunction *gi.Function
var imageSetPixelSizeFunction_Once sync.Once

func imageSetPixelSizeFunction_Set() error {
	var err error
	imageSetPixelSizeFunction_Once.Do(func() {
		err = imageStruct_Set()
		if err != nil {
			return
		}
		imageSetPixelSizeFunction, err = imageStruct.InvokerNew("set_pixel_size")
	})
	return err
}

// SetPixelSize is a representation of the C type gtk_image_set_pixel_size.
func (recv *Image) SetPixelSize(pixelSize int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pixelSize)

	err := imageSetPixelSizeFunction_Set()
	if err == nil {
		imageSetPixelSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var imageAccessibleStruct *gi.Struct
var imageAccessibleStruct_Once sync.Once

func imageAccessibleStruct_Set() error {
	var err error
	imageAccessibleStruct_Once.Do(func() {
		imageAccessibleStruct, err = gi.StructNew("Gtk", "ImageAccessible")
	})
	return err
}

type ImageAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ImageAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(imageAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ImageAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ImageAccessible) FieldPriv() *ImageAccessiblePrivate {
	argValue := gi.FieldGet(imageAccessibleStruct, recv.Native, "priv")
	value := &ImageAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ImageAccessible) SetFieldPriv(value *ImageAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageAccessibleStruct, recv.Native, "priv", argValue)
}

// ImageAccessibleStruct creates an uninitialised ImageAccessible.
func ImageAccessibleStruct() *ImageAccessible {
	err := imageAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ImageAccessible{}
	structGo.Native = imageAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeImageAccessible)
	return structGo
}
func finalizeImageAccessible(obj *ImageAccessible) {
	imageAccessibleStruct.Free(obj.Native)
}

var imageCellAccessibleStruct *gi.Struct
var imageCellAccessibleStruct_Once sync.Once

func imageCellAccessibleStruct_Set() error {
	var err error
	imageCellAccessibleStruct_Once.Do(func() {
		imageCellAccessibleStruct, err = gi.StructNew("Gtk", "ImageCellAccessible")
	})
	return err
}

type ImageCellAccessible struct {
	RendererCellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ImageCellAccessible) FieldParent() *RendererCellAccessible {
	argValue := gi.FieldGet(imageCellAccessibleStruct, recv.Native, "parent")
	value := &RendererCellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ImageCellAccessible) SetFieldParent(value *RendererCellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageCellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ImageCellAccessible) FieldPriv() *ImageCellAccessiblePrivate {
	argValue := gi.FieldGet(imageCellAccessibleStruct, recv.Native, "priv")
	value := &ImageCellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ImageCellAccessible) SetFieldPriv(value *ImageCellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageCellAccessibleStruct, recv.Native, "priv", argValue)
}

// ImageCellAccessibleStruct creates an uninitialised ImageCellAccessible.
func ImageCellAccessibleStruct() *ImageCellAccessible {
	err := imageCellAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ImageCellAccessible{}
	structGo.Native = imageCellAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeImageCellAccessible)
	return structGo
}
func finalizeImageCellAccessible(obj *ImageCellAccessible) {
	imageCellAccessibleStruct.Free(obj.Native)
}

var imageMenuItemStruct *gi.Struct
var imageMenuItemStruct_Once sync.Once

func imageMenuItemStruct_Set() error {
	var err error
	imageMenuItemStruct_Once.Do(func() {
		imageMenuItemStruct, err = gi.StructNew("Gtk", "ImageMenuItem")
	})
	return err
}

type ImageMenuItem struct {
	MenuItem
}

// FieldMenuItem returns the C field 'menu_item'.
func (recv *ImageMenuItem) FieldMenuItem() *MenuItem {
	argValue := gi.FieldGet(imageMenuItemStruct, recv.Native, "menu_item")
	value := &MenuItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuItem sets the value of the C field 'menu_item'.
func (recv *ImageMenuItem) SetFieldMenuItem(value *MenuItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(imageMenuItemStruct, recv.Native, "menu_item", argValue)
}

var imageMenuItemNewFunction *gi.Function
var imageMenuItemNewFunction_Once sync.Once

func imageMenuItemNewFunction_Set() error {
	var err error
	imageMenuItemNewFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemNewFunction, err = imageMenuItemStruct.InvokerNew("new")
	})
	return err
}

// ImageMenuItemNew is a representation of the C type gtk_image_menu_item_new.
func ImageMenuItemNew() *ImageMenuItem {

	var ret gi.Argument

	err := imageMenuItemNewFunction_Set()
	if err == nil {
		ret = imageMenuItemNewFunction.Invoke(nil, nil)
	}

	retGo := &ImageMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var imageMenuItemNewFromStockFunction *gi.Function
var imageMenuItemNewFromStockFunction_Once sync.Once

func imageMenuItemNewFromStockFunction_Set() error {
	var err error
	imageMenuItemNewFromStockFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemNewFromStockFunction, err = imageMenuItemStruct.InvokerNew("new_from_stock")
	})
	return err
}

// ImageMenuItemNewFromStock is a representation of the C type gtk_image_menu_item_new_from_stock.
func ImageMenuItemNewFromStock(stockId string, accelGroup *AccelGroup) *ImageMenuItem {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(stockId)
	inArgs[1].SetPointer(accelGroup.Native)

	var ret gi.Argument

	err := imageMenuItemNewFromStockFunction_Set()
	if err == nil {
		ret = imageMenuItemNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ImageMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var imageMenuItemNewWithLabelFunction *gi.Function
var imageMenuItemNewWithLabelFunction_Once sync.Once

func imageMenuItemNewWithLabelFunction_Set() error {
	var err error
	imageMenuItemNewWithLabelFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemNewWithLabelFunction, err = imageMenuItemStruct.InvokerNew("new_with_label")
	})
	return err
}

// ImageMenuItemNewWithLabel is a representation of the C type gtk_image_menu_item_new_with_label.
func ImageMenuItemNewWithLabel(label string) *ImageMenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := imageMenuItemNewWithLabelFunction_Set()
	if err == nil {
		ret = imageMenuItemNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ImageMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var imageMenuItemNewWithMnemonicFunction *gi.Function
var imageMenuItemNewWithMnemonicFunction_Once sync.Once

func imageMenuItemNewWithMnemonicFunction_Set() error {
	var err error
	imageMenuItemNewWithMnemonicFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemNewWithMnemonicFunction, err = imageMenuItemStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// ImageMenuItemNewWithMnemonic is a representation of the C type gtk_image_menu_item_new_with_mnemonic.
func ImageMenuItemNewWithMnemonic(label string) *ImageMenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := imageMenuItemNewWithMnemonicFunction_Set()
	if err == nil {
		ret = imageMenuItemNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ImageMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var imageMenuItemGetAlwaysShowImageFunction *gi.Function
var imageMenuItemGetAlwaysShowImageFunction_Once sync.Once

func imageMenuItemGetAlwaysShowImageFunction_Set() error {
	var err error
	imageMenuItemGetAlwaysShowImageFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemGetAlwaysShowImageFunction, err = imageMenuItemStruct.InvokerNew("get_always_show_image")
	})
	return err
}

// GetAlwaysShowImage is a representation of the C type gtk_image_menu_item_get_always_show_image.
func (recv *ImageMenuItem) GetAlwaysShowImage() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := imageMenuItemGetAlwaysShowImageFunction_Set()
	if err == nil {
		ret = imageMenuItemGetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var imageMenuItemGetImageFunction *gi.Function
var imageMenuItemGetImageFunction_Once sync.Once

func imageMenuItemGetImageFunction_Set() error {
	var err error
	imageMenuItemGetImageFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemGetImageFunction, err = imageMenuItemStruct.InvokerNew("get_image")
	})
	return err
}

// GetImage is a representation of the C type gtk_image_menu_item_get_image.
func (recv *ImageMenuItem) GetImage() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := imageMenuItemGetImageFunction_Set()
	if err == nil {
		ret = imageMenuItemGetImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var imageMenuItemGetUseStockFunction *gi.Function
var imageMenuItemGetUseStockFunction_Once sync.Once

func imageMenuItemGetUseStockFunction_Set() error {
	var err error
	imageMenuItemGetUseStockFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemGetUseStockFunction, err = imageMenuItemStruct.InvokerNew("get_use_stock")
	})
	return err
}

// GetUseStock is a representation of the C type gtk_image_menu_item_get_use_stock.
func (recv *ImageMenuItem) GetUseStock() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := imageMenuItemGetUseStockFunction_Set()
	if err == nil {
		ret = imageMenuItemGetUseStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var imageMenuItemSetAccelGroupFunction *gi.Function
var imageMenuItemSetAccelGroupFunction_Once sync.Once

func imageMenuItemSetAccelGroupFunction_Set() error {
	var err error
	imageMenuItemSetAccelGroupFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemSetAccelGroupFunction, err = imageMenuItemStruct.InvokerNew("set_accel_group")
	})
	return err
}

// SetAccelGroup is a representation of the C type gtk_image_menu_item_set_accel_group.
func (recv *ImageMenuItem) SetAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := imageMenuItemSetAccelGroupFunction_Set()
	if err == nil {
		imageMenuItemSetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var imageMenuItemSetAlwaysShowImageFunction *gi.Function
var imageMenuItemSetAlwaysShowImageFunction_Once sync.Once

func imageMenuItemSetAlwaysShowImageFunction_Set() error {
	var err error
	imageMenuItemSetAlwaysShowImageFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemSetAlwaysShowImageFunction, err = imageMenuItemStruct.InvokerNew("set_always_show_image")
	})
	return err
}

// SetAlwaysShowImage is a representation of the C type gtk_image_menu_item_set_always_show_image.
func (recv *ImageMenuItem) SetAlwaysShowImage(alwaysShow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(alwaysShow)

	err := imageMenuItemSetAlwaysShowImageFunction_Set()
	if err == nil {
		imageMenuItemSetAlwaysShowImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var imageMenuItemSetImageFunction *gi.Function
var imageMenuItemSetImageFunction_Once sync.Once

func imageMenuItemSetImageFunction_Set() error {
	var err error
	imageMenuItemSetImageFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemSetImageFunction, err = imageMenuItemStruct.InvokerNew("set_image")
	})
	return err
}

// SetImage is a representation of the C type gtk_image_menu_item_set_image.
func (recv *ImageMenuItem) SetImage(image *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(image.Native)

	err := imageMenuItemSetImageFunction_Set()
	if err == nil {
		imageMenuItemSetImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var imageMenuItemSetUseStockFunction *gi.Function
var imageMenuItemSetUseStockFunction_Once sync.Once

func imageMenuItemSetUseStockFunction_Set() error {
	var err error
	imageMenuItemSetUseStockFunction_Once.Do(func() {
		err = imageMenuItemStruct_Set()
		if err != nil {
			return
		}
		imageMenuItemSetUseStockFunction, err = imageMenuItemStruct.InvokerNew("set_use_stock")
	})
	return err
}

// SetUseStock is a representation of the C type gtk_image_menu_item_set_use_stock.
func (recv *ImageMenuItem) SetUseStock(useStock bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useStock)

	err := imageMenuItemSetUseStockFunction_Set()
	if err == nil {
		imageMenuItemSetUseStockFunction.Invoke(inArgs[:], nil)
	}

	return
}

var infoBarStruct *gi.Struct
var infoBarStruct_Once sync.Once

func infoBarStruct_Set() error {
	var err error
	infoBarStruct_Once.Do(func() {
		infoBarStruct, err = gi.StructNew("Gtk", "InfoBar")
	})
	return err
}

type InfoBar struct {
	Box
}

// FieldParent returns the C field 'parent'.
func (recv *InfoBar) FieldParent() *Box {
	argValue := gi.FieldGet(infoBarStruct, recv.Native, "parent")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *InfoBar) SetFieldParent(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(infoBarStruct, recv.Native, "parent", argValue)
}

var infoBarNewFunction *gi.Function
var infoBarNewFunction_Once sync.Once

func infoBarNewFunction_Set() error {
	var err error
	infoBarNewFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarNewFunction, err = infoBarStruct.InvokerNew("new")
	})
	return err
}

// InfoBarNew is a representation of the C type gtk_info_bar_new.
func InfoBarNew() *InfoBar {

	var ret gi.Argument

	err := infoBarNewFunction_Set()
	if err == nil {
		ret = infoBarNewFunction.Invoke(nil, nil)
	}

	retGo := &InfoBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_info_bar_new_with_buttons' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_info_bar_add_action_widget' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_info_bar_add_button' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_info_bar_add_buttons' : parameter '...' of type 'nil' not supported

var infoBarGetActionAreaFunction *gi.Function
var infoBarGetActionAreaFunction_Once sync.Once

func infoBarGetActionAreaFunction_Set() error {
	var err error
	infoBarGetActionAreaFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarGetActionAreaFunction, err = infoBarStruct.InvokerNew("get_action_area")
	})
	return err
}

// GetActionArea is a representation of the C type gtk_info_bar_get_action_area.
func (recv *InfoBar) GetActionArea() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := infoBarGetActionAreaFunction_Set()
	if err == nil {
		ret = infoBarGetActionAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var infoBarGetContentAreaFunction *gi.Function
var infoBarGetContentAreaFunction_Once sync.Once

func infoBarGetContentAreaFunction_Set() error {
	var err error
	infoBarGetContentAreaFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarGetContentAreaFunction, err = infoBarStruct.InvokerNew("get_content_area")
	})
	return err
}

// GetContentArea is a representation of the C type gtk_info_bar_get_content_area.
func (recv *InfoBar) GetContentArea() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := infoBarGetContentAreaFunction_Set()
	if err == nil {
		ret = infoBarGetContentAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_info_bar_get_message_type' : return type 'MessageType' not supported

var infoBarGetRevealedFunction *gi.Function
var infoBarGetRevealedFunction_Once sync.Once

func infoBarGetRevealedFunction_Set() error {
	var err error
	infoBarGetRevealedFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarGetRevealedFunction, err = infoBarStruct.InvokerNew("get_revealed")
	})
	return err
}

// GetRevealed is a representation of the C type gtk_info_bar_get_revealed.
func (recv *InfoBar) GetRevealed() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := infoBarGetRevealedFunction_Set()
	if err == nil {
		ret = infoBarGetRevealedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var infoBarGetShowCloseButtonFunction *gi.Function
var infoBarGetShowCloseButtonFunction_Once sync.Once

func infoBarGetShowCloseButtonFunction_Set() error {
	var err error
	infoBarGetShowCloseButtonFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarGetShowCloseButtonFunction, err = infoBarStruct.InvokerNew("get_show_close_button")
	})
	return err
}

// GetShowCloseButton is a representation of the C type gtk_info_bar_get_show_close_button.
func (recv *InfoBar) GetShowCloseButton() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := infoBarGetShowCloseButtonFunction_Set()
	if err == nil {
		ret = infoBarGetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_info_bar_response' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_info_bar_set_default_response' : parameter 'response_id' of type 'ResponseType' not supported

// UNSUPPORTED : C value 'gtk_info_bar_set_message_type' : parameter 'message_type' of type 'MessageType' not supported

// UNSUPPORTED : C value 'gtk_info_bar_set_response_sensitive' : parameter 'response_id' of type 'ResponseType' not supported

var infoBarSetRevealedFunction *gi.Function
var infoBarSetRevealedFunction_Once sync.Once

func infoBarSetRevealedFunction_Set() error {
	var err error
	infoBarSetRevealedFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarSetRevealedFunction, err = infoBarStruct.InvokerNew("set_revealed")
	})
	return err
}

// SetRevealed is a representation of the C type gtk_info_bar_set_revealed.
func (recv *InfoBar) SetRevealed(revealed bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(revealed)

	err := infoBarSetRevealedFunction_Set()
	if err == nil {
		infoBarSetRevealedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var infoBarSetShowCloseButtonFunction *gi.Function
var infoBarSetShowCloseButtonFunction_Once sync.Once

func infoBarSetShowCloseButtonFunction_Set() error {
	var err error
	infoBarSetShowCloseButtonFunction_Once.Do(func() {
		err = infoBarStruct_Set()
		if err != nil {
			return
		}
		infoBarSetShowCloseButtonFunction, err = infoBarStruct.InvokerNew("set_show_close_button")
	})
	return err
}

// SetShowCloseButton is a representation of the C type gtk_info_bar_set_show_close_button.
func (recv *InfoBar) SetShowCloseButton(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := infoBarSetShowCloseButtonFunction_Set()
	if err == nil {
		infoBarSetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	return
}

var invisibleStruct *gi.Struct
var invisibleStruct_Once sync.Once

func invisibleStruct_Set() error {
	var err error
	invisibleStruct_Once.Do(func() {
		invisibleStruct, err = gi.StructNew("Gtk", "Invisible")
	})
	return err
}

type Invisible struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Invisible) FieldWidget() *Widget {
	argValue := gi.FieldGet(invisibleStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Invisible) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(invisibleStruct, recv.Native, "widget", argValue)
}

var invisibleNewFunction *gi.Function
var invisibleNewFunction_Once sync.Once

func invisibleNewFunction_Set() error {
	var err error
	invisibleNewFunction_Once.Do(func() {
		err = invisibleStruct_Set()
		if err != nil {
			return
		}
		invisibleNewFunction, err = invisibleStruct.InvokerNew("new")
	})
	return err
}

// InvisibleNew is a representation of the C type gtk_invisible_new.
func InvisibleNew() *Invisible {

	var ret gi.Argument

	err := invisibleNewFunction_Set()
	if err == nil {
		ret = invisibleNewFunction.Invoke(nil, nil)
	}

	retGo := &Invisible{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_invisible_new_for_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_invisible_get_screen' : return type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_invisible_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

var labelStruct *gi.Struct
var labelStruct_Once sync.Once

func labelStruct_Set() error {
	var err error
	labelStruct_Once.Do(func() {
		labelStruct, err = gi.StructNew("Gtk", "Label")
	})
	return err
}

type Label struct {
	Misc
}

// FieldMisc returns the C field 'misc'.
func (recv *Label) FieldMisc() *Misc {
	argValue := gi.FieldGet(labelStruct, recv.Native, "misc")
	value := &Misc{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMisc sets the value of the C field 'misc'.
func (recv *Label) SetFieldMisc(value *Misc) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(labelStruct, recv.Native, "misc", argValue)
}

var labelNewFunction *gi.Function
var labelNewFunction_Once sync.Once

func labelNewFunction_Set() error {
	var err error
	labelNewFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelNewFunction, err = labelStruct.InvokerNew("new")
	})
	return err
}

// LabelNew is a representation of the C type gtk_label_new.
func LabelNew(str string) *Label {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(str)

	var ret gi.Argument

	err := labelNewFunction_Set()
	if err == nil {
		ret = labelNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Label{}
	retGo.Native = ret.Pointer()

	return retGo
}

var labelNewWithMnemonicFunction *gi.Function
var labelNewWithMnemonicFunction_Once sync.Once

func labelNewWithMnemonicFunction_Set() error {
	var err error
	labelNewWithMnemonicFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelNewWithMnemonicFunction, err = labelStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// LabelNewWithMnemonic is a representation of the C type gtk_label_new_with_mnemonic.
func LabelNewWithMnemonic(str string) *Label {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(str)

	var ret gi.Argument

	err := labelNewWithMnemonicFunction_Set()
	if err == nil {
		ret = labelNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Label{}
	retGo.Native = ret.Pointer()

	return retGo
}

var labelGetAngleFunction *gi.Function
var labelGetAngleFunction_Once sync.Once

func labelGetAngleFunction_Set() error {
	var err error
	labelGetAngleFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetAngleFunction, err = labelStruct.InvokerNew("get_angle")
	})
	return err
}

// GetAngle is a representation of the C type gtk_label_get_angle.
func (recv *Label) GetAngle() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetAngleFunction_Set()
	if err == nil {
		ret = labelGetAngleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_label_get_attributes' : return type 'Pango.AttrList' not supported

var labelGetCurrentUriFunction *gi.Function
var labelGetCurrentUriFunction_Once sync.Once

func labelGetCurrentUriFunction_Set() error {
	var err error
	labelGetCurrentUriFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetCurrentUriFunction, err = labelStruct.InvokerNew("get_current_uri")
	})
	return err
}

// GetCurrentUri is a representation of the C type gtk_label_get_current_uri.
func (recv *Label) GetCurrentUri() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetCurrentUriFunction_Set()
	if err == nil {
		ret = labelGetCurrentUriFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_label_get_ellipsize' : return type 'Pango.EllipsizeMode' not supported

// UNSUPPORTED : C value 'gtk_label_get_justify' : return type 'Justification' not supported

var labelGetLabelFunction *gi.Function
var labelGetLabelFunction_Once sync.Once

func labelGetLabelFunction_Set() error {
	var err error
	labelGetLabelFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetLabelFunction, err = labelStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_label_get_label.
func (recv *Label) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetLabelFunction_Set()
	if err == nil {
		ret = labelGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_label_get_layout' : return type 'Pango.Layout' not supported

var labelGetLayoutOffsetsFunction *gi.Function
var labelGetLayoutOffsetsFunction_Once sync.Once

func labelGetLayoutOffsetsFunction_Set() error {
	var err error
	labelGetLayoutOffsetsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetLayoutOffsetsFunction, err = labelStruct.InvokerNew("get_layout_offsets")
	})
	return err
}

// GetLayoutOffsets is a representation of the C type gtk_label_get_layout_offsets.
func (recv *Label) GetLayoutOffsets() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := labelGetLayoutOffsetsFunction_Set()
	if err == nil {
		labelGetLayoutOffsetsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var labelGetLineWrapFunction *gi.Function
var labelGetLineWrapFunction_Once sync.Once

func labelGetLineWrapFunction_Set() error {
	var err error
	labelGetLineWrapFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetLineWrapFunction, err = labelStruct.InvokerNew("get_line_wrap")
	})
	return err
}

// GetLineWrap is a representation of the C type gtk_label_get_line_wrap.
func (recv *Label) GetLineWrap() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetLineWrapFunction_Set()
	if err == nil {
		ret = labelGetLineWrapFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_label_get_line_wrap_mode' : return type 'Pango.WrapMode' not supported

var labelGetLinesFunction *gi.Function
var labelGetLinesFunction_Once sync.Once

func labelGetLinesFunction_Set() error {
	var err error
	labelGetLinesFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetLinesFunction, err = labelStruct.InvokerNew("get_lines")
	})
	return err
}

// GetLines is a representation of the C type gtk_label_get_lines.
func (recv *Label) GetLines() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetLinesFunction_Set()
	if err == nil {
		ret = labelGetLinesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var labelGetMaxWidthCharsFunction *gi.Function
var labelGetMaxWidthCharsFunction_Once sync.Once

func labelGetMaxWidthCharsFunction_Set() error {
	var err error
	labelGetMaxWidthCharsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetMaxWidthCharsFunction, err = labelStruct.InvokerNew("get_max_width_chars")
	})
	return err
}

// GetMaxWidthChars is a representation of the C type gtk_label_get_max_width_chars.
func (recv *Label) GetMaxWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetMaxWidthCharsFunction_Set()
	if err == nil {
		ret = labelGetMaxWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var labelGetMnemonicKeyvalFunction *gi.Function
var labelGetMnemonicKeyvalFunction_Once sync.Once

func labelGetMnemonicKeyvalFunction_Set() error {
	var err error
	labelGetMnemonicKeyvalFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetMnemonicKeyvalFunction, err = labelStruct.InvokerNew("get_mnemonic_keyval")
	})
	return err
}

// GetMnemonicKeyval is a representation of the C type gtk_label_get_mnemonic_keyval.
func (recv *Label) GetMnemonicKeyval() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetMnemonicKeyvalFunction_Set()
	if err == nil {
		ret = labelGetMnemonicKeyvalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var labelGetMnemonicWidgetFunction *gi.Function
var labelGetMnemonicWidgetFunction_Once sync.Once

func labelGetMnemonicWidgetFunction_Set() error {
	var err error
	labelGetMnemonicWidgetFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetMnemonicWidgetFunction, err = labelStruct.InvokerNew("get_mnemonic_widget")
	})
	return err
}

// GetMnemonicWidget is a representation of the C type gtk_label_get_mnemonic_widget.
func (recv *Label) GetMnemonicWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetMnemonicWidgetFunction_Set()
	if err == nil {
		ret = labelGetMnemonicWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var labelGetSelectableFunction *gi.Function
var labelGetSelectableFunction_Once sync.Once

func labelGetSelectableFunction_Set() error {
	var err error
	labelGetSelectableFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetSelectableFunction, err = labelStruct.InvokerNew("get_selectable")
	})
	return err
}

// GetSelectable is a representation of the C type gtk_label_get_selectable.
func (recv *Label) GetSelectable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetSelectableFunction_Set()
	if err == nil {
		ret = labelGetSelectableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var labelGetSelectionBoundsFunction *gi.Function
var labelGetSelectionBoundsFunction_Once sync.Once

func labelGetSelectionBoundsFunction_Set() error {
	var err error
	labelGetSelectionBoundsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetSelectionBoundsFunction, err = labelStruct.InvokerNew("get_selection_bounds")
	})
	return err
}

// GetSelectionBounds is a representation of the C type gtk_label_get_selection_bounds.
func (recv *Label) GetSelectionBounds() (bool, int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := labelGetSelectionBoundsFunction_Set()
	if err == nil {
		ret = labelGetSelectionBoundsFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return retGo, out0, out1
}

var labelGetSingleLineModeFunction *gi.Function
var labelGetSingleLineModeFunction_Once sync.Once

func labelGetSingleLineModeFunction_Set() error {
	var err error
	labelGetSingleLineModeFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetSingleLineModeFunction, err = labelStruct.InvokerNew("get_single_line_mode")
	})
	return err
}

// GetSingleLineMode is a representation of the C type gtk_label_get_single_line_mode.
func (recv *Label) GetSingleLineMode() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetSingleLineModeFunction_Set()
	if err == nil {
		ret = labelGetSingleLineModeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var labelGetTextFunction *gi.Function
var labelGetTextFunction_Once sync.Once

func labelGetTextFunction_Set() error {
	var err error
	labelGetTextFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetTextFunction, err = labelStruct.InvokerNew("get_text")
	})
	return err
}

// GetText is a representation of the C type gtk_label_get_text.
func (recv *Label) GetText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetTextFunction_Set()
	if err == nil {
		ret = labelGetTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var labelGetTrackVisitedLinksFunction *gi.Function
var labelGetTrackVisitedLinksFunction_Once sync.Once

func labelGetTrackVisitedLinksFunction_Set() error {
	var err error
	labelGetTrackVisitedLinksFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetTrackVisitedLinksFunction, err = labelStruct.InvokerNew("get_track_visited_links")
	})
	return err
}

// GetTrackVisitedLinks is a representation of the C type gtk_label_get_track_visited_links.
func (recv *Label) GetTrackVisitedLinks() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetTrackVisitedLinksFunction_Set()
	if err == nil {
		ret = labelGetTrackVisitedLinksFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var labelGetUseMarkupFunction *gi.Function
var labelGetUseMarkupFunction_Once sync.Once

func labelGetUseMarkupFunction_Set() error {
	var err error
	labelGetUseMarkupFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetUseMarkupFunction, err = labelStruct.InvokerNew("get_use_markup")
	})
	return err
}

// GetUseMarkup is a representation of the C type gtk_label_get_use_markup.
func (recv *Label) GetUseMarkup() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetUseMarkupFunction_Set()
	if err == nil {
		ret = labelGetUseMarkupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var labelGetUseUnderlineFunction *gi.Function
var labelGetUseUnderlineFunction_Once sync.Once

func labelGetUseUnderlineFunction_Set() error {
	var err error
	labelGetUseUnderlineFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetUseUnderlineFunction, err = labelStruct.InvokerNew("get_use_underline")
	})
	return err
}

// GetUseUnderline is a representation of the C type gtk_label_get_use_underline.
func (recv *Label) GetUseUnderline() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetUseUnderlineFunction_Set()
	if err == nil {
		ret = labelGetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var labelGetWidthCharsFunction *gi.Function
var labelGetWidthCharsFunction_Once sync.Once

func labelGetWidthCharsFunction_Set() error {
	var err error
	labelGetWidthCharsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetWidthCharsFunction, err = labelStruct.InvokerNew("get_width_chars")
	})
	return err
}

// GetWidthChars is a representation of the C type gtk_label_get_width_chars.
func (recv *Label) GetWidthChars() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetWidthCharsFunction_Set()
	if err == nil {
		ret = labelGetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var labelGetXalignFunction *gi.Function
var labelGetXalignFunction_Once sync.Once

func labelGetXalignFunction_Set() error {
	var err error
	labelGetXalignFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetXalignFunction, err = labelStruct.InvokerNew("get_xalign")
	})
	return err
}

// GetXalign is a representation of the C type gtk_label_get_xalign.
func (recv *Label) GetXalign() float32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetXalignFunction_Set()
	if err == nil {
		ret = labelGetXalignFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float32()

	return retGo
}

var labelGetYalignFunction *gi.Function
var labelGetYalignFunction_Once sync.Once

func labelGetYalignFunction_Set() error {
	var err error
	labelGetYalignFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelGetYalignFunction, err = labelStruct.InvokerNew("get_yalign")
	})
	return err
}

// GetYalign is a representation of the C type gtk_label_get_yalign.
func (recv *Label) GetYalign() float32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := labelGetYalignFunction_Set()
	if err == nil {
		ret = labelGetYalignFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float32()

	return retGo
}

var labelSelectRegionFunction *gi.Function
var labelSelectRegionFunction_Once sync.Once

func labelSelectRegionFunction_Set() error {
	var err error
	labelSelectRegionFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSelectRegionFunction, err = labelStruct.InvokerNew("select_region")
	})
	return err
}

// SelectRegion is a representation of the C type gtk_label_select_region.
func (recv *Label) SelectRegion(startOffset int32, endOffset int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(startOffset)
	inArgs[2].SetInt32(endOffset)

	err := labelSelectRegionFunction_Set()
	if err == nil {
		labelSelectRegionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetAngleFunction *gi.Function
var labelSetAngleFunction_Once sync.Once

func labelSetAngleFunction_Set() error {
	var err error
	labelSetAngleFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetAngleFunction, err = labelStruct.InvokerNew("set_angle")
	})
	return err
}

// SetAngle is a representation of the C type gtk_label_set_angle.
func (recv *Label) SetAngle(angle float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(angle)

	err := labelSetAngleFunction_Set()
	if err == nil {
		labelSetAngleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_label_set_attributes' : parameter 'attrs' of type 'Pango.AttrList' not supported

// UNSUPPORTED : C value 'gtk_label_set_ellipsize' : parameter 'mode' of type 'Pango.EllipsizeMode' not supported

// UNSUPPORTED : C value 'gtk_label_set_justify' : parameter 'jtype' of type 'Justification' not supported

var labelSetLabelFunction *gi.Function
var labelSetLabelFunction_Once sync.Once

func labelSetLabelFunction_Set() error {
	var err error
	labelSetLabelFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetLabelFunction, err = labelStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_label_set_label.
func (recv *Label) SetLabel(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := labelSetLabelFunction_Set()
	if err == nil {
		labelSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetLineWrapFunction *gi.Function
var labelSetLineWrapFunction_Once sync.Once

func labelSetLineWrapFunction_Set() error {
	var err error
	labelSetLineWrapFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetLineWrapFunction, err = labelStruct.InvokerNew("set_line_wrap")
	})
	return err
}

// SetLineWrap is a representation of the C type gtk_label_set_line_wrap.
func (recv *Label) SetLineWrap(wrap bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(wrap)

	err := labelSetLineWrapFunction_Set()
	if err == nil {
		labelSetLineWrapFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_label_set_line_wrap_mode' : parameter 'wrap_mode' of type 'Pango.WrapMode' not supported

var labelSetLinesFunction *gi.Function
var labelSetLinesFunction_Once sync.Once

func labelSetLinesFunction_Set() error {
	var err error
	labelSetLinesFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetLinesFunction, err = labelStruct.InvokerNew("set_lines")
	})
	return err
}

// SetLines is a representation of the C type gtk_label_set_lines.
func (recv *Label) SetLines(lines int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(lines)

	err := labelSetLinesFunction_Set()
	if err == nil {
		labelSetLinesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetMarkupFunction *gi.Function
var labelSetMarkupFunction_Once sync.Once

func labelSetMarkupFunction_Set() error {
	var err error
	labelSetMarkupFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetMarkupFunction, err = labelStruct.InvokerNew("set_markup")
	})
	return err
}

// SetMarkup is a representation of the C type gtk_label_set_markup.
func (recv *Label) SetMarkup(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := labelSetMarkupFunction_Set()
	if err == nil {
		labelSetMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetMarkupWithMnemonicFunction *gi.Function
var labelSetMarkupWithMnemonicFunction_Once sync.Once

func labelSetMarkupWithMnemonicFunction_Set() error {
	var err error
	labelSetMarkupWithMnemonicFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetMarkupWithMnemonicFunction, err = labelStruct.InvokerNew("set_markup_with_mnemonic")
	})
	return err
}

// SetMarkupWithMnemonic is a representation of the C type gtk_label_set_markup_with_mnemonic.
func (recv *Label) SetMarkupWithMnemonic(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := labelSetMarkupWithMnemonicFunction_Set()
	if err == nil {
		labelSetMarkupWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetMaxWidthCharsFunction *gi.Function
var labelSetMaxWidthCharsFunction_Once sync.Once

func labelSetMaxWidthCharsFunction_Set() error {
	var err error
	labelSetMaxWidthCharsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetMaxWidthCharsFunction, err = labelStruct.InvokerNew("set_max_width_chars")
	})
	return err
}

// SetMaxWidthChars is a representation of the C type gtk_label_set_max_width_chars.
func (recv *Label) SetMaxWidthChars(nChars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nChars)

	err := labelSetMaxWidthCharsFunction_Set()
	if err == nil {
		labelSetMaxWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetMnemonicWidgetFunction *gi.Function
var labelSetMnemonicWidgetFunction_Once sync.Once

func labelSetMnemonicWidgetFunction_Set() error {
	var err error
	labelSetMnemonicWidgetFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetMnemonicWidgetFunction, err = labelStruct.InvokerNew("set_mnemonic_widget")
	})
	return err
}

// SetMnemonicWidget is a representation of the C type gtk_label_set_mnemonic_widget.
func (recv *Label) SetMnemonicWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := labelSetMnemonicWidgetFunction_Set()
	if err == nil {
		labelSetMnemonicWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetPatternFunction *gi.Function
var labelSetPatternFunction_Once sync.Once

func labelSetPatternFunction_Set() error {
	var err error
	labelSetPatternFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetPatternFunction, err = labelStruct.InvokerNew("set_pattern")
	})
	return err
}

// SetPattern is a representation of the C type gtk_label_set_pattern.
func (recv *Label) SetPattern(pattern string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(pattern)

	err := labelSetPatternFunction_Set()
	if err == nil {
		labelSetPatternFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetSelectableFunction *gi.Function
var labelSetSelectableFunction_Once sync.Once

func labelSetSelectableFunction_Set() error {
	var err error
	labelSetSelectableFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetSelectableFunction, err = labelStruct.InvokerNew("set_selectable")
	})
	return err
}

// SetSelectable is a representation of the C type gtk_label_set_selectable.
func (recv *Label) SetSelectable(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := labelSetSelectableFunction_Set()
	if err == nil {
		labelSetSelectableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetSingleLineModeFunction *gi.Function
var labelSetSingleLineModeFunction_Once sync.Once

func labelSetSingleLineModeFunction_Set() error {
	var err error
	labelSetSingleLineModeFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetSingleLineModeFunction, err = labelStruct.InvokerNew("set_single_line_mode")
	})
	return err
}

// SetSingleLineMode is a representation of the C type gtk_label_set_single_line_mode.
func (recv *Label) SetSingleLineMode(singleLineMode bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(singleLineMode)

	err := labelSetSingleLineModeFunction_Set()
	if err == nil {
		labelSetSingleLineModeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetTextFunction *gi.Function
var labelSetTextFunction_Once sync.Once

func labelSetTextFunction_Set() error {
	var err error
	labelSetTextFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetTextFunction, err = labelStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_label_set_text.
func (recv *Label) SetText(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := labelSetTextFunction_Set()
	if err == nil {
		labelSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetTextWithMnemonicFunction *gi.Function
var labelSetTextWithMnemonicFunction_Once sync.Once

func labelSetTextWithMnemonicFunction_Set() error {
	var err error
	labelSetTextWithMnemonicFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetTextWithMnemonicFunction, err = labelStruct.InvokerNew("set_text_with_mnemonic")
	})
	return err
}

// SetTextWithMnemonic is a representation of the C type gtk_label_set_text_with_mnemonic.
func (recv *Label) SetTextWithMnemonic(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := labelSetTextWithMnemonicFunction_Set()
	if err == nil {
		labelSetTextWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetTrackVisitedLinksFunction *gi.Function
var labelSetTrackVisitedLinksFunction_Once sync.Once

func labelSetTrackVisitedLinksFunction_Set() error {
	var err error
	labelSetTrackVisitedLinksFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetTrackVisitedLinksFunction, err = labelStruct.InvokerNew("set_track_visited_links")
	})
	return err
}

// SetTrackVisitedLinks is a representation of the C type gtk_label_set_track_visited_links.
func (recv *Label) SetTrackVisitedLinks(trackLinks bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(trackLinks)

	err := labelSetTrackVisitedLinksFunction_Set()
	if err == nil {
		labelSetTrackVisitedLinksFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetUseMarkupFunction *gi.Function
var labelSetUseMarkupFunction_Once sync.Once

func labelSetUseMarkupFunction_Set() error {
	var err error
	labelSetUseMarkupFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetUseMarkupFunction, err = labelStruct.InvokerNew("set_use_markup")
	})
	return err
}

// SetUseMarkup is a representation of the C type gtk_label_set_use_markup.
func (recv *Label) SetUseMarkup(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := labelSetUseMarkupFunction_Set()
	if err == nil {
		labelSetUseMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetUseUnderlineFunction *gi.Function
var labelSetUseUnderlineFunction_Once sync.Once

func labelSetUseUnderlineFunction_Set() error {
	var err error
	labelSetUseUnderlineFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetUseUnderlineFunction, err = labelStruct.InvokerNew("set_use_underline")
	})
	return err
}

// SetUseUnderline is a representation of the C type gtk_label_set_use_underline.
func (recv *Label) SetUseUnderline(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := labelSetUseUnderlineFunction_Set()
	if err == nil {
		labelSetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetWidthCharsFunction *gi.Function
var labelSetWidthCharsFunction_Once sync.Once

func labelSetWidthCharsFunction_Set() error {
	var err error
	labelSetWidthCharsFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetWidthCharsFunction, err = labelStruct.InvokerNew("set_width_chars")
	})
	return err
}

// SetWidthChars is a representation of the C type gtk_label_set_width_chars.
func (recv *Label) SetWidthChars(nChars int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nChars)

	err := labelSetWidthCharsFunction_Set()
	if err == nil {
		labelSetWidthCharsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetXalignFunction *gi.Function
var labelSetXalignFunction_Once sync.Once

func labelSetXalignFunction_Set() error {
	var err error
	labelSetXalignFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetXalignFunction, err = labelStruct.InvokerNew("set_xalign")
	})
	return err
}

// SetXalign is a representation of the C type gtk_label_set_xalign.
func (recv *Label) SetXalign(xalign float32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)

	err := labelSetXalignFunction_Set()
	if err == nil {
		labelSetXalignFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelSetYalignFunction *gi.Function
var labelSetYalignFunction_Once sync.Once

func labelSetYalignFunction_Set() error {
	var err error
	labelSetYalignFunction_Once.Do(func() {
		err = labelStruct_Set()
		if err != nil {
			return
		}
		labelSetYalignFunction, err = labelStruct.InvokerNew("set_yalign")
	})
	return err
}

// SetYalign is a representation of the C type gtk_label_set_yalign.
func (recv *Label) SetYalign(yalign float32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(yalign)

	err := labelSetYalignFunction_Set()
	if err == nil {
		labelSetYalignFunction.Invoke(inArgs[:], nil)
	}

	return
}

var labelAccessibleStruct *gi.Struct
var labelAccessibleStruct_Once sync.Once

func labelAccessibleStruct_Set() error {
	var err error
	labelAccessibleStruct_Once.Do(func() {
		labelAccessibleStruct, err = gi.StructNew("Gtk", "LabelAccessible")
	})
	return err
}

type LabelAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *LabelAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(labelAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *LabelAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(labelAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *LabelAccessible) FieldPriv() *LabelAccessiblePrivate {
	argValue := gi.FieldGet(labelAccessibleStruct, recv.Native, "priv")
	value := &LabelAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *LabelAccessible) SetFieldPriv(value *LabelAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(labelAccessibleStruct, recv.Native, "priv", argValue)
}

// LabelAccessibleStruct creates an uninitialised LabelAccessible.
func LabelAccessibleStruct() *LabelAccessible {
	err := labelAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &LabelAccessible{}
	structGo.Native = labelAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeLabelAccessible)
	return structGo
}
func finalizeLabelAccessible(obj *LabelAccessible) {
	labelAccessibleStruct.Free(obj.Native)
}

var layoutStruct *gi.Struct
var layoutStruct_Once sync.Once

func layoutStruct_Set() error {
	var err error
	layoutStruct_Once.Do(func() {
		layoutStruct, err = gi.StructNew("Gtk", "Layout")
	})
	return err
}

type Layout struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Layout) FieldContainer() *Container {
	argValue := gi.FieldGet(layoutStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Layout) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(layoutStruct, recv.Native, "container", argValue)
}

var layoutNewFunction *gi.Function
var layoutNewFunction_Once sync.Once

func layoutNewFunction_Set() error {
	var err error
	layoutNewFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutNewFunction, err = layoutStruct.InvokerNew("new")
	})
	return err
}

// LayoutNew is a representation of the C type gtk_layout_new.
func LayoutNew(hadjustment *Adjustment, vadjustment *Adjustment) *Layout {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(hadjustment.Native)
	inArgs[1].SetPointer(vadjustment.Native)

	var ret gi.Argument

	err := layoutNewFunction_Set()
	if err == nil {
		ret = layoutNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Layout{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_layout_get_bin_window' : return type 'Gdk.Window' not supported

var layoutGetHadjustmentFunction *gi.Function
var layoutGetHadjustmentFunction_Once sync.Once

func layoutGetHadjustmentFunction_Set() error {
	var err error
	layoutGetHadjustmentFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutGetHadjustmentFunction, err = layoutStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_layout_get_hadjustment.
func (recv *Layout) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := layoutGetHadjustmentFunction_Set()
	if err == nil {
		ret = layoutGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var layoutGetSizeFunction *gi.Function
var layoutGetSizeFunction_Once sync.Once

func layoutGetSizeFunction_Set() error {
	var err error
	layoutGetSizeFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutGetSizeFunction, err = layoutStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_layout_get_size.
func (recv *Layout) GetSize() (uint32, uint32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := layoutGetSizeFunction_Set()
	if err == nil {
		layoutGetSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].Uint32()

	return out0, out1
}

var layoutGetVadjustmentFunction *gi.Function
var layoutGetVadjustmentFunction_Once sync.Once

func layoutGetVadjustmentFunction_Set() error {
	var err error
	layoutGetVadjustmentFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutGetVadjustmentFunction, err = layoutStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_layout_get_vadjustment.
func (recv *Layout) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := layoutGetVadjustmentFunction_Set()
	if err == nil {
		ret = layoutGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var layoutMoveFunction *gi.Function
var layoutMoveFunction_Once sync.Once

func layoutMoveFunction_Set() error {
	var err error
	layoutMoveFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutMoveFunction, err = layoutStruct.InvokerNew("move")
	})
	return err
}

// Move is a representation of the C type gtk_layout_move.
func (recv *Layout) Move(childWidget *Widget, x int32, y int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childWidget.Native)
	inArgs[2].SetInt32(x)
	inArgs[3].SetInt32(y)

	err := layoutMoveFunction_Set()
	if err == nil {
		layoutMoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var layoutPutFunction *gi.Function
var layoutPutFunction_Once sync.Once

func layoutPutFunction_Set() error {
	var err error
	layoutPutFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutPutFunction, err = layoutStruct.InvokerNew("put")
	})
	return err
}

// Put is a representation of the C type gtk_layout_put.
func (recv *Layout) Put(childWidget *Widget, x int32, y int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childWidget.Native)
	inArgs[2].SetInt32(x)
	inArgs[3].SetInt32(y)

	err := layoutPutFunction_Set()
	if err == nil {
		layoutPutFunction.Invoke(inArgs[:], nil)
	}

	return
}

var layoutSetHadjustmentFunction *gi.Function
var layoutSetHadjustmentFunction_Once sync.Once

func layoutSetHadjustmentFunction_Set() error {
	var err error
	layoutSetHadjustmentFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutSetHadjustmentFunction, err = layoutStruct.InvokerNew("set_hadjustment")
	})
	return err
}

// SetHadjustment is a representation of the C type gtk_layout_set_hadjustment.
func (recv *Layout) SetHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := layoutSetHadjustmentFunction_Set()
	if err == nil {
		layoutSetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var layoutSetSizeFunction *gi.Function
var layoutSetSizeFunction_Once sync.Once

func layoutSetSizeFunction_Set() error {
	var err error
	layoutSetSizeFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutSetSizeFunction, err = layoutStruct.InvokerNew("set_size")
	})
	return err
}

// SetSize is a representation of the C type gtk_layout_set_size.
func (recv *Layout) SetSize(width uint32, height uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(width)
	inArgs[2].SetUint32(height)

	err := layoutSetSizeFunction_Set()
	if err == nil {
		layoutSetSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var layoutSetVadjustmentFunction *gi.Function
var layoutSetVadjustmentFunction_Once sync.Once

func layoutSetVadjustmentFunction_Set() error {
	var err error
	layoutSetVadjustmentFunction_Once.Do(func() {
		err = layoutStruct_Set()
		if err != nil {
			return
		}
		layoutSetVadjustmentFunction, err = layoutStruct.InvokerNew("set_vadjustment")
	})
	return err
}

// SetVadjustment is a representation of the C type gtk_layout_set_vadjustment.
func (recv *Layout) SetVadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := layoutSetVadjustmentFunction_Set()
	if err == nil {
		layoutSetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarStruct *gi.Struct
var levelBarStruct_Once sync.Once

func levelBarStruct_Set() error {
	var err error
	levelBarStruct_Once.Do(func() {
		levelBarStruct, err = gi.StructNew("Gtk", "LevelBar")
	})
	return err
}

type LevelBar struct {
	Widget
}

var levelBarNewFunction *gi.Function
var levelBarNewFunction_Once sync.Once

func levelBarNewFunction_Set() error {
	var err error
	levelBarNewFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarNewFunction, err = levelBarStruct.InvokerNew("new")
	})
	return err
}

// LevelBarNew is a representation of the C type gtk_level_bar_new.
func LevelBarNew() *LevelBar {

	var ret gi.Argument

	err := levelBarNewFunction_Set()
	if err == nil {
		ret = levelBarNewFunction.Invoke(nil, nil)
	}

	retGo := &LevelBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var levelBarNewForIntervalFunction *gi.Function
var levelBarNewForIntervalFunction_Once sync.Once

func levelBarNewForIntervalFunction_Set() error {
	var err error
	levelBarNewForIntervalFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarNewForIntervalFunction, err = levelBarStruct.InvokerNew("new_for_interval")
	})
	return err
}

// LevelBarNewForInterval is a representation of the C type gtk_level_bar_new_for_interval.
func LevelBarNewForInterval(minValue float64, maxValue float64) *LevelBar {
	var inArgs [2]gi.Argument
	inArgs[0].SetFloat64(minValue)
	inArgs[1].SetFloat64(maxValue)

	var ret gi.Argument

	err := levelBarNewForIntervalFunction_Set()
	if err == nil {
		ret = levelBarNewForIntervalFunction.Invoke(inArgs[:], nil)
	}

	retGo := &LevelBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var levelBarAddOffsetValueFunction *gi.Function
var levelBarAddOffsetValueFunction_Once sync.Once

func levelBarAddOffsetValueFunction_Set() error {
	var err error
	levelBarAddOffsetValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarAddOffsetValueFunction, err = levelBarStruct.InvokerNew("add_offset_value")
	})
	return err
}

// AddOffsetValue is a representation of the C type gtk_level_bar_add_offset_value.
func (recv *LevelBar) AddOffsetValue(name string, value float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetFloat64(value)

	err := levelBarAddOffsetValueFunction_Set()
	if err == nil {
		levelBarAddOffsetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarGetInvertedFunction *gi.Function
var levelBarGetInvertedFunction_Once sync.Once

func levelBarGetInvertedFunction_Set() error {
	var err error
	levelBarGetInvertedFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarGetInvertedFunction, err = levelBarStruct.InvokerNew("get_inverted")
	})
	return err
}

// GetInverted is a representation of the C type gtk_level_bar_get_inverted.
func (recv *LevelBar) GetInverted() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := levelBarGetInvertedFunction_Set()
	if err == nil {
		ret = levelBarGetInvertedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var levelBarGetMaxValueFunction *gi.Function
var levelBarGetMaxValueFunction_Once sync.Once

func levelBarGetMaxValueFunction_Set() error {
	var err error
	levelBarGetMaxValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarGetMaxValueFunction, err = levelBarStruct.InvokerNew("get_max_value")
	})
	return err
}

// GetMaxValue is a representation of the C type gtk_level_bar_get_max_value.
func (recv *LevelBar) GetMaxValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := levelBarGetMaxValueFunction_Set()
	if err == nil {
		ret = levelBarGetMaxValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var levelBarGetMinValueFunction *gi.Function
var levelBarGetMinValueFunction_Once sync.Once

func levelBarGetMinValueFunction_Set() error {
	var err error
	levelBarGetMinValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarGetMinValueFunction, err = levelBarStruct.InvokerNew("get_min_value")
	})
	return err
}

// GetMinValue is a representation of the C type gtk_level_bar_get_min_value.
func (recv *LevelBar) GetMinValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := levelBarGetMinValueFunction_Set()
	if err == nil {
		ret = levelBarGetMinValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_level_bar_get_mode' : return type 'LevelBarMode' not supported

var levelBarGetOffsetValueFunction *gi.Function
var levelBarGetOffsetValueFunction_Once sync.Once

func levelBarGetOffsetValueFunction_Set() error {
	var err error
	levelBarGetOffsetValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarGetOffsetValueFunction, err = levelBarStruct.InvokerNew("get_offset_value")
	})
	return err
}

// GetOffsetValue is a representation of the C type gtk_level_bar_get_offset_value.
func (recv *LevelBar) GetOffsetValue(name string) (bool, float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := levelBarGetOffsetValueFunction_Set()
	if err == nil {
		ret = levelBarGetOffsetValueFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()

	return retGo, out0
}

var levelBarGetValueFunction *gi.Function
var levelBarGetValueFunction_Once sync.Once

func levelBarGetValueFunction_Set() error {
	var err error
	levelBarGetValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarGetValueFunction, err = levelBarStruct.InvokerNew("get_value")
	})
	return err
}

// GetValue is a representation of the C type gtk_level_bar_get_value.
func (recv *LevelBar) GetValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := levelBarGetValueFunction_Set()
	if err == nil {
		ret = levelBarGetValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var levelBarRemoveOffsetValueFunction *gi.Function
var levelBarRemoveOffsetValueFunction_Once sync.Once

func levelBarRemoveOffsetValueFunction_Set() error {
	var err error
	levelBarRemoveOffsetValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarRemoveOffsetValueFunction, err = levelBarStruct.InvokerNew("remove_offset_value")
	})
	return err
}

// RemoveOffsetValue is a representation of the C type gtk_level_bar_remove_offset_value.
func (recv *LevelBar) RemoveOffsetValue(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := levelBarRemoveOffsetValueFunction_Set()
	if err == nil {
		levelBarRemoveOffsetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarSetInvertedFunction *gi.Function
var levelBarSetInvertedFunction_Once sync.Once

func levelBarSetInvertedFunction_Set() error {
	var err error
	levelBarSetInvertedFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarSetInvertedFunction, err = levelBarStruct.InvokerNew("set_inverted")
	})
	return err
}

// SetInverted is a representation of the C type gtk_level_bar_set_inverted.
func (recv *LevelBar) SetInverted(inverted bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(inverted)

	err := levelBarSetInvertedFunction_Set()
	if err == nil {
		levelBarSetInvertedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarSetMaxValueFunction *gi.Function
var levelBarSetMaxValueFunction_Once sync.Once

func levelBarSetMaxValueFunction_Set() error {
	var err error
	levelBarSetMaxValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarSetMaxValueFunction, err = levelBarStruct.InvokerNew("set_max_value")
	})
	return err
}

// SetMaxValue is a representation of the C type gtk_level_bar_set_max_value.
func (recv *LevelBar) SetMaxValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := levelBarSetMaxValueFunction_Set()
	if err == nil {
		levelBarSetMaxValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarSetMinValueFunction *gi.Function
var levelBarSetMinValueFunction_Once sync.Once

func levelBarSetMinValueFunction_Set() error {
	var err error
	levelBarSetMinValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarSetMinValueFunction, err = levelBarStruct.InvokerNew("set_min_value")
	})
	return err
}

// SetMinValue is a representation of the C type gtk_level_bar_set_min_value.
func (recv *LevelBar) SetMinValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := levelBarSetMinValueFunction_Set()
	if err == nil {
		levelBarSetMinValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_level_bar_set_mode' : parameter 'mode' of type 'LevelBarMode' not supported

var levelBarSetValueFunction *gi.Function
var levelBarSetValueFunction_Once sync.Once

func levelBarSetValueFunction_Set() error {
	var err error
	levelBarSetValueFunction_Once.Do(func() {
		err = levelBarStruct_Set()
		if err != nil {
			return
		}
		levelBarSetValueFunction, err = levelBarStruct.InvokerNew("set_value")
	})
	return err
}

// SetValue is a representation of the C type gtk_level_bar_set_value.
func (recv *LevelBar) SetValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := levelBarSetValueFunction_Set()
	if err == nil {
		levelBarSetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var levelBarAccessibleStruct *gi.Struct
var levelBarAccessibleStruct_Once sync.Once

func levelBarAccessibleStruct_Set() error {
	var err error
	levelBarAccessibleStruct_Once.Do(func() {
		levelBarAccessibleStruct, err = gi.StructNew("Gtk", "LevelBarAccessible")
	})
	return err
}

type LevelBarAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *LevelBarAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(levelBarAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *LevelBarAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(levelBarAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *LevelBarAccessible) FieldPriv() *LevelBarAccessiblePrivate {
	argValue := gi.FieldGet(levelBarAccessibleStruct, recv.Native, "priv")
	value := &LevelBarAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *LevelBarAccessible) SetFieldPriv(value *LevelBarAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(levelBarAccessibleStruct, recv.Native, "priv", argValue)
}

// LevelBarAccessibleStruct creates an uninitialised LevelBarAccessible.
func LevelBarAccessibleStruct() *LevelBarAccessible {
	err := levelBarAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &LevelBarAccessible{}
	structGo.Native = levelBarAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeLevelBarAccessible)
	return structGo
}
func finalizeLevelBarAccessible(obj *LevelBarAccessible) {
	levelBarAccessibleStruct.Free(obj.Native)
}

var linkButtonStruct *gi.Struct
var linkButtonStruct_Once sync.Once

func linkButtonStruct_Set() error {
	var err error
	linkButtonStruct_Once.Do(func() {
		linkButtonStruct, err = gi.StructNew("Gtk", "LinkButton")
	})
	return err
}

type LinkButton struct {
	Button
}

var linkButtonNewFunction *gi.Function
var linkButtonNewFunction_Once sync.Once

func linkButtonNewFunction_Set() error {
	var err error
	linkButtonNewFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonNewFunction, err = linkButtonStruct.InvokerNew("new")
	})
	return err
}

// LinkButtonNew is a representation of the C type gtk_link_button_new.
func LinkButtonNew(uri string) *LinkButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(uri)

	var ret gi.Argument

	err := linkButtonNewFunction_Set()
	if err == nil {
		ret = linkButtonNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &LinkButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var linkButtonNewWithLabelFunction *gi.Function
var linkButtonNewWithLabelFunction_Once sync.Once

func linkButtonNewWithLabelFunction_Set() error {
	var err error
	linkButtonNewWithLabelFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonNewWithLabelFunction, err = linkButtonStruct.InvokerNew("new_with_label")
	})
	return err
}

// LinkButtonNewWithLabel is a representation of the C type gtk_link_button_new_with_label.
func LinkButtonNewWithLabel(uri string, label string) *LinkButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(uri)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := linkButtonNewWithLabelFunction_Set()
	if err == nil {
		ret = linkButtonNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &LinkButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var linkButtonGetUriFunction *gi.Function
var linkButtonGetUriFunction_Once sync.Once

func linkButtonGetUriFunction_Set() error {
	var err error
	linkButtonGetUriFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonGetUriFunction, err = linkButtonStruct.InvokerNew("get_uri")
	})
	return err
}

// GetUri is a representation of the C type gtk_link_button_get_uri.
func (recv *LinkButton) GetUri() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := linkButtonGetUriFunction_Set()
	if err == nil {
		ret = linkButtonGetUriFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var linkButtonGetVisitedFunction *gi.Function
var linkButtonGetVisitedFunction_Once sync.Once

func linkButtonGetVisitedFunction_Set() error {
	var err error
	linkButtonGetVisitedFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonGetVisitedFunction, err = linkButtonStruct.InvokerNew("get_visited")
	})
	return err
}

// GetVisited is a representation of the C type gtk_link_button_get_visited.
func (recv *LinkButton) GetVisited() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := linkButtonGetVisitedFunction_Set()
	if err == nil {
		ret = linkButtonGetVisitedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var linkButtonSetUriFunction *gi.Function
var linkButtonSetUriFunction_Once sync.Once

func linkButtonSetUriFunction_Set() error {
	var err error
	linkButtonSetUriFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonSetUriFunction, err = linkButtonStruct.InvokerNew("set_uri")
	})
	return err
}

// SetUri is a representation of the C type gtk_link_button_set_uri.
func (recv *LinkButton) SetUri(uri string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)

	err := linkButtonSetUriFunction_Set()
	if err == nil {
		linkButtonSetUriFunction.Invoke(inArgs[:], nil)
	}

	return
}

var linkButtonSetVisitedFunction *gi.Function
var linkButtonSetVisitedFunction_Once sync.Once

func linkButtonSetVisitedFunction_Set() error {
	var err error
	linkButtonSetVisitedFunction_Once.Do(func() {
		err = linkButtonStruct_Set()
		if err != nil {
			return
		}
		linkButtonSetVisitedFunction, err = linkButtonStruct.InvokerNew("set_visited")
	})
	return err
}

// SetVisited is a representation of the C type gtk_link_button_set_visited.
func (recv *LinkButton) SetVisited(visited bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visited)

	err := linkButtonSetVisitedFunction_Set()
	if err == nil {
		linkButtonSetVisitedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var linkButtonAccessibleStruct *gi.Struct
var linkButtonAccessibleStruct_Once sync.Once

func linkButtonAccessibleStruct_Set() error {
	var err error
	linkButtonAccessibleStruct_Once.Do(func() {
		linkButtonAccessibleStruct, err = gi.StructNew("Gtk", "LinkButtonAccessible")
	})
	return err
}

type LinkButtonAccessible struct {
	ButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *LinkButtonAccessible) FieldParent() *ButtonAccessible {
	argValue := gi.FieldGet(linkButtonAccessibleStruct, recv.Native, "parent")
	value := &ButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *LinkButtonAccessible) SetFieldParent(value *ButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(linkButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *LinkButtonAccessible) FieldPriv() *LinkButtonAccessiblePrivate {
	argValue := gi.FieldGet(linkButtonAccessibleStruct, recv.Native, "priv")
	value := &LinkButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *LinkButtonAccessible) SetFieldPriv(value *LinkButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(linkButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// LinkButtonAccessibleStruct creates an uninitialised LinkButtonAccessible.
func LinkButtonAccessibleStruct() *LinkButtonAccessible {
	err := linkButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &LinkButtonAccessible{}
	structGo.Native = linkButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeLinkButtonAccessible)
	return structGo
}
func finalizeLinkButtonAccessible(obj *LinkButtonAccessible) {
	linkButtonAccessibleStruct.Free(obj.Native)
}

var listBoxStruct *gi.Struct
var listBoxStruct_Once sync.Once

func listBoxStruct_Set() error {
	var err error
	listBoxStruct_Once.Do(func() {
		listBoxStruct, err = gi.StructNew("Gtk", "ListBox")
	})
	return err
}

type ListBox struct {
	Container
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ListBox) FieldParentInstance() *Container {
	argValue := gi.FieldGet(listBoxStruct, recv.Native, "parent_instance")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ListBox) SetFieldParentInstance(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(listBoxStruct, recv.Native, "parent_instance", argValue)
}

var listBoxNewFunction *gi.Function
var listBoxNewFunction_Once sync.Once

func listBoxNewFunction_Set() error {
	var err error
	listBoxNewFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxNewFunction, err = listBoxStruct.InvokerNew("new")
	})
	return err
}

// ListBoxNew is a representation of the C type gtk_list_box_new.
func ListBoxNew() *ListBox {

	var ret gi.Argument

	err := listBoxNewFunction_Set()
	if err == nil {
		ret = listBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &ListBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_list_box_bind_model' : parameter 'model' of type 'Gio.ListModel' not supported

var listBoxDragHighlightRowFunction *gi.Function
var listBoxDragHighlightRowFunction_Once sync.Once

func listBoxDragHighlightRowFunction_Set() error {
	var err error
	listBoxDragHighlightRowFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxDragHighlightRowFunction, err = listBoxStruct.InvokerNew("drag_highlight_row")
	})
	return err
}

// DragHighlightRow is a representation of the C type gtk_list_box_drag_highlight_row.
func (recv *ListBox) DragHighlightRow(row *ListBoxRow) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(row.Native)

	err := listBoxDragHighlightRowFunction_Set()
	if err == nil {
		listBoxDragHighlightRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxDragUnhighlightRowFunction *gi.Function
var listBoxDragUnhighlightRowFunction_Once sync.Once

func listBoxDragUnhighlightRowFunction_Set() error {
	var err error
	listBoxDragUnhighlightRowFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxDragUnhighlightRowFunction, err = listBoxStruct.InvokerNew("drag_unhighlight_row")
	})
	return err
}

// DragUnhighlightRow is a representation of the C type gtk_list_box_drag_unhighlight_row.
func (recv *ListBox) DragUnhighlightRow() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxDragUnhighlightRowFunction_Set()
	if err == nil {
		listBoxDragUnhighlightRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxGetActivateOnSingleClickFunction *gi.Function
var listBoxGetActivateOnSingleClickFunction_Once sync.Once

func listBoxGetActivateOnSingleClickFunction_Set() error {
	var err error
	listBoxGetActivateOnSingleClickFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxGetActivateOnSingleClickFunction, err = listBoxStruct.InvokerNew("get_activate_on_single_click")
	})
	return err
}

// GetActivateOnSingleClick is a representation of the C type gtk_list_box_get_activate_on_single_click.
func (recv *ListBox) GetActivateOnSingleClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxGetActivateOnSingleClickFunction_Set()
	if err == nil {
		ret = listBoxGetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var listBoxGetAdjustmentFunction *gi.Function
var listBoxGetAdjustmentFunction_Once sync.Once

func listBoxGetAdjustmentFunction_Set() error {
	var err error
	listBoxGetAdjustmentFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxGetAdjustmentFunction, err = listBoxStruct.InvokerNew("get_adjustment")
	})
	return err
}

// GetAdjustment is a representation of the C type gtk_list_box_get_adjustment.
func (recv *ListBox) GetAdjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxGetAdjustmentFunction_Set()
	if err == nil {
		ret = listBoxGetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var listBoxGetRowAtIndexFunction *gi.Function
var listBoxGetRowAtIndexFunction_Once sync.Once

func listBoxGetRowAtIndexFunction_Set() error {
	var err error
	listBoxGetRowAtIndexFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxGetRowAtIndexFunction, err = listBoxStruct.InvokerNew("get_row_at_index")
	})
	return err
}

// GetRowAtIndex is a representation of the C type gtk_list_box_get_row_at_index.
func (recv *ListBox) GetRowAtIndex(index int32) *ListBoxRow {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(index)

	var ret gi.Argument

	err := listBoxGetRowAtIndexFunction_Set()
	if err == nil {
		ret = listBoxGetRowAtIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ListBoxRow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var listBoxGetRowAtYFunction *gi.Function
var listBoxGetRowAtYFunction_Once sync.Once

func listBoxGetRowAtYFunction_Set() error {
	var err error
	listBoxGetRowAtYFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxGetRowAtYFunction, err = listBoxStruct.InvokerNew("get_row_at_y")
	})
	return err
}

// GetRowAtY is a representation of the C type gtk_list_box_get_row_at_y.
func (recv *ListBox) GetRowAtY(y int32) *ListBoxRow {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(y)

	var ret gi.Argument

	err := listBoxGetRowAtYFunction_Set()
	if err == nil {
		ret = listBoxGetRowAtYFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ListBoxRow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var listBoxGetSelectedRowFunction *gi.Function
var listBoxGetSelectedRowFunction_Once sync.Once

func listBoxGetSelectedRowFunction_Set() error {
	var err error
	listBoxGetSelectedRowFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxGetSelectedRowFunction, err = listBoxStruct.InvokerNew("get_selected_row")
	})
	return err
}

// GetSelectedRow is a representation of the C type gtk_list_box_get_selected_row.
func (recv *ListBox) GetSelectedRow() *ListBoxRow {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxGetSelectedRowFunction_Set()
	if err == nil {
		ret = listBoxGetSelectedRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ListBoxRow{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_list_box_get_selected_rows' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_list_box_get_selection_mode' : return type 'SelectionMode' not supported

var listBoxInsertFunction *gi.Function
var listBoxInsertFunction_Once sync.Once

func listBoxInsertFunction_Set() error {
	var err error
	listBoxInsertFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxInsertFunction, err = listBoxStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_list_box_insert.
func (recv *ListBox) Insert(child *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(position)

	err := listBoxInsertFunction_Set()
	if err == nil {
		listBoxInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxInvalidateFilterFunction *gi.Function
var listBoxInvalidateFilterFunction_Once sync.Once

func listBoxInvalidateFilterFunction_Set() error {
	var err error
	listBoxInvalidateFilterFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxInvalidateFilterFunction, err = listBoxStruct.InvokerNew("invalidate_filter")
	})
	return err
}

// InvalidateFilter is a representation of the C type gtk_list_box_invalidate_filter.
func (recv *ListBox) InvalidateFilter() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxInvalidateFilterFunction_Set()
	if err == nil {
		listBoxInvalidateFilterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxInvalidateHeadersFunction *gi.Function
var listBoxInvalidateHeadersFunction_Once sync.Once

func listBoxInvalidateHeadersFunction_Set() error {
	var err error
	listBoxInvalidateHeadersFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxInvalidateHeadersFunction, err = listBoxStruct.InvokerNew("invalidate_headers")
	})
	return err
}

// InvalidateHeaders is a representation of the C type gtk_list_box_invalidate_headers.
func (recv *ListBox) InvalidateHeaders() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxInvalidateHeadersFunction_Set()
	if err == nil {
		listBoxInvalidateHeadersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxInvalidateSortFunction *gi.Function
var listBoxInvalidateSortFunction_Once sync.Once

func listBoxInvalidateSortFunction_Set() error {
	var err error
	listBoxInvalidateSortFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxInvalidateSortFunction, err = listBoxStruct.InvokerNew("invalidate_sort")
	})
	return err
}

// InvalidateSort is a representation of the C type gtk_list_box_invalidate_sort.
func (recv *ListBox) InvalidateSort() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxInvalidateSortFunction_Set()
	if err == nil {
		listBoxInvalidateSortFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxPrependFunction *gi.Function
var listBoxPrependFunction_Once sync.Once

func listBoxPrependFunction_Set() error {
	var err error
	listBoxPrependFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxPrependFunction, err = listBoxStruct.InvokerNew("prepend")
	})
	return err
}

// Prepend is a representation of the C type gtk_list_box_prepend.
func (recv *ListBox) Prepend(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := listBoxPrependFunction_Set()
	if err == nil {
		listBoxPrependFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxSelectAllFunction *gi.Function
var listBoxSelectAllFunction_Once sync.Once

func listBoxSelectAllFunction_Set() error {
	var err error
	listBoxSelectAllFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxSelectAllFunction, err = listBoxStruct.InvokerNew("select_all")
	})
	return err
}

// SelectAll is a representation of the C type gtk_list_box_select_all.
func (recv *ListBox) SelectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxSelectAllFunction_Set()
	if err == nil {
		listBoxSelectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxSelectRowFunction *gi.Function
var listBoxSelectRowFunction_Once sync.Once

func listBoxSelectRowFunction_Set() error {
	var err error
	listBoxSelectRowFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxSelectRowFunction, err = listBoxStruct.InvokerNew("select_row")
	})
	return err
}

// SelectRow is a representation of the C type gtk_list_box_select_row.
func (recv *ListBox) SelectRow(row *ListBoxRow) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(row.Native)

	err := listBoxSelectRowFunction_Set()
	if err == nil {
		listBoxSelectRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_list_box_selected_foreach' : parameter 'func' of type 'ListBoxForeachFunc' not supported

var listBoxSetActivateOnSingleClickFunction *gi.Function
var listBoxSetActivateOnSingleClickFunction_Once sync.Once

func listBoxSetActivateOnSingleClickFunction_Set() error {
	var err error
	listBoxSetActivateOnSingleClickFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxSetActivateOnSingleClickFunction, err = listBoxStruct.InvokerNew("set_activate_on_single_click")
	})
	return err
}

// SetActivateOnSingleClick is a representation of the C type gtk_list_box_set_activate_on_single_click.
func (recv *ListBox) SetActivateOnSingleClick(single bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(single)

	err := listBoxSetActivateOnSingleClickFunction_Set()
	if err == nil {
		listBoxSetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxSetAdjustmentFunction *gi.Function
var listBoxSetAdjustmentFunction_Once sync.Once

func listBoxSetAdjustmentFunction_Set() error {
	var err error
	listBoxSetAdjustmentFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxSetAdjustmentFunction, err = listBoxStruct.InvokerNew("set_adjustment")
	})
	return err
}

// SetAdjustment is a representation of the C type gtk_list_box_set_adjustment.
func (recv *ListBox) SetAdjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := listBoxSetAdjustmentFunction_Set()
	if err == nil {
		listBoxSetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_list_box_set_filter_func' : parameter 'filter_func' of type 'ListBoxFilterFunc' not supported

// UNSUPPORTED : C value 'gtk_list_box_set_header_func' : parameter 'update_header' of type 'ListBoxUpdateHeaderFunc' not supported

var listBoxSetPlaceholderFunction *gi.Function
var listBoxSetPlaceholderFunction_Once sync.Once

func listBoxSetPlaceholderFunction_Set() error {
	var err error
	listBoxSetPlaceholderFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxSetPlaceholderFunction, err = listBoxStruct.InvokerNew("set_placeholder")
	})
	return err
}

// SetPlaceholder is a representation of the C type gtk_list_box_set_placeholder.
func (recv *ListBox) SetPlaceholder(placeholder *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(placeholder.Native)

	err := listBoxSetPlaceholderFunction_Set()
	if err == nil {
		listBoxSetPlaceholderFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_list_box_set_selection_mode' : parameter 'mode' of type 'SelectionMode' not supported

// UNSUPPORTED : C value 'gtk_list_box_set_sort_func' : parameter 'sort_func' of type 'ListBoxSortFunc' not supported

var listBoxUnselectAllFunction *gi.Function
var listBoxUnselectAllFunction_Once sync.Once

func listBoxUnselectAllFunction_Set() error {
	var err error
	listBoxUnselectAllFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxUnselectAllFunction, err = listBoxStruct.InvokerNew("unselect_all")
	})
	return err
}

// UnselectAll is a representation of the C type gtk_list_box_unselect_all.
func (recv *ListBox) UnselectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxUnselectAllFunction_Set()
	if err == nil {
		listBoxUnselectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxUnselectRowFunction *gi.Function
var listBoxUnselectRowFunction_Once sync.Once

func listBoxUnselectRowFunction_Set() error {
	var err error
	listBoxUnselectRowFunction_Once.Do(func() {
		err = listBoxStruct_Set()
		if err != nil {
			return
		}
		listBoxUnselectRowFunction, err = listBoxStruct.InvokerNew("unselect_row")
	})
	return err
}

// UnselectRow is a representation of the C type gtk_list_box_unselect_row.
func (recv *ListBox) UnselectRow(row *ListBoxRow) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(row.Native)

	err := listBoxUnselectRowFunction_Set()
	if err == nil {
		listBoxUnselectRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxAccessibleStruct *gi.Struct
var listBoxAccessibleStruct_Once sync.Once

func listBoxAccessibleStruct_Set() error {
	var err error
	listBoxAccessibleStruct_Once.Do(func() {
		listBoxAccessibleStruct, err = gi.StructNew("Gtk", "ListBoxAccessible")
	})
	return err
}

type ListBoxAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ListBoxAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(listBoxAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ListBoxAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(listBoxAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ListBoxAccessible) FieldPriv() *ListBoxAccessiblePrivate {
	argValue := gi.FieldGet(listBoxAccessibleStruct, recv.Native, "priv")
	value := &ListBoxAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ListBoxAccessible) SetFieldPriv(value *ListBoxAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(listBoxAccessibleStruct, recv.Native, "priv", argValue)
}

// ListBoxAccessibleStruct creates an uninitialised ListBoxAccessible.
func ListBoxAccessibleStruct() *ListBoxAccessible {
	err := listBoxAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ListBoxAccessible{}
	structGo.Native = listBoxAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeListBoxAccessible)
	return structGo
}
func finalizeListBoxAccessible(obj *ListBoxAccessible) {
	listBoxAccessibleStruct.Free(obj.Native)
}

var listBoxRowStruct *gi.Struct
var listBoxRowStruct_Once sync.Once

func listBoxRowStruct_Set() error {
	var err error
	listBoxRowStruct_Once.Do(func() {
		listBoxRowStruct, err = gi.StructNew("Gtk", "ListBoxRow")
	})
	return err
}

type ListBoxRow struct {
	Bin
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ListBoxRow) FieldParentInstance() *Bin {
	argValue := gi.FieldGet(listBoxRowStruct, recv.Native, "parent_instance")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ListBoxRow) SetFieldParentInstance(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(listBoxRowStruct, recv.Native, "parent_instance", argValue)
}

var listBoxRowNewFunction *gi.Function
var listBoxRowNewFunction_Once sync.Once

func listBoxRowNewFunction_Set() error {
	var err error
	listBoxRowNewFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowNewFunction, err = listBoxRowStruct.InvokerNew("new")
	})
	return err
}

// ListBoxRowNew is a representation of the C type gtk_list_box_row_new.
func ListBoxRowNew() *ListBoxRow {

	var ret gi.Argument

	err := listBoxRowNewFunction_Set()
	if err == nil {
		ret = listBoxRowNewFunction.Invoke(nil, nil)
	}

	retGo := &ListBoxRow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var listBoxRowChangedFunction *gi.Function
var listBoxRowChangedFunction_Once sync.Once

func listBoxRowChangedFunction_Set() error {
	var err error
	listBoxRowChangedFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowChangedFunction, err = listBoxRowStruct.InvokerNew("changed")
	})
	return err
}

// Changed is a representation of the C type gtk_list_box_row_changed.
func (recv *ListBoxRow) Changed() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listBoxRowChangedFunction_Set()
	if err == nil {
		listBoxRowChangedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxRowGetActivatableFunction *gi.Function
var listBoxRowGetActivatableFunction_Once sync.Once

func listBoxRowGetActivatableFunction_Set() error {
	var err error
	listBoxRowGetActivatableFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowGetActivatableFunction, err = listBoxRowStruct.InvokerNew("get_activatable")
	})
	return err
}

// GetActivatable is a representation of the C type gtk_list_box_row_get_activatable.
func (recv *ListBoxRow) GetActivatable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxRowGetActivatableFunction_Set()
	if err == nil {
		ret = listBoxRowGetActivatableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var listBoxRowGetHeaderFunction *gi.Function
var listBoxRowGetHeaderFunction_Once sync.Once

func listBoxRowGetHeaderFunction_Set() error {
	var err error
	listBoxRowGetHeaderFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowGetHeaderFunction, err = listBoxRowStruct.InvokerNew("get_header")
	})
	return err
}

// GetHeader is a representation of the C type gtk_list_box_row_get_header.
func (recv *ListBoxRow) GetHeader() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxRowGetHeaderFunction_Set()
	if err == nil {
		ret = listBoxRowGetHeaderFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var listBoxRowGetIndexFunction *gi.Function
var listBoxRowGetIndexFunction_Once sync.Once

func listBoxRowGetIndexFunction_Set() error {
	var err error
	listBoxRowGetIndexFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowGetIndexFunction, err = listBoxRowStruct.InvokerNew("get_index")
	})
	return err
}

// GetIndex is a representation of the C type gtk_list_box_row_get_index.
func (recv *ListBoxRow) GetIndex() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxRowGetIndexFunction_Set()
	if err == nil {
		ret = listBoxRowGetIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var listBoxRowGetSelectableFunction *gi.Function
var listBoxRowGetSelectableFunction_Once sync.Once

func listBoxRowGetSelectableFunction_Set() error {
	var err error
	listBoxRowGetSelectableFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowGetSelectableFunction, err = listBoxRowStruct.InvokerNew("get_selectable")
	})
	return err
}

// GetSelectable is a representation of the C type gtk_list_box_row_get_selectable.
func (recv *ListBoxRow) GetSelectable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxRowGetSelectableFunction_Set()
	if err == nil {
		ret = listBoxRowGetSelectableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var listBoxRowIsSelectedFunction *gi.Function
var listBoxRowIsSelectedFunction_Once sync.Once

func listBoxRowIsSelectedFunction_Set() error {
	var err error
	listBoxRowIsSelectedFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowIsSelectedFunction, err = listBoxRowStruct.InvokerNew("is_selected")
	})
	return err
}

// IsSelected is a representation of the C type gtk_list_box_row_is_selected.
func (recv *ListBoxRow) IsSelected() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := listBoxRowIsSelectedFunction_Set()
	if err == nil {
		ret = listBoxRowIsSelectedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var listBoxRowSetActivatableFunction *gi.Function
var listBoxRowSetActivatableFunction_Once sync.Once

func listBoxRowSetActivatableFunction_Set() error {
	var err error
	listBoxRowSetActivatableFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowSetActivatableFunction, err = listBoxRowStruct.InvokerNew("set_activatable")
	})
	return err
}

// SetActivatable is a representation of the C type gtk_list_box_row_set_activatable.
func (recv *ListBoxRow) SetActivatable(activatable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(activatable)

	err := listBoxRowSetActivatableFunction_Set()
	if err == nil {
		listBoxRowSetActivatableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxRowSetHeaderFunction *gi.Function
var listBoxRowSetHeaderFunction_Once sync.Once

func listBoxRowSetHeaderFunction_Set() error {
	var err error
	listBoxRowSetHeaderFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowSetHeaderFunction, err = listBoxRowStruct.InvokerNew("set_header")
	})
	return err
}

// SetHeader is a representation of the C type gtk_list_box_row_set_header.
func (recv *ListBoxRow) SetHeader(header *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(header.Native)

	err := listBoxRowSetHeaderFunction_Set()
	if err == nil {
		listBoxRowSetHeaderFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxRowSetSelectableFunction *gi.Function
var listBoxRowSetSelectableFunction_Once sync.Once

func listBoxRowSetSelectableFunction_Set() error {
	var err error
	listBoxRowSetSelectableFunction_Once.Do(func() {
		err = listBoxRowStruct_Set()
		if err != nil {
			return
		}
		listBoxRowSetSelectableFunction, err = listBoxRowStruct.InvokerNew("set_selectable")
	})
	return err
}

// SetSelectable is a representation of the C type gtk_list_box_row_set_selectable.
func (recv *ListBoxRow) SetSelectable(selectable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(selectable)

	err := listBoxRowSetSelectableFunction_Set()
	if err == nil {
		listBoxRowSetSelectableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listBoxRowAccessibleStruct *gi.Struct
var listBoxRowAccessibleStruct_Once sync.Once

func listBoxRowAccessibleStruct_Set() error {
	var err error
	listBoxRowAccessibleStruct_Once.Do(func() {
		listBoxRowAccessibleStruct, err = gi.StructNew("Gtk", "ListBoxRowAccessible")
	})
	return err
}

type ListBoxRowAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ListBoxRowAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(listBoxRowAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ListBoxRowAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(listBoxRowAccessibleStruct, recv.Native, "parent", argValue)
}

// ListBoxRowAccessibleStruct creates an uninitialised ListBoxRowAccessible.
func ListBoxRowAccessibleStruct() *ListBoxRowAccessible {
	err := listBoxRowAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ListBoxRowAccessible{}
	structGo.Native = listBoxRowAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeListBoxRowAccessible)
	return structGo
}
func finalizeListBoxRowAccessible(obj *ListBoxRowAccessible) {
	listBoxRowAccessibleStruct.Free(obj.Native)
}

var listStoreStruct *gi.Struct
var listStoreStruct_Once sync.Once

func listStoreStruct_Set() error {
	var err error
	listStoreStruct_Once.Do(func() {
		listStoreStruct, err = gi.StructNew("Gtk", "ListStore")
	})
	return err
}

type ListStore struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'gtk_list_store_new' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_list_store_newv' : parameter 'types' of type 'nil' not supported

var listStoreAppendFunction *gi.Function
var listStoreAppendFunction_Once sync.Once

func listStoreAppendFunction_Set() error {
	var err error
	listStoreAppendFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreAppendFunction, err = listStoreStruct.InvokerNew("append")
	})
	return err
}

// Append is a representation of the C type gtk_list_store_append.
func (recv *ListStore) Append() *TreeIter {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := listStoreAppendFunction_Set()
	if err == nil {
		listStoreAppendFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var listStoreClearFunction *gi.Function
var listStoreClearFunction_Once sync.Once

func listStoreClearFunction_Set() error {
	var err error
	listStoreClearFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreClearFunction, err = listStoreStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_list_store_clear.
func (recv *ListStore) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := listStoreClearFunction_Set()
	if err == nil {
		listStoreClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listStoreInsertFunction *gi.Function
var listStoreInsertFunction_Once sync.Once

func listStoreInsertFunction_Set() error {
	var err error
	listStoreInsertFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreInsertFunction, err = listStoreStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_list_store_insert.
func (recv *ListStore) Insert(position int32) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	var outArgs [1]gi.Argument

	err := listStoreInsertFunction_Set()
	if err == nil {
		listStoreInsertFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var listStoreInsertAfterFunction *gi.Function
var listStoreInsertAfterFunction_Once sync.Once

func listStoreInsertAfterFunction_Set() error {
	var err error
	listStoreInsertAfterFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreInsertAfterFunction, err = listStoreStruct.InvokerNew("insert_after")
	})
	return err
}

// InsertAfter is a representation of the C type gtk_list_store_insert_after.
func (recv *ListStore) InsertAfter(sibling *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(sibling.Native)

	var outArgs [1]gi.Argument

	err := listStoreInsertAfterFunction_Set()
	if err == nil {
		listStoreInsertAfterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var listStoreInsertBeforeFunction *gi.Function
var listStoreInsertBeforeFunction_Once sync.Once

func listStoreInsertBeforeFunction_Set() error {
	var err error
	listStoreInsertBeforeFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreInsertBeforeFunction, err = listStoreStruct.InvokerNew("insert_before")
	})
	return err
}

// InsertBefore is a representation of the C type gtk_list_store_insert_before.
func (recv *ListStore) InsertBefore(sibling *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(sibling.Native)

	var outArgs [1]gi.Argument

	err := listStoreInsertBeforeFunction_Set()
	if err == nil {
		listStoreInsertBeforeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

// UNSUPPORTED : C value 'gtk_list_store_insert_with_values' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_list_store_insert_with_valuesv' : parameter 'columns' of type 'nil' not supported

var listStoreIterIsValidFunction *gi.Function
var listStoreIterIsValidFunction_Once sync.Once

func listStoreIterIsValidFunction_Set() error {
	var err error
	listStoreIterIsValidFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreIterIsValidFunction, err = listStoreStruct.InvokerNew("iter_is_valid")
	})
	return err
}

// IterIsValid is a representation of the C type gtk_list_store_iter_is_valid.
func (recv *ListStore) IterIsValid(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := listStoreIterIsValidFunction_Set()
	if err == nil {
		ret = listStoreIterIsValidFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var listStoreMoveAfterFunction *gi.Function
var listStoreMoveAfterFunction_Once sync.Once

func listStoreMoveAfterFunction_Set() error {
	var err error
	listStoreMoveAfterFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreMoveAfterFunction, err = listStoreStruct.InvokerNew("move_after")
	})
	return err
}

// MoveAfter is a representation of the C type gtk_list_store_move_after.
func (recv *ListStore) MoveAfter(iter *TreeIter, position *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(position.Native)

	err := listStoreMoveAfterFunction_Set()
	if err == nil {
		listStoreMoveAfterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listStoreMoveBeforeFunction *gi.Function
var listStoreMoveBeforeFunction_Once sync.Once

func listStoreMoveBeforeFunction_Set() error {
	var err error
	listStoreMoveBeforeFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreMoveBeforeFunction, err = listStoreStruct.InvokerNew("move_before")
	})
	return err
}

// MoveBefore is a representation of the C type gtk_list_store_move_before.
func (recv *ListStore) MoveBefore(iter *TreeIter, position *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(position.Native)

	err := listStoreMoveBeforeFunction_Set()
	if err == nil {
		listStoreMoveBeforeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var listStorePrependFunction *gi.Function
var listStorePrependFunction_Once sync.Once

func listStorePrependFunction_Set() error {
	var err error
	listStorePrependFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStorePrependFunction, err = listStoreStruct.InvokerNew("prepend")
	})
	return err
}

// Prepend is a representation of the C type gtk_list_store_prepend.
func (recv *ListStore) Prepend() *TreeIter {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := listStorePrependFunction_Set()
	if err == nil {
		listStorePrependFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var listStoreRemoveFunction *gi.Function
var listStoreRemoveFunction_Once sync.Once

func listStoreRemoveFunction_Set() error {
	var err error
	listStoreRemoveFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreRemoveFunction, err = listStoreStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_list_store_remove.
func (recv *ListStore) Remove(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := listStoreRemoveFunction_Set()
	if err == nil {
		ret = listStoreRemoveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_list_store_reorder' : parameter 'new_order' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_list_store_set' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_list_store_set_column_types' : parameter 'types' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_list_store_set_valist' : parameter 'var_args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_list_store_set_value' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_list_store_set_valuesv' : parameter 'columns' of type 'nil' not supported

var listStoreSwapFunction *gi.Function
var listStoreSwapFunction_Once sync.Once

func listStoreSwapFunction_Set() error {
	var err error
	listStoreSwapFunction_Once.Do(func() {
		err = listStoreStruct_Set()
		if err != nil {
			return
		}
		listStoreSwapFunction, err = listStoreStruct.InvokerNew("swap")
	})
	return err
}

// Swap is a representation of the C type gtk_list_store_swap.
func (recv *ListStore) Swap(a *TreeIter, b *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(a.Native)
	inArgs[2].SetPointer(b.Native)

	err := listStoreSwapFunction_Set()
	if err == nil {
		listStoreSwapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var lockButtonStruct *gi.Struct
var lockButtonStruct_Once sync.Once

func lockButtonStruct_Set() error {
	var err error
	lockButtonStruct_Once.Do(func() {
		lockButtonStruct, err = gi.StructNew("Gtk", "LockButton")
	})
	return err
}

type LockButton struct {
	Button
}

// FieldParent returns the C field 'parent'.
func (recv *LockButton) FieldParent() *Button {
	argValue := gi.FieldGet(lockButtonStruct, recv.Native, "parent")
	value := &Button{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *LockButton) SetFieldParent(value *Button) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(lockButtonStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *LockButton) FieldPriv() *LockButtonPrivate {
	argValue := gi.FieldGet(lockButtonStruct, recv.Native, "priv")
	value := &LockButtonPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *LockButton) SetFieldPriv(value *LockButtonPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(lockButtonStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_lock_button_new' : parameter 'permission' of type 'Gio.Permission' not supported

// UNSUPPORTED : C value 'gtk_lock_button_get_permission' : return type 'Gio.Permission' not supported

// UNSUPPORTED : C value 'gtk_lock_button_set_permission' : parameter 'permission' of type 'Gio.Permission' not supported

var lockButtonAccessibleStruct *gi.Struct
var lockButtonAccessibleStruct_Once sync.Once

func lockButtonAccessibleStruct_Set() error {
	var err error
	lockButtonAccessibleStruct_Once.Do(func() {
		lockButtonAccessibleStruct, err = gi.StructNew("Gtk", "LockButtonAccessible")
	})
	return err
}

type LockButtonAccessible struct {
	ButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *LockButtonAccessible) FieldParent() *ButtonAccessible {
	argValue := gi.FieldGet(lockButtonAccessibleStruct, recv.Native, "parent")
	value := &ButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *LockButtonAccessible) SetFieldParent(value *ButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(lockButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *LockButtonAccessible) FieldPriv() *LockButtonAccessiblePrivate {
	argValue := gi.FieldGet(lockButtonAccessibleStruct, recv.Native, "priv")
	value := &LockButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *LockButtonAccessible) SetFieldPriv(value *LockButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(lockButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// LockButtonAccessibleStruct creates an uninitialised LockButtonAccessible.
func LockButtonAccessibleStruct() *LockButtonAccessible {
	err := lockButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &LockButtonAccessible{}
	structGo.Native = lockButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeLockButtonAccessible)
	return structGo
}
func finalizeLockButtonAccessible(obj *LockButtonAccessible) {
	lockButtonAccessibleStruct.Free(obj.Native)
}

var menuStruct *gi.Struct
var menuStruct_Once sync.Once

func menuStruct_Set() error {
	var err error
	menuStruct_Once.Do(func() {
		menuStruct, err = gi.StructNew("Gtk", "Menu")
	})
	return err
}

type Menu struct {
	MenuShell
}

// FieldMenuShell returns the C field 'menu_shell'.
func (recv *Menu) FieldMenuShell() *MenuShell {
	argValue := gi.FieldGet(menuStruct, recv.Native, "menu_shell")
	value := &MenuShell{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuShell sets the value of the C field 'menu_shell'.
func (recv *Menu) SetFieldMenuShell(value *MenuShell) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuStruct, recv.Native, "menu_shell", argValue)
}

var menuNewFunction *gi.Function
var menuNewFunction_Once sync.Once

func menuNewFunction_Set() error {
	var err error
	menuNewFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuNewFunction, err = menuStruct.InvokerNew("new")
	})
	return err
}

// MenuNew is a representation of the C type gtk_menu_new.
func MenuNew() *Menu {

	var ret gi.Argument

	err := menuNewFunction_Set()
	if err == nil {
		ret = menuNewFunction.Invoke(nil, nil)
	}

	retGo := &Menu{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_menu_new_from_model' : parameter 'model' of type 'Gio.MenuModel' not supported

var menuAttachFunction *gi.Function
var menuAttachFunction_Once sync.Once

func menuAttachFunction_Set() error {
	var err error
	menuAttachFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuAttachFunction, err = menuStruct.InvokerNew("attach")
	})
	return err
}

// Attach is a representation of the C type gtk_menu_attach.
func (recv *Menu) Attach(child *Widget, leftAttach uint32, rightAttach uint32, topAttach uint32, bottomAttach uint32) {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetUint32(leftAttach)
	inArgs[3].SetUint32(rightAttach)
	inArgs[4].SetUint32(topAttach)
	inArgs[5].SetUint32(bottomAttach)

	err := menuAttachFunction_Set()
	if err == nil {
		menuAttachFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_menu_attach_to_widget' : parameter 'detacher' of type 'MenuDetachFunc' not supported

var menuDetachFunction *gi.Function
var menuDetachFunction_Once sync.Once

func menuDetachFunction_Set() error {
	var err error
	menuDetachFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuDetachFunction, err = menuStruct.InvokerNew("detach")
	})
	return err
}

// Detach is a representation of the C type gtk_menu_detach.
func (recv *Menu) Detach() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuDetachFunction_Set()
	if err == nil {
		menuDetachFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuGetAccelGroupFunction *gi.Function
var menuGetAccelGroupFunction_Once sync.Once

func menuGetAccelGroupFunction_Set() error {
	var err error
	menuGetAccelGroupFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetAccelGroupFunction, err = menuStruct.InvokerNew("get_accel_group")
	})
	return err
}

// GetAccelGroup is a representation of the C type gtk_menu_get_accel_group.
func (recv *Menu) GetAccelGroup() *AccelGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetAccelGroupFunction_Set()
	if err == nil {
		ret = menuGetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AccelGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuGetAccelPathFunction *gi.Function
var menuGetAccelPathFunction_Once sync.Once

func menuGetAccelPathFunction_Set() error {
	var err error
	menuGetAccelPathFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetAccelPathFunction, err = menuStruct.InvokerNew("get_accel_path")
	})
	return err
}

// GetAccelPath is a representation of the C type gtk_menu_get_accel_path.
func (recv *Menu) GetAccelPath() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetAccelPathFunction_Set()
	if err == nil {
		ret = menuGetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var menuGetActiveFunction *gi.Function
var menuGetActiveFunction_Once sync.Once

func menuGetActiveFunction_Set() error {
	var err error
	menuGetActiveFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetActiveFunction, err = menuStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_menu_get_active.
func (recv *Menu) GetActive() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetActiveFunction_Set()
	if err == nil {
		ret = menuGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuGetAttachWidgetFunction *gi.Function
var menuGetAttachWidgetFunction_Once sync.Once

func menuGetAttachWidgetFunction_Set() error {
	var err error
	menuGetAttachWidgetFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetAttachWidgetFunction, err = menuStruct.InvokerNew("get_attach_widget")
	})
	return err
}

// GetAttachWidget is a representation of the C type gtk_menu_get_attach_widget.
func (recv *Menu) GetAttachWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetAttachWidgetFunction_Set()
	if err == nil {
		ret = menuGetAttachWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuGetMonitorFunction *gi.Function
var menuGetMonitorFunction_Once sync.Once

func menuGetMonitorFunction_Set() error {
	var err error
	menuGetMonitorFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetMonitorFunction, err = menuStruct.InvokerNew("get_monitor")
	})
	return err
}

// GetMonitor is a representation of the C type gtk_menu_get_monitor.
func (recv *Menu) GetMonitor() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetMonitorFunction_Set()
	if err == nil {
		ret = menuGetMonitorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var menuGetReserveToggleSizeFunction *gi.Function
var menuGetReserveToggleSizeFunction_Once sync.Once

func menuGetReserveToggleSizeFunction_Set() error {
	var err error
	menuGetReserveToggleSizeFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetReserveToggleSizeFunction, err = menuStruct.InvokerNew("get_reserve_toggle_size")
	})
	return err
}

// GetReserveToggleSize is a representation of the C type gtk_menu_get_reserve_toggle_size.
func (recv *Menu) GetReserveToggleSize() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetReserveToggleSizeFunction_Set()
	if err == nil {
		ret = menuGetReserveToggleSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuGetTearoffStateFunction *gi.Function
var menuGetTearoffStateFunction_Once sync.Once

func menuGetTearoffStateFunction_Set() error {
	var err error
	menuGetTearoffStateFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetTearoffStateFunction, err = menuStruct.InvokerNew("get_tearoff_state")
	})
	return err
}

// GetTearoffState is a representation of the C type gtk_menu_get_tearoff_state.
func (recv *Menu) GetTearoffState() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetTearoffStateFunction_Set()
	if err == nil {
		ret = menuGetTearoffStateFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuGetTitleFunction *gi.Function
var menuGetTitleFunction_Once sync.Once

func menuGetTitleFunction_Set() error {
	var err error
	menuGetTitleFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuGetTitleFunction, err = menuStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_menu_get_title.
func (recv *Menu) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuGetTitleFunction_Set()
	if err == nil {
		ret = menuGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_menu_place_on_monitor' : parameter 'monitor' of type 'Gdk.Monitor' not supported

var menuPopdownFunction *gi.Function
var menuPopdownFunction_Once sync.Once

func menuPopdownFunction_Set() error {
	var err error
	menuPopdownFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuPopdownFunction, err = menuStruct.InvokerNew("popdown")
	})
	return err
}

// Popdown is a representation of the C type gtk_menu_popdown.
func (recv *Menu) Popdown() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuPopdownFunction_Set()
	if err == nil {
		menuPopdownFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_menu_popup' : parameter 'func' of type 'MenuPositionFunc' not supported

// UNSUPPORTED : C value 'gtk_menu_popup_at_pointer' : parameter 'trigger_event' of type 'Gdk.Event' not supported

// UNSUPPORTED : C value 'gtk_menu_popup_at_rect' : parameter 'rect_window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_menu_popup_at_widget' : parameter 'widget_anchor' of type 'Gdk.Gravity' not supported

// UNSUPPORTED : C value 'gtk_menu_popup_for_device' : parameter 'device' of type 'Gdk.Device' not supported

var menuReorderChildFunction *gi.Function
var menuReorderChildFunction_Once sync.Once

func menuReorderChildFunction_Set() error {
	var err error
	menuReorderChildFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuReorderChildFunction, err = menuStruct.InvokerNew("reorder_child")
	})
	return err
}

// ReorderChild is a representation of the C type gtk_menu_reorder_child.
func (recv *Menu) ReorderChild(child *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(position)

	err := menuReorderChildFunction_Set()
	if err == nil {
		menuReorderChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuRepositionFunction *gi.Function
var menuRepositionFunction_Once sync.Once

func menuRepositionFunction_Set() error {
	var err error
	menuRepositionFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuRepositionFunction, err = menuStruct.InvokerNew("reposition")
	})
	return err
}

// Reposition is a representation of the C type gtk_menu_reposition.
func (recv *Menu) Reposition() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuRepositionFunction_Set()
	if err == nil {
		menuRepositionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetAccelGroupFunction *gi.Function
var menuSetAccelGroupFunction_Once sync.Once

func menuSetAccelGroupFunction_Set() error {
	var err error
	menuSetAccelGroupFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetAccelGroupFunction, err = menuStruct.InvokerNew("set_accel_group")
	})
	return err
}

// SetAccelGroup is a representation of the C type gtk_menu_set_accel_group.
func (recv *Menu) SetAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := menuSetAccelGroupFunction_Set()
	if err == nil {
		menuSetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetAccelPathFunction *gi.Function
var menuSetAccelPathFunction_Once sync.Once

func menuSetAccelPathFunction_Set() error {
	var err error
	menuSetAccelPathFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetAccelPathFunction, err = menuStruct.InvokerNew("set_accel_path")
	})
	return err
}

// SetAccelPath is a representation of the C type gtk_menu_set_accel_path.
func (recv *Menu) SetAccelPath(accelPath string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accelPath)

	err := menuSetAccelPathFunction_Set()
	if err == nil {
		menuSetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetActiveFunction *gi.Function
var menuSetActiveFunction_Once sync.Once

func menuSetActiveFunction_Set() error {
	var err error
	menuSetActiveFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetActiveFunction, err = menuStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_menu_set_active.
func (recv *Menu) SetActive(index uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(index)

	err := menuSetActiveFunction_Set()
	if err == nil {
		menuSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetMonitorFunction *gi.Function
var menuSetMonitorFunction_Once sync.Once

func menuSetMonitorFunction_Set() error {
	var err error
	menuSetMonitorFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetMonitorFunction, err = menuStruct.InvokerNew("set_monitor")
	})
	return err
}

// SetMonitor is a representation of the C type gtk_menu_set_monitor.
func (recv *Menu) SetMonitor(monitorNum int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(monitorNum)

	err := menuSetMonitorFunction_Set()
	if err == nil {
		menuSetMonitorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetReserveToggleSizeFunction *gi.Function
var menuSetReserveToggleSizeFunction_Once sync.Once

func menuSetReserveToggleSizeFunction_Set() error {
	var err error
	menuSetReserveToggleSizeFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetReserveToggleSizeFunction, err = menuStruct.InvokerNew("set_reserve_toggle_size")
	})
	return err
}

// SetReserveToggleSize is a representation of the C type gtk_menu_set_reserve_toggle_size.
func (recv *Menu) SetReserveToggleSize(reserveToggleSize bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reserveToggleSize)

	err := menuSetReserveToggleSizeFunction_Set()
	if err == nil {
		menuSetReserveToggleSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_menu_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

var menuSetTearoffStateFunction *gi.Function
var menuSetTearoffStateFunction_Once sync.Once

func menuSetTearoffStateFunction_Set() error {
	var err error
	menuSetTearoffStateFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetTearoffStateFunction, err = menuStruct.InvokerNew("set_tearoff_state")
	})
	return err
}

// SetTearoffState is a representation of the C type gtk_menu_set_tearoff_state.
func (recv *Menu) SetTearoffState(tornOff bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(tornOff)

	err := menuSetTearoffStateFunction_Set()
	if err == nil {
		menuSetTearoffStateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuSetTitleFunction *gi.Function
var menuSetTitleFunction_Once sync.Once

func menuSetTitleFunction_Set() error {
	var err error
	menuSetTitleFunction_Once.Do(func() {
		err = menuStruct_Set()
		if err != nil {
			return
		}
		menuSetTitleFunction, err = menuStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_menu_set_title.
func (recv *Menu) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := menuSetTitleFunction_Set()
	if err == nil {
		menuSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuAccessibleStruct *gi.Struct
var menuAccessibleStruct_Once sync.Once

func menuAccessibleStruct_Set() error {
	var err error
	menuAccessibleStruct_Once.Do(func() {
		menuAccessibleStruct, err = gi.StructNew("Gtk", "MenuAccessible")
	})
	return err
}

type MenuAccessible struct {
	MenuShellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *MenuAccessible) FieldParent() *MenuShellAccessible {
	argValue := gi.FieldGet(menuAccessibleStruct, recv.Native, "parent")
	value := &MenuShellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuAccessible) SetFieldParent(value *MenuShellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *MenuAccessible) FieldPriv() *MenuAccessiblePrivate {
	argValue := gi.FieldGet(menuAccessibleStruct, recv.Native, "priv")
	value := &MenuAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *MenuAccessible) SetFieldPriv(value *MenuAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuAccessibleStruct, recv.Native, "priv", argValue)
}

// MenuAccessibleStruct creates an uninitialised MenuAccessible.
func MenuAccessibleStruct() *MenuAccessible {
	err := menuAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &MenuAccessible{}
	structGo.Native = menuAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMenuAccessible)
	return structGo
}
func finalizeMenuAccessible(obj *MenuAccessible) {
	menuAccessibleStruct.Free(obj.Native)
}

var menuBarStruct *gi.Struct
var menuBarStruct_Once sync.Once

func menuBarStruct_Set() error {
	var err error
	menuBarStruct_Once.Do(func() {
		menuBarStruct, err = gi.StructNew("Gtk", "MenuBar")
	})
	return err
}

type MenuBar struct {
	MenuShell
}

// FieldMenuShell returns the C field 'menu_shell'.
func (recv *MenuBar) FieldMenuShell() *MenuShell {
	argValue := gi.FieldGet(menuBarStruct, recv.Native, "menu_shell")
	value := &MenuShell{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuShell sets the value of the C field 'menu_shell'.
func (recv *MenuBar) SetFieldMenuShell(value *MenuShell) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuBarStruct, recv.Native, "menu_shell", argValue)
}

var menuBarNewFunction *gi.Function
var menuBarNewFunction_Once sync.Once

func menuBarNewFunction_Set() error {
	var err error
	menuBarNewFunction_Once.Do(func() {
		err = menuBarStruct_Set()
		if err != nil {
			return
		}
		menuBarNewFunction, err = menuBarStruct.InvokerNew("new")
	})
	return err
}

// MenuBarNew is a representation of the C type gtk_menu_bar_new.
func MenuBarNew() *MenuBar {

	var ret gi.Argument

	err := menuBarNewFunction_Set()
	if err == nil {
		ret = menuBarNewFunction.Invoke(nil, nil)
	}

	retGo := &MenuBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_menu_bar_new_from_model' : parameter 'model' of type 'Gio.MenuModel' not supported

// UNSUPPORTED : C value 'gtk_menu_bar_get_child_pack_direction' : return type 'PackDirection' not supported

// UNSUPPORTED : C value 'gtk_menu_bar_get_pack_direction' : return type 'PackDirection' not supported

// UNSUPPORTED : C value 'gtk_menu_bar_set_child_pack_direction' : parameter 'child_pack_dir' of type 'PackDirection' not supported

// UNSUPPORTED : C value 'gtk_menu_bar_set_pack_direction' : parameter 'pack_dir' of type 'PackDirection' not supported

var menuButtonStruct *gi.Struct
var menuButtonStruct_Once sync.Once

func menuButtonStruct_Set() error {
	var err error
	menuButtonStruct_Once.Do(func() {
		menuButtonStruct, err = gi.StructNew("Gtk", "MenuButton")
	})
	return err
}

type MenuButton struct {
	ToggleButton
}

// FieldParent returns the C field 'parent'.
func (recv *MenuButton) FieldParent() *ToggleButton {
	argValue := gi.FieldGet(menuButtonStruct, recv.Native, "parent")
	value := &ToggleButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuButton) SetFieldParent(value *ToggleButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuButtonStruct, recv.Native, "parent", argValue)
}

var menuButtonNewFunction *gi.Function
var menuButtonNewFunction_Once sync.Once

func menuButtonNewFunction_Set() error {
	var err error
	menuButtonNewFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonNewFunction, err = menuButtonStruct.InvokerNew("new")
	})
	return err
}

// MenuButtonNew is a representation of the C type gtk_menu_button_new.
func MenuButtonNew() *MenuButton {

	var ret gi.Argument

	err := menuButtonNewFunction_Set()
	if err == nil {
		ret = menuButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &MenuButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuButtonGetAlignWidgetFunction *gi.Function
var menuButtonGetAlignWidgetFunction_Once sync.Once

func menuButtonGetAlignWidgetFunction_Set() error {
	var err error
	menuButtonGetAlignWidgetFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonGetAlignWidgetFunction, err = menuButtonStruct.InvokerNew("get_align_widget")
	})
	return err
}

// GetAlignWidget is a representation of the C type gtk_menu_button_get_align_widget.
func (recv *MenuButton) GetAlignWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuButtonGetAlignWidgetFunction_Set()
	if err == nil {
		ret = menuButtonGetAlignWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_menu_button_get_direction' : return type 'ArrowType' not supported

// UNSUPPORTED : C value 'gtk_menu_button_get_menu_model' : return type 'Gio.MenuModel' not supported

var menuButtonGetPopoverFunction *gi.Function
var menuButtonGetPopoverFunction_Once sync.Once

func menuButtonGetPopoverFunction_Set() error {
	var err error
	menuButtonGetPopoverFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonGetPopoverFunction, err = menuButtonStruct.InvokerNew("get_popover")
	})
	return err
}

// GetPopover is a representation of the C type gtk_menu_button_get_popover.
func (recv *MenuButton) GetPopover() *Popover {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuButtonGetPopoverFunction_Set()
	if err == nil {
		ret = menuButtonGetPopoverFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Popover{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuButtonGetPopupFunction *gi.Function
var menuButtonGetPopupFunction_Once sync.Once

func menuButtonGetPopupFunction_Set() error {
	var err error
	menuButtonGetPopupFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonGetPopupFunction, err = menuButtonStruct.InvokerNew("get_popup")
	})
	return err
}

// GetPopup is a representation of the C type gtk_menu_button_get_popup.
func (recv *MenuButton) GetPopup() *Menu {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuButtonGetPopupFunction_Set()
	if err == nil {
		ret = menuButtonGetPopupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Menu{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuButtonGetUsePopoverFunction *gi.Function
var menuButtonGetUsePopoverFunction_Once sync.Once

func menuButtonGetUsePopoverFunction_Set() error {
	var err error
	menuButtonGetUsePopoverFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonGetUsePopoverFunction, err = menuButtonStruct.InvokerNew("get_use_popover")
	})
	return err
}

// GetUsePopover is a representation of the C type gtk_menu_button_get_use_popover.
func (recv *MenuButton) GetUsePopover() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuButtonGetUsePopoverFunction_Set()
	if err == nil {
		ret = menuButtonGetUsePopoverFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuButtonSetAlignWidgetFunction *gi.Function
var menuButtonSetAlignWidgetFunction_Once sync.Once

func menuButtonSetAlignWidgetFunction_Set() error {
	var err error
	menuButtonSetAlignWidgetFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonSetAlignWidgetFunction, err = menuButtonStruct.InvokerNew("set_align_widget")
	})
	return err
}

// SetAlignWidget is a representation of the C type gtk_menu_button_set_align_widget.
func (recv *MenuButton) SetAlignWidget(alignWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(alignWidget.Native)

	err := menuButtonSetAlignWidgetFunction_Set()
	if err == nil {
		menuButtonSetAlignWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_menu_button_set_direction' : parameter 'direction' of type 'ArrowType' not supported

// UNSUPPORTED : C value 'gtk_menu_button_set_menu_model' : parameter 'menu_model' of type 'Gio.MenuModel' not supported

var menuButtonSetPopoverFunction *gi.Function
var menuButtonSetPopoverFunction_Once sync.Once

func menuButtonSetPopoverFunction_Set() error {
	var err error
	menuButtonSetPopoverFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonSetPopoverFunction, err = menuButtonStruct.InvokerNew("set_popover")
	})
	return err
}

// SetPopover is a representation of the C type gtk_menu_button_set_popover.
func (recv *MenuButton) SetPopover(popover *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(popover.Native)

	err := menuButtonSetPopoverFunction_Set()
	if err == nil {
		menuButtonSetPopoverFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuButtonSetPopupFunction *gi.Function
var menuButtonSetPopupFunction_Once sync.Once

func menuButtonSetPopupFunction_Set() error {
	var err error
	menuButtonSetPopupFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonSetPopupFunction, err = menuButtonStruct.InvokerNew("set_popup")
	})
	return err
}

// SetPopup is a representation of the C type gtk_menu_button_set_popup.
func (recv *MenuButton) SetPopup(menu *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(menu.Native)

	err := menuButtonSetPopupFunction_Set()
	if err == nil {
		menuButtonSetPopupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuButtonSetUsePopoverFunction *gi.Function
var menuButtonSetUsePopoverFunction_Once sync.Once

func menuButtonSetUsePopoverFunction_Set() error {
	var err error
	menuButtonSetUsePopoverFunction_Once.Do(func() {
		err = menuButtonStruct_Set()
		if err != nil {
			return
		}
		menuButtonSetUsePopoverFunction, err = menuButtonStruct.InvokerNew("set_use_popover")
	})
	return err
}

// SetUsePopover is a representation of the C type gtk_menu_button_set_use_popover.
func (recv *MenuButton) SetUsePopover(usePopover bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(usePopover)

	err := menuButtonSetUsePopoverFunction_Set()
	if err == nil {
		menuButtonSetUsePopoverFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuButtonAccessibleStruct *gi.Struct
var menuButtonAccessibleStruct_Once sync.Once

func menuButtonAccessibleStruct_Set() error {
	var err error
	menuButtonAccessibleStruct_Once.Do(func() {
		menuButtonAccessibleStruct, err = gi.StructNew("Gtk", "MenuButtonAccessible")
	})
	return err
}

type MenuButtonAccessible struct {
	ToggleButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *MenuButtonAccessible) FieldParent() *ToggleButtonAccessible {
	argValue := gi.FieldGet(menuButtonAccessibleStruct, recv.Native, "parent")
	value := &ToggleButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuButtonAccessible) SetFieldParent(value *ToggleButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *MenuButtonAccessible) FieldPriv() *MenuButtonAccessiblePrivate {
	argValue := gi.FieldGet(menuButtonAccessibleStruct, recv.Native, "priv")
	value := &MenuButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *MenuButtonAccessible) SetFieldPriv(value *MenuButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// MenuButtonAccessibleStruct creates an uninitialised MenuButtonAccessible.
func MenuButtonAccessibleStruct() *MenuButtonAccessible {
	err := menuButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &MenuButtonAccessible{}
	structGo.Native = menuButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMenuButtonAccessible)
	return structGo
}
func finalizeMenuButtonAccessible(obj *MenuButtonAccessible) {
	menuButtonAccessibleStruct.Free(obj.Native)
}

var menuItemStruct *gi.Struct
var menuItemStruct_Once sync.Once

func menuItemStruct_Set() error {
	var err error
	menuItemStruct_Once.Do(func() {
		menuItemStruct, err = gi.StructNew("Gtk", "MenuItem")
	})
	return err
}

type MenuItem struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *MenuItem) FieldBin() *Bin {
	argValue := gi.FieldGet(menuItemStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *MenuItem) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuItemStruct, recv.Native, "bin", argValue)
}

var menuItemNewFunction *gi.Function
var menuItemNewFunction_Once sync.Once

func menuItemNewFunction_Set() error {
	var err error
	menuItemNewFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemNewFunction, err = menuItemStruct.InvokerNew("new")
	})
	return err
}

// MenuItemNew is a representation of the C type gtk_menu_item_new.
func MenuItemNew() *MenuItem {

	var ret gi.Argument

	err := menuItemNewFunction_Set()
	if err == nil {
		ret = menuItemNewFunction.Invoke(nil, nil)
	}

	retGo := &MenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuItemNewWithLabelFunction *gi.Function
var menuItemNewWithLabelFunction_Once sync.Once

func menuItemNewWithLabelFunction_Set() error {
	var err error
	menuItemNewWithLabelFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemNewWithLabelFunction, err = menuItemStruct.InvokerNew("new_with_label")
	})
	return err
}

// MenuItemNewWithLabel is a representation of the C type gtk_menu_item_new_with_label.
func MenuItemNewWithLabel(label string) *MenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := menuItemNewWithLabelFunction_Set()
	if err == nil {
		ret = menuItemNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &MenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuItemNewWithMnemonicFunction *gi.Function
var menuItemNewWithMnemonicFunction_Once sync.Once

func menuItemNewWithMnemonicFunction_Set() error {
	var err error
	menuItemNewWithMnemonicFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemNewWithMnemonicFunction, err = menuItemStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// MenuItemNewWithMnemonic is a representation of the C type gtk_menu_item_new_with_mnemonic.
func MenuItemNewWithMnemonic(label string) *MenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := menuItemNewWithMnemonicFunction_Set()
	if err == nil {
		ret = menuItemNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &MenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuItemActivateFunction *gi.Function
var menuItemActivateFunction_Once sync.Once

func menuItemActivateFunction_Set() error {
	var err error
	menuItemActivateFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemActivateFunction, err = menuItemStruct.InvokerNew("activate")
	})
	return err
}

// Activate is a representation of the C type gtk_menu_item_activate.
func (recv *MenuItem) Activate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuItemActivateFunction_Set()
	if err == nil {
		menuItemActivateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemDeselectFunction *gi.Function
var menuItemDeselectFunction_Once sync.Once

func menuItemDeselectFunction_Set() error {
	var err error
	menuItemDeselectFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemDeselectFunction, err = menuItemStruct.InvokerNew("deselect")
	})
	return err
}

// Deselect is a representation of the C type gtk_menu_item_deselect.
func (recv *MenuItem) Deselect() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuItemDeselectFunction_Set()
	if err == nil {
		menuItemDeselectFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemGetAccelPathFunction *gi.Function
var menuItemGetAccelPathFunction_Once sync.Once

func menuItemGetAccelPathFunction_Set() error {
	var err error
	menuItemGetAccelPathFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetAccelPathFunction, err = menuItemStruct.InvokerNew("get_accel_path")
	})
	return err
}

// GetAccelPath is a representation of the C type gtk_menu_item_get_accel_path.
func (recv *MenuItem) GetAccelPath() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetAccelPathFunction_Set()
	if err == nil {
		ret = menuItemGetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var menuItemGetLabelFunction *gi.Function
var menuItemGetLabelFunction_Once sync.Once

func menuItemGetLabelFunction_Set() error {
	var err error
	menuItemGetLabelFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetLabelFunction, err = menuItemStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_menu_item_get_label.
func (recv *MenuItem) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetLabelFunction_Set()
	if err == nil {
		ret = menuItemGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var menuItemGetReserveIndicatorFunction *gi.Function
var menuItemGetReserveIndicatorFunction_Once sync.Once

func menuItemGetReserveIndicatorFunction_Set() error {
	var err error
	menuItemGetReserveIndicatorFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetReserveIndicatorFunction, err = menuItemStruct.InvokerNew("get_reserve_indicator")
	})
	return err
}

// GetReserveIndicator is a representation of the C type gtk_menu_item_get_reserve_indicator.
func (recv *MenuItem) GetReserveIndicator() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetReserveIndicatorFunction_Set()
	if err == nil {
		ret = menuItemGetReserveIndicatorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuItemGetRightJustifiedFunction *gi.Function
var menuItemGetRightJustifiedFunction_Once sync.Once

func menuItemGetRightJustifiedFunction_Set() error {
	var err error
	menuItemGetRightJustifiedFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetRightJustifiedFunction, err = menuItemStruct.InvokerNew("get_right_justified")
	})
	return err
}

// GetRightJustified is a representation of the C type gtk_menu_item_get_right_justified.
func (recv *MenuItem) GetRightJustified() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetRightJustifiedFunction_Set()
	if err == nil {
		ret = menuItemGetRightJustifiedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuItemGetSubmenuFunction *gi.Function
var menuItemGetSubmenuFunction_Once sync.Once

func menuItemGetSubmenuFunction_Set() error {
	var err error
	menuItemGetSubmenuFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetSubmenuFunction, err = menuItemStruct.InvokerNew("get_submenu")
	})
	return err
}

// GetSubmenu is a representation of the C type gtk_menu_item_get_submenu.
func (recv *MenuItem) GetSubmenu() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetSubmenuFunction_Set()
	if err == nil {
		ret = menuItemGetSubmenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuItemGetUseUnderlineFunction *gi.Function
var menuItemGetUseUnderlineFunction_Once sync.Once

func menuItemGetUseUnderlineFunction_Set() error {
	var err error
	menuItemGetUseUnderlineFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemGetUseUnderlineFunction, err = menuItemStruct.InvokerNew("get_use_underline")
	})
	return err
}

// GetUseUnderline is a representation of the C type gtk_menu_item_get_use_underline.
func (recv *MenuItem) GetUseUnderline() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuItemGetUseUnderlineFunction_Set()
	if err == nil {
		ret = menuItemGetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuItemSelectFunction *gi.Function
var menuItemSelectFunction_Once sync.Once

func menuItemSelectFunction_Set() error {
	var err error
	menuItemSelectFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSelectFunction, err = menuItemStruct.InvokerNew("select")
	})
	return err
}

// Select is a representation of the C type gtk_menu_item_select.
func (recv *MenuItem) Select() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuItemSelectFunction_Set()
	if err == nil {
		menuItemSelectFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetAccelPathFunction *gi.Function
var menuItemSetAccelPathFunction_Once sync.Once

func menuItemSetAccelPathFunction_Set() error {
	var err error
	menuItemSetAccelPathFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetAccelPathFunction, err = menuItemStruct.InvokerNew("set_accel_path")
	})
	return err
}

// SetAccelPath is a representation of the C type gtk_menu_item_set_accel_path.
func (recv *MenuItem) SetAccelPath(accelPath string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accelPath)

	err := menuItemSetAccelPathFunction_Set()
	if err == nil {
		menuItemSetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetLabelFunction *gi.Function
var menuItemSetLabelFunction_Once sync.Once

func menuItemSetLabelFunction_Set() error {
	var err error
	menuItemSetLabelFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetLabelFunction, err = menuItemStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_menu_item_set_label.
func (recv *MenuItem) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := menuItemSetLabelFunction_Set()
	if err == nil {
		menuItemSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetReserveIndicatorFunction *gi.Function
var menuItemSetReserveIndicatorFunction_Once sync.Once

func menuItemSetReserveIndicatorFunction_Set() error {
	var err error
	menuItemSetReserveIndicatorFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetReserveIndicatorFunction, err = menuItemStruct.InvokerNew("set_reserve_indicator")
	})
	return err
}

// SetReserveIndicator is a representation of the C type gtk_menu_item_set_reserve_indicator.
func (recv *MenuItem) SetReserveIndicator(reserve bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reserve)

	err := menuItemSetReserveIndicatorFunction_Set()
	if err == nil {
		menuItemSetReserveIndicatorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetRightJustifiedFunction *gi.Function
var menuItemSetRightJustifiedFunction_Once sync.Once

func menuItemSetRightJustifiedFunction_Set() error {
	var err error
	menuItemSetRightJustifiedFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetRightJustifiedFunction, err = menuItemStruct.InvokerNew("set_right_justified")
	})
	return err
}

// SetRightJustified is a representation of the C type gtk_menu_item_set_right_justified.
func (recv *MenuItem) SetRightJustified(rightJustified bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(rightJustified)

	err := menuItemSetRightJustifiedFunction_Set()
	if err == nil {
		menuItemSetRightJustifiedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetSubmenuFunction *gi.Function
var menuItemSetSubmenuFunction_Once sync.Once

func menuItemSetSubmenuFunction_Set() error {
	var err error
	menuItemSetSubmenuFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetSubmenuFunction, err = menuItemStruct.InvokerNew("set_submenu")
	})
	return err
}

// SetSubmenu is a representation of the C type gtk_menu_item_set_submenu.
func (recv *MenuItem) SetSubmenu(submenu *Menu) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(submenu.Native)

	err := menuItemSetSubmenuFunction_Set()
	if err == nil {
		menuItemSetSubmenuFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemSetUseUnderlineFunction *gi.Function
var menuItemSetUseUnderlineFunction_Once sync.Once

func menuItemSetUseUnderlineFunction_Set() error {
	var err error
	menuItemSetUseUnderlineFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemSetUseUnderlineFunction, err = menuItemStruct.InvokerNew("set_use_underline")
	})
	return err
}

// SetUseUnderline is a representation of the C type gtk_menu_item_set_use_underline.
func (recv *MenuItem) SetUseUnderline(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := menuItemSetUseUnderlineFunction_Set()
	if err == nil {
		menuItemSetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemToggleSizeAllocateFunction *gi.Function
var menuItemToggleSizeAllocateFunction_Once sync.Once

func menuItemToggleSizeAllocateFunction_Set() error {
	var err error
	menuItemToggleSizeAllocateFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemToggleSizeAllocateFunction, err = menuItemStruct.InvokerNew("toggle_size_allocate")
	})
	return err
}

// ToggleSizeAllocate is a representation of the C type gtk_menu_item_toggle_size_allocate.
func (recv *MenuItem) ToggleSizeAllocate(allocation int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(allocation)

	err := menuItemToggleSizeAllocateFunction_Set()
	if err == nil {
		menuItemToggleSizeAllocateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuItemToggleSizeRequestFunction *gi.Function
var menuItemToggleSizeRequestFunction_Once sync.Once

func menuItemToggleSizeRequestFunction_Set() error {
	var err error
	menuItemToggleSizeRequestFunction_Once.Do(func() {
		err = menuItemStruct_Set()
		if err != nil {
			return
		}
		menuItemToggleSizeRequestFunction, err = menuItemStruct.InvokerNew("toggle_size_request")
	})
	return err
}

// ToggleSizeRequest is a representation of the C type gtk_menu_item_toggle_size_request.
func (recv *MenuItem) ToggleSizeRequest(requisition int32) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(requisition)

	var outArgs [1]gi.Argument

	err := menuItemToggleSizeRequestFunction_Set()
	if err == nil {
		menuItemToggleSizeRequestFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()

	return out0
}

var menuItemAccessibleStruct *gi.Struct
var menuItemAccessibleStruct_Once sync.Once

func menuItemAccessibleStruct_Set() error {
	var err error
	menuItemAccessibleStruct_Once.Do(func() {
		menuItemAccessibleStruct, err = gi.StructNew("Gtk", "MenuItemAccessible")
	})
	return err
}

type MenuItemAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *MenuItemAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(menuItemAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuItemAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuItemAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *MenuItemAccessible) FieldPriv() *MenuItemAccessiblePrivate {
	argValue := gi.FieldGet(menuItemAccessibleStruct, recv.Native, "priv")
	value := &MenuItemAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *MenuItemAccessible) SetFieldPriv(value *MenuItemAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuItemAccessibleStruct, recv.Native, "priv", argValue)
}

// MenuItemAccessibleStruct creates an uninitialised MenuItemAccessible.
func MenuItemAccessibleStruct() *MenuItemAccessible {
	err := menuItemAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &MenuItemAccessible{}
	structGo.Native = menuItemAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMenuItemAccessible)
	return structGo
}
func finalizeMenuItemAccessible(obj *MenuItemAccessible) {
	menuItemAccessibleStruct.Free(obj.Native)
}

var menuShellStruct *gi.Struct
var menuShellStruct_Once sync.Once

func menuShellStruct_Set() error {
	var err error
	menuShellStruct_Once.Do(func() {
		menuShellStruct, err = gi.StructNew("Gtk", "MenuShell")
	})
	return err
}

type MenuShell struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *MenuShell) FieldContainer() *Container {
	argValue := gi.FieldGet(menuShellStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *MenuShell) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuShellStruct, recv.Native, "container", argValue)
}

var menuShellActivateItemFunction *gi.Function
var menuShellActivateItemFunction_Once sync.Once

func menuShellActivateItemFunction_Set() error {
	var err error
	menuShellActivateItemFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellActivateItemFunction, err = menuShellStruct.InvokerNew("activate_item")
	})
	return err
}

// ActivateItem is a representation of the C type gtk_menu_shell_activate_item.
func (recv *MenuShell) ActivateItem(menuItem *Widget, forceDeactivate bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(menuItem.Native)
	inArgs[2].SetBoolean(forceDeactivate)

	err := menuShellActivateItemFunction_Set()
	if err == nil {
		menuShellActivateItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellAppendFunction *gi.Function
var menuShellAppendFunction_Once sync.Once

func menuShellAppendFunction_Set() error {
	var err error
	menuShellAppendFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellAppendFunction, err = menuShellStruct.InvokerNew("append")
	})
	return err
}

// Append is a representation of the C type gtk_menu_shell_append.
func (recv *MenuShell) Append(child *MenuItem) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := menuShellAppendFunction_Set()
	if err == nil {
		menuShellAppendFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_menu_shell_bind_model' : parameter 'model' of type 'Gio.MenuModel' not supported

var menuShellCancelFunction *gi.Function
var menuShellCancelFunction_Once sync.Once

func menuShellCancelFunction_Set() error {
	var err error
	menuShellCancelFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellCancelFunction, err = menuShellStruct.InvokerNew("cancel")
	})
	return err
}

// Cancel is a representation of the C type gtk_menu_shell_cancel.
func (recv *MenuShell) Cancel() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuShellCancelFunction_Set()
	if err == nil {
		menuShellCancelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellDeactivateFunction *gi.Function
var menuShellDeactivateFunction_Once sync.Once

func menuShellDeactivateFunction_Set() error {
	var err error
	menuShellDeactivateFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellDeactivateFunction, err = menuShellStruct.InvokerNew("deactivate")
	})
	return err
}

// Deactivate is a representation of the C type gtk_menu_shell_deactivate.
func (recv *MenuShell) Deactivate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuShellDeactivateFunction_Set()
	if err == nil {
		menuShellDeactivateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellDeselectFunction *gi.Function
var menuShellDeselectFunction_Once sync.Once

func menuShellDeselectFunction_Set() error {
	var err error
	menuShellDeselectFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellDeselectFunction, err = menuShellStruct.InvokerNew("deselect")
	})
	return err
}

// Deselect is a representation of the C type gtk_menu_shell_deselect.
func (recv *MenuShell) Deselect() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := menuShellDeselectFunction_Set()
	if err == nil {
		menuShellDeselectFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellGetParentShellFunction *gi.Function
var menuShellGetParentShellFunction_Once sync.Once

func menuShellGetParentShellFunction_Set() error {
	var err error
	menuShellGetParentShellFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellGetParentShellFunction, err = menuShellStruct.InvokerNew("get_parent_shell")
	})
	return err
}

// GetParentShell is a representation of the C type gtk_menu_shell_get_parent_shell.
func (recv *MenuShell) GetParentShell() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuShellGetParentShellFunction_Set()
	if err == nil {
		ret = menuShellGetParentShellFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuShellGetSelectedItemFunction *gi.Function
var menuShellGetSelectedItemFunction_Once sync.Once

func menuShellGetSelectedItemFunction_Set() error {
	var err error
	menuShellGetSelectedItemFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellGetSelectedItemFunction, err = menuShellStruct.InvokerNew("get_selected_item")
	})
	return err
}

// GetSelectedItem is a representation of the C type gtk_menu_shell_get_selected_item.
func (recv *MenuShell) GetSelectedItem() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuShellGetSelectedItemFunction_Set()
	if err == nil {
		ret = menuShellGetSelectedItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuShellGetTakeFocusFunction *gi.Function
var menuShellGetTakeFocusFunction_Once sync.Once

func menuShellGetTakeFocusFunction_Set() error {
	var err error
	menuShellGetTakeFocusFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellGetTakeFocusFunction, err = menuShellStruct.InvokerNew("get_take_focus")
	})
	return err
}

// GetTakeFocus is a representation of the C type gtk_menu_shell_get_take_focus.
func (recv *MenuShell) GetTakeFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuShellGetTakeFocusFunction_Set()
	if err == nil {
		ret = menuShellGetTakeFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var menuShellInsertFunction *gi.Function
var menuShellInsertFunction_Once sync.Once

func menuShellInsertFunction_Set() error {
	var err error
	menuShellInsertFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellInsertFunction, err = menuShellStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_menu_shell_insert.
func (recv *MenuShell) Insert(child *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(position)

	err := menuShellInsertFunction_Set()
	if err == nil {
		menuShellInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellPrependFunction *gi.Function
var menuShellPrependFunction_Once sync.Once

func menuShellPrependFunction_Set() error {
	var err error
	menuShellPrependFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellPrependFunction, err = menuShellStruct.InvokerNew("prepend")
	})
	return err
}

// Prepend is a representation of the C type gtk_menu_shell_prepend.
func (recv *MenuShell) Prepend(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := menuShellPrependFunction_Set()
	if err == nil {
		menuShellPrependFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellSelectFirstFunction *gi.Function
var menuShellSelectFirstFunction_Once sync.Once

func menuShellSelectFirstFunction_Set() error {
	var err error
	menuShellSelectFirstFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellSelectFirstFunction, err = menuShellStruct.InvokerNew("select_first")
	})
	return err
}

// SelectFirst is a representation of the C type gtk_menu_shell_select_first.
func (recv *MenuShell) SelectFirst(searchSensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(searchSensitive)

	err := menuShellSelectFirstFunction_Set()
	if err == nil {
		menuShellSelectFirstFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellSelectItemFunction *gi.Function
var menuShellSelectItemFunction_Once sync.Once

func menuShellSelectItemFunction_Set() error {
	var err error
	menuShellSelectItemFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellSelectItemFunction, err = menuShellStruct.InvokerNew("select_item")
	})
	return err
}

// SelectItem is a representation of the C type gtk_menu_shell_select_item.
func (recv *MenuShell) SelectItem(menuItem *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(menuItem.Native)

	err := menuShellSelectItemFunction_Set()
	if err == nil {
		menuShellSelectItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuShellSetTakeFocusFunction *gi.Function
var menuShellSetTakeFocusFunction_Once sync.Once

func menuShellSetTakeFocusFunction_Set() error {
	var err error
	menuShellSetTakeFocusFunction_Once.Do(func() {
		err = menuShellStruct_Set()
		if err != nil {
			return
		}
		menuShellSetTakeFocusFunction, err = menuShellStruct.InvokerNew("set_take_focus")
	})
	return err
}

// SetTakeFocus is a representation of the C type gtk_menu_shell_set_take_focus.
func (recv *MenuShell) SetTakeFocus(takeFocus bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(takeFocus)

	err := menuShellSetTakeFocusFunction_Set()
	if err == nil {
		menuShellSetTakeFocusFunction.Invoke(inArgs[:], nil)
	}

	return
}

// MenuShellStruct creates an uninitialised MenuShell.
func MenuShellStruct() *MenuShell {
	err := menuShellStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &MenuShell{}
	structGo.Native = menuShellStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMenuShell)
	return structGo
}
func finalizeMenuShell(obj *MenuShell) {
	menuShellStruct.Free(obj.Native)
}

var menuShellAccessibleStruct *gi.Struct
var menuShellAccessibleStruct_Once sync.Once

func menuShellAccessibleStruct_Set() error {
	var err error
	menuShellAccessibleStruct_Once.Do(func() {
		menuShellAccessibleStruct, err = gi.StructNew("Gtk", "MenuShellAccessible")
	})
	return err
}

type MenuShellAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *MenuShellAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(menuShellAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuShellAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuShellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *MenuShellAccessible) FieldPriv() *MenuShellAccessiblePrivate {
	argValue := gi.FieldGet(menuShellAccessibleStruct, recv.Native, "priv")
	value := &MenuShellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *MenuShellAccessible) SetFieldPriv(value *MenuShellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuShellAccessibleStruct, recv.Native, "priv", argValue)
}

// MenuShellAccessibleStruct creates an uninitialised MenuShellAccessible.
func MenuShellAccessibleStruct() *MenuShellAccessible {
	err := menuShellAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &MenuShellAccessible{}
	structGo.Native = menuShellAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMenuShellAccessible)
	return structGo
}
func finalizeMenuShellAccessible(obj *MenuShellAccessible) {
	menuShellAccessibleStruct.Free(obj.Native)
}

var menuToolButtonStruct *gi.Struct
var menuToolButtonStruct_Once sync.Once

func menuToolButtonStruct_Set() error {
	var err error
	menuToolButtonStruct_Once.Do(func() {
		menuToolButtonStruct, err = gi.StructNew("Gtk", "MenuToolButton")
	})
	return err
}

type MenuToolButton struct {
	ToolButton
}

// FieldParent returns the C field 'parent'.
func (recv *MenuToolButton) FieldParent() *ToolButton {
	argValue := gi.FieldGet(menuToolButtonStruct, recv.Native, "parent")
	value := &ToolButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *MenuToolButton) SetFieldParent(value *ToolButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(menuToolButtonStruct, recv.Native, "parent", argValue)
}

var menuToolButtonNewFunction *gi.Function
var menuToolButtonNewFunction_Once sync.Once

func menuToolButtonNewFunction_Set() error {
	var err error
	menuToolButtonNewFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonNewFunction, err = menuToolButtonStruct.InvokerNew("new")
	})
	return err
}

// MenuToolButtonNew is a representation of the C type gtk_menu_tool_button_new.
func MenuToolButtonNew(iconWidget *Widget, label string) *MenuToolButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(iconWidget.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := menuToolButtonNewFunction_Set()
	if err == nil {
		ret = menuToolButtonNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &MenuToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuToolButtonNewFromStockFunction *gi.Function
var menuToolButtonNewFromStockFunction_Once sync.Once

func menuToolButtonNewFromStockFunction_Set() error {
	var err error
	menuToolButtonNewFromStockFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonNewFromStockFunction, err = menuToolButtonStruct.InvokerNew("new_from_stock")
	})
	return err
}

// MenuToolButtonNewFromStock is a representation of the C type gtk_menu_tool_button_new_from_stock.
func MenuToolButtonNewFromStock(stockId string) *MenuToolButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(stockId)

	var ret gi.Argument

	err := menuToolButtonNewFromStockFunction_Set()
	if err == nil {
		ret = menuToolButtonNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &MenuToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuToolButtonGetMenuFunction *gi.Function
var menuToolButtonGetMenuFunction_Once sync.Once

func menuToolButtonGetMenuFunction_Set() error {
	var err error
	menuToolButtonGetMenuFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonGetMenuFunction, err = menuToolButtonStruct.InvokerNew("get_menu")
	})
	return err
}

// GetMenu is a representation of the C type gtk_menu_tool_button_get_menu.
func (recv *MenuToolButton) GetMenu() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := menuToolButtonGetMenuFunction_Set()
	if err == nil {
		ret = menuToolButtonGetMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var menuToolButtonSetArrowTooltipMarkupFunction *gi.Function
var menuToolButtonSetArrowTooltipMarkupFunction_Once sync.Once

func menuToolButtonSetArrowTooltipMarkupFunction_Set() error {
	var err error
	menuToolButtonSetArrowTooltipMarkupFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonSetArrowTooltipMarkupFunction, err = menuToolButtonStruct.InvokerNew("set_arrow_tooltip_markup")
	})
	return err
}

// SetArrowTooltipMarkup is a representation of the C type gtk_menu_tool_button_set_arrow_tooltip_markup.
func (recv *MenuToolButton) SetArrowTooltipMarkup(markup string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markup)

	err := menuToolButtonSetArrowTooltipMarkupFunction_Set()
	if err == nil {
		menuToolButtonSetArrowTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuToolButtonSetArrowTooltipTextFunction *gi.Function
var menuToolButtonSetArrowTooltipTextFunction_Once sync.Once

func menuToolButtonSetArrowTooltipTextFunction_Set() error {
	var err error
	menuToolButtonSetArrowTooltipTextFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonSetArrowTooltipTextFunction, err = menuToolButtonStruct.InvokerNew("set_arrow_tooltip_text")
	})
	return err
}

// SetArrowTooltipText is a representation of the C type gtk_menu_tool_button_set_arrow_tooltip_text.
func (recv *MenuToolButton) SetArrowTooltipText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := menuToolButtonSetArrowTooltipTextFunction_Set()
	if err == nil {
		menuToolButtonSetArrowTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var menuToolButtonSetMenuFunction *gi.Function
var menuToolButtonSetMenuFunction_Once sync.Once

func menuToolButtonSetMenuFunction_Set() error {
	var err error
	menuToolButtonSetMenuFunction_Once.Do(func() {
		err = menuToolButtonStruct_Set()
		if err != nil {
			return
		}
		menuToolButtonSetMenuFunction, err = menuToolButtonStruct.InvokerNew("set_menu")
	})
	return err
}

// SetMenu is a representation of the C type gtk_menu_tool_button_set_menu.
func (recv *MenuToolButton) SetMenu(menu *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(menu.Native)

	err := menuToolButtonSetMenuFunction_Set()
	if err == nil {
		menuToolButtonSetMenuFunction.Invoke(inArgs[:], nil)
	}

	return
}

var messageDialogStruct *gi.Struct
var messageDialogStruct_Once sync.Once

func messageDialogStruct_Set() error {
	var err error
	messageDialogStruct_Once.Do(func() {
		messageDialogStruct, err = gi.StructNew("Gtk", "MessageDialog")
	})
	return err
}

type MessageDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *MessageDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(messageDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *MessageDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(messageDialogStruct, recv.Native, "parent_instance", argValue)
}

// UNSUPPORTED : C value 'gtk_message_dialog_new' : parameter 'flags' of type 'DialogFlags' not supported

// UNSUPPORTED : C value 'gtk_message_dialog_new_with_markup' : parameter 'flags' of type 'DialogFlags' not supported

// UNSUPPORTED : C value 'gtk_message_dialog_format_secondary_markup' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_message_dialog_format_secondary_text' : parameter '...' of type 'nil' not supported

var messageDialogGetImageFunction *gi.Function
var messageDialogGetImageFunction_Once sync.Once

func messageDialogGetImageFunction_Set() error {
	var err error
	messageDialogGetImageFunction_Once.Do(func() {
		err = messageDialogStruct_Set()
		if err != nil {
			return
		}
		messageDialogGetImageFunction, err = messageDialogStruct.InvokerNew("get_image")
	})
	return err
}

// GetImage is a representation of the C type gtk_message_dialog_get_image.
func (recv *MessageDialog) GetImage() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := messageDialogGetImageFunction_Set()
	if err == nil {
		ret = messageDialogGetImageFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var messageDialogGetMessageAreaFunction *gi.Function
var messageDialogGetMessageAreaFunction_Once sync.Once

func messageDialogGetMessageAreaFunction_Set() error {
	var err error
	messageDialogGetMessageAreaFunction_Once.Do(func() {
		err = messageDialogStruct_Set()
		if err != nil {
			return
		}
		messageDialogGetMessageAreaFunction, err = messageDialogStruct.InvokerNew("get_message_area")
	})
	return err
}

// GetMessageArea is a representation of the C type gtk_message_dialog_get_message_area.
func (recv *MessageDialog) GetMessageArea() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := messageDialogGetMessageAreaFunction_Set()
	if err == nil {
		ret = messageDialogGetMessageAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var messageDialogSetImageFunction *gi.Function
var messageDialogSetImageFunction_Once sync.Once

func messageDialogSetImageFunction_Set() error {
	var err error
	messageDialogSetImageFunction_Once.Do(func() {
		err = messageDialogStruct_Set()
		if err != nil {
			return
		}
		messageDialogSetImageFunction, err = messageDialogStruct.InvokerNew("set_image")
	})
	return err
}

// SetImage is a representation of the C type gtk_message_dialog_set_image.
func (recv *MessageDialog) SetImage(image *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(image.Native)

	err := messageDialogSetImageFunction_Set()
	if err == nil {
		messageDialogSetImageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var messageDialogSetMarkupFunction *gi.Function
var messageDialogSetMarkupFunction_Once sync.Once

func messageDialogSetMarkupFunction_Set() error {
	var err error
	messageDialogSetMarkupFunction_Once.Do(func() {
		err = messageDialogStruct_Set()
		if err != nil {
			return
		}
		messageDialogSetMarkupFunction, err = messageDialogStruct.InvokerNew("set_markup")
	})
	return err
}

// SetMarkup is a representation of the C type gtk_message_dialog_set_markup.
func (recv *MessageDialog) SetMarkup(str string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(str)

	err := messageDialogSetMarkupFunction_Set()
	if err == nil {
		messageDialogSetMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var miscStruct *gi.Struct
var miscStruct_Once sync.Once

func miscStruct_Set() error {
	var err error
	miscStruct_Once.Do(func() {
		miscStruct, err = gi.StructNew("Gtk", "Misc")
	})
	return err
}

type Misc struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Misc) FieldWidget() *Widget {
	argValue := gi.FieldGet(miscStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Misc) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(miscStruct, recv.Native, "widget", argValue)
}

var miscGetAlignmentFunction *gi.Function
var miscGetAlignmentFunction_Once sync.Once

func miscGetAlignmentFunction_Set() error {
	var err error
	miscGetAlignmentFunction_Once.Do(func() {
		err = miscStruct_Set()
		if err != nil {
			return
		}
		miscGetAlignmentFunction, err = miscStruct.InvokerNew("get_alignment")
	})
	return err
}

// GetAlignment is a representation of the C type gtk_misc_get_alignment.
func (recv *Misc) GetAlignment() (float32, float32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := miscGetAlignmentFunction_Set()
	if err == nil {
		miscGetAlignmentFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float32()
	out1 := outArgs[1].Float32()

	return out0, out1
}

var miscGetPaddingFunction *gi.Function
var miscGetPaddingFunction_Once sync.Once

func miscGetPaddingFunction_Set() error {
	var err error
	miscGetPaddingFunction_Once.Do(func() {
		err = miscStruct_Set()
		if err != nil {
			return
		}
		miscGetPaddingFunction, err = miscStruct.InvokerNew("get_padding")
	})
	return err
}

// GetPadding is a representation of the C type gtk_misc_get_padding.
func (recv *Misc) GetPadding() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := miscGetPaddingFunction_Set()
	if err == nil {
		miscGetPaddingFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var miscSetAlignmentFunction *gi.Function
var miscSetAlignmentFunction_Once sync.Once

func miscSetAlignmentFunction_Set() error {
	var err error
	miscSetAlignmentFunction_Once.Do(func() {
		err = miscStruct_Set()
		if err != nil {
			return
		}
		miscSetAlignmentFunction, err = miscStruct.InvokerNew("set_alignment")
	})
	return err
}

// SetAlignment is a representation of the C type gtk_misc_set_alignment.
func (recv *Misc) SetAlignment(xalign float32, yalign float32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)
	inArgs[2].SetFloat32(yalign)

	err := miscSetAlignmentFunction_Set()
	if err == nil {
		miscSetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var miscSetPaddingFunction *gi.Function
var miscSetPaddingFunction_Once sync.Once

func miscSetPaddingFunction_Set() error {
	var err error
	miscSetPaddingFunction_Once.Do(func() {
		err = miscStruct_Set()
		if err != nil {
			return
		}
		miscSetPaddingFunction, err = miscStruct.InvokerNew("set_padding")
	})
	return err
}

// SetPadding is a representation of the C type gtk_misc_set_padding.
func (recv *Misc) SetPadding(xpad int32, ypad int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(xpad)
	inArgs[2].SetInt32(ypad)

	err := miscSetPaddingFunction_Set()
	if err == nil {
		miscSetPaddingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// MiscStruct creates an uninitialised Misc.
func MiscStruct() *Misc {
	err := miscStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Misc{}
	structGo.Native = miscStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeMisc)
	return structGo
}
func finalizeMisc(obj *Misc) {
	miscStruct.Free(obj.Native)
}

var modelButtonStruct *gi.Struct
var modelButtonStruct_Once sync.Once

func modelButtonStruct_Set() error {
	var err error
	modelButtonStruct_Once.Do(func() {
		modelButtonStruct, err = gi.StructNew("Gtk", "ModelButton")
	})
	return err
}

type ModelButton struct {
	Button
}

var modelButtonNewFunction *gi.Function
var modelButtonNewFunction_Once sync.Once

func modelButtonNewFunction_Set() error {
	var err error
	modelButtonNewFunction_Once.Do(func() {
		err = modelButtonStruct_Set()
		if err != nil {
			return
		}
		modelButtonNewFunction, err = modelButtonStruct.InvokerNew("new")
	})
	return err
}

// ModelButtonNew is a representation of the C type gtk_model_button_new.
func ModelButtonNew() *ModelButton {

	var ret gi.Argument

	err := modelButtonNewFunction_Set()
	if err == nil {
		ret = modelButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &ModelButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var mountOperationStruct *gi.Struct
var mountOperationStruct_Once sync.Once

func mountOperationStruct_Set() error {
	var err error
	mountOperationStruct_Once.Do(func() {
		mountOperationStruct, err = gi.StructNew("Gtk", "MountOperation")
	})
	return err
}

type MountOperation struct {
	gio.MountOperation
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'Gio.MountOperation'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'Gio.MountOperation'

// FieldPriv returns the C field 'priv'.
func (recv *MountOperation) FieldPriv() *MountOperationPrivate {
	argValue := gi.FieldGet(mountOperationStruct, recv.Native, "priv")
	value := &MountOperationPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *MountOperation) SetFieldPriv(value *MountOperationPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(mountOperationStruct, recv.Native, "priv", argValue)
}

var mountOperationNewFunction *gi.Function
var mountOperationNewFunction_Once sync.Once

func mountOperationNewFunction_Set() error {
	var err error
	mountOperationNewFunction_Once.Do(func() {
		err = mountOperationStruct_Set()
		if err != nil {
			return
		}
		mountOperationNewFunction, err = mountOperationStruct.InvokerNew("new")
	})
	return err
}

// MountOperationNew is a representation of the C type gtk_mount_operation_new.
func MountOperationNew(parent *Window) *MountOperation {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(parent.Native)

	var ret gi.Argument

	err := mountOperationNewFunction_Set()
	if err == nil {
		ret = mountOperationNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &MountOperation{}
	retGo.Native = ret.Pointer()

	return retGo
}

var mountOperationGetParentFunction *gi.Function
var mountOperationGetParentFunction_Once sync.Once

func mountOperationGetParentFunction_Set() error {
	var err error
	mountOperationGetParentFunction_Once.Do(func() {
		err = mountOperationStruct_Set()
		if err != nil {
			return
		}
		mountOperationGetParentFunction, err = mountOperationStruct.InvokerNew("get_parent")
	})
	return err
}

// GetParent is a representation of the C type gtk_mount_operation_get_parent.
func (recv *MountOperation) GetParent() *Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := mountOperationGetParentFunction_Set()
	if err == nil {
		ret = mountOperationGetParentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_mount_operation_get_screen' : return type 'Gdk.Screen' not supported

var mountOperationIsShowingFunction *gi.Function
var mountOperationIsShowingFunction_Once sync.Once

func mountOperationIsShowingFunction_Set() error {
	var err error
	mountOperationIsShowingFunction_Once.Do(func() {
		err = mountOperationStruct_Set()
		if err != nil {
			return
		}
		mountOperationIsShowingFunction, err = mountOperationStruct.InvokerNew("is_showing")
	})
	return err
}

// IsShowing is a representation of the C type gtk_mount_operation_is_showing.
func (recv *MountOperation) IsShowing() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := mountOperationIsShowingFunction_Set()
	if err == nil {
		ret = mountOperationIsShowingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var mountOperationSetParentFunction *gi.Function
var mountOperationSetParentFunction_Once sync.Once

func mountOperationSetParentFunction_Set() error {
	var err error
	mountOperationSetParentFunction_Once.Do(func() {
		err = mountOperationStruct_Set()
		if err != nil {
			return
		}
		mountOperationSetParentFunction, err = mountOperationStruct.InvokerNew("set_parent")
	})
	return err
}

// SetParent is a representation of the C type gtk_mount_operation_set_parent.
func (recv *MountOperation) SetParent(parent *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	err := mountOperationSetParentFunction_Set()
	if err == nil {
		mountOperationSetParentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_mount_operation_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

var nativeDialogStruct *gi.Struct
var nativeDialogStruct_Once sync.Once

func nativeDialogStruct_Set() error {
	var err error
	nativeDialogStruct_Once.Do(func() {
		nativeDialogStruct, err = gi.StructNew("Gtk", "NativeDialog")
	})
	return err
}

type NativeDialog struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var nativeDialogDestroyFunction *gi.Function
var nativeDialogDestroyFunction_Once sync.Once

func nativeDialogDestroyFunction_Set() error {
	var err error
	nativeDialogDestroyFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogDestroyFunction, err = nativeDialogStruct.InvokerNew("destroy")
	})
	return err
}

// Destroy is a representation of the C type gtk_native_dialog_destroy.
func (recv *NativeDialog) Destroy() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := nativeDialogDestroyFunction_Set()
	if err == nil {
		nativeDialogDestroyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var nativeDialogGetModalFunction *gi.Function
var nativeDialogGetModalFunction_Once sync.Once

func nativeDialogGetModalFunction_Set() error {
	var err error
	nativeDialogGetModalFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogGetModalFunction, err = nativeDialogStruct.InvokerNew("get_modal")
	})
	return err
}

// GetModal is a representation of the C type gtk_native_dialog_get_modal.
func (recv *NativeDialog) GetModal() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := nativeDialogGetModalFunction_Set()
	if err == nil {
		ret = nativeDialogGetModalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var nativeDialogGetTitleFunction *gi.Function
var nativeDialogGetTitleFunction_Once sync.Once

func nativeDialogGetTitleFunction_Set() error {
	var err error
	nativeDialogGetTitleFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogGetTitleFunction, err = nativeDialogStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_native_dialog_get_title.
func (recv *NativeDialog) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := nativeDialogGetTitleFunction_Set()
	if err == nil {
		ret = nativeDialogGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var nativeDialogGetTransientForFunction *gi.Function
var nativeDialogGetTransientForFunction_Once sync.Once

func nativeDialogGetTransientForFunction_Set() error {
	var err error
	nativeDialogGetTransientForFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogGetTransientForFunction, err = nativeDialogStruct.InvokerNew("get_transient_for")
	})
	return err
}

// GetTransientFor is a representation of the C type gtk_native_dialog_get_transient_for.
func (recv *NativeDialog) GetTransientFor() *Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := nativeDialogGetTransientForFunction_Set()
	if err == nil {
		ret = nativeDialogGetTransientForFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

var nativeDialogGetVisibleFunction *gi.Function
var nativeDialogGetVisibleFunction_Once sync.Once

func nativeDialogGetVisibleFunction_Set() error {
	var err error
	nativeDialogGetVisibleFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogGetVisibleFunction, err = nativeDialogStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_native_dialog_get_visible.
func (recv *NativeDialog) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := nativeDialogGetVisibleFunction_Set()
	if err == nil {
		ret = nativeDialogGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var nativeDialogHideFunction *gi.Function
var nativeDialogHideFunction_Once sync.Once

func nativeDialogHideFunction_Set() error {
	var err error
	nativeDialogHideFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogHideFunction, err = nativeDialogStruct.InvokerNew("hide")
	})
	return err
}

// Hide is a representation of the C type gtk_native_dialog_hide.
func (recv *NativeDialog) Hide() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := nativeDialogHideFunction_Set()
	if err == nil {
		nativeDialogHideFunction.Invoke(inArgs[:], nil)
	}

	return
}

var nativeDialogRunFunction *gi.Function
var nativeDialogRunFunction_Once sync.Once

func nativeDialogRunFunction_Set() error {
	var err error
	nativeDialogRunFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogRunFunction, err = nativeDialogStruct.InvokerNew("run")
	})
	return err
}

// Run is a representation of the C type gtk_native_dialog_run.
func (recv *NativeDialog) Run() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := nativeDialogRunFunction_Set()
	if err == nil {
		ret = nativeDialogRunFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var nativeDialogSetModalFunction *gi.Function
var nativeDialogSetModalFunction_Once sync.Once

func nativeDialogSetModalFunction_Set() error {
	var err error
	nativeDialogSetModalFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogSetModalFunction, err = nativeDialogStruct.InvokerNew("set_modal")
	})
	return err
}

// SetModal is a representation of the C type gtk_native_dialog_set_modal.
func (recv *NativeDialog) SetModal(modal bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(modal)

	err := nativeDialogSetModalFunction_Set()
	if err == nil {
		nativeDialogSetModalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var nativeDialogSetTitleFunction *gi.Function
var nativeDialogSetTitleFunction_Once sync.Once

func nativeDialogSetTitleFunction_Set() error {
	var err error
	nativeDialogSetTitleFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogSetTitleFunction, err = nativeDialogStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_native_dialog_set_title.
func (recv *NativeDialog) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := nativeDialogSetTitleFunction_Set()
	if err == nil {
		nativeDialogSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var nativeDialogSetTransientForFunction *gi.Function
var nativeDialogSetTransientForFunction_Once sync.Once

func nativeDialogSetTransientForFunction_Set() error {
	var err error
	nativeDialogSetTransientForFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogSetTransientForFunction, err = nativeDialogStruct.InvokerNew("set_transient_for")
	})
	return err
}

// SetTransientFor is a representation of the C type gtk_native_dialog_set_transient_for.
func (recv *NativeDialog) SetTransientFor(parent *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	err := nativeDialogSetTransientForFunction_Set()
	if err == nil {
		nativeDialogSetTransientForFunction.Invoke(inArgs[:], nil)
	}

	return
}

var nativeDialogShowFunction *gi.Function
var nativeDialogShowFunction_Once sync.Once

func nativeDialogShowFunction_Set() error {
	var err error
	nativeDialogShowFunction_Once.Do(func() {
		err = nativeDialogStruct_Set()
		if err != nil {
			return
		}
		nativeDialogShowFunction, err = nativeDialogStruct.InvokerNew("show")
	})
	return err
}

// Show is a representation of the C type gtk_native_dialog_show.
func (recv *NativeDialog) Show() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := nativeDialogShowFunction_Set()
	if err == nil {
		nativeDialogShowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// NativeDialogStruct creates an uninitialised NativeDialog.
func NativeDialogStruct() *NativeDialog {
	err := nativeDialogStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &NativeDialog{}
	structGo.Native = nativeDialogStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeNativeDialog)
	return structGo
}
func finalizeNativeDialog(obj *NativeDialog) {
	nativeDialogStruct.Free(obj.Native)
}

var notebookStruct *gi.Struct
var notebookStruct_Once sync.Once

func notebookStruct_Set() error {
	var err error
	notebookStruct_Once.Do(func() {
		notebookStruct, err = gi.StructNew("Gtk", "Notebook")
	})
	return err
}

type Notebook struct {
	Container
}

var notebookNewFunction *gi.Function
var notebookNewFunction_Once sync.Once

func notebookNewFunction_Set() error {
	var err error
	notebookNewFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookNewFunction, err = notebookStruct.InvokerNew("new")
	})
	return err
}

// NotebookNew is a representation of the C type gtk_notebook_new.
func NotebookNew() *Notebook {

	var ret gi.Argument

	err := notebookNewFunction_Set()
	if err == nil {
		ret = notebookNewFunction.Invoke(nil, nil)
	}

	retGo := &Notebook{}
	retGo.Native = ret.Pointer()

	return retGo
}

var notebookAppendPageFunction *gi.Function
var notebookAppendPageFunction_Once sync.Once

func notebookAppendPageFunction_Set() error {
	var err error
	notebookAppendPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookAppendPageFunction, err = notebookStruct.InvokerNew("append_page")
	})
	return err
}

// AppendPage is a representation of the C type gtk_notebook_append_page.
func (recv *Notebook) AppendPage(child *Widget, tabLabel *Widget) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)

	var ret gi.Argument

	err := notebookAppendPageFunction_Set()
	if err == nil {
		ret = notebookAppendPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookAppendPageMenuFunction *gi.Function
var notebookAppendPageMenuFunction_Once sync.Once

func notebookAppendPageMenuFunction_Set() error {
	var err error
	notebookAppendPageMenuFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookAppendPageMenuFunction, err = notebookStruct.InvokerNew("append_page_menu")
	})
	return err
}

// AppendPageMenu is a representation of the C type gtk_notebook_append_page_menu.
func (recv *Notebook) AppendPageMenu(child *Widget, tabLabel *Widget, menuLabel *Widget) int32 {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)
	inArgs[3].SetPointer(menuLabel.Native)

	var ret gi.Argument

	err := notebookAppendPageMenuFunction_Set()
	if err == nil {
		ret = notebookAppendPageMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookDetachTabFunction *gi.Function
var notebookDetachTabFunction_Once sync.Once

func notebookDetachTabFunction_Set() error {
	var err error
	notebookDetachTabFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookDetachTabFunction, err = notebookStruct.InvokerNew("detach_tab")
	})
	return err
}

// DetachTab is a representation of the C type gtk_notebook_detach_tab.
func (recv *Notebook) DetachTab(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := notebookDetachTabFunction_Set()
	if err == nil {
		notebookDetachTabFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_notebook_get_action_widget' : parameter 'pack_type' of type 'PackType' not supported

var notebookGetCurrentPageFunction *gi.Function
var notebookGetCurrentPageFunction_Once sync.Once

func notebookGetCurrentPageFunction_Set() error {
	var err error
	notebookGetCurrentPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetCurrentPageFunction, err = notebookStruct.InvokerNew("get_current_page")
	})
	return err
}

// GetCurrentPage is a representation of the C type gtk_notebook_get_current_page.
func (recv *Notebook) GetCurrentPage() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetCurrentPageFunction_Set()
	if err == nil {
		ret = notebookGetCurrentPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookGetGroupNameFunction *gi.Function
var notebookGetGroupNameFunction_Once sync.Once

func notebookGetGroupNameFunction_Set() error {
	var err error
	notebookGetGroupNameFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetGroupNameFunction, err = notebookStruct.InvokerNew("get_group_name")
	})
	return err
}

// GetGroupName is a representation of the C type gtk_notebook_get_group_name.
func (recv *Notebook) GetGroupName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetGroupNameFunction_Set()
	if err == nil {
		ret = notebookGetGroupNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var notebookGetMenuLabelFunction *gi.Function
var notebookGetMenuLabelFunction_Once sync.Once

func notebookGetMenuLabelFunction_Set() error {
	var err error
	notebookGetMenuLabelFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetMenuLabelFunction, err = notebookStruct.InvokerNew("get_menu_label")
	})
	return err
}

// GetMenuLabel is a representation of the C type gtk_notebook_get_menu_label.
func (recv *Notebook) GetMenuLabel(child *Widget) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetMenuLabelFunction_Set()
	if err == nil {
		ret = notebookGetMenuLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var notebookGetMenuLabelTextFunction *gi.Function
var notebookGetMenuLabelTextFunction_Once sync.Once

func notebookGetMenuLabelTextFunction_Set() error {
	var err error
	notebookGetMenuLabelTextFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetMenuLabelTextFunction, err = notebookStruct.InvokerNew("get_menu_label_text")
	})
	return err
}

// GetMenuLabelText is a representation of the C type gtk_notebook_get_menu_label_text.
func (recv *Notebook) GetMenuLabelText(child *Widget) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetMenuLabelTextFunction_Set()
	if err == nil {
		ret = notebookGetMenuLabelTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var notebookGetNPagesFunction *gi.Function
var notebookGetNPagesFunction_Once sync.Once

func notebookGetNPagesFunction_Set() error {
	var err error
	notebookGetNPagesFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetNPagesFunction, err = notebookStruct.InvokerNew("get_n_pages")
	})
	return err
}

// GetNPages is a representation of the C type gtk_notebook_get_n_pages.
func (recv *Notebook) GetNPages() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetNPagesFunction_Set()
	if err == nil {
		ret = notebookGetNPagesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookGetNthPageFunction *gi.Function
var notebookGetNthPageFunction_Once sync.Once

func notebookGetNthPageFunction_Set() error {
	var err error
	notebookGetNthPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetNthPageFunction, err = notebookStruct.InvokerNew("get_nth_page")
	})
	return err
}

// GetNthPage is a representation of the C type gtk_notebook_get_nth_page.
func (recv *Notebook) GetNthPage(pageNum int32) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	var ret gi.Argument

	err := notebookGetNthPageFunction_Set()
	if err == nil {
		ret = notebookGetNthPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var notebookGetScrollableFunction *gi.Function
var notebookGetScrollableFunction_Once sync.Once

func notebookGetScrollableFunction_Set() error {
	var err error
	notebookGetScrollableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetScrollableFunction, err = notebookStruct.InvokerNew("get_scrollable")
	})
	return err
}

// GetScrollable is a representation of the C type gtk_notebook_get_scrollable.
func (recv *Notebook) GetScrollable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetScrollableFunction_Set()
	if err == nil {
		ret = notebookGetScrollableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var notebookGetShowBorderFunction *gi.Function
var notebookGetShowBorderFunction_Once sync.Once

func notebookGetShowBorderFunction_Set() error {
	var err error
	notebookGetShowBorderFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetShowBorderFunction, err = notebookStruct.InvokerNew("get_show_border")
	})
	return err
}

// GetShowBorder is a representation of the C type gtk_notebook_get_show_border.
func (recv *Notebook) GetShowBorder() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetShowBorderFunction_Set()
	if err == nil {
		ret = notebookGetShowBorderFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var notebookGetShowTabsFunction *gi.Function
var notebookGetShowTabsFunction_Once sync.Once

func notebookGetShowTabsFunction_Set() error {
	var err error
	notebookGetShowTabsFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetShowTabsFunction, err = notebookStruct.InvokerNew("get_show_tabs")
	})
	return err
}

// GetShowTabs is a representation of the C type gtk_notebook_get_show_tabs.
func (recv *Notebook) GetShowTabs() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetShowTabsFunction_Set()
	if err == nil {
		ret = notebookGetShowTabsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var notebookGetTabDetachableFunction *gi.Function
var notebookGetTabDetachableFunction_Once sync.Once

func notebookGetTabDetachableFunction_Set() error {
	var err error
	notebookGetTabDetachableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabDetachableFunction, err = notebookStruct.InvokerNew("get_tab_detachable")
	})
	return err
}

// GetTabDetachable is a representation of the C type gtk_notebook_get_tab_detachable.
func (recv *Notebook) GetTabDetachable(child *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetTabDetachableFunction_Set()
	if err == nil {
		ret = notebookGetTabDetachableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var notebookGetTabHborderFunction *gi.Function
var notebookGetTabHborderFunction_Once sync.Once

func notebookGetTabHborderFunction_Set() error {
	var err error
	notebookGetTabHborderFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabHborderFunction, err = notebookStruct.InvokerNew("get_tab_hborder")
	})
	return err
}

// GetTabHborder is a representation of the C type gtk_notebook_get_tab_hborder.
func (recv *Notebook) GetTabHborder() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetTabHborderFunction_Set()
	if err == nil {
		ret = notebookGetTabHborderFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

var notebookGetTabLabelFunction *gi.Function
var notebookGetTabLabelFunction_Once sync.Once

func notebookGetTabLabelFunction_Set() error {
	var err error
	notebookGetTabLabelFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabLabelFunction, err = notebookStruct.InvokerNew("get_tab_label")
	})
	return err
}

// GetTabLabel is a representation of the C type gtk_notebook_get_tab_label.
func (recv *Notebook) GetTabLabel(child *Widget) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetTabLabelFunction_Set()
	if err == nil {
		ret = notebookGetTabLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var notebookGetTabLabelTextFunction *gi.Function
var notebookGetTabLabelTextFunction_Once sync.Once

func notebookGetTabLabelTextFunction_Set() error {
	var err error
	notebookGetTabLabelTextFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabLabelTextFunction, err = notebookStruct.InvokerNew("get_tab_label_text")
	})
	return err
}

// GetTabLabelText is a representation of the C type gtk_notebook_get_tab_label_text.
func (recv *Notebook) GetTabLabelText(child *Widget) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetTabLabelTextFunction_Set()
	if err == nil {
		ret = notebookGetTabLabelTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_notebook_get_tab_pos' : return type 'PositionType' not supported

var notebookGetTabReorderableFunction *gi.Function
var notebookGetTabReorderableFunction_Once sync.Once

func notebookGetTabReorderableFunction_Set() error {
	var err error
	notebookGetTabReorderableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabReorderableFunction, err = notebookStruct.InvokerNew("get_tab_reorderable")
	})
	return err
}

// GetTabReorderable is a representation of the C type gtk_notebook_get_tab_reorderable.
func (recv *Notebook) GetTabReorderable(child *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookGetTabReorderableFunction_Set()
	if err == nil {
		ret = notebookGetTabReorderableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var notebookGetTabVborderFunction *gi.Function
var notebookGetTabVborderFunction_Once sync.Once

func notebookGetTabVborderFunction_Set() error {
	var err error
	notebookGetTabVborderFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookGetTabVborderFunction, err = notebookStruct.InvokerNew("get_tab_vborder")
	})
	return err
}

// GetTabVborder is a representation of the C type gtk_notebook_get_tab_vborder.
func (recv *Notebook) GetTabVborder() uint16 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := notebookGetTabVborderFunction_Set()
	if err == nil {
		ret = notebookGetTabVborderFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint16()

	return retGo
}

var notebookInsertPageFunction *gi.Function
var notebookInsertPageFunction_Once sync.Once

func notebookInsertPageFunction_Set() error {
	var err error
	notebookInsertPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookInsertPageFunction, err = notebookStruct.InvokerNew("insert_page")
	})
	return err
}

// InsertPage is a representation of the C type gtk_notebook_insert_page.
func (recv *Notebook) InsertPage(child *Widget, tabLabel *Widget, position int32) int32 {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)
	inArgs[3].SetInt32(position)

	var ret gi.Argument

	err := notebookInsertPageFunction_Set()
	if err == nil {
		ret = notebookInsertPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookInsertPageMenuFunction *gi.Function
var notebookInsertPageMenuFunction_Once sync.Once

func notebookInsertPageMenuFunction_Set() error {
	var err error
	notebookInsertPageMenuFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookInsertPageMenuFunction, err = notebookStruct.InvokerNew("insert_page_menu")
	})
	return err
}

// InsertPageMenu is a representation of the C type gtk_notebook_insert_page_menu.
func (recv *Notebook) InsertPageMenu(child *Widget, tabLabel *Widget, menuLabel *Widget, position int32) int32 {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)
	inArgs[3].SetPointer(menuLabel.Native)
	inArgs[4].SetInt32(position)

	var ret gi.Argument

	err := notebookInsertPageMenuFunction_Set()
	if err == nil {
		ret = notebookInsertPageMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookNextPageFunction *gi.Function
var notebookNextPageFunction_Once sync.Once

func notebookNextPageFunction_Set() error {
	var err error
	notebookNextPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookNextPageFunction, err = notebookStruct.InvokerNew("next_page")
	})
	return err
}

// NextPage is a representation of the C type gtk_notebook_next_page.
func (recv *Notebook) NextPage() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := notebookNextPageFunction_Set()
	if err == nil {
		notebookNextPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookPageNumFunction *gi.Function
var notebookPageNumFunction_Once sync.Once

func notebookPageNumFunction_Set() error {
	var err error
	notebookPageNumFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPageNumFunction, err = notebookStruct.InvokerNew("page_num")
	})
	return err
}

// PageNum is a representation of the C type gtk_notebook_page_num.
func (recv *Notebook) PageNum(child *Widget) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookPageNumFunction_Set()
	if err == nil {
		ret = notebookPageNumFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookPopupDisableFunction *gi.Function
var notebookPopupDisableFunction_Once sync.Once

func notebookPopupDisableFunction_Set() error {
	var err error
	notebookPopupDisableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPopupDisableFunction, err = notebookStruct.InvokerNew("popup_disable")
	})
	return err
}

// PopupDisable is a representation of the C type gtk_notebook_popup_disable.
func (recv *Notebook) PopupDisable() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := notebookPopupDisableFunction_Set()
	if err == nil {
		notebookPopupDisableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookPopupEnableFunction *gi.Function
var notebookPopupEnableFunction_Once sync.Once

func notebookPopupEnableFunction_Set() error {
	var err error
	notebookPopupEnableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPopupEnableFunction, err = notebookStruct.InvokerNew("popup_enable")
	})
	return err
}

// PopupEnable is a representation of the C type gtk_notebook_popup_enable.
func (recv *Notebook) PopupEnable() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := notebookPopupEnableFunction_Set()
	if err == nil {
		notebookPopupEnableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookPrependPageFunction *gi.Function
var notebookPrependPageFunction_Once sync.Once

func notebookPrependPageFunction_Set() error {
	var err error
	notebookPrependPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPrependPageFunction, err = notebookStruct.InvokerNew("prepend_page")
	})
	return err
}

// PrependPage is a representation of the C type gtk_notebook_prepend_page.
func (recv *Notebook) PrependPage(child *Widget, tabLabel *Widget) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)

	var ret gi.Argument

	err := notebookPrependPageFunction_Set()
	if err == nil {
		ret = notebookPrependPageFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookPrependPageMenuFunction *gi.Function
var notebookPrependPageMenuFunction_Once sync.Once

func notebookPrependPageMenuFunction_Set() error {
	var err error
	notebookPrependPageMenuFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPrependPageMenuFunction, err = notebookStruct.InvokerNew("prepend_page_menu")
	})
	return err
}

// PrependPageMenu is a representation of the C type gtk_notebook_prepend_page_menu.
func (recv *Notebook) PrependPageMenu(child *Widget, tabLabel *Widget, menuLabel *Widget) int32 {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)
	inArgs[3].SetPointer(menuLabel.Native)

	var ret gi.Argument

	err := notebookPrependPageMenuFunction_Set()
	if err == nil {
		ret = notebookPrependPageMenuFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var notebookPrevPageFunction *gi.Function
var notebookPrevPageFunction_Once sync.Once

func notebookPrevPageFunction_Set() error {
	var err error
	notebookPrevPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookPrevPageFunction, err = notebookStruct.InvokerNew("prev_page")
	})
	return err
}

// PrevPage is a representation of the C type gtk_notebook_prev_page.
func (recv *Notebook) PrevPage() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := notebookPrevPageFunction_Set()
	if err == nil {
		notebookPrevPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookRemovePageFunction *gi.Function
var notebookRemovePageFunction_Once sync.Once

func notebookRemovePageFunction_Set() error {
	var err error
	notebookRemovePageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookRemovePageFunction, err = notebookStruct.InvokerNew("remove_page")
	})
	return err
}

// RemovePage is a representation of the C type gtk_notebook_remove_page.
func (recv *Notebook) RemovePage(pageNum int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	err := notebookRemovePageFunction_Set()
	if err == nil {
		notebookRemovePageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookReorderChildFunction *gi.Function
var notebookReorderChildFunction_Once sync.Once

func notebookReorderChildFunction_Set() error {
	var err error
	notebookReorderChildFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookReorderChildFunction, err = notebookStruct.InvokerNew("reorder_child")
	})
	return err
}

// ReorderChild is a representation of the C type gtk_notebook_reorder_child.
func (recv *Notebook) ReorderChild(child *Widget, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(position)

	err := notebookReorderChildFunction_Set()
	if err == nil {
		notebookReorderChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_notebook_set_action_widget' : parameter 'pack_type' of type 'PackType' not supported

var notebookSetCurrentPageFunction *gi.Function
var notebookSetCurrentPageFunction_Once sync.Once

func notebookSetCurrentPageFunction_Set() error {
	var err error
	notebookSetCurrentPageFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetCurrentPageFunction, err = notebookStruct.InvokerNew("set_current_page")
	})
	return err
}

// SetCurrentPage is a representation of the C type gtk_notebook_set_current_page.
func (recv *Notebook) SetCurrentPage(pageNum int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pageNum)

	err := notebookSetCurrentPageFunction_Set()
	if err == nil {
		notebookSetCurrentPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetGroupNameFunction *gi.Function
var notebookSetGroupNameFunction_Once sync.Once

func notebookSetGroupNameFunction_Set() error {
	var err error
	notebookSetGroupNameFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetGroupNameFunction, err = notebookStruct.InvokerNew("set_group_name")
	})
	return err
}

// SetGroupName is a representation of the C type gtk_notebook_set_group_name.
func (recv *Notebook) SetGroupName(groupName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(groupName)

	err := notebookSetGroupNameFunction_Set()
	if err == nil {
		notebookSetGroupNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetMenuLabelFunction *gi.Function
var notebookSetMenuLabelFunction_Once sync.Once

func notebookSetMenuLabelFunction_Set() error {
	var err error
	notebookSetMenuLabelFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetMenuLabelFunction, err = notebookStruct.InvokerNew("set_menu_label")
	})
	return err
}

// SetMenuLabel is a representation of the C type gtk_notebook_set_menu_label.
func (recv *Notebook) SetMenuLabel(child *Widget, menuLabel *Widget) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(menuLabel.Native)

	err := notebookSetMenuLabelFunction_Set()
	if err == nil {
		notebookSetMenuLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetMenuLabelTextFunction *gi.Function
var notebookSetMenuLabelTextFunction_Once sync.Once

func notebookSetMenuLabelTextFunction_Set() error {
	var err error
	notebookSetMenuLabelTextFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetMenuLabelTextFunction, err = notebookStruct.InvokerNew("set_menu_label_text")
	})
	return err
}

// SetMenuLabelText is a representation of the C type gtk_notebook_set_menu_label_text.
func (recv *Notebook) SetMenuLabelText(child *Widget, menuText string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetString(menuText)

	err := notebookSetMenuLabelTextFunction_Set()
	if err == nil {
		notebookSetMenuLabelTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetScrollableFunction *gi.Function
var notebookSetScrollableFunction_Once sync.Once

func notebookSetScrollableFunction_Set() error {
	var err error
	notebookSetScrollableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetScrollableFunction, err = notebookStruct.InvokerNew("set_scrollable")
	})
	return err
}

// SetScrollable is a representation of the C type gtk_notebook_set_scrollable.
func (recv *Notebook) SetScrollable(scrollable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(scrollable)

	err := notebookSetScrollableFunction_Set()
	if err == nil {
		notebookSetScrollableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetShowBorderFunction *gi.Function
var notebookSetShowBorderFunction_Once sync.Once

func notebookSetShowBorderFunction_Set() error {
	var err error
	notebookSetShowBorderFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetShowBorderFunction, err = notebookStruct.InvokerNew("set_show_border")
	})
	return err
}

// SetShowBorder is a representation of the C type gtk_notebook_set_show_border.
func (recv *Notebook) SetShowBorder(showBorder bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showBorder)

	err := notebookSetShowBorderFunction_Set()
	if err == nil {
		notebookSetShowBorderFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetShowTabsFunction *gi.Function
var notebookSetShowTabsFunction_Once sync.Once

func notebookSetShowTabsFunction_Set() error {
	var err error
	notebookSetShowTabsFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetShowTabsFunction, err = notebookStruct.InvokerNew("set_show_tabs")
	})
	return err
}

// SetShowTabs is a representation of the C type gtk_notebook_set_show_tabs.
func (recv *Notebook) SetShowTabs(showTabs bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showTabs)

	err := notebookSetShowTabsFunction_Set()
	if err == nil {
		notebookSetShowTabsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetTabDetachableFunction *gi.Function
var notebookSetTabDetachableFunction_Once sync.Once

func notebookSetTabDetachableFunction_Set() error {
	var err error
	notebookSetTabDetachableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetTabDetachableFunction, err = notebookStruct.InvokerNew("set_tab_detachable")
	})
	return err
}

// SetTabDetachable is a representation of the C type gtk_notebook_set_tab_detachable.
func (recv *Notebook) SetTabDetachable(child *Widget, detachable bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(detachable)

	err := notebookSetTabDetachableFunction_Set()
	if err == nil {
		notebookSetTabDetachableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetTabLabelFunction *gi.Function
var notebookSetTabLabelFunction_Once sync.Once

func notebookSetTabLabelFunction_Set() error {
	var err error
	notebookSetTabLabelFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetTabLabelFunction, err = notebookStruct.InvokerNew("set_tab_label")
	})
	return err
}

// SetTabLabel is a representation of the C type gtk_notebook_set_tab_label.
func (recv *Notebook) SetTabLabel(child *Widget, tabLabel *Widget) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(tabLabel.Native)

	err := notebookSetTabLabelFunction_Set()
	if err == nil {
		notebookSetTabLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookSetTabLabelTextFunction *gi.Function
var notebookSetTabLabelTextFunction_Once sync.Once

func notebookSetTabLabelTextFunction_Set() error {
	var err error
	notebookSetTabLabelTextFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetTabLabelTextFunction, err = notebookStruct.InvokerNew("set_tab_label_text")
	})
	return err
}

// SetTabLabelText is a representation of the C type gtk_notebook_set_tab_label_text.
func (recv *Notebook) SetTabLabelText(child *Widget, tabText string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetString(tabText)

	err := notebookSetTabLabelTextFunction_Set()
	if err == nil {
		notebookSetTabLabelTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_notebook_set_tab_pos' : parameter 'pos' of type 'PositionType' not supported

var notebookSetTabReorderableFunction *gi.Function
var notebookSetTabReorderableFunction_Once sync.Once

func notebookSetTabReorderableFunction_Set() error {
	var err error
	notebookSetTabReorderableFunction_Once.Do(func() {
		err = notebookStruct_Set()
		if err != nil {
			return
		}
		notebookSetTabReorderableFunction, err = notebookStruct.InvokerNew("set_tab_reorderable")
	})
	return err
}

// SetTabReorderable is a representation of the C type gtk_notebook_set_tab_reorderable.
func (recv *Notebook) SetTabReorderable(child *Widget, reorderable bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(reorderable)

	err := notebookSetTabReorderableFunction_Set()
	if err == nil {
		notebookSetTabReorderableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var notebookAccessibleStruct *gi.Struct
var notebookAccessibleStruct_Once sync.Once

func notebookAccessibleStruct_Set() error {
	var err error
	notebookAccessibleStruct_Once.Do(func() {
		notebookAccessibleStruct, err = gi.StructNew("Gtk", "NotebookAccessible")
	})
	return err
}

type NotebookAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *NotebookAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(notebookAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *NotebookAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(notebookAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *NotebookAccessible) FieldPriv() *NotebookAccessiblePrivate {
	argValue := gi.FieldGet(notebookAccessibleStruct, recv.Native, "priv")
	value := &NotebookAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *NotebookAccessible) SetFieldPriv(value *NotebookAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(notebookAccessibleStruct, recv.Native, "priv", argValue)
}

// NotebookAccessibleStruct creates an uninitialised NotebookAccessible.
func NotebookAccessibleStruct() *NotebookAccessible {
	err := notebookAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &NotebookAccessible{}
	structGo.Native = notebookAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeNotebookAccessible)
	return structGo
}
func finalizeNotebookAccessible(obj *NotebookAccessible) {
	notebookAccessibleStruct.Free(obj.Native)
}

var notebookPageAccessibleStruct *gi.Struct
var notebookPageAccessibleStruct_Once sync.Once

func notebookPageAccessibleStruct_Set() error {
	var err error
	notebookPageAccessibleStruct_Once.Do(func() {
		notebookPageAccessibleStruct, err = gi.StructNew("Gtk", "NotebookPageAccessible")
	})
	return err
}

type NotebookPageAccessible struct {
	atk.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'Atk.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'Atk.Object'

// FieldPriv returns the C field 'priv'.
func (recv *NotebookPageAccessible) FieldPriv() *NotebookPageAccessiblePrivate {
	argValue := gi.FieldGet(notebookPageAccessibleStruct, recv.Native, "priv")
	value := &NotebookPageAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *NotebookPageAccessible) SetFieldPriv(value *NotebookPageAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(notebookPageAccessibleStruct, recv.Native, "priv", argValue)
}

var notebookPageAccessibleNewFunction *gi.Function
var notebookPageAccessibleNewFunction_Once sync.Once

func notebookPageAccessibleNewFunction_Set() error {
	var err error
	notebookPageAccessibleNewFunction_Once.Do(func() {
		err = notebookPageAccessibleStruct_Set()
		if err != nil {
			return
		}
		notebookPageAccessibleNewFunction, err = notebookPageAccessibleStruct.InvokerNew("new")
	})
	return err
}

// NotebookPageAccessibleNew is a representation of the C type gtk_notebook_page_accessible_new.
func NotebookPageAccessibleNew(notebook *NotebookAccessible, child *Widget) *NotebookPageAccessible {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(notebook.Native)
	inArgs[1].SetPointer(child.Native)

	var ret gi.Argument

	err := notebookPageAccessibleNewFunction_Set()
	if err == nil {
		ret = notebookPageAccessibleNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &NotebookPageAccessible{}
	retGo.Native = ret.Pointer()

	return retGo
}

var notebookPageAccessibleInvalidateFunction *gi.Function
var notebookPageAccessibleInvalidateFunction_Once sync.Once

func notebookPageAccessibleInvalidateFunction_Set() error {
	var err error
	notebookPageAccessibleInvalidateFunction_Once.Do(func() {
		err = notebookPageAccessibleStruct_Set()
		if err != nil {
			return
		}
		notebookPageAccessibleInvalidateFunction, err = notebookPageAccessibleStruct.InvokerNew("invalidate")
	})
	return err
}

// Invalidate is a representation of the C type gtk_notebook_page_accessible_invalidate.
func (recv *NotebookPageAccessible) Invalidate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := notebookPageAccessibleInvalidateFunction_Set()
	if err == nil {
		notebookPageAccessibleInvalidateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var numerableIconStruct *gi.Struct
var numerableIconStruct_Once sync.Once

func numerableIconStruct_Set() error {
	var err error
	numerableIconStruct_Once.Do(func() {
		numerableIconStruct, err = gi.StructNew("Gtk", "NumerableIcon")
	})
	return err
}

type NumerableIcon struct {
	gio.EmblemedIcon
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'Gio.EmblemedIcon'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'Gio.EmblemedIcon'

// UNSUPPORTED : C value 'gtk_numerable_icon_get_background_gicon' : return type 'Gio.Icon' not supported

var numerableIconGetBackgroundIconNameFunction *gi.Function
var numerableIconGetBackgroundIconNameFunction_Once sync.Once

func numerableIconGetBackgroundIconNameFunction_Set() error {
	var err error
	numerableIconGetBackgroundIconNameFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconGetBackgroundIconNameFunction, err = numerableIconStruct.InvokerNew("get_background_icon_name")
	})
	return err
}

// GetBackgroundIconName is a representation of the C type gtk_numerable_icon_get_background_icon_name.
func (recv *NumerableIcon) GetBackgroundIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := numerableIconGetBackgroundIconNameFunction_Set()
	if err == nil {
		ret = numerableIconGetBackgroundIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var numerableIconGetCountFunction *gi.Function
var numerableIconGetCountFunction_Once sync.Once

func numerableIconGetCountFunction_Set() error {
	var err error
	numerableIconGetCountFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconGetCountFunction, err = numerableIconStruct.InvokerNew("get_count")
	})
	return err
}

// GetCount is a representation of the C type gtk_numerable_icon_get_count.
func (recv *NumerableIcon) GetCount() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := numerableIconGetCountFunction_Set()
	if err == nil {
		ret = numerableIconGetCountFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var numerableIconGetLabelFunction *gi.Function
var numerableIconGetLabelFunction_Once sync.Once

func numerableIconGetLabelFunction_Set() error {
	var err error
	numerableIconGetLabelFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconGetLabelFunction, err = numerableIconStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_numerable_icon_get_label.
func (recv *NumerableIcon) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := numerableIconGetLabelFunction_Set()
	if err == nil {
		ret = numerableIconGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var numerableIconGetStyleContextFunction *gi.Function
var numerableIconGetStyleContextFunction_Once sync.Once

func numerableIconGetStyleContextFunction_Set() error {
	var err error
	numerableIconGetStyleContextFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconGetStyleContextFunction, err = numerableIconStruct.InvokerNew("get_style_context")
	})
	return err
}

// GetStyleContext is a representation of the C type gtk_numerable_icon_get_style_context.
func (recv *NumerableIcon) GetStyleContext() *StyleContext {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := numerableIconGetStyleContextFunction_Set()
	if err == nil {
		ret = numerableIconGetStyleContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StyleContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_numerable_icon_set_background_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

var numerableIconSetBackgroundIconNameFunction *gi.Function
var numerableIconSetBackgroundIconNameFunction_Once sync.Once

func numerableIconSetBackgroundIconNameFunction_Set() error {
	var err error
	numerableIconSetBackgroundIconNameFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconSetBackgroundIconNameFunction, err = numerableIconStruct.InvokerNew("set_background_icon_name")
	})
	return err
}

// SetBackgroundIconName is a representation of the C type gtk_numerable_icon_set_background_icon_name.
func (recv *NumerableIcon) SetBackgroundIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := numerableIconSetBackgroundIconNameFunction_Set()
	if err == nil {
		numerableIconSetBackgroundIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var numerableIconSetCountFunction *gi.Function
var numerableIconSetCountFunction_Once sync.Once

func numerableIconSetCountFunction_Set() error {
	var err error
	numerableIconSetCountFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconSetCountFunction, err = numerableIconStruct.InvokerNew("set_count")
	})
	return err
}

// SetCount is a representation of the C type gtk_numerable_icon_set_count.
func (recv *NumerableIcon) SetCount(count int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(count)

	err := numerableIconSetCountFunction_Set()
	if err == nil {
		numerableIconSetCountFunction.Invoke(inArgs[:], nil)
	}

	return
}

var numerableIconSetLabelFunction *gi.Function
var numerableIconSetLabelFunction_Once sync.Once

func numerableIconSetLabelFunction_Set() error {
	var err error
	numerableIconSetLabelFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconSetLabelFunction, err = numerableIconStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_numerable_icon_set_label.
func (recv *NumerableIcon) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := numerableIconSetLabelFunction_Set()
	if err == nil {
		numerableIconSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var numerableIconSetStyleContextFunction *gi.Function
var numerableIconSetStyleContextFunction_Once sync.Once

func numerableIconSetStyleContextFunction_Set() error {
	var err error
	numerableIconSetStyleContextFunction_Once.Do(func() {
		err = numerableIconStruct_Set()
		if err != nil {
			return
		}
		numerableIconSetStyleContextFunction, err = numerableIconStruct.InvokerNew("set_style_context")
	})
	return err
}

// SetStyleContext is a representation of the C type gtk_numerable_icon_set_style_context.
func (recv *NumerableIcon) SetStyleContext(style *StyleContext) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(style.Native)

	err := numerableIconSetStyleContextFunction_Set()
	if err == nil {
		numerableIconSetStyleContextFunction.Invoke(inArgs[:], nil)
	}

	return
}

// NumerableIconStruct creates an uninitialised NumerableIcon.
func NumerableIconStruct() *NumerableIcon {
	err := numerableIconStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &NumerableIcon{}
	structGo.Native = numerableIconStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeNumerableIcon)
	return structGo
}
func finalizeNumerableIcon(obj *NumerableIcon) {
	numerableIconStruct.Free(obj.Native)
}

var offscreenWindowStruct *gi.Struct
var offscreenWindowStruct_Once sync.Once

func offscreenWindowStruct_Set() error {
	var err error
	offscreenWindowStruct_Once.Do(func() {
		offscreenWindowStruct, err = gi.StructNew("Gtk", "OffscreenWindow")
	})
	return err
}

type OffscreenWindow struct {
	Window
}

// FieldParentObject returns the C field 'parent_object'.
func (recv *OffscreenWindow) FieldParentObject() *Window {
	argValue := gi.FieldGet(offscreenWindowStruct, recv.Native, "parent_object")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentObject sets the value of the C field 'parent_object'.
func (recv *OffscreenWindow) SetFieldParentObject(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(offscreenWindowStruct, recv.Native, "parent_object", argValue)
}

var offscreenWindowNewFunction *gi.Function
var offscreenWindowNewFunction_Once sync.Once

func offscreenWindowNewFunction_Set() error {
	var err error
	offscreenWindowNewFunction_Once.Do(func() {
		err = offscreenWindowStruct_Set()
		if err != nil {
			return
		}
		offscreenWindowNewFunction, err = offscreenWindowStruct.InvokerNew("new")
	})
	return err
}

// OffscreenWindowNew is a representation of the C type gtk_offscreen_window_new.
func OffscreenWindowNew() *OffscreenWindow {

	var ret gi.Argument

	err := offscreenWindowNewFunction_Set()
	if err == nil {
		ret = offscreenWindowNewFunction.Invoke(nil, nil)
	}

	retGo := &OffscreenWindow{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_offscreen_window_get_pixbuf' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_offscreen_window_get_surface' : return type 'cairo.Surface' not supported

var overlayStruct *gi.Struct
var overlayStruct_Once sync.Once

func overlayStruct_Set() error {
	var err error
	overlayStruct_Once.Do(func() {
		overlayStruct, err = gi.StructNew("Gtk", "Overlay")
	})
	return err
}

type Overlay struct {
	Bin
}

// FieldParent returns the C field 'parent'.
func (recv *Overlay) FieldParent() *Bin {
	argValue := gi.FieldGet(overlayStruct, recv.Native, "parent")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *Overlay) SetFieldParent(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(overlayStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Overlay) FieldPriv() *OverlayPrivate {
	argValue := gi.FieldGet(overlayStruct, recv.Native, "priv")
	value := &OverlayPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Overlay) SetFieldPriv(value *OverlayPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(overlayStruct, recv.Native, "priv", argValue)
}

var overlayNewFunction *gi.Function
var overlayNewFunction_Once sync.Once

func overlayNewFunction_Set() error {
	var err error
	overlayNewFunction_Once.Do(func() {
		err = overlayStruct_Set()
		if err != nil {
			return
		}
		overlayNewFunction, err = overlayStruct.InvokerNew("new")
	})
	return err
}

// OverlayNew is a representation of the C type gtk_overlay_new.
func OverlayNew() *Overlay {

	var ret gi.Argument

	err := overlayNewFunction_Set()
	if err == nil {
		ret = overlayNewFunction.Invoke(nil, nil)
	}

	retGo := &Overlay{}
	retGo.Native = ret.Pointer()

	return retGo
}

var overlayAddOverlayFunction *gi.Function
var overlayAddOverlayFunction_Once sync.Once

func overlayAddOverlayFunction_Set() error {
	var err error
	overlayAddOverlayFunction_Once.Do(func() {
		err = overlayStruct_Set()
		if err != nil {
			return
		}
		overlayAddOverlayFunction, err = overlayStruct.InvokerNew("add_overlay")
	})
	return err
}

// AddOverlay is a representation of the C type gtk_overlay_add_overlay.
func (recv *Overlay) AddOverlay(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := overlayAddOverlayFunction_Set()
	if err == nil {
		overlayAddOverlayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var overlayGetOverlayPassThroughFunction *gi.Function
var overlayGetOverlayPassThroughFunction_Once sync.Once

func overlayGetOverlayPassThroughFunction_Set() error {
	var err error
	overlayGetOverlayPassThroughFunction_Once.Do(func() {
		err = overlayStruct_Set()
		if err != nil {
			return
		}
		overlayGetOverlayPassThroughFunction, err = overlayStruct.InvokerNew("get_overlay_pass_through")
	})
	return err
}

// GetOverlayPassThrough is a representation of the C type gtk_overlay_get_overlay_pass_through.
func (recv *Overlay) GetOverlayPassThrough(widget *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	var ret gi.Argument

	err := overlayGetOverlayPassThroughFunction_Set()
	if err == nil {
		ret = overlayGetOverlayPassThroughFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var overlayReorderOverlayFunction *gi.Function
var overlayReorderOverlayFunction_Once sync.Once

func overlayReorderOverlayFunction_Set() error {
	var err error
	overlayReorderOverlayFunction_Once.Do(func() {
		err = overlayStruct_Set()
		if err != nil {
			return
		}
		overlayReorderOverlayFunction, err = overlayStruct.InvokerNew("reorder_overlay")
	})
	return err
}

// ReorderOverlay is a representation of the C type gtk_overlay_reorder_overlay.
func (recv *Overlay) ReorderOverlay(child *Widget, index int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(index)

	err := overlayReorderOverlayFunction_Set()
	if err == nil {
		overlayReorderOverlayFunction.Invoke(inArgs[:], nil)
	}

	return
}

var overlaySetOverlayPassThroughFunction *gi.Function
var overlaySetOverlayPassThroughFunction_Once sync.Once

func overlaySetOverlayPassThroughFunction_Set() error {
	var err error
	overlaySetOverlayPassThroughFunction_Once.Do(func() {
		err = overlayStruct_Set()
		if err != nil {
			return
		}
		overlaySetOverlayPassThroughFunction, err = overlayStruct.InvokerNew("set_overlay_pass_through")
	})
	return err
}

// SetOverlayPassThrough is a representation of the C type gtk_overlay_set_overlay_pass_through.
func (recv *Overlay) SetOverlayPassThrough(widget *Widget, passThrough bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetBoolean(passThrough)

	err := overlaySetOverlayPassThroughFunction_Set()
	if err == nil {
		overlaySetOverlayPassThroughFunction.Invoke(inArgs[:], nil)
	}

	return
}

var padControllerStruct *gi.Struct
var padControllerStruct_Once sync.Once

func padControllerStruct_Set() error {
	var err error
	padControllerStruct_Once.Do(func() {
		padControllerStruct, err = gi.StructNew("Gtk", "PadController")
	})
	return err
}

type PadController struct {
	EventController
}

// UNSUPPORTED : C value 'gtk_pad_controller_new' : parameter 'group' of type 'Gio.ActionGroup' not supported

// UNSUPPORTED : C value 'gtk_pad_controller_set_action' : parameter 'type' of type 'PadActionType' not supported

// UNSUPPORTED : C value 'gtk_pad_controller_set_action_entries' : parameter 'entries' of type 'nil' not supported

var pageSetupStruct *gi.Struct
var pageSetupStruct_Once sync.Once

func pageSetupStruct_Set() error {
	var err error
	pageSetupStruct_Once.Do(func() {
		pageSetupStruct, err = gi.StructNew("Gtk", "PageSetup")
	})
	return err
}

type PageSetup struct {
	gobject.Object
}

var pageSetupNewFunction *gi.Function
var pageSetupNewFunction_Once sync.Once

func pageSetupNewFunction_Set() error {
	var err error
	pageSetupNewFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupNewFunction, err = pageSetupStruct.InvokerNew("new")
	})
	return err
}

// PageSetupNew is a representation of the C type gtk_page_setup_new.
func PageSetupNew() *PageSetup {

	var ret gi.Argument

	err := pageSetupNewFunction_Set()
	if err == nil {
		ret = pageSetupNewFunction.Invoke(nil, nil)
	}

	retGo := &PageSetup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var pageSetupNewFromFileFunction *gi.Function
var pageSetupNewFromFileFunction_Once sync.Once

func pageSetupNewFromFileFunction_Set() error {
	var err error
	pageSetupNewFromFileFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupNewFromFileFunction, err = pageSetupStruct.InvokerNew("new_from_file")
	})
	return err
}

// PageSetupNewFromFile is a representation of the C type gtk_page_setup_new_from_file.
func PageSetupNewFromFile(fileName string) *PageSetup {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(fileName)

	var ret gi.Argument

	err := pageSetupNewFromFileFunction_Set()
	if err == nil {
		ret = pageSetupNewFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PageSetup{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_page_setup_new_from_gvariant' : parameter 'variant' of type 'GLib.Variant' not supported

// UNSUPPORTED : C value 'gtk_page_setup_new_from_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

var pageSetupCopyFunction *gi.Function
var pageSetupCopyFunction_Once sync.Once

func pageSetupCopyFunction_Set() error {
	var err error
	pageSetupCopyFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupCopyFunction, err = pageSetupStruct.InvokerNew("copy")
	})
	return err
}

// Copy is a representation of the C type gtk_page_setup_copy.
func (recv *PageSetup) Copy() *PageSetup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := pageSetupCopyFunction_Set()
	if err == nil {
		ret = pageSetupCopyFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PageSetup{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_page_setup_get_bottom_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_left_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_orientation' : return type 'PageOrientation' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_page_height' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_page_width' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_paper_height' : parameter 'unit' of type 'Unit' not supported

var pageSetupGetPaperSizeFunction *gi.Function
var pageSetupGetPaperSizeFunction_Once sync.Once

func pageSetupGetPaperSizeFunction_Set() error {
	var err error
	pageSetupGetPaperSizeFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupGetPaperSizeFunction, err = pageSetupStruct.InvokerNew("get_paper_size")
	})
	return err
}

// GetPaperSize is a representation of the C type gtk_page_setup_get_paper_size.
func (recv *PageSetup) GetPaperSize() *PaperSize {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := pageSetupGetPaperSizeFunction_Set()
	if err == nil {
		ret = pageSetupGetPaperSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PaperSize{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_page_setup_get_paper_width' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_right_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_get_top_margin' : parameter 'unit' of type 'Unit' not supported

var pageSetupLoadFileFunction *gi.Function
var pageSetupLoadFileFunction_Once sync.Once

func pageSetupLoadFileFunction_Set() error {
	var err error
	pageSetupLoadFileFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupLoadFileFunction, err = pageSetupStruct.InvokerNew("load_file")
	})
	return err
}

// LoadFile is a representation of the C type gtk_page_setup_load_file.
func (recv *PageSetup) LoadFile(fileName string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fileName)

	var ret gi.Argument

	err := pageSetupLoadFileFunction_Set()
	if err == nil {
		ret = pageSetupLoadFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_page_setup_load_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

// UNSUPPORTED : C value 'gtk_page_setup_set_bottom_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_set_left_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_set_orientation' : parameter 'orientation' of type 'PageOrientation' not supported

var pageSetupSetPaperSizeFunction *gi.Function
var pageSetupSetPaperSizeFunction_Once sync.Once

func pageSetupSetPaperSizeFunction_Set() error {
	var err error
	pageSetupSetPaperSizeFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupSetPaperSizeFunction, err = pageSetupStruct.InvokerNew("set_paper_size")
	})
	return err
}

// SetPaperSize is a representation of the C type gtk_page_setup_set_paper_size.
func (recv *PageSetup) SetPaperSize(size *PaperSize) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(size.Native)

	err := pageSetupSetPaperSizeFunction_Set()
	if err == nil {
		pageSetupSetPaperSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var pageSetupSetPaperSizeAndDefaultMarginsFunction *gi.Function
var pageSetupSetPaperSizeAndDefaultMarginsFunction_Once sync.Once

func pageSetupSetPaperSizeAndDefaultMarginsFunction_Set() error {
	var err error
	pageSetupSetPaperSizeAndDefaultMarginsFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupSetPaperSizeAndDefaultMarginsFunction, err = pageSetupStruct.InvokerNew("set_paper_size_and_default_margins")
	})
	return err
}

// SetPaperSizeAndDefaultMargins is a representation of the C type gtk_page_setup_set_paper_size_and_default_margins.
func (recv *PageSetup) SetPaperSizeAndDefaultMargins(size *PaperSize) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(size.Native)

	err := pageSetupSetPaperSizeAndDefaultMarginsFunction_Set()
	if err == nil {
		pageSetupSetPaperSizeAndDefaultMarginsFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_page_setup_set_right_margin' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_page_setup_set_top_margin' : parameter 'unit' of type 'Unit' not supported

var pageSetupToFileFunction *gi.Function
var pageSetupToFileFunction_Once sync.Once

func pageSetupToFileFunction_Set() error {
	var err error
	pageSetupToFileFunction_Once.Do(func() {
		err = pageSetupStruct_Set()
		if err != nil {
			return
		}
		pageSetupToFileFunction, err = pageSetupStruct.InvokerNew("to_file")
	})
	return err
}

// ToFile is a representation of the C type gtk_page_setup_to_file.
func (recv *PageSetup) ToFile(fileName string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fileName)

	var ret gi.Argument

	err := pageSetupToFileFunction_Set()
	if err == nil {
		ret = pageSetupToFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_page_setup_to_gvariant' : return type 'GLib.Variant' not supported

// UNSUPPORTED : C value 'gtk_page_setup_to_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

var panedStruct *gi.Struct
var panedStruct_Once sync.Once

func panedStruct_Set() error {
	var err error
	panedStruct_Once.Do(func() {
		panedStruct, err = gi.StructNew("Gtk", "Paned")
	})
	return err
}

type Paned struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Paned) FieldContainer() *Container {
	argValue := gi.FieldGet(panedStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Paned) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(panedStruct, recv.Native, "container", argValue)
}

// UNSUPPORTED : C value 'gtk_paned_new' : parameter 'orientation' of type 'Orientation' not supported

var panedAdd1Function *gi.Function
var panedAdd1Function_Once sync.Once

func panedAdd1Function_Set() error {
	var err error
	panedAdd1Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedAdd1Function, err = panedStruct.InvokerNew("add1")
	})
	return err
}

// Add1 is a representation of the C type gtk_paned_add1.
func (recv *Paned) Add1(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := panedAdd1Function_Set()
	if err == nil {
		panedAdd1Function.Invoke(inArgs[:], nil)
	}

	return
}

var panedAdd2Function *gi.Function
var panedAdd2Function_Once sync.Once

func panedAdd2Function_Set() error {
	var err error
	panedAdd2Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedAdd2Function, err = panedStruct.InvokerNew("add2")
	})
	return err
}

// Add2 is a representation of the C type gtk_paned_add2.
func (recv *Paned) Add2(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := panedAdd2Function_Set()
	if err == nil {
		panedAdd2Function.Invoke(inArgs[:], nil)
	}

	return
}

var panedGetChild1Function *gi.Function
var panedGetChild1Function_Once sync.Once

func panedGetChild1Function_Set() error {
	var err error
	panedGetChild1Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedGetChild1Function, err = panedStruct.InvokerNew("get_child1")
	})
	return err
}

// GetChild1 is a representation of the C type gtk_paned_get_child1.
func (recv *Paned) GetChild1() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := panedGetChild1Function_Set()
	if err == nil {
		ret = panedGetChild1Function.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var panedGetChild2Function *gi.Function
var panedGetChild2Function_Once sync.Once

func panedGetChild2Function_Set() error {
	var err error
	panedGetChild2Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedGetChild2Function, err = panedStruct.InvokerNew("get_child2")
	})
	return err
}

// GetChild2 is a representation of the C type gtk_paned_get_child2.
func (recv *Paned) GetChild2() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := panedGetChild2Function_Set()
	if err == nil {
		ret = panedGetChild2Function.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_paned_get_handle_window' : return type 'Gdk.Window' not supported

var panedGetPositionFunction *gi.Function
var panedGetPositionFunction_Once sync.Once

func panedGetPositionFunction_Set() error {
	var err error
	panedGetPositionFunction_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedGetPositionFunction, err = panedStruct.InvokerNew("get_position")
	})
	return err
}

// GetPosition is a representation of the C type gtk_paned_get_position.
func (recv *Paned) GetPosition() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := panedGetPositionFunction_Set()
	if err == nil {
		ret = panedGetPositionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var panedGetWideHandleFunction *gi.Function
var panedGetWideHandleFunction_Once sync.Once

func panedGetWideHandleFunction_Set() error {
	var err error
	panedGetWideHandleFunction_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedGetWideHandleFunction, err = panedStruct.InvokerNew("get_wide_handle")
	})
	return err
}

// GetWideHandle is a representation of the C type gtk_paned_get_wide_handle.
func (recv *Paned) GetWideHandle() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := panedGetWideHandleFunction_Set()
	if err == nil {
		ret = panedGetWideHandleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var panedPack1Function *gi.Function
var panedPack1Function_Once sync.Once

func panedPack1Function_Set() error {
	var err error
	panedPack1Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedPack1Function, err = panedStruct.InvokerNew("pack1")
	})
	return err
}

// Pack1 is a representation of the C type gtk_paned_pack1.
func (recv *Paned) Pack1(child *Widget, resize bool, shrink bool) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(resize)
	inArgs[3].SetBoolean(shrink)

	err := panedPack1Function_Set()
	if err == nil {
		panedPack1Function.Invoke(inArgs[:], nil)
	}

	return
}

var panedPack2Function *gi.Function
var panedPack2Function_Once sync.Once

func panedPack2Function_Set() error {
	var err error
	panedPack2Function_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedPack2Function, err = panedStruct.InvokerNew("pack2")
	})
	return err
}

// Pack2 is a representation of the C type gtk_paned_pack2.
func (recv *Paned) Pack2(child *Widget, resize bool, shrink bool) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetBoolean(resize)
	inArgs[3].SetBoolean(shrink)

	err := panedPack2Function_Set()
	if err == nil {
		panedPack2Function.Invoke(inArgs[:], nil)
	}

	return
}

var panedSetPositionFunction *gi.Function
var panedSetPositionFunction_Once sync.Once

func panedSetPositionFunction_Set() error {
	var err error
	panedSetPositionFunction_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedSetPositionFunction, err = panedStruct.InvokerNew("set_position")
	})
	return err
}

// SetPosition is a representation of the C type gtk_paned_set_position.
func (recv *Paned) SetPosition(position int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(position)

	err := panedSetPositionFunction_Set()
	if err == nil {
		panedSetPositionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var panedSetWideHandleFunction *gi.Function
var panedSetWideHandleFunction_Once sync.Once

func panedSetWideHandleFunction_Set() error {
	var err error
	panedSetWideHandleFunction_Once.Do(func() {
		err = panedStruct_Set()
		if err != nil {
			return
		}
		panedSetWideHandleFunction, err = panedStruct.InvokerNew("set_wide_handle")
	})
	return err
}

// SetWideHandle is a representation of the C type gtk_paned_set_wide_handle.
func (recv *Paned) SetWideHandle(wide bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(wide)

	err := panedSetWideHandleFunction_Set()
	if err == nil {
		panedSetWideHandleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var panedAccessibleStruct *gi.Struct
var panedAccessibleStruct_Once sync.Once

func panedAccessibleStruct_Set() error {
	var err error
	panedAccessibleStruct_Once.Do(func() {
		panedAccessibleStruct, err = gi.StructNew("Gtk", "PanedAccessible")
	})
	return err
}

type PanedAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *PanedAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(panedAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *PanedAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(panedAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *PanedAccessible) FieldPriv() *PanedAccessiblePrivate {
	argValue := gi.FieldGet(panedAccessibleStruct, recv.Native, "priv")
	value := &PanedAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *PanedAccessible) SetFieldPriv(value *PanedAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(panedAccessibleStruct, recv.Native, "priv", argValue)
}

// PanedAccessibleStruct creates an uninitialised PanedAccessible.
func PanedAccessibleStruct() *PanedAccessible {
	err := panedAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &PanedAccessible{}
	structGo.Native = panedAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizePanedAccessible)
	return structGo
}
func finalizePanedAccessible(obj *PanedAccessible) {
	panedAccessibleStruct.Free(obj.Native)
}

var placesSidebarStruct *gi.Struct
var placesSidebarStruct_Once sync.Once

func placesSidebarStruct_Set() error {
	var err error
	placesSidebarStruct_Once.Do(func() {
		placesSidebarStruct, err = gi.StructNew("Gtk", "PlacesSidebar")
	})
	return err
}

type PlacesSidebar struct {
	ScrolledWindow
}

var placesSidebarNewFunction *gi.Function
var placesSidebarNewFunction_Once sync.Once

func placesSidebarNewFunction_Set() error {
	var err error
	placesSidebarNewFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarNewFunction, err = placesSidebarStruct.InvokerNew("new")
	})
	return err
}

// PlacesSidebarNew is a representation of the C type gtk_places_sidebar_new.
func PlacesSidebarNew() *PlacesSidebar {

	var ret gi.Argument

	err := placesSidebarNewFunction_Set()
	if err == nil {
		ret = placesSidebarNewFunction.Invoke(nil, nil)
	}

	retGo := &PlacesSidebar{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_places_sidebar_add_shortcut' : parameter 'location' of type 'Gio.File' not supported

var placesSidebarGetLocalOnlyFunction *gi.Function
var placesSidebarGetLocalOnlyFunction_Once sync.Once

func placesSidebarGetLocalOnlyFunction_Set() error {
	var err error
	placesSidebarGetLocalOnlyFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetLocalOnlyFunction, err = placesSidebarStruct.InvokerNew("get_local_only")
	})
	return err
}

// GetLocalOnly is a representation of the C type gtk_places_sidebar_get_local_only.
func (recv *PlacesSidebar) GetLocalOnly() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetLocalOnlyFunction_Set()
	if err == nil {
		ret = placesSidebarGetLocalOnlyFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_places_sidebar_get_location' : return type 'Gio.File' not supported

// UNSUPPORTED : C value 'gtk_places_sidebar_get_nth_bookmark' : return type 'Gio.File' not supported

// UNSUPPORTED : C value 'gtk_places_sidebar_get_open_flags' : return type 'PlacesOpenFlags' not supported

var placesSidebarGetShowConnectToServerFunction *gi.Function
var placesSidebarGetShowConnectToServerFunction_Once sync.Once

func placesSidebarGetShowConnectToServerFunction_Set() error {
	var err error
	placesSidebarGetShowConnectToServerFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowConnectToServerFunction, err = placesSidebarStruct.InvokerNew("get_show_connect_to_server")
	})
	return err
}

// GetShowConnectToServer is a representation of the C type gtk_places_sidebar_get_show_connect_to_server.
func (recv *PlacesSidebar) GetShowConnectToServer() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowConnectToServerFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowConnectToServerFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowDesktopFunction *gi.Function
var placesSidebarGetShowDesktopFunction_Once sync.Once

func placesSidebarGetShowDesktopFunction_Set() error {
	var err error
	placesSidebarGetShowDesktopFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowDesktopFunction, err = placesSidebarStruct.InvokerNew("get_show_desktop")
	})
	return err
}

// GetShowDesktop is a representation of the C type gtk_places_sidebar_get_show_desktop.
func (recv *PlacesSidebar) GetShowDesktop() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowDesktopFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowDesktopFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowEnterLocationFunction *gi.Function
var placesSidebarGetShowEnterLocationFunction_Once sync.Once

func placesSidebarGetShowEnterLocationFunction_Set() error {
	var err error
	placesSidebarGetShowEnterLocationFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowEnterLocationFunction, err = placesSidebarStruct.InvokerNew("get_show_enter_location")
	})
	return err
}

// GetShowEnterLocation is a representation of the C type gtk_places_sidebar_get_show_enter_location.
func (recv *PlacesSidebar) GetShowEnterLocation() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowEnterLocationFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowEnterLocationFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowOtherLocationsFunction *gi.Function
var placesSidebarGetShowOtherLocationsFunction_Once sync.Once

func placesSidebarGetShowOtherLocationsFunction_Set() error {
	var err error
	placesSidebarGetShowOtherLocationsFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowOtherLocationsFunction, err = placesSidebarStruct.InvokerNew("get_show_other_locations")
	})
	return err
}

// GetShowOtherLocations is a representation of the C type gtk_places_sidebar_get_show_other_locations.
func (recv *PlacesSidebar) GetShowOtherLocations() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowOtherLocationsFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowOtherLocationsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowRecentFunction *gi.Function
var placesSidebarGetShowRecentFunction_Once sync.Once

func placesSidebarGetShowRecentFunction_Set() error {
	var err error
	placesSidebarGetShowRecentFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowRecentFunction, err = placesSidebarStruct.InvokerNew("get_show_recent")
	})
	return err
}

// GetShowRecent is a representation of the C type gtk_places_sidebar_get_show_recent.
func (recv *PlacesSidebar) GetShowRecent() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowRecentFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowRecentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowStarredLocationFunction *gi.Function
var placesSidebarGetShowStarredLocationFunction_Once sync.Once

func placesSidebarGetShowStarredLocationFunction_Set() error {
	var err error
	placesSidebarGetShowStarredLocationFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowStarredLocationFunction, err = placesSidebarStruct.InvokerNew("get_show_starred_location")
	})
	return err
}

// GetShowStarredLocation is a representation of the C type gtk_places_sidebar_get_show_starred_location.
func (recv *PlacesSidebar) GetShowStarredLocation() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowStarredLocationFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowStarredLocationFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var placesSidebarGetShowTrashFunction *gi.Function
var placesSidebarGetShowTrashFunction_Once sync.Once

func placesSidebarGetShowTrashFunction_Set() error {
	var err error
	placesSidebarGetShowTrashFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarGetShowTrashFunction, err = placesSidebarStruct.InvokerNew("get_show_trash")
	})
	return err
}

// GetShowTrash is a representation of the C type gtk_places_sidebar_get_show_trash.
func (recv *PlacesSidebar) GetShowTrash() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := placesSidebarGetShowTrashFunction_Set()
	if err == nil {
		ret = placesSidebarGetShowTrashFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_places_sidebar_list_shortcuts' : return type 'GLib.SList' not supported

// UNSUPPORTED : C value 'gtk_places_sidebar_remove_shortcut' : parameter 'location' of type 'Gio.File' not supported

// UNSUPPORTED : C value 'gtk_places_sidebar_set_drop_targets_visible' : parameter 'context' of type 'Gdk.DragContext' not supported

var placesSidebarSetLocalOnlyFunction *gi.Function
var placesSidebarSetLocalOnlyFunction_Once sync.Once

func placesSidebarSetLocalOnlyFunction_Set() error {
	var err error
	placesSidebarSetLocalOnlyFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetLocalOnlyFunction, err = placesSidebarStruct.InvokerNew("set_local_only")
	})
	return err
}

// SetLocalOnly is a representation of the C type gtk_places_sidebar_set_local_only.
func (recv *PlacesSidebar) SetLocalOnly(localOnly bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(localOnly)

	err := placesSidebarSetLocalOnlyFunction_Set()
	if err == nil {
		placesSidebarSetLocalOnlyFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_places_sidebar_set_location' : parameter 'location' of type 'Gio.File' not supported

// UNSUPPORTED : C value 'gtk_places_sidebar_set_open_flags' : parameter 'flags' of type 'PlacesOpenFlags' not supported

var placesSidebarSetShowConnectToServerFunction *gi.Function
var placesSidebarSetShowConnectToServerFunction_Once sync.Once

func placesSidebarSetShowConnectToServerFunction_Set() error {
	var err error
	placesSidebarSetShowConnectToServerFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowConnectToServerFunction, err = placesSidebarStruct.InvokerNew("set_show_connect_to_server")
	})
	return err
}

// SetShowConnectToServer is a representation of the C type gtk_places_sidebar_set_show_connect_to_server.
func (recv *PlacesSidebar) SetShowConnectToServer(showConnectToServer bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showConnectToServer)

	err := placesSidebarSetShowConnectToServerFunction_Set()
	if err == nil {
		placesSidebarSetShowConnectToServerFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowDesktopFunction *gi.Function
var placesSidebarSetShowDesktopFunction_Once sync.Once

func placesSidebarSetShowDesktopFunction_Set() error {
	var err error
	placesSidebarSetShowDesktopFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowDesktopFunction, err = placesSidebarStruct.InvokerNew("set_show_desktop")
	})
	return err
}

// SetShowDesktop is a representation of the C type gtk_places_sidebar_set_show_desktop.
func (recv *PlacesSidebar) SetShowDesktop(showDesktop bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showDesktop)

	err := placesSidebarSetShowDesktopFunction_Set()
	if err == nil {
		placesSidebarSetShowDesktopFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowEnterLocationFunction *gi.Function
var placesSidebarSetShowEnterLocationFunction_Once sync.Once

func placesSidebarSetShowEnterLocationFunction_Set() error {
	var err error
	placesSidebarSetShowEnterLocationFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowEnterLocationFunction, err = placesSidebarStruct.InvokerNew("set_show_enter_location")
	})
	return err
}

// SetShowEnterLocation is a representation of the C type gtk_places_sidebar_set_show_enter_location.
func (recv *PlacesSidebar) SetShowEnterLocation(showEnterLocation bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showEnterLocation)

	err := placesSidebarSetShowEnterLocationFunction_Set()
	if err == nil {
		placesSidebarSetShowEnterLocationFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowOtherLocationsFunction *gi.Function
var placesSidebarSetShowOtherLocationsFunction_Once sync.Once

func placesSidebarSetShowOtherLocationsFunction_Set() error {
	var err error
	placesSidebarSetShowOtherLocationsFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowOtherLocationsFunction, err = placesSidebarStruct.InvokerNew("set_show_other_locations")
	})
	return err
}

// SetShowOtherLocations is a representation of the C type gtk_places_sidebar_set_show_other_locations.
func (recv *PlacesSidebar) SetShowOtherLocations(showOtherLocations bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showOtherLocations)

	err := placesSidebarSetShowOtherLocationsFunction_Set()
	if err == nil {
		placesSidebarSetShowOtherLocationsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowRecentFunction *gi.Function
var placesSidebarSetShowRecentFunction_Once sync.Once

func placesSidebarSetShowRecentFunction_Set() error {
	var err error
	placesSidebarSetShowRecentFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowRecentFunction, err = placesSidebarStruct.InvokerNew("set_show_recent")
	})
	return err
}

// SetShowRecent is a representation of the C type gtk_places_sidebar_set_show_recent.
func (recv *PlacesSidebar) SetShowRecent(showRecent bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showRecent)

	err := placesSidebarSetShowRecentFunction_Set()
	if err == nil {
		placesSidebarSetShowRecentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowStarredLocationFunction *gi.Function
var placesSidebarSetShowStarredLocationFunction_Once sync.Once

func placesSidebarSetShowStarredLocationFunction_Set() error {
	var err error
	placesSidebarSetShowStarredLocationFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowStarredLocationFunction, err = placesSidebarStruct.InvokerNew("set_show_starred_location")
	})
	return err
}

// SetShowStarredLocation is a representation of the C type gtk_places_sidebar_set_show_starred_location.
func (recv *PlacesSidebar) SetShowStarredLocation(showStarredLocation bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showStarredLocation)

	err := placesSidebarSetShowStarredLocationFunction_Set()
	if err == nil {
		placesSidebarSetShowStarredLocationFunction.Invoke(inArgs[:], nil)
	}

	return
}

var placesSidebarSetShowTrashFunction *gi.Function
var placesSidebarSetShowTrashFunction_Once sync.Once

func placesSidebarSetShowTrashFunction_Set() error {
	var err error
	placesSidebarSetShowTrashFunction_Once.Do(func() {
		err = placesSidebarStruct_Set()
		if err != nil {
			return
		}
		placesSidebarSetShowTrashFunction, err = placesSidebarStruct.InvokerNew("set_show_trash")
	})
	return err
}

// SetShowTrash is a representation of the C type gtk_places_sidebar_set_show_trash.
func (recv *PlacesSidebar) SetShowTrash(showTrash bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showTrash)

	err := placesSidebarSetShowTrashFunction_Set()
	if err == nil {
		placesSidebarSetShowTrashFunction.Invoke(inArgs[:], nil)
	}

	return
}

var plugStruct *gi.Struct
var plugStruct_Once sync.Once

func plugStruct_Set() error {
	var err error
	plugStruct_Once.Do(func() {
		plugStruct, err = gi.StructNew("Gtk", "Plug")
	})
	return err
}

type Plug struct {
	Window
}

// FieldWindow returns the C field 'window'.
func (recv *Plug) FieldWindow() *Window {
	argValue := gi.FieldGet(plugStruct, recv.Native, "window")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWindow sets the value of the C field 'window'.
func (recv *Plug) SetFieldWindow(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(plugStruct, recv.Native, "window", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Plug) FieldPriv() *PlugPrivate {
	argValue := gi.FieldGet(plugStruct, recv.Native, "priv")
	value := &PlugPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Plug) SetFieldPriv(value *PlugPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(plugStruct, recv.Native, "priv", argValue)
}

var plugNewFunction *gi.Function
var plugNewFunction_Once sync.Once

func plugNewFunction_Set() error {
	var err error
	plugNewFunction_Once.Do(func() {
		err = plugStruct_Set()
		if err != nil {
			return
		}
		plugNewFunction, err = plugStruct.InvokerNew("new")
	})
	return err
}

// PlugNew is a representation of the C type gtk_plug_new.
func PlugNew(socketId xlib.Window) *Plug {
	var inArgs [1]gi.Argument
	inArgs[0].SetUint64(uint64(socketId))

	var ret gi.Argument

	err := plugNewFunction_Set()
	if err == nil {
		ret = plugNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Plug{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_plug_new_for_display' : parameter 'display' of type 'Gdk.Display' not supported

var plugConstructFunction *gi.Function
var plugConstructFunction_Once sync.Once

func plugConstructFunction_Set() error {
	var err error
	plugConstructFunction_Once.Do(func() {
		err = plugStruct_Set()
		if err != nil {
			return
		}
		plugConstructFunction, err = plugStruct.InvokerNew("construct")
	})
	return err
}

// Construct is a representation of the C type gtk_plug_construct.
func (recv *Plug) Construct(socketId xlib.Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint64(uint64(socketId))

	err := plugConstructFunction_Set()
	if err == nil {
		plugConstructFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_plug_construct_for_display' : parameter 'display' of type 'Gdk.Display' not supported

var plugGetEmbeddedFunction *gi.Function
var plugGetEmbeddedFunction_Once sync.Once

func plugGetEmbeddedFunction_Set() error {
	var err error
	plugGetEmbeddedFunction_Once.Do(func() {
		err = plugStruct_Set()
		if err != nil {
			return
		}
		plugGetEmbeddedFunction, err = plugStruct.InvokerNew("get_embedded")
	})
	return err
}

// GetEmbedded is a representation of the C type gtk_plug_get_embedded.
func (recv *Plug) GetEmbedded() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := plugGetEmbeddedFunction_Set()
	if err == nil {
		ret = plugGetEmbeddedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var plugGetIdFunction *gi.Function
var plugGetIdFunction_Once sync.Once

func plugGetIdFunction_Set() error {
	var err error
	plugGetIdFunction_Once.Do(func() {
		err = plugStruct_Set()
		if err != nil {
			return
		}
		plugGetIdFunction, err = plugStruct.InvokerNew("get_id")
	})
	return err
}

// GetId is a representation of the C type gtk_plug_get_id.
func (recv *Plug) GetId() xlib.Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := plugGetIdFunction_Set()
	if err == nil {
		ret = plugGetIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := xlib.Window(ret.Uint64())

	return retGo
}

// UNSUPPORTED : C value 'gtk_plug_get_socket_window' : return type 'Gdk.Window' not supported

var popoverStruct *gi.Struct
var popoverStruct_Once sync.Once

func popoverStruct_Set() error {
	var err error
	popoverStruct_Once.Do(func() {
		popoverStruct, err = gi.StructNew("Gtk", "Popover")
	})
	return err
}

type Popover struct {
	Bin
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *Popover) FieldParentInstance() *Bin {
	argValue := gi.FieldGet(popoverStruct, recv.Native, "parent_instance")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *Popover) SetFieldParentInstance(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(popoverStruct, recv.Native, "parent_instance", argValue)
}

var popoverNewFunction *gi.Function
var popoverNewFunction_Once sync.Once

func popoverNewFunction_Set() error {
	var err error
	popoverNewFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverNewFunction, err = popoverStruct.InvokerNew("new")
	})
	return err
}

// PopoverNew is a representation of the C type gtk_popover_new.
func PopoverNew(relativeTo *Widget) *Popover {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(relativeTo.Native)

	var ret gi.Argument

	err := popoverNewFunction_Set()
	if err == nil {
		ret = popoverNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Popover{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_popover_new_from_model' : parameter 'model' of type 'Gio.MenuModel' not supported

// UNSUPPORTED : C value 'gtk_popover_bind_model' : parameter 'model' of type 'Gio.MenuModel' not supported

// UNSUPPORTED : C value 'gtk_popover_get_constrain_to' : return type 'PopoverConstraint' not supported

var popoverGetDefaultWidgetFunction *gi.Function
var popoverGetDefaultWidgetFunction_Once sync.Once

func popoverGetDefaultWidgetFunction_Set() error {
	var err error
	popoverGetDefaultWidgetFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverGetDefaultWidgetFunction, err = popoverStruct.InvokerNew("get_default_widget")
	})
	return err
}

// GetDefaultWidget is a representation of the C type gtk_popover_get_default_widget.
func (recv *Popover) GetDefaultWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := popoverGetDefaultWidgetFunction_Set()
	if err == nil {
		ret = popoverGetDefaultWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var popoverGetModalFunction *gi.Function
var popoverGetModalFunction_Once sync.Once

func popoverGetModalFunction_Set() error {
	var err error
	popoverGetModalFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverGetModalFunction, err = popoverStruct.InvokerNew("get_modal")
	})
	return err
}

// GetModal is a representation of the C type gtk_popover_get_modal.
func (recv *Popover) GetModal() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := popoverGetModalFunction_Set()
	if err == nil {
		ret = popoverGetModalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_popover_get_pointing_to' : parameter 'rect' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_popover_get_position' : return type 'PositionType' not supported

var popoverGetRelativeToFunction *gi.Function
var popoverGetRelativeToFunction_Once sync.Once

func popoverGetRelativeToFunction_Set() error {
	var err error
	popoverGetRelativeToFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverGetRelativeToFunction, err = popoverStruct.InvokerNew("get_relative_to")
	})
	return err
}

// GetRelativeTo is a representation of the C type gtk_popover_get_relative_to.
func (recv *Popover) GetRelativeTo() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := popoverGetRelativeToFunction_Set()
	if err == nil {
		ret = popoverGetRelativeToFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var popoverGetTransitionsEnabledFunction *gi.Function
var popoverGetTransitionsEnabledFunction_Once sync.Once

func popoverGetTransitionsEnabledFunction_Set() error {
	var err error
	popoverGetTransitionsEnabledFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverGetTransitionsEnabledFunction, err = popoverStruct.InvokerNew("get_transitions_enabled")
	})
	return err
}

// GetTransitionsEnabled is a representation of the C type gtk_popover_get_transitions_enabled.
func (recv *Popover) GetTransitionsEnabled() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := popoverGetTransitionsEnabledFunction_Set()
	if err == nil {
		ret = popoverGetTransitionsEnabledFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var popoverPopdownFunction *gi.Function
var popoverPopdownFunction_Once sync.Once

func popoverPopdownFunction_Set() error {
	var err error
	popoverPopdownFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverPopdownFunction, err = popoverStruct.InvokerNew("popdown")
	})
	return err
}

// Popdown is a representation of the C type gtk_popover_popdown.
func (recv *Popover) Popdown() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := popoverPopdownFunction_Set()
	if err == nil {
		popoverPopdownFunction.Invoke(inArgs[:], nil)
	}

	return
}

var popoverPopupFunction *gi.Function
var popoverPopupFunction_Once sync.Once

func popoverPopupFunction_Set() error {
	var err error
	popoverPopupFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverPopupFunction, err = popoverStruct.InvokerNew("popup")
	})
	return err
}

// Popup is a representation of the C type gtk_popover_popup.
func (recv *Popover) Popup() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := popoverPopupFunction_Set()
	if err == nil {
		popoverPopupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_popover_set_constrain_to' : parameter 'constraint' of type 'PopoverConstraint' not supported

var popoverSetDefaultWidgetFunction *gi.Function
var popoverSetDefaultWidgetFunction_Once sync.Once

func popoverSetDefaultWidgetFunction_Set() error {
	var err error
	popoverSetDefaultWidgetFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverSetDefaultWidgetFunction, err = popoverStruct.InvokerNew("set_default_widget")
	})
	return err
}

// SetDefaultWidget is a representation of the C type gtk_popover_set_default_widget.
func (recv *Popover) SetDefaultWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := popoverSetDefaultWidgetFunction_Set()
	if err == nil {
		popoverSetDefaultWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var popoverSetModalFunction *gi.Function
var popoverSetModalFunction_Once sync.Once

func popoverSetModalFunction_Set() error {
	var err error
	popoverSetModalFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverSetModalFunction, err = popoverStruct.InvokerNew("set_modal")
	})
	return err
}

// SetModal is a representation of the C type gtk_popover_set_modal.
func (recv *Popover) SetModal(modal bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(modal)

	err := popoverSetModalFunction_Set()
	if err == nil {
		popoverSetModalFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_popover_set_pointing_to' : parameter 'rect' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_popover_set_position' : parameter 'position' of type 'PositionType' not supported

var popoverSetRelativeToFunction *gi.Function
var popoverSetRelativeToFunction_Once sync.Once

func popoverSetRelativeToFunction_Set() error {
	var err error
	popoverSetRelativeToFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverSetRelativeToFunction, err = popoverStruct.InvokerNew("set_relative_to")
	})
	return err
}

// SetRelativeTo is a representation of the C type gtk_popover_set_relative_to.
func (recv *Popover) SetRelativeTo(relativeTo *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(relativeTo.Native)

	err := popoverSetRelativeToFunction_Set()
	if err == nil {
		popoverSetRelativeToFunction.Invoke(inArgs[:], nil)
	}

	return
}

var popoverSetTransitionsEnabledFunction *gi.Function
var popoverSetTransitionsEnabledFunction_Once sync.Once

func popoverSetTransitionsEnabledFunction_Set() error {
	var err error
	popoverSetTransitionsEnabledFunction_Once.Do(func() {
		err = popoverStruct_Set()
		if err != nil {
			return
		}
		popoverSetTransitionsEnabledFunction, err = popoverStruct.InvokerNew("set_transitions_enabled")
	})
	return err
}

// SetTransitionsEnabled is a representation of the C type gtk_popover_set_transitions_enabled.
func (recv *Popover) SetTransitionsEnabled(transitionsEnabled bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(transitionsEnabled)

	err := popoverSetTransitionsEnabledFunction_Set()
	if err == nil {
		popoverSetTransitionsEnabledFunction.Invoke(inArgs[:], nil)
	}

	return
}

var popoverAccessibleStruct *gi.Struct
var popoverAccessibleStruct_Once sync.Once

func popoverAccessibleStruct_Set() error {
	var err error
	popoverAccessibleStruct_Once.Do(func() {
		popoverAccessibleStruct, err = gi.StructNew("Gtk", "PopoverAccessible")
	})
	return err
}

type PopoverAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *PopoverAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(popoverAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *PopoverAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(popoverAccessibleStruct, recv.Native, "parent", argValue)
}

// PopoverAccessibleStruct creates an uninitialised PopoverAccessible.
func PopoverAccessibleStruct() *PopoverAccessible {
	err := popoverAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &PopoverAccessible{}
	structGo.Native = popoverAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizePopoverAccessible)
	return structGo
}
func finalizePopoverAccessible(obj *PopoverAccessible) {
	popoverAccessibleStruct.Free(obj.Native)
}

var popoverMenuStruct *gi.Struct
var popoverMenuStruct_Once sync.Once

func popoverMenuStruct_Set() error {
	var err error
	popoverMenuStruct_Once.Do(func() {
		popoverMenuStruct, err = gi.StructNew("Gtk", "PopoverMenu")
	})
	return err
}

type PopoverMenu struct {
	Popover
}

var popoverMenuNewFunction *gi.Function
var popoverMenuNewFunction_Once sync.Once

func popoverMenuNewFunction_Set() error {
	var err error
	popoverMenuNewFunction_Once.Do(func() {
		err = popoverMenuStruct_Set()
		if err != nil {
			return
		}
		popoverMenuNewFunction, err = popoverMenuStruct.InvokerNew("new")
	})
	return err
}

// PopoverMenuNew is a representation of the C type gtk_popover_menu_new.
func PopoverMenuNew() *PopoverMenu {

	var ret gi.Argument

	err := popoverMenuNewFunction_Set()
	if err == nil {
		ret = popoverMenuNewFunction.Invoke(nil, nil)
	}

	retGo := &PopoverMenu{}
	retGo.Native = ret.Pointer()

	return retGo
}

var popoverMenuOpenSubmenuFunction *gi.Function
var popoverMenuOpenSubmenuFunction_Once sync.Once

func popoverMenuOpenSubmenuFunction_Set() error {
	var err error
	popoverMenuOpenSubmenuFunction_Once.Do(func() {
		err = popoverMenuStruct_Set()
		if err != nil {
			return
		}
		popoverMenuOpenSubmenuFunction, err = popoverMenuStruct.InvokerNew("open_submenu")
	})
	return err
}

// OpenSubmenu is a representation of the C type gtk_popover_menu_open_submenu.
func (recv *PopoverMenu) OpenSubmenu(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := popoverMenuOpenSubmenuFunction_Set()
	if err == nil {
		popoverMenuOpenSubmenuFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printContextStruct *gi.Struct
var printContextStruct_Once sync.Once

func printContextStruct_Set() error {
	var err error
	printContextStruct_Once.Do(func() {
		printContextStruct, err = gi.StructNew("Gtk", "PrintContext")
	})
	return err
}

type PrintContext struct {
	gobject.Object
}

// UNSUPPORTED : C value 'gtk_print_context_create_pango_context' : return type 'Pango.Context' not supported

// UNSUPPORTED : C value 'gtk_print_context_create_pango_layout' : return type 'Pango.Layout' not supported

// UNSUPPORTED : C value 'gtk_print_context_get_cairo_context' : return type 'cairo.Context' not supported

var printContextGetDpiXFunction *gi.Function
var printContextGetDpiXFunction_Once sync.Once

func printContextGetDpiXFunction_Set() error {
	var err error
	printContextGetDpiXFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetDpiXFunction, err = printContextStruct.InvokerNew("get_dpi_x")
	})
	return err
}

// GetDpiX is a representation of the C type gtk_print_context_get_dpi_x.
func (recv *PrintContext) GetDpiX() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printContextGetDpiXFunction_Set()
	if err == nil {
		ret = printContextGetDpiXFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var printContextGetDpiYFunction *gi.Function
var printContextGetDpiYFunction_Once sync.Once

func printContextGetDpiYFunction_Set() error {
	var err error
	printContextGetDpiYFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetDpiYFunction, err = printContextStruct.InvokerNew("get_dpi_y")
	})
	return err
}

// GetDpiY is a representation of the C type gtk_print_context_get_dpi_y.
func (recv *PrintContext) GetDpiY() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printContextGetDpiYFunction_Set()
	if err == nil {
		ret = printContextGetDpiYFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var printContextGetHardMarginsFunction *gi.Function
var printContextGetHardMarginsFunction_Once sync.Once

func printContextGetHardMarginsFunction_Set() error {
	var err error
	printContextGetHardMarginsFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetHardMarginsFunction, err = printContextStruct.InvokerNew("get_hard_margins")
	})
	return err
}

// GetHardMargins is a representation of the C type gtk_print_context_get_hard_margins.
func (recv *PrintContext) GetHardMargins() (bool, float64, float64, float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [4]gi.Argument
	var ret gi.Argument

	err := printContextGetHardMarginsFunction_Set()
	if err == nil {
		ret = printContextGetHardMarginsFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()
	out2 := outArgs[2].Float64()
	out3 := outArgs[3].Float64()

	return retGo, out0, out1, out2, out3
}

var printContextGetHeightFunction *gi.Function
var printContextGetHeightFunction_Once sync.Once

func printContextGetHeightFunction_Set() error {
	var err error
	printContextGetHeightFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetHeightFunction, err = printContextStruct.InvokerNew("get_height")
	})
	return err
}

// GetHeight is a representation of the C type gtk_print_context_get_height.
func (recv *PrintContext) GetHeight() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printContextGetHeightFunction_Set()
	if err == nil {
		ret = printContextGetHeightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var printContextGetPageSetupFunction *gi.Function
var printContextGetPageSetupFunction_Once sync.Once

func printContextGetPageSetupFunction_Set() error {
	var err error
	printContextGetPageSetupFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetPageSetupFunction, err = printContextStruct.InvokerNew("get_page_setup")
	})
	return err
}

// GetPageSetup is a representation of the C type gtk_print_context_get_page_setup.
func (recv *PrintContext) GetPageSetup() *PageSetup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printContextGetPageSetupFunction_Set()
	if err == nil {
		ret = printContextGetPageSetupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PageSetup{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_context_get_pango_fontmap' : return type 'Pango.FontMap' not supported

var printContextGetWidthFunction *gi.Function
var printContextGetWidthFunction_Once sync.Once

func printContextGetWidthFunction_Set() error {
	var err error
	printContextGetWidthFunction_Once.Do(func() {
		err = printContextStruct_Set()
		if err != nil {
			return
		}
		printContextGetWidthFunction, err = printContextStruct.InvokerNew("get_width")
	})
	return err
}

// GetWidth is a representation of the C type gtk_print_context_get_width.
func (recv *PrintContext) GetWidth() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printContextGetWidthFunction_Set()
	if err == nil {
		ret = printContextGetWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_context_set_cairo_context' : parameter 'cr' of type 'cairo.Context' not supported

// PrintContextStruct creates an uninitialised PrintContext.
func PrintContextStruct() *PrintContext {
	err := printContextStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &PrintContext{}
	structGo.Native = printContextStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizePrintContext)
	return structGo
}
func finalizePrintContext(obj *PrintContext) {
	printContextStruct.Free(obj.Native)
}

var printOperationStruct *gi.Struct
var printOperationStruct_Once sync.Once

func printOperationStruct_Set() error {
	var err error
	printOperationStruct_Once.Do(func() {
		printOperationStruct, err = gi.StructNew("Gtk", "PrintOperation")
	})
	return err
}

type PrintOperation struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var printOperationNewFunction *gi.Function
var printOperationNewFunction_Once sync.Once

func printOperationNewFunction_Set() error {
	var err error
	printOperationNewFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationNewFunction, err = printOperationStruct.InvokerNew("new")
	})
	return err
}

// PrintOperationNew is a representation of the C type gtk_print_operation_new.
func PrintOperationNew() *PrintOperation {

	var ret gi.Argument

	err := printOperationNewFunction_Set()
	if err == nil {
		ret = printOperationNewFunction.Invoke(nil, nil)
	}

	retGo := &PrintOperation{}
	retGo.Native = ret.Pointer()

	return retGo
}

var printOperationCancelFunction *gi.Function
var printOperationCancelFunction_Once sync.Once

func printOperationCancelFunction_Set() error {
	var err error
	printOperationCancelFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationCancelFunction, err = printOperationStruct.InvokerNew("cancel")
	})
	return err
}

// Cancel is a representation of the C type gtk_print_operation_cancel.
func (recv *PrintOperation) Cancel() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := printOperationCancelFunction_Set()
	if err == nil {
		printOperationCancelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationDrawPageFinishFunction *gi.Function
var printOperationDrawPageFinishFunction_Once sync.Once

func printOperationDrawPageFinishFunction_Set() error {
	var err error
	printOperationDrawPageFinishFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationDrawPageFinishFunction, err = printOperationStruct.InvokerNew("draw_page_finish")
	})
	return err
}

// DrawPageFinish is a representation of the C type gtk_print_operation_draw_page_finish.
func (recv *PrintOperation) DrawPageFinish() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := printOperationDrawPageFinishFunction_Set()
	if err == nil {
		printOperationDrawPageFinishFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationGetDefaultPageSetupFunction *gi.Function
var printOperationGetDefaultPageSetupFunction_Once sync.Once

func printOperationGetDefaultPageSetupFunction_Set() error {
	var err error
	printOperationGetDefaultPageSetupFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetDefaultPageSetupFunction, err = printOperationStruct.InvokerNew("get_default_page_setup")
	})
	return err
}

// GetDefaultPageSetup is a representation of the C type gtk_print_operation_get_default_page_setup.
func (recv *PrintOperation) GetDefaultPageSetup() *PageSetup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetDefaultPageSetupFunction_Set()
	if err == nil {
		ret = printOperationGetDefaultPageSetupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PageSetup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var printOperationGetEmbedPageSetupFunction *gi.Function
var printOperationGetEmbedPageSetupFunction_Once sync.Once

func printOperationGetEmbedPageSetupFunction_Set() error {
	var err error
	printOperationGetEmbedPageSetupFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetEmbedPageSetupFunction, err = printOperationStruct.InvokerNew("get_embed_page_setup")
	})
	return err
}

// GetEmbedPageSetup is a representation of the C type gtk_print_operation_get_embed_page_setup.
func (recv *PrintOperation) GetEmbedPageSetup() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetEmbedPageSetupFunction_Set()
	if err == nil {
		ret = printOperationGetEmbedPageSetupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printOperationGetErrorFunction *gi.Function
var printOperationGetErrorFunction_Once sync.Once

func printOperationGetErrorFunction_Set() error {
	var err error
	printOperationGetErrorFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetErrorFunction, err = printOperationStruct.InvokerNew("get_error")
	})
	return err
}

// GetError is a representation of the C type gtk_print_operation_get_error.
func (recv *PrintOperation) GetError() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := printOperationGetErrorFunction_Set()
	if err == nil {
		printOperationGetErrorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationGetHasSelectionFunction *gi.Function
var printOperationGetHasSelectionFunction_Once sync.Once

func printOperationGetHasSelectionFunction_Set() error {
	var err error
	printOperationGetHasSelectionFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetHasSelectionFunction, err = printOperationStruct.InvokerNew("get_has_selection")
	})
	return err
}

// GetHasSelection is a representation of the C type gtk_print_operation_get_has_selection.
func (recv *PrintOperation) GetHasSelection() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetHasSelectionFunction_Set()
	if err == nil {
		ret = printOperationGetHasSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printOperationGetNPagesToPrintFunction *gi.Function
var printOperationGetNPagesToPrintFunction_Once sync.Once

func printOperationGetNPagesToPrintFunction_Set() error {
	var err error
	printOperationGetNPagesToPrintFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetNPagesToPrintFunction, err = printOperationStruct.InvokerNew("get_n_pages_to_print")
	})
	return err
}

// GetNPagesToPrint is a representation of the C type gtk_print_operation_get_n_pages_to_print.
func (recv *PrintOperation) GetNPagesToPrint() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetNPagesToPrintFunction_Set()
	if err == nil {
		ret = printOperationGetNPagesToPrintFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printOperationGetPrintSettingsFunction *gi.Function
var printOperationGetPrintSettingsFunction_Once sync.Once

func printOperationGetPrintSettingsFunction_Set() error {
	var err error
	printOperationGetPrintSettingsFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetPrintSettingsFunction, err = printOperationStruct.InvokerNew("get_print_settings")
	})
	return err
}

// GetPrintSettings is a representation of the C type gtk_print_operation_get_print_settings.
func (recv *PrintOperation) GetPrintSettings() *PrintSettings {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetPrintSettingsFunction_Set()
	if err == nil {
		ret = printOperationGetPrintSettingsFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PrintSettings{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_operation_get_status' : return type 'PrintStatus' not supported

var printOperationGetStatusStringFunction *gi.Function
var printOperationGetStatusStringFunction_Once sync.Once

func printOperationGetStatusStringFunction_Set() error {
	var err error
	printOperationGetStatusStringFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetStatusStringFunction, err = printOperationStruct.InvokerNew("get_status_string")
	})
	return err
}

// GetStatusString is a representation of the C type gtk_print_operation_get_status_string.
func (recv *PrintOperation) GetStatusString() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetStatusStringFunction_Set()
	if err == nil {
		ret = printOperationGetStatusStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printOperationGetSupportSelectionFunction *gi.Function
var printOperationGetSupportSelectionFunction_Once sync.Once

func printOperationGetSupportSelectionFunction_Set() error {
	var err error
	printOperationGetSupportSelectionFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationGetSupportSelectionFunction, err = printOperationStruct.InvokerNew("get_support_selection")
	})
	return err
}

// GetSupportSelection is a representation of the C type gtk_print_operation_get_support_selection.
func (recv *PrintOperation) GetSupportSelection() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationGetSupportSelectionFunction_Set()
	if err == nil {
		ret = printOperationGetSupportSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printOperationIsFinishedFunction *gi.Function
var printOperationIsFinishedFunction_Once sync.Once

func printOperationIsFinishedFunction_Set() error {
	var err error
	printOperationIsFinishedFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationIsFinishedFunction, err = printOperationStruct.InvokerNew("is_finished")
	})
	return err
}

// IsFinished is a representation of the C type gtk_print_operation_is_finished.
func (recv *PrintOperation) IsFinished() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printOperationIsFinishedFunction_Set()
	if err == nil {
		ret = printOperationIsFinishedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_operation_run' : parameter 'action' of type 'PrintOperationAction' not supported

var printOperationSetAllowAsyncFunction *gi.Function
var printOperationSetAllowAsyncFunction_Once sync.Once

func printOperationSetAllowAsyncFunction_Set() error {
	var err error
	printOperationSetAllowAsyncFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetAllowAsyncFunction, err = printOperationStruct.InvokerNew("set_allow_async")
	})
	return err
}

// SetAllowAsync is a representation of the C type gtk_print_operation_set_allow_async.
func (recv *PrintOperation) SetAllowAsync(allowAsync bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(allowAsync)

	err := printOperationSetAllowAsyncFunction_Set()
	if err == nil {
		printOperationSetAllowAsyncFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetCurrentPageFunction *gi.Function
var printOperationSetCurrentPageFunction_Once sync.Once

func printOperationSetCurrentPageFunction_Set() error {
	var err error
	printOperationSetCurrentPageFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetCurrentPageFunction, err = printOperationStruct.InvokerNew("set_current_page")
	})
	return err
}

// SetCurrentPage is a representation of the C type gtk_print_operation_set_current_page.
func (recv *PrintOperation) SetCurrentPage(currentPage int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(currentPage)

	err := printOperationSetCurrentPageFunction_Set()
	if err == nil {
		printOperationSetCurrentPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetCustomTabLabelFunction *gi.Function
var printOperationSetCustomTabLabelFunction_Once sync.Once

func printOperationSetCustomTabLabelFunction_Set() error {
	var err error
	printOperationSetCustomTabLabelFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetCustomTabLabelFunction, err = printOperationStruct.InvokerNew("set_custom_tab_label")
	})
	return err
}

// SetCustomTabLabel is a representation of the C type gtk_print_operation_set_custom_tab_label.
func (recv *PrintOperation) SetCustomTabLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := printOperationSetCustomTabLabelFunction_Set()
	if err == nil {
		printOperationSetCustomTabLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetDefaultPageSetupFunction *gi.Function
var printOperationSetDefaultPageSetupFunction_Once sync.Once

func printOperationSetDefaultPageSetupFunction_Set() error {
	var err error
	printOperationSetDefaultPageSetupFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetDefaultPageSetupFunction, err = printOperationStruct.InvokerNew("set_default_page_setup")
	})
	return err
}

// SetDefaultPageSetup is a representation of the C type gtk_print_operation_set_default_page_setup.
func (recv *PrintOperation) SetDefaultPageSetup(defaultPageSetup *PageSetup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(defaultPageSetup.Native)

	err := printOperationSetDefaultPageSetupFunction_Set()
	if err == nil {
		printOperationSetDefaultPageSetupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetDeferDrawingFunction *gi.Function
var printOperationSetDeferDrawingFunction_Once sync.Once

func printOperationSetDeferDrawingFunction_Set() error {
	var err error
	printOperationSetDeferDrawingFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetDeferDrawingFunction, err = printOperationStruct.InvokerNew("set_defer_drawing")
	})
	return err
}

// SetDeferDrawing is a representation of the C type gtk_print_operation_set_defer_drawing.
func (recv *PrintOperation) SetDeferDrawing() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := printOperationSetDeferDrawingFunction_Set()
	if err == nil {
		printOperationSetDeferDrawingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetEmbedPageSetupFunction *gi.Function
var printOperationSetEmbedPageSetupFunction_Once sync.Once

func printOperationSetEmbedPageSetupFunction_Set() error {
	var err error
	printOperationSetEmbedPageSetupFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetEmbedPageSetupFunction, err = printOperationStruct.InvokerNew("set_embed_page_setup")
	})
	return err
}

// SetEmbedPageSetup is a representation of the C type gtk_print_operation_set_embed_page_setup.
func (recv *PrintOperation) SetEmbedPageSetup(embed bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(embed)

	err := printOperationSetEmbedPageSetupFunction_Set()
	if err == nil {
		printOperationSetEmbedPageSetupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetExportFilenameFunction *gi.Function
var printOperationSetExportFilenameFunction_Once sync.Once

func printOperationSetExportFilenameFunction_Set() error {
	var err error
	printOperationSetExportFilenameFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetExportFilenameFunction, err = printOperationStruct.InvokerNew("set_export_filename")
	})
	return err
}

// SetExportFilename is a representation of the C type gtk_print_operation_set_export_filename.
func (recv *PrintOperation) SetExportFilename(filename string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	err := printOperationSetExportFilenameFunction_Set()
	if err == nil {
		printOperationSetExportFilenameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetHasSelectionFunction *gi.Function
var printOperationSetHasSelectionFunction_Once sync.Once

func printOperationSetHasSelectionFunction_Set() error {
	var err error
	printOperationSetHasSelectionFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetHasSelectionFunction, err = printOperationStruct.InvokerNew("set_has_selection")
	})
	return err
}

// SetHasSelection is a representation of the C type gtk_print_operation_set_has_selection.
func (recv *PrintOperation) SetHasSelection(hasSelection bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasSelection)

	err := printOperationSetHasSelectionFunction_Set()
	if err == nil {
		printOperationSetHasSelectionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetJobNameFunction *gi.Function
var printOperationSetJobNameFunction_Once sync.Once

func printOperationSetJobNameFunction_Set() error {
	var err error
	printOperationSetJobNameFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetJobNameFunction, err = printOperationStruct.InvokerNew("set_job_name")
	})
	return err
}

// SetJobName is a representation of the C type gtk_print_operation_set_job_name.
func (recv *PrintOperation) SetJobName(jobName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(jobName)

	err := printOperationSetJobNameFunction_Set()
	if err == nil {
		printOperationSetJobNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetNPagesFunction *gi.Function
var printOperationSetNPagesFunction_Once sync.Once

func printOperationSetNPagesFunction_Set() error {
	var err error
	printOperationSetNPagesFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetNPagesFunction, err = printOperationStruct.InvokerNew("set_n_pages")
	})
	return err
}

// SetNPages is a representation of the C type gtk_print_operation_set_n_pages.
func (recv *PrintOperation) SetNPages(nPages int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(nPages)

	err := printOperationSetNPagesFunction_Set()
	if err == nil {
		printOperationSetNPagesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetPrintSettingsFunction *gi.Function
var printOperationSetPrintSettingsFunction_Once sync.Once

func printOperationSetPrintSettingsFunction_Set() error {
	var err error
	printOperationSetPrintSettingsFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetPrintSettingsFunction, err = printOperationStruct.InvokerNew("set_print_settings")
	})
	return err
}

// SetPrintSettings is a representation of the C type gtk_print_operation_set_print_settings.
func (recv *PrintOperation) SetPrintSettings(printSettings *PrintSettings) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(printSettings.Native)

	err := printOperationSetPrintSettingsFunction_Set()
	if err == nil {
		printOperationSetPrintSettingsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetShowProgressFunction *gi.Function
var printOperationSetShowProgressFunction_Once sync.Once

func printOperationSetShowProgressFunction_Set() error {
	var err error
	printOperationSetShowProgressFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetShowProgressFunction, err = printOperationStruct.InvokerNew("set_show_progress")
	})
	return err
}

// SetShowProgress is a representation of the C type gtk_print_operation_set_show_progress.
func (recv *PrintOperation) SetShowProgress(showProgress bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showProgress)

	err := printOperationSetShowProgressFunction_Set()
	if err == nil {
		printOperationSetShowProgressFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetSupportSelectionFunction *gi.Function
var printOperationSetSupportSelectionFunction_Once sync.Once

func printOperationSetSupportSelectionFunction_Set() error {
	var err error
	printOperationSetSupportSelectionFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetSupportSelectionFunction, err = printOperationStruct.InvokerNew("set_support_selection")
	})
	return err
}

// SetSupportSelection is a representation of the C type gtk_print_operation_set_support_selection.
func (recv *PrintOperation) SetSupportSelection(supportSelection bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(supportSelection)

	err := printOperationSetSupportSelectionFunction_Set()
	if err == nil {
		printOperationSetSupportSelectionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printOperationSetTrackPrintStatusFunction *gi.Function
var printOperationSetTrackPrintStatusFunction_Once sync.Once

func printOperationSetTrackPrintStatusFunction_Set() error {
	var err error
	printOperationSetTrackPrintStatusFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetTrackPrintStatusFunction, err = printOperationStruct.InvokerNew("set_track_print_status")
	})
	return err
}

// SetTrackPrintStatus is a representation of the C type gtk_print_operation_set_track_print_status.
func (recv *PrintOperation) SetTrackPrintStatus(trackStatus bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(trackStatus)

	err := printOperationSetTrackPrintStatusFunction_Set()
	if err == nil {
		printOperationSetTrackPrintStatusFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_operation_set_unit' : parameter 'unit' of type 'Unit' not supported

var printOperationSetUseFullPageFunction *gi.Function
var printOperationSetUseFullPageFunction_Once sync.Once

func printOperationSetUseFullPageFunction_Set() error {
	var err error
	printOperationSetUseFullPageFunction_Once.Do(func() {
		err = printOperationStruct_Set()
		if err != nil {
			return
		}
		printOperationSetUseFullPageFunction, err = printOperationStruct.InvokerNew("set_use_full_page")
	})
	return err
}

// SetUseFullPage is a representation of the C type gtk_print_operation_set_use_full_page.
func (recv *PrintOperation) SetUseFullPage(fullPage bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(fullPage)

	err := printOperationSetUseFullPageFunction_Set()
	if err == nil {
		printOperationSetUseFullPageFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsStruct *gi.Struct
var printSettingsStruct_Once sync.Once

func printSettingsStruct_Set() error {
	var err error
	printSettingsStruct_Once.Do(func() {
		printSettingsStruct, err = gi.StructNew("Gtk", "PrintSettings")
	})
	return err
}

type PrintSettings struct {
	gobject.Object
}

var printSettingsNewFunction *gi.Function
var printSettingsNewFunction_Once sync.Once

func printSettingsNewFunction_Set() error {
	var err error
	printSettingsNewFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsNewFunction, err = printSettingsStruct.InvokerNew("new")
	})
	return err
}

// PrintSettingsNew is a representation of the C type gtk_print_settings_new.
func PrintSettingsNew() *PrintSettings {

	var ret gi.Argument

	err := printSettingsNewFunction_Set()
	if err == nil {
		ret = printSettingsNewFunction.Invoke(nil, nil)
	}

	retGo := &PrintSettings{}
	retGo.Native = ret.Pointer()

	return retGo
}

var printSettingsNewFromFileFunction *gi.Function
var printSettingsNewFromFileFunction_Once sync.Once

func printSettingsNewFromFileFunction_Set() error {
	var err error
	printSettingsNewFromFileFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsNewFromFileFunction, err = printSettingsStruct.InvokerNew("new_from_file")
	})
	return err
}

// PrintSettingsNewFromFile is a representation of the C type gtk_print_settings_new_from_file.
func PrintSettingsNewFromFile(fileName string) *PrintSettings {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(fileName)

	var ret gi.Argument

	err := printSettingsNewFromFileFunction_Set()
	if err == nil {
		ret = printSettingsNewFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PrintSettings{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_new_from_gvariant' : parameter 'variant' of type 'GLib.Variant' not supported

// UNSUPPORTED : C value 'gtk_print_settings_new_from_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

var printSettingsCopyFunction *gi.Function
var printSettingsCopyFunction_Once sync.Once

func printSettingsCopyFunction_Set() error {
	var err error
	printSettingsCopyFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsCopyFunction, err = printSettingsStruct.InvokerNew("copy")
	})
	return err
}

// Copy is a representation of the C type gtk_print_settings_copy.
func (recv *PrintSettings) Copy() *PrintSettings {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsCopyFunction_Set()
	if err == nil {
		ret = printSettingsCopyFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PrintSettings{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_foreach' : parameter 'func' of type 'PrintSettingsFunc' not supported

var printSettingsGetFunction *gi.Function
var printSettingsGetFunction_Once sync.Once

func printSettingsGetFunction_Set() error {
	var err error
	printSettingsGetFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetFunction, err = printSettingsStruct.InvokerNew("get")
	})
	return err
}

// Get is a representation of the C type gtk_print_settings_get.
func (recv *PrintSettings) Get(key string) string {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := printSettingsGetFunction_Set()
	if err == nil {
		ret = printSettingsGetFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetBoolFunction *gi.Function
var printSettingsGetBoolFunction_Once sync.Once

func printSettingsGetBoolFunction_Set() error {
	var err error
	printSettingsGetBoolFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetBoolFunction, err = printSettingsStruct.InvokerNew("get_bool")
	})
	return err
}

// GetBool is a representation of the C type gtk_print_settings_get_bool.
func (recv *PrintSettings) GetBool(key string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := printSettingsGetBoolFunction_Set()
	if err == nil {
		ret = printSettingsGetBoolFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printSettingsGetCollateFunction *gi.Function
var printSettingsGetCollateFunction_Once sync.Once

func printSettingsGetCollateFunction_Set() error {
	var err error
	printSettingsGetCollateFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetCollateFunction, err = printSettingsStruct.InvokerNew("get_collate")
	})
	return err
}

// GetCollate is a representation of the C type gtk_print_settings_get_collate.
func (recv *PrintSettings) GetCollate() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetCollateFunction_Set()
	if err == nil {
		ret = printSettingsGetCollateFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printSettingsGetDefaultSourceFunction *gi.Function
var printSettingsGetDefaultSourceFunction_Once sync.Once

func printSettingsGetDefaultSourceFunction_Set() error {
	var err error
	printSettingsGetDefaultSourceFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetDefaultSourceFunction, err = printSettingsStruct.InvokerNew("get_default_source")
	})
	return err
}

// GetDefaultSource is a representation of the C type gtk_print_settings_get_default_source.
func (recv *PrintSettings) GetDefaultSource() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetDefaultSourceFunction_Set()
	if err == nil {
		ret = printSettingsGetDefaultSourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetDitherFunction *gi.Function
var printSettingsGetDitherFunction_Once sync.Once

func printSettingsGetDitherFunction_Set() error {
	var err error
	printSettingsGetDitherFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetDitherFunction, err = printSettingsStruct.InvokerNew("get_dither")
	})
	return err
}

// GetDither is a representation of the C type gtk_print_settings_get_dither.
func (recv *PrintSettings) GetDither() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetDitherFunction_Set()
	if err == nil {
		ret = printSettingsGetDitherFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetDoubleFunction *gi.Function
var printSettingsGetDoubleFunction_Once sync.Once

func printSettingsGetDoubleFunction_Set() error {
	var err error
	printSettingsGetDoubleFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetDoubleFunction, err = printSettingsStruct.InvokerNew("get_double")
	})
	return err
}

// GetDouble is a representation of the C type gtk_print_settings_get_double.
func (recv *PrintSettings) GetDouble(key string) float64 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := printSettingsGetDoubleFunction_Set()
	if err == nil {
		ret = printSettingsGetDoubleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var printSettingsGetDoubleWithDefaultFunction *gi.Function
var printSettingsGetDoubleWithDefaultFunction_Once sync.Once

func printSettingsGetDoubleWithDefaultFunction_Set() error {
	var err error
	printSettingsGetDoubleWithDefaultFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetDoubleWithDefaultFunction, err = printSettingsStruct.InvokerNew("get_double_with_default")
	})
	return err
}

// GetDoubleWithDefault is a representation of the C type gtk_print_settings_get_double_with_default.
func (recv *PrintSettings) GetDoubleWithDefault(key string, def float64) float64 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetFloat64(def)

	var ret gi.Argument

	err := printSettingsGetDoubleWithDefaultFunction_Set()
	if err == nil {
		ret = printSettingsGetDoubleWithDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_get_duplex' : return type 'PrintDuplex' not supported

var printSettingsGetFinishingsFunction *gi.Function
var printSettingsGetFinishingsFunction_Once sync.Once

func printSettingsGetFinishingsFunction_Set() error {
	var err error
	printSettingsGetFinishingsFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetFinishingsFunction, err = printSettingsStruct.InvokerNew("get_finishings")
	})
	return err
}

// GetFinishings is a representation of the C type gtk_print_settings_get_finishings.
func (recv *PrintSettings) GetFinishings() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetFinishingsFunction_Set()
	if err == nil {
		ret = printSettingsGetFinishingsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetIntFunction *gi.Function
var printSettingsGetIntFunction_Once sync.Once

func printSettingsGetIntFunction_Set() error {
	var err error
	printSettingsGetIntFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetIntFunction, err = printSettingsStruct.InvokerNew("get_int")
	})
	return err
}

// GetInt is a representation of the C type gtk_print_settings_get_int.
func (recv *PrintSettings) GetInt(key string) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := printSettingsGetIntFunction_Set()
	if err == nil {
		ret = printSettingsGetIntFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printSettingsGetIntWithDefaultFunction *gi.Function
var printSettingsGetIntWithDefaultFunction_Once sync.Once

func printSettingsGetIntWithDefaultFunction_Set() error {
	var err error
	printSettingsGetIntWithDefaultFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetIntWithDefaultFunction, err = printSettingsStruct.InvokerNew("get_int_with_default")
	})
	return err
}

// GetIntWithDefault is a representation of the C type gtk_print_settings_get_int_with_default.
func (recv *PrintSettings) GetIntWithDefault(key string, def int32) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetInt32(def)

	var ret gi.Argument

	err := printSettingsGetIntWithDefaultFunction_Set()
	if err == nil {
		ret = printSettingsGetIntWithDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_get_length' : parameter 'unit' of type 'Unit' not supported

var printSettingsGetMediaTypeFunction *gi.Function
var printSettingsGetMediaTypeFunction_Once sync.Once

func printSettingsGetMediaTypeFunction_Set() error {
	var err error
	printSettingsGetMediaTypeFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetMediaTypeFunction, err = printSettingsStruct.InvokerNew("get_media_type")
	})
	return err
}

// GetMediaType is a representation of the C type gtk_print_settings_get_media_type.
func (recv *PrintSettings) GetMediaType() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetMediaTypeFunction_Set()
	if err == nil {
		ret = printSettingsGetMediaTypeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetNCopiesFunction *gi.Function
var printSettingsGetNCopiesFunction_Once sync.Once

func printSettingsGetNCopiesFunction_Set() error {
	var err error
	printSettingsGetNCopiesFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetNCopiesFunction, err = printSettingsStruct.InvokerNew("get_n_copies")
	})
	return err
}

// GetNCopies is a representation of the C type gtk_print_settings_get_n_copies.
func (recv *PrintSettings) GetNCopies() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetNCopiesFunction_Set()
	if err == nil {
		ret = printSettingsGetNCopiesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printSettingsGetNumberUpFunction *gi.Function
var printSettingsGetNumberUpFunction_Once sync.Once

func printSettingsGetNumberUpFunction_Set() error {
	var err error
	printSettingsGetNumberUpFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetNumberUpFunction, err = printSettingsStruct.InvokerNew("get_number_up")
	})
	return err
}

// GetNumberUp is a representation of the C type gtk_print_settings_get_number_up.
func (recv *PrintSettings) GetNumberUp() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetNumberUpFunction_Set()
	if err == nil {
		ret = printSettingsGetNumberUpFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_get_number_up_layout' : return type 'NumberUpLayout' not supported

// UNSUPPORTED : C value 'gtk_print_settings_get_orientation' : return type 'PageOrientation' not supported

var printSettingsGetOutputBinFunction *gi.Function
var printSettingsGetOutputBinFunction_Once sync.Once

func printSettingsGetOutputBinFunction_Set() error {
	var err error
	printSettingsGetOutputBinFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetOutputBinFunction, err = printSettingsStruct.InvokerNew("get_output_bin")
	})
	return err
}

// GetOutputBin is a representation of the C type gtk_print_settings_get_output_bin.
func (recv *PrintSettings) GetOutputBin() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetOutputBinFunction_Set()
	if err == nil {
		ret = printSettingsGetOutputBinFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetPageRangesFunction *gi.Function
var printSettingsGetPageRangesFunction_Once sync.Once

func printSettingsGetPageRangesFunction_Set() error {
	var err error
	printSettingsGetPageRangesFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetPageRangesFunction, err = printSettingsStruct.InvokerNew("get_page_ranges")
	})
	return err
}

// GetPageRanges is a representation of the C type gtk_print_settings_get_page_ranges.
func (recv *PrintSettings) GetPageRanges() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := printSettingsGetPageRangesFunction_Set()
	if err == nil {
		printSettingsGetPageRangesFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()

	return out0
}

// UNSUPPORTED : C value 'gtk_print_settings_get_page_set' : return type 'PageSet' not supported

// UNSUPPORTED : C value 'gtk_print_settings_get_paper_height' : parameter 'unit' of type 'Unit' not supported

var printSettingsGetPaperSizeFunction *gi.Function
var printSettingsGetPaperSizeFunction_Once sync.Once

func printSettingsGetPaperSizeFunction_Set() error {
	var err error
	printSettingsGetPaperSizeFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetPaperSizeFunction, err = printSettingsStruct.InvokerNew("get_paper_size")
	})
	return err
}

// GetPaperSize is a representation of the C type gtk_print_settings_get_paper_size.
func (recv *PrintSettings) GetPaperSize() *PaperSize {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetPaperSizeFunction_Set()
	if err == nil {
		ret = printSettingsGetPaperSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := &PaperSize{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_get_paper_width' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_print_settings_get_print_pages' : return type 'PrintPages' not supported

var printSettingsGetPrinterFunction *gi.Function
var printSettingsGetPrinterFunction_Once sync.Once

func printSettingsGetPrinterFunction_Set() error {
	var err error
	printSettingsGetPrinterFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetPrinterFunction, err = printSettingsStruct.InvokerNew("get_printer")
	})
	return err
}

// GetPrinter is a representation of the C type gtk_print_settings_get_printer.
func (recv *PrintSettings) GetPrinter() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetPrinterFunction_Set()
	if err == nil {
		ret = printSettingsGetPrinterFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var printSettingsGetPrinterLpiFunction *gi.Function
var printSettingsGetPrinterLpiFunction_Once sync.Once

func printSettingsGetPrinterLpiFunction_Set() error {
	var err error
	printSettingsGetPrinterLpiFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetPrinterLpiFunction, err = printSettingsStruct.InvokerNew("get_printer_lpi")
	})
	return err
}

// GetPrinterLpi is a representation of the C type gtk_print_settings_get_printer_lpi.
func (recv *PrintSettings) GetPrinterLpi() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetPrinterLpiFunction_Set()
	if err == nil {
		ret = printSettingsGetPrinterLpiFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_get_quality' : return type 'PrintQuality' not supported

var printSettingsGetResolutionFunction *gi.Function
var printSettingsGetResolutionFunction_Once sync.Once

func printSettingsGetResolutionFunction_Set() error {
	var err error
	printSettingsGetResolutionFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetResolutionFunction, err = printSettingsStruct.InvokerNew("get_resolution")
	})
	return err
}

// GetResolution is a representation of the C type gtk_print_settings_get_resolution.
func (recv *PrintSettings) GetResolution() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetResolutionFunction_Set()
	if err == nil {
		ret = printSettingsGetResolutionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printSettingsGetResolutionXFunction *gi.Function
var printSettingsGetResolutionXFunction_Once sync.Once

func printSettingsGetResolutionXFunction_Set() error {
	var err error
	printSettingsGetResolutionXFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetResolutionXFunction, err = printSettingsStruct.InvokerNew("get_resolution_x")
	})
	return err
}

// GetResolutionX is a representation of the C type gtk_print_settings_get_resolution_x.
func (recv *PrintSettings) GetResolutionX() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetResolutionXFunction_Set()
	if err == nil {
		ret = printSettingsGetResolutionXFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printSettingsGetResolutionYFunction *gi.Function
var printSettingsGetResolutionYFunction_Once sync.Once

func printSettingsGetResolutionYFunction_Set() error {
	var err error
	printSettingsGetResolutionYFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetResolutionYFunction, err = printSettingsStruct.InvokerNew("get_resolution_y")
	})
	return err
}

// GetResolutionY is a representation of the C type gtk_print_settings_get_resolution_y.
func (recv *PrintSettings) GetResolutionY() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetResolutionYFunction_Set()
	if err == nil {
		ret = printSettingsGetResolutionYFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var printSettingsGetReverseFunction *gi.Function
var printSettingsGetReverseFunction_Once sync.Once

func printSettingsGetReverseFunction_Set() error {
	var err error
	printSettingsGetReverseFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetReverseFunction, err = printSettingsStruct.InvokerNew("get_reverse")
	})
	return err
}

// GetReverse is a representation of the C type gtk_print_settings_get_reverse.
func (recv *PrintSettings) GetReverse() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetReverseFunction_Set()
	if err == nil {
		ret = printSettingsGetReverseFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printSettingsGetScaleFunction *gi.Function
var printSettingsGetScaleFunction_Once sync.Once

func printSettingsGetScaleFunction_Set() error {
	var err error
	printSettingsGetScaleFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetScaleFunction, err = printSettingsStruct.InvokerNew("get_scale")
	})
	return err
}

// GetScale is a representation of the C type gtk_print_settings_get_scale.
func (recv *PrintSettings) GetScale() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetScaleFunction_Set()
	if err == nil {
		ret = printSettingsGetScaleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var printSettingsGetUseColorFunction *gi.Function
var printSettingsGetUseColorFunction_Once sync.Once

func printSettingsGetUseColorFunction_Set() error {
	var err error
	printSettingsGetUseColorFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsGetUseColorFunction, err = printSettingsStruct.InvokerNew("get_use_color")
	})
	return err
}

// GetUseColor is a representation of the C type gtk_print_settings_get_use_color.
func (recv *PrintSettings) GetUseColor() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := printSettingsGetUseColorFunction_Set()
	if err == nil {
		ret = printSettingsGetUseColorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printSettingsHasKeyFunction *gi.Function
var printSettingsHasKeyFunction_Once sync.Once

func printSettingsHasKeyFunction_Set() error {
	var err error
	printSettingsHasKeyFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsHasKeyFunction, err = printSettingsStruct.InvokerNew("has_key")
	})
	return err
}

// HasKey is a representation of the C type gtk_print_settings_has_key.
func (recv *PrintSettings) HasKey(key string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	var ret gi.Argument

	err := printSettingsHasKeyFunction_Set()
	if err == nil {
		ret = printSettingsHasKeyFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var printSettingsLoadFileFunction *gi.Function
var printSettingsLoadFileFunction_Once sync.Once

func printSettingsLoadFileFunction_Set() error {
	var err error
	printSettingsLoadFileFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsLoadFileFunction, err = printSettingsStruct.InvokerNew("load_file")
	})
	return err
}

// LoadFile is a representation of the C type gtk_print_settings_load_file.
func (recv *PrintSettings) LoadFile(fileName string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fileName)

	var ret gi.Argument

	err := printSettingsLoadFileFunction_Set()
	if err == nil {
		ret = printSettingsLoadFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_load_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

var printSettingsSetFunction *gi.Function
var printSettingsSetFunction_Once sync.Once

func printSettingsSetFunction_Set() error {
	var err error
	printSettingsSetFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetFunction, err = printSettingsStruct.InvokerNew("set")
	})
	return err
}

// Set is a representation of the C type gtk_print_settings_set.
func (recv *PrintSettings) Set(key string, value string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetString(value)

	err := printSettingsSetFunction_Set()
	if err == nil {
		printSettingsSetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetBoolFunction *gi.Function
var printSettingsSetBoolFunction_Once sync.Once

func printSettingsSetBoolFunction_Set() error {
	var err error
	printSettingsSetBoolFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetBoolFunction, err = printSettingsStruct.InvokerNew("set_bool")
	})
	return err
}

// SetBool is a representation of the C type gtk_print_settings_set_bool.
func (recv *PrintSettings) SetBool(key string, value bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetBoolean(value)

	err := printSettingsSetBoolFunction_Set()
	if err == nil {
		printSettingsSetBoolFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetCollateFunction *gi.Function
var printSettingsSetCollateFunction_Once sync.Once

func printSettingsSetCollateFunction_Set() error {
	var err error
	printSettingsSetCollateFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetCollateFunction, err = printSettingsStruct.InvokerNew("set_collate")
	})
	return err
}

// SetCollate is a representation of the C type gtk_print_settings_set_collate.
func (recv *PrintSettings) SetCollate(collate bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(collate)

	err := printSettingsSetCollateFunction_Set()
	if err == nil {
		printSettingsSetCollateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetDefaultSourceFunction *gi.Function
var printSettingsSetDefaultSourceFunction_Once sync.Once

func printSettingsSetDefaultSourceFunction_Set() error {
	var err error
	printSettingsSetDefaultSourceFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetDefaultSourceFunction, err = printSettingsStruct.InvokerNew("set_default_source")
	})
	return err
}

// SetDefaultSource is a representation of the C type gtk_print_settings_set_default_source.
func (recv *PrintSettings) SetDefaultSource(defaultSource string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(defaultSource)

	err := printSettingsSetDefaultSourceFunction_Set()
	if err == nil {
		printSettingsSetDefaultSourceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetDitherFunction *gi.Function
var printSettingsSetDitherFunction_Once sync.Once

func printSettingsSetDitherFunction_Set() error {
	var err error
	printSettingsSetDitherFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetDitherFunction, err = printSettingsStruct.InvokerNew("set_dither")
	})
	return err
}

// SetDither is a representation of the C type gtk_print_settings_set_dither.
func (recv *PrintSettings) SetDither(dither string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(dither)

	err := printSettingsSetDitherFunction_Set()
	if err == nil {
		printSettingsSetDitherFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetDoubleFunction *gi.Function
var printSettingsSetDoubleFunction_Once sync.Once

func printSettingsSetDoubleFunction_Set() error {
	var err error
	printSettingsSetDoubleFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetDoubleFunction, err = printSettingsStruct.InvokerNew("set_double")
	})
	return err
}

// SetDouble is a representation of the C type gtk_print_settings_set_double.
func (recv *PrintSettings) SetDouble(key string, value float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetFloat64(value)

	err := printSettingsSetDoubleFunction_Set()
	if err == nil {
		printSettingsSetDoubleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_duplex' : parameter 'duplex' of type 'PrintDuplex' not supported

var printSettingsSetFinishingsFunction *gi.Function
var printSettingsSetFinishingsFunction_Once sync.Once

func printSettingsSetFinishingsFunction_Set() error {
	var err error
	printSettingsSetFinishingsFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetFinishingsFunction, err = printSettingsStruct.InvokerNew("set_finishings")
	})
	return err
}

// SetFinishings is a representation of the C type gtk_print_settings_set_finishings.
func (recv *PrintSettings) SetFinishings(finishings string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(finishings)

	err := printSettingsSetFinishingsFunction_Set()
	if err == nil {
		printSettingsSetFinishingsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetIntFunction *gi.Function
var printSettingsSetIntFunction_Once sync.Once

func printSettingsSetIntFunction_Set() error {
	var err error
	printSettingsSetIntFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetIntFunction, err = printSettingsStruct.InvokerNew("set_int")
	})
	return err
}

// SetInt is a representation of the C type gtk_print_settings_set_int.
func (recv *PrintSettings) SetInt(key string, value int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)
	inArgs[2].SetInt32(value)

	err := printSettingsSetIntFunction_Set()
	if err == nil {
		printSettingsSetIntFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_length' : parameter 'unit' of type 'Unit' not supported

var printSettingsSetMediaTypeFunction *gi.Function
var printSettingsSetMediaTypeFunction_Once sync.Once

func printSettingsSetMediaTypeFunction_Set() error {
	var err error
	printSettingsSetMediaTypeFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetMediaTypeFunction, err = printSettingsStruct.InvokerNew("set_media_type")
	})
	return err
}

// SetMediaType is a representation of the C type gtk_print_settings_set_media_type.
func (recv *PrintSettings) SetMediaType(mediaType string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(mediaType)

	err := printSettingsSetMediaTypeFunction_Set()
	if err == nil {
		printSettingsSetMediaTypeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetNCopiesFunction *gi.Function
var printSettingsSetNCopiesFunction_Once sync.Once

func printSettingsSetNCopiesFunction_Set() error {
	var err error
	printSettingsSetNCopiesFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetNCopiesFunction, err = printSettingsStruct.InvokerNew("set_n_copies")
	})
	return err
}

// SetNCopies is a representation of the C type gtk_print_settings_set_n_copies.
func (recv *PrintSettings) SetNCopies(numCopies int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(numCopies)

	err := printSettingsSetNCopiesFunction_Set()
	if err == nil {
		printSettingsSetNCopiesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetNumberUpFunction *gi.Function
var printSettingsSetNumberUpFunction_Once sync.Once

func printSettingsSetNumberUpFunction_Set() error {
	var err error
	printSettingsSetNumberUpFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetNumberUpFunction, err = printSettingsStruct.InvokerNew("set_number_up")
	})
	return err
}

// SetNumberUp is a representation of the C type gtk_print_settings_set_number_up.
func (recv *PrintSettings) SetNumberUp(numberUp int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(numberUp)

	err := printSettingsSetNumberUpFunction_Set()
	if err == nil {
		printSettingsSetNumberUpFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_number_up_layout' : parameter 'number_up_layout' of type 'NumberUpLayout' not supported

// UNSUPPORTED : C value 'gtk_print_settings_set_orientation' : parameter 'orientation' of type 'PageOrientation' not supported

var printSettingsSetOutputBinFunction *gi.Function
var printSettingsSetOutputBinFunction_Once sync.Once

func printSettingsSetOutputBinFunction_Set() error {
	var err error
	printSettingsSetOutputBinFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetOutputBinFunction, err = printSettingsStruct.InvokerNew("set_output_bin")
	})
	return err
}

// SetOutputBin is a representation of the C type gtk_print_settings_set_output_bin.
func (recv *PrintSettings) SetOutputBin(outputBin string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(outputBin)

	err := printSettingsSetOutputBinFunction_Set()
	if err == nil {
		printSettingsSetOutputBinFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_page_ranges' : parameter 'page_ranges' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_print_settings_set_page_set' : parameter 'page_set' of type 'PageSet' not supported

// UNSUPPORTED : C value 'gtk_print_settings_set_paper_height' : parameter 'unit' of type 'Unit' not supported

var printSettingsSetPaperSizeFunction *gi.Function
var printSettingsSetPaperSizeFunction_Once sync.Once

func printSettingsSetPaperSizeFunction_Set() error {
	var err error
	printSettingsSetPaperSizeFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetPaperSizeFunction, err = printSettingsStruct.InvokerNew("set_paper_size")
	})
	return err
}

// SetPaperSize is a representation of the C type gtk_print_settings_set_paper_size.
func (recv *PrintSettings) SetPaperSize(paperSize *PaperSize) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(paperSize.Native)

	err := printSettingsSetPaperSizeFunction_Set()
	if err == nil {
		printSettingsSetPaperSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_paper_width' : parameter 'unit' of type 'Unit' not supported

// UNSUPPORTED : C value 'gtk_print_settings_set_print_pages' : parameter 'pages' of type 'PrintPages' not supported

var printSettingsSetPrinterFunction *gi.Function
var printSettingsSetPrinterFunction_Once sync.Once

func printSettingsSetPrinterFunction_Set() error {
	var err error
	printSettingsSetPrinterFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetPrinterFunction, err = printSettingsStruct.InvokerNew("set_printer")
	})
	return err
}

// SetPrinter is a representation of the C type gtk_print_settings_set_printer.
func (recv *PrintSettings) SetPrinter(printer string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(printer)

	err := printSettingsSetPrinterFunction_Set()
	if err == nil {
		printSettingsSetPrinterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetPrinterLpiFunction *gi.Function
var printSettingsSetPrinterLpiFunction_Once sync.Once

func printSettingsSetPrinterLpiFunction_Set() error {
	var err error
	printSettingsSetPrinterLpiFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetPrinterLpiFunction, err = printSettingsStruct.InvokerNew("set_printer_lpi")
	})
	return err
}

// SetPrinterLpi is a representation of the C type gtk_print_settings_set_printer_lpi.
func (recv *PrintSettings) SetPrinterLpi(lpi float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(lpi)

	err := printSettingsSetPrinterLpiFunction_Set()
	if err == nil {
		printSettingsSetPrinterLpiFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_print_settings_set_quality' : parameter 'quality' of type 'PrintQuality' not supported

var printSettingsSetResolutionFunction *gi.Function
var printSettingsSetResolutionFunction_Once sync.Once

func printSettingsSetResolutionFunction_Set() error {
	var err error
	printSettingsSetResolutionFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetResolutionFunction, err = printSettingsStruct.InvokerNew("set_resolution")
	})
	return err
}

// SetResolution is a representation of the C type gtk_print_settings_set_resolution.
func (recv *PrintSettings) SetResolution(resolution int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(resolution)

	err := printSettingsSetResolutionFunction_Set()
	if err == nil {
		printSettingsSetResolutionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetResolutionXyFunction *gi.Function
var printSettingsSetResolutionXyFunction_Once sync.Once

func printSettingsSetResolutionXyFunction_Set() error {
	var err error
	printSettingsSetResolutionXyFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetResolutionXyFunction, err = printSettingsStruct.InvokerNew("set_resolution_xy")
	})
	return err
}

// SetResolutionXy is a representation of the C type gtk_print_settings_set_resolution_xy.
func (recv *PrintSettings) SetResolutionXy(resolutionX int32, resolutionY int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(resolutionX)
	inArgs[2].SetInt32(resolutionY)

	err := printSettingsSetResolutionXyFunction_Set()
	if err == nil {
		printSettingsSetResolutionXyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetReverseFunction *gi.Function
var printSettingsSetReverseFunction_Once sync.Once

func printSettingsSetReverseFunction_Set() error {
	var err error
	printSettingsSetReverseFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetReverseFunction, err = printSettingsStruct.InvokerNew("set_reverse")
	})
	return err
}

// SetReverse is a representation of the C type gtk_print_settings_set_reverse.
func (recv *PrintSettings) SetReverse(reverse bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reverse)

	err := printSettingsSetReverseFunction_Set()
	if err == nil {
		printSettingsSetReverseFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetScaleFunction *gi.Function
var printSettingsSetScaleFunction_Once sync.Once

func printSettingsSetScaleFunction_Set() error {
	var err error
	printSettingsSetScaleFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetScaleFunction, err = printSettingsStruct.InvokerNew("set_scale")
	})
	return err
}

// SetScale is a representation of the C type gtk_print_settings_set_scale.
func (recv *PrintSettings) SetScale(scale float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(scale)

	err := printSettingsSetScaleFunction_Set()
	if err == nil {
		printSettingsSetScaleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsSetUseColorFunction *gi.Function
var printSettingsSetUseColorFunction_Once sync.Once

func printSettingsSetUseColorFunction_Set() error {
	var err error
	printSettingsSetUseColorFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsSetUseColorFunction, err = printSettingsStruct.InvokerNew("set_use_color")
	})
	return err
}

// SetUseColor is a representation of the C type gtk_print_settings_set_use_color.
func (recv *PrintSettings) SetUseColor(useColor bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useColor)

	err := printSettingsSetUseColorFunction_Set()
	if err == nil {
		printSettingsSetUseColorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var printSettingsToFileFunction *gi.Function
var printSettingsToFileFunction_Once sync.Once

func printSettingsToFileFunction_Set() error {
	var err error
	printSettingsToFileFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsToFileFunction, err = printSettingsStruct.InvokerNew("to_file")
	})
	return err
}

// ToFile is a representation of the C type gtk_print_settings_to_file.
func (recv *PrintSettings) ToFile(fileName string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(fileName)

	var ret gi.Argument

	err := printSettingsToFileFunction_Set()
	if err == nil {
		ret = printSettingsToFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_print_settings_to_gvariant' : return type 'GLib.Variant' not supported

// UNSUPPORTED : C value 'gtk_print_settings_to_key_file' : parameter 'key_file' of type 'GLib.KeyFile' not supported

var printSettingsUnsetFunction *gi.Function
var printSettingsUnsetFunction_Once sync.Once

func printSettingsUnsetFunction_Set() error {
	var err error
	printSettingsUnsetFunction_Once.Do(func() {
		err = printSettingsStruct_Set()
		if err != nil {
			return
		}
		printSettingsUnsetFunction, err = printSettingsStruct.InvokerNew("unset")
	})
	return err
}

// Unset is a representation of the C type gtk_print_settings_unset.
func (recv *PrintSettings) Unset(key string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(key)

	err := printSettingsUnsetFunction_Set()
	if err == nil {
		printSettingsUnsetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarStruct *gi.Struct
var progressBarStruct_Once sync.Once

func progressBarStruct_Set() error {
	var err error
	progressBarStruct_Once.Do(func() {
		progressBarStruct, err = gi.StructNew("Gtk", "ProgressBar")
	})
	return err
}

type ProgressBar struct {
	Widget
}

// FieldParent returns the C field 'parent'.
func (recv *ProgressBar) FieldParent() *Widget {
	argValue := gi.FieldGet(progressBarStruct, recv.Native, "parent")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ProgressBar) SetFieldParent(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(progressBarStruct, recv.Native, "parent", argValue)
}

var progressBarNewFunction *gi.Function
var progressBarNewFunction_Once sync.Once

func progressBarNewFunction_Set() error {
	var err error
	progressBarNewFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarNewFunction, err = progressBarStruct.InvokerNew("new")
	})
	return err
}

// ProgressBarNew is a representation of the C type gtk_progress_bar_new.
func ProgressBarNew() *ProgressBar {

	var ret gi.Argument

	err := progressBarNewFunction_Set()
	if err == nil {
		ret = progressBarNewFunction.Invoke(nil, nil)
	}

	retGo := &ProgressBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_progress_bar_get_ellipsize' : return type 'Pango.EllipsizeMode' not supported

var progressBarGetFractionFunction *gi.Function
var progressBarGetFractionFunction_Once sync.Once

func progressBarGetFractionFunction_Set() error {
	var err error
	progressBarGetFractionFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarGetFractionFunction, err = progressBarStruct.InvokerNew("get_fraction")
	})
	return err
}

// GetFraction is a representation of the C type gtk_progress_bar_get_fraction.
func (recv *ProgressBar) GetFraction() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := progressBarGetFractionFunction_Set()
	if err == nil {
		ret = progressBarGetFractionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var progressBarGetInvertedFunction *gi.Function
var progressBarGetInvertedFunction_Once sync.Once

func progressBarGetInvertedFunction_Set() error {
	var err error
	progressBarGetInvertedFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarGetInvertedFunction, err = progressBarStruct.InvokerNew("get_inverted")
	})
	return err
}

// GetInverted is a representation of the C type gtk_progress_bar_get_inverted.
func (recv *ProgressBar) GetInverted() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := progressBarGetInvertedFunction_Set()
	if err == nil {
		ret = progressBarGetInvertedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var progressBarGetPulseStepFunction *gi.Function
var progressBarGetPulseStepFunction_Once sync.Once

func progressBarGetPulseStepFunction_Set() error {
	var err error
	progressBarGetPulseStepFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarGetPulseStepFunction, err = progressBarStruct.InvokerNew("get_pulse_step")
	})
	return err
}

// GetPulseStep is a representation of the C type gtk_progress_bar_get_pulse_step.
func (recv *ProgressBar) GetPulseStep() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := progressBarGetPulseStepFunction_Set()
	if err == nil {
		ret = progressBarGetPulseStepFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var progressBarGetShowTextFunction *gi.Function
var progressBarGetShowTextFunction_Once sync.Once

func progressBarGetShowTextFunction_Set() error {
	var err error
	progressBarGetShowTextFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarGetShowTextFunction, err = progressBarStruct.InvokerNew("get_show_text")
	})
	return err
}

// GetShowText is a representation of the C type gtk_progress_bar_get_show_text.
func (recv *ProgressBar) GetShowText() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := progressBarGetShowTextFunction_Set()
	if err == nil {
		ret = progressBarGetShowTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var progressBarGetTextFunction *gi.Function
var progressBarGetTextFunction_Once sync.Once

func progressBarGetTextFunction_Set() error {
	var err error
	progressBarGetTextFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarGetTextFunction, err = progressBarStruct.InvokerNew("get_text")
	})
	return err
}

// GetText is a representation of the C type gtk_progress_bar_get_text.
func (recv *ProgressBar) GetText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := progressBarGetTextFunction_Set()
	if err == nil {
		ret = progressBarGetTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var progressBarPulseFunction *gi.Function
var progressBarPulseFunction_Once sync.Once

func progressBarPulseFunction_Set() error {
	var err error
	progressBarPulseFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarPulseFunction, err = progressBarStruct.InvokerNew("pulse")
	})
	return err
}

// Pulse is a representation of the C type gtk_progress_bar_pulse.
func (recv *ProgressBar) Pulse() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := progressBarPulseFunction_Set()
	if err == nil {
		progressBarPulseFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_progress_bar_set_ellipsize' : parameter 'mode' of type 'Pango.EllipsizeMode' not supported

var progressBarSetFractionFunction *gi.Function
var progressBarSetFractionFunction_Once sync.Once

func progressBarSetFractionFunction_Set() error {
	var err error
	progressBarSetFractionFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarSetFractionFunction, err = progressBarStruct.InvokerNew("set_fraction")
	})
	return err
}

// SetFraction is a representation of the C type gtk_progress_bar_set_fraction.
func (recv *ProgressBar) SetFraction(fraction float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(fraction)

	err := progressBarSetFractionFunction_Set()
	if err == nil {
		progressBarSetFractionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarSetInvertedFunction *gi.Function
var progressBarSetInvertedFunction_Once sync.Once

func progressBarSetInvertedFunction_Set() error {
	var err error
	progressBarSetInvertedFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarSetInvertedFunction, err = progressBarStruct.InvokerNew("set_inverted")
	})
	return err
}

// SetInverted is a representation of the C type gtk_progress_bar_set_inverted.
func (recv *ProgressBar) SetInverted(inverted bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(inverted)

	err := progressBarSetInvertedFunction_Set()
	if err == nil {
		progressBarSetInvertedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarSetPulseStepFunction *gi.Function
var progressBarSetPulseStepFunction_Once sync.Once

func progressBarSetPulseStepFunction_Set() error {
	var err error
	progressBarSetPulseStepFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarSetPulseStepFunction, err = progressBarStruct.InvokerNew("set_pulse_step")
	})
	return err
}

// SetPulseStep is a representation of the C type gtk_progress_bar_set_pulse_step.
func (recv *ProgressBar) SetPulseStep(fraction float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(fraction)

	err := progressBarSetPulseStepFunction_Set()
	if err == nil {
		progressBarSetPulseStepFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarSetShowTextFunction *gi.Function
var progressBarSetShowTextFunction_Once sync.Once

func progressBarSetShowTextFunction_Set() error {
	var err error
	progressBarSetShowTextFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarSetShowTextFunction, err = progressBarStruct.InvokerNew("set_show_text")
	})
	return err
}

// SetShowText is a representation of the C type gtk_progress_bar_set_show_text.
func (recv *ProgressBar) SetShowText(showText bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showText)

	err := progressBarSetShowTextFunction_Set()
	if err == nil {
		progressBarSetShowTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarSetTextFunction *gi.Function
var progressBarSetTextFunction_Once sync.Once

func progressBarSetTextFunction_Set() error {
	var err error
	progressBarSetTextFunction_Once.Do(func() {
		err = progressBarStruct_Set()
		if err != nil {
			return
		}
		progressBarSetTextFunction, err = progressBarStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_progress_bar_set_text.
func (recv *ProgressBar) SetText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := progressBarSetTextFunction_Set()
	if err == nil {
		progressBarSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var progressBarAccessibleStruct *gi.Struct
var progressBarAccessibleStruct_Once sync.Once

func progressBarAccessibleStruct_Set() error {
	var err error
	progressBarAccessibleStruct_Once.Do(func() {
		progressBarAccessibleStruct, err = gi.StructNew("Gtk", "ProgressBarAccessible")
	})
	return err
}

type ProgressBarAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ProgressBarAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(progressBarAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ProgressBarAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(progressBarAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ProgressBarAccessible) FieldPriv() *ProgressBarAccessiblePrivate {
	argValue := gi.FieldGet(progressBarAccessibleStruct, recv.Native, "priv")
	value := &ProgressBarAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ProgressBarAccessible) SetFieldPriv(value *ProgressBarAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(progressBarAccessibleStruct, recv.Native, "priv", argValue)
}

// ProgressBarAccessibleStruct creates an uninitialised ProgressBarAccessible.
func ProgressBarAccessibleStruct() *ProgressBarAccessible {
	err := progressBarAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ProgressBarAccessible{}
	structGo.Native = progressBarAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeProgressBarAccessible)
	return structGo
}
func finalizeProgressBarAccessible(obj *ProgressBarAccessible) {
	progressBarAccessibleStruct.Free(obj.Native)
}

var radioActionStruct *gi.Struct
var radioActionStruct_Once sync.Once

func radioActionStruct_Set() error {
	var err error
	radioActionStruct_Once.Do(func() {
		radioActionStruct, err = gi.StructNew("Gtk", "RadioAction")
	})
	return err
}

type RadioAction struct {
	ToggleAction
}

// FieldParent returns the C field 'parent'.
func (recv *RadioAction) FieldParent() *ToggleAction {
	argValue := gi.FieldGet(radioActionStruct, recv.Native, "parent")
	value := &ToggleAction{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RadioAction) SetFieldParent(value *ToggleAction) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioActionStruct, recv.Native, "parent", argValue)
}

var radioActionNewFunction *gi.Function
var radioActionNewFunction_Once sync.Once

func radioActionNewFunction_Set() error {
	var err error
	radioActionNewFunction_Once.Do(func() {
		err = radioActionStruct_Set()
		if err != nil {
			return
		}
		radioActionNewFunction, err = radioActionStruct.InvokerNew("new")
	})
	return err
}

// RadioActionNew is a representation of the C type gtk_radio_action_new.
func RadioActionNew(name string, label string, tooltip string, stockId string, value int32) *RadioAction {
	var inArgs [5]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetString(label)
	inArgs[2].SetString(tooltip)
	inArgs[3].SetString(stockId)
	inArgs[4].SetInt32(value)

	var ret gi.Argument

	err := radioActionNewFunction_Set()
	if err == nil {
		ret = radioActionNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioAction{}
	retGo.Native = ret.Pointer()

	return retGo
}

var radioActionGetCurrentValueFunction *gi.Function
var radioActionGetCurrentValueFunction_Once sync.Once

func radioActionGetCurrentValueFunction_Set() error {
	var err error
	radioActionGetCurrentValueFunction_Once.Do(func() {
		err = radioActionStruct_Set()
		if err != nil {
			return
		}
		radioActionGetCurrentValueFunction, err = radioActionStruct.InvokerNew("get_current_value")
	})
	return err
}

// GetCurrentValue is a representation of the C type gtk_radio_action_get_current_value.
func (recv *RadioAction) GetCurrentValue() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := radioActionGetCurrentValueFunction_Set()
	if err == nil {
		ret = radioActionGetCurrentValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_action_get_group' : return type 'GLib.SList' not supported

var radioActionJoinGroupFunction *gi.Function
var radioActionJoinGroupFunction_Once sync.Once

func radioActionJoinGroupFunction_Set() error {
	var err error
	radioActionJoinGroupFunction_Once.Do(func() {
		err = radioActionStruct_Set()
		if err != nil {
			return
		}
		radioActionJoinGroupFunction, err = radioActionStruct.InvokerNew("join_group")
	})
	return err
}

// JoinGroup is a representation of the C type gtk_radio_action_join_group.
func (recv *RadioAction) JoinGroup(groupSource *RadioAction) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(groupSource.Native)

	err := radioActionJoinGroupFunction_Set()
	if err == nil {
		radioActionJoinGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var radioActionSetCurrentValueFunction *gi.Function
var radioActionSetCurrentValueFunction_Once sync.Once

func radioActionSetCurrentValueFunction_Set() error {
	var err error
	radioActionSetCurrentValueFunction_Once.Do(func() {
		err = radioActionStruct_Set()
		if err != nil {
			return
		}
		radioActionSetCurrentValueFunction, err = radioActionStruct.InvokerNew("set_current_value")
	})
	return err
}

// SetCurrentValue is a representation of the C type gtk_radio_action_set_current_value.
func (recv *RadioAction) SetCurrentValue(currentValue int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(currentValue)

	err := radioActionSetCurrentValueFunction_Set()
	if err == nil {
		radioActionSetCurrentValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_radio_action_set_group' : parameter 'group' of type 'GLib.SList' not supported

var radioButtonStruct *gi.Struct
var radioButtonStruct_Once sync.Once

func radioButtonStruct_Set() error {
	var err error
	radioButtonStruct_Once.Do(func() {
		radioButtonStruct, err = gi.StructNew("Gtk", "RadioButton")
	})
	return err
}

type RadioButton struct {
	CheckButton
}

// FieldCheckButton returns the C field 'check_button'.
func (recv *RadioButton) FieldCheckButton() *CheckButton {
	argValue := gi.FieldGet(radioButtonStruct, recv.Native, "check_button")
	value := &CheckButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldCheckButton sets the value of the C field 'check_button'.
func (recv *RadioButton) SetFieldCheckButton(value *CheckButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioButtonStruct, recv.Native, "check_button", argValue)
}

// UNSUPPORTED : C value 'gtk_radio_button_new' : parameter 'group' of type 'GLib.SList' not supported

var radioButtonNewFromWidgetFunction *gi.Function
var radioButtonNewFromWidgetFunction_Once sync.Once

func radioButtonNewFromWidgetFunction_Set() error {
	var err error
	radioButtonNewFromWidgetFunction_Once.Do(func() {
		err = radioButtonStruct_Set()
		if err != nil {
			return
		}
		radioButtonNewFromWidgetFunction, err = radioButtonStruct.InvokerNew("new_from_widget")
	})
	return err
}

// RadioButtonNewFromWidget is a representation of the C type gtk_radio_button_new_from_widget.
func RadioButtonNewFromWidget(radioGroupMember *RadioButton) *RadioButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(radioGroupMember.Native)

	var ret gi.Argument

	err := radioButtonNewFromWidgetFunction_Set()
	if err == nil {
		ret = radioButtonNewFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_button_new_with_label' : parameter 'group' of type 'GLib.SList' not supported

var radioButtonNewWithLabelFromWidgetFunction *gi.Function
var radioButtonNewWithLabelFromWidgetFunction_Once sync.Once

func radioButtonNewWithLabelFromWidgetFunction_Set() error {
	var err error
	radioButtonNewWithLabelFromWidgetFunction_Once.Do(func() {
		err = radioButtonStruct_Set()
		if err != nil {
			return
		}
		radioButtonNewWithLabelFromWidgetFunction, err = radioButtonStruct.InvokerNew("new_with_label_from_widget")
	})
	return err
}

// RadioButtonNewWithLabelFromWidget is a representation of the C type gtk_radio_button_new_with_label_from_widget.
func RadioButtonNewWithLabelFromWidget(radioGroupMember *RadioButton, label string) *RadioButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(radioGroupMember.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := radioButtonNewWithLabelFromWidgetFunction_Set()
	if err == nil {
		ret = radioButtonNewWithLabelFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_button_new_with_mnemonic' : parameter 'group' of type 'GLib.SList' not supported

var radioButtonNewWithMnemonicFromWidgetFunction *gi.Function
var radioButtonNewWithMnemonicFromWidgetFunction_Once sync.Once

func radioButtonNewWithMnemonicFromWidgetFunction_Set() error {
	var err error
	radioButtonNewWithMnemonicFromWidgetFunction_Once.Do(func() {
		err = radioButtonStruct_Set()
		if err != nil {
			return
		}
		radioButtonNewWithMnemonicFromWidgetFunction, err = radioButtonStruct.InvokerNew("new_with_mnemonic_from_widget")
	})
	return err
}

// RadioButtonNewWithMnemonicFromWidget is a representation of the C type gtk_radio_button_new_with_mnemonic_from_widget.
func RadioButtonNewWithMnemonicFromWidget(radioGroupMember *RadioButton, label string) *RadioButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(radioGroupMember.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := radioButtonNewWithMnemonicFromWidgetFunction_Set()
	if err == nil {
		ret = radioButtonNewWithMnemonicFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_button_get_group' : return type 'GLib.SList' not supported

var radioButtonJoinGroupFunction *gi.Function
var radioButtonJoinGroupFunction_Once sync.Once

func radioButtonJoinGroupFunction_Set() error {
	var err error
	radioButtonJoinGroupFunction_Once.Do(func() {
		err = radioButtonStruct_Set()
		if err != nil {
			return
		}
		radioButtonJoinGroupFunction, err = radioButtonStruct.InvokerNew("join_group")
	})
	return err
}

// JoinGroup is a representation of the C type gtk_radio_button_join_group.
func (recv *RadioButton) JoinGroup(groupSource *RadioButton) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(groupSource.Native)

	err := radioButtonJoinGroupFunction_Set()
	if err == nil {
		radioButtonJoinGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_radio_button_set_group' : parameter 'group' of type 'GLib.SList' not supported

var radioButtonAccessibleStruct *gi.Struct
var radioButtonAccessibleStruct_Once sync.Once

func radioButtonAccessibleStruct_Set() error {
	var err error
	radioButtonAccessibleStruct_Once.Do(func() {
		radioButtonAccessibleStruct, err = gi.StructNew("Gtk", "RadioButtonAccessible")
	})
	return err
}

type RadioButtonAccessible struct {
	ToggleButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *RadioButtonAccessible) FieldParent() *ToggleButtonAccessible {
	argValue := gi.FieldGet(radioButtonAccessibleStruct, recv.Native, "parent")
	value := &ToggleButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RadioButtonAccessible) SetFieldParent(value *ToggleButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *RadioButtonAccessible) FieldPriv() *RadioButtonAccessiblePrivate {
	argValue := gi.FieldGet(radioButtonAccessibleStruct, recv.Native, "priv")
	value := &RadioButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *RadioButtonAccessible) SetFieldPriv(value *RadioButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// RadioButtonAccessibleStruct creates an uninitialised RadioButtonAccessible.
func RadioButtonAccessibleStruct() *RadioButtonAccessible {
	err := radioButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &RadioButtonAccessible{}
	structGo.Native = radioButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeRadioButtonAccessible)
	return structGo
}
func finalizeRadioButtonAccessible(obj *RadioButtonAccessible) {
	radioButtonAccessibleStruct.Free(obj.Native)
}

var radioMenuItemStruct *gi.Struct
var radioMenuItemStruct_Once sync.Once

func radioMenuItemStruct_Set() error {
	var err error
	radioMenuItemStruct_Once.Do(func() {
		radioMenuItemStruct, err = gi.StructNew("Gtk", "RadioMenuItem")
	})
	return err
}

type RadioMenuItem struct {
	CheckMenuItem
}

// FieldCheckMenuItem returns the C field 'check_menu_item'.
func (recv *RadioMenuItem) FieldCheckMenuItem() *CheckMenuItem {
	argValue := gi.FieldGet(radioMenuItemStruct, recv.Native, "check_menu_item")
	value := &CheckMenuItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldCheckMenuItem sets the value of the C field 'check_menu_item'.
func (recv *RadioMenuItem) SetFieldCheckMenuItem(value *CheckMenuItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioMenuItemStruct, recv.Native, "check_menu_item", argValue)
}

// UNSUPPORTED : C value 'gtk_radio_menu_item_new' : parameter 'group' of type 'GLib.SList' not supported

var radioMenuItemNewFromWidgetFunction *gi.Function
var radioMenuItemNewFromWidgetFunction_Once sync.Once

func radioMenuItemNewFromWidgetFunction_Set() error {
	var err error
	radioMenuItemNewFromWidgetFunction_Once.Do(func() {
		err = radioMenuItemStruct_Set()
		if err != nil {
			return
		}
		radioMenuItemNewFromWidgetFunction, err = radioMenuItemStruct.InvokerNew("new_from_widget")
	})
	return err
}

// RadioMenuItemNewFromWidget is a representation of the C type gtk_radio_menu_item_new_from_widget.
func RadioMenuItemNewFromWidget(group *RadioMenuItem) *RadioMenuItem {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(group.Native)

	var ret gi.Argument

	err := radioMenuItemNewFromWidgetFunction_Set()
	if err == nil {
		ret = radioMenuItemNewFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_menu_item_new_with_label' : parameter 'group' of type 'GLib.SList' not supported

var radioMenuItemNewWithLabelFromWidgetFunction *gi.Function
var radioMenuItemNewWithLabelFromWidgetFunction_Once sync.Once

func radioMenuItemNewWithLabelFromWidgetFunction_Set() error {
	var err error
	radioMenuItemNewWithLabelFromWidgetFunction_Once.Do(func() {
		err = radioMenuItemStruct_Set()
		if err != nil {
			return
		}
		radioMenuItemNewWithLabelFromWidgetFunction, err = radioMenuItemStruct.InvokerNew("new_with_label_from_widget")
	})
	return err
}

// RadioMenuItemNewWithLabelFromWidget is a representation of the C type gtk_radio_menu_item_new_with_label_from_widget.
func RadioMenuItemNewWithLabelFromWidget(group *RadioMenuItem, label string) *RadioMenuItem {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(group.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := radioMenuItemNewWithLabelFromWidgetFunction_Set()
	if err == nil {
		ret = radioMenuItemNewWithLabelFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_menu_item_new_with_mnemonic' : parameter 'group' of type 'GLib.SList' not supported

var radioMenuItemNewWithMnemonicFromWidgetFunction *gi.Function
var radioMenuItemNewWithMnemonicFromWidgetFunction_Once sync.Once

func radioMenuItemNewWithMnemonicFromWidgetFunction_Set() error {
	var err error
	radioMenuItemNewWithMnemonicFromWidgetFunction_Once.Do(func() {
		err = radioMenuItemStruct_Set()
		if err != nil {
			return
		}
		radioMenuItemNewWithMnemonicFromWidgetFunction, err = radioMenuItemStruct.InvokerNew("new_with_mnemonic_from_widget")
	})
	return err
}

// RadioMenuItemNewWithMnemonicFromWidget is a representation of the C type gtk_radio_menu_item_new_with_mnemonic_from_widget.
func RadioMenuItemNewWithMnemonicFromWidget(group *RadioMenuItem, label string) *RadioMenuItem {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(group.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := radioMenuItemNewWithMnemonicFromWidgetFunction_Set()
	if err == nil {
		ret = radioMenuItemNewWithMnemonicFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_menu_item_get_group' : return type 'GLib.SList' not supported

var radioMenuItemJoinGroupFunction *gi.Function
var radioMenuItemJoinGroupFunction_Once sync.Once

func radioMenuItemJoinGroupFunction_Set() error {
	var err error
	radioMenuItemJoinGroupFunction_Once.Do(func() {
		err = radioMenuItemStruct_Set()
		if err != nil {
			return
		}
		radioMenuItemJoinGroupFunction, err = radioMenuItemStruct.InvokerNew("join_group")
	})
	return err
}

// JoinGroup is a representation of the C type gtk_radio_menu_item_join_group.
func (recv *RadioMenuItem) JoinGroup(groupSource *RadioMenuItem) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(groupSource.Native)

	err := radioMenuItemJoinGroupFunction_Set()
	if err == nil {
		radioMenuItemJoinGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_radio_menu_item_set_group' : parameter 'group' of type 'GLib.SList' not supported

var radioMenuItemAccessibleStruct *gi.Struct
var radioMenuItemAccessibleStruct_Once sync.Once

func radioMenuItemAccessibleStruct_Set() error {
	var err error
	radioMenuItemAccessibleStruct_Once.Do(func() {
		radioMenuItemAccessibleStruct, err = gi.StructNew("Gtk", "RadioMenuItemAccessible")
	})
	return err
}

type RadioMenuItemAccessible struct {
	CheckMenuItemAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *RadioMenuItemAccessible) FieldParent() *CheckMenuItemAccessible {
	argValue := gi.FieldGet(radioMenuItemAccessibleStruct, recv.Native, "parent")
	value := &CheckMenuItemAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RadioMenuItemAccessible) SetFieldParent(value *CheckMenuItemAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioMenuItemAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *RadioMenuItemAccessible) FieldPriv() *RadioMenuItemAccessiblePrivate {
	argValue := gi.FieldGet(radioMenuItemAccessibleStruct, recv.Native, "priv")
	value := &RadioMenuItemAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *RadioMenuItemAccessible) SetFieldPriv(value *RadioMenuItemAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioMenuItemAccessibleStruct, recv.Native, "priv", argValue)
}

// RadioMenuItemAccessibleStruct creates an uninitialised RadioMenuItemAccessible.
func RadioMenuItemAccessibleStruct() *RadioMenuItemAccessible {
	err := radioMenuItemAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &RadioMenuItemAccessible{}
	structGo.Native = radioMenuItemAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeRadioMenuItemAccessible)
	return structGo
}
func finalizeRadioMenuItemAccessible(obj *RadioMenuItemAccessible) {
	radioMenuItemAccessibleStruct.Free(obj.Native)
}

var radioToolButtonStruct *gi.Struct
var radioToolButtonStruct_Once sync.Once

func radioToolButtonStruct_Set() error {
	var err error
	radioToolButtonStruct_Once.Do(func() {
		radioToolButtonStruct, err = gi.StructNew("Gtk", "RadioToolButton")
	})
	return err
}

type RadioToolButton struct {
	ToggleToolButton
}

// FieldParent returns the C field 'parent'.
func (recv *RadioToolButton) FieldParent() *ToggleToolButton {
	argValue := gi.FieldGet(radioToolButtonStruct, recv.Native, "parent")
	value := &ToggleToolButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RadioToolButton) SetFieldParent(value *ToggleToolButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(radioToolButtonStruct, recv.Native, "parent", argValue)
}

// UNSUPPORTED : C value 'gtk_radio_tool_button_new' : parameter 'group' of type 'GLib.SList' not supported

// UNSUPPORTED : C value 'gtk_radio_tool_button_new_from_stock' : parameter 'group' of type 'GLib.SList' not supported

var radioToolButtonNewFromWidgetFunction *gi.Function
var radioToolButtonNewFromWidgetFunction_Once sync.Once

func radioToolButtonNewFromWidgetFunction_Set() error {
	var err error
	radioToolButtonNewFromWidgetFunction_Once.Do(func() {
		err = radioToolButtonStruct_Set()
		if err != nil {
			return
		}
		radioToolButtonNewFromWidgetFunction, err = radioToolButtonStruct.InvokerNew("new_from_widget")
	})
	return err
}

// RadioToolButtonNewFromWidget is a representation of the C type gtk_radio_tool_button_new_from_widget.
func RadioToolButtonNewFromWidget(group *RadioToolButton) *RadioToolButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(group.Native)

	var ret gi.Argument

	err := radioToolButtonNewFromWidgetFunction_Set()
	if err == nil {
		ret = radioToolButtonNewFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var radioToolButtonNewWithStockFromWidgetFunction *gi.Function
var radioToolButtonNewWithStockFromWidgetFunction_Once sync.Once

func radioToolButtonNewWithStockFromWidgetFunction_Set() error {
	var err error
	radioToolButtonNewWithStockFromWidgetFunction_Once.Do(func() {
		err = radioToolButtonStruct_Set()
		if err != nil {
			return
		}
		radioToolButtonNewWithStockFromWidgetFunction, err = radioToolButtonStruct.InvokerNew("new_with_stock_from_widget")
	})
	return err
}

// RadioToolButtonNewWithStockFromWidget is a representation of the C type gtk_radio_tool_button_new_with_stock_from_widget.
func RadioToolButtonNewWithStockFromWidget(group *RadioToolButton, stockId string) *RadioToolButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(group.Native)
	inArgs[1].SetString(stockId)

	var ret gi.Argument

	err := radioToolButtonNewWithStockFromWidgetFunction_Set()
	if err == nil {
		ret = radioToolButtonNewWithStockFromWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RadioToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_radio_tool_button_get_group' : return type 'GLib.SList' not supported

// UNSUPPORTED : C value 'gtk_radio_tool_button_set_group' : parameter 'group' of type 'GLib.SList' not supported

var rangeStruct *gi.Struct
var rangeStruct_Once sync.Once

func rangeStruct_Set() error {
	var err error
	rangeStruct_Once.Do(func() {
		rangeStruct, err = gi.StructNew("Gtk", "Range")
	})
	return err
}

type Range struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Range) FieldWidget() *Widget {
	argValue := gi.FieldGet(rangeStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Range) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rangeStruct, recv.Native, "widget", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Range) FieldPriv() *RangePrivate {
	argValue := gi.FieldGet(rangeStruct, recv.Native, "priv")
	value := &RangePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Range) SetFieldPriv(value *RangePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rangeStruct, recv.Native, "priv", argValue)
}

var rangeGetAdjustmentFunction *gi.Function
var rangeGetAdjustmentFunction_Once sync.Once

func rangeGetAdjustmentFunction_Set() error {
	var err error
	rangeGetAdjustmentFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetAdjustmentFunction, err = rangeStruct.InvokerNew("get_adjustment")
	})
	return err
}

// GetAdjustment is a representation of the C type gtk_range_get_adjustment.
func (recv *Range) GetAdjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetAdjustmentFunction_Set()
	if err == nil {
		ret = rangeGetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var rangeGetFillLevelFunction *gi.Function
var rangeGetFillLevelFunction_Once sync.Once

func rangeGetFillLevelFunction_Set() error {
	var err error
	rangeGetFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetFillLevelFunction, err = rangeStruct.InvokerNew("get_fill_level")
	})
	return err
}

// GetFillLevel is a representation of the C type gtk_range_get_fill_level.
func (recv *Range) GetFillLevel() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetFillLevelFunction_Set()
	if err == nil {
		ret = rangeGetFillLevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var rangeGetFlippableFunction *gi.Function
var rangeGetFlippableFunction_Once sync.Once

func rangeGetFlippableFunction_Set() error {
	var err error
	rangeGetFlippableFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetFlippableFunction, err = rangeStruct.InvokerNew("get_flippable")
	})
	return err
}

// GetFlippable is a representation of the C type gtk_range_get_flippable.
func (recv *Range) GetFlippable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetFlippableFunction_Set()
	if err == nil {
		ret = rangeGetFlippableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var rangeGetInvertedFunction *gi.Function
var rangeGetInvertedFunction_Once sync.Once

func rangeGetInvertedFunction_Set() error {
	var err error
	rangeGetInvertedFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetInvertedFunction, err = rangeStruct.InvokerNew("get_inverted")
	})
	return err
}

// GetInverted is a representation of the C type gtk_range_get_inverted.
func (recv *Range) GetInverted() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetInvertedFunction_Set()
	if err == nil {
		ret = rangeGetInvertedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_range_get_lower_stepper_sensitivity' : return type 'SensitivityType' not supported

var rangeGetMinSliderSizeFunction *gi.Function
var rangeGetMinSliderSizeFunction_Once sync.Once

func rangeGetMinSliderSizeFunction_Set() error {
	var err error
	rangeGetMinSliderSizeFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetMinSliderSizeFunction, err = rangeStruct.InvokerNew("get_min_slider_size")
	})
	return err
}

// GetMinSliderSize is a representation of the C type gtk_range_get_min_slider_size.
func (recv *Range) GetMinSliderSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetMinSliderSizeFunction_Set()
	if err == nil {
		ret = rangeGetMinSliderSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_range_get_range_rect' : parameter 'range_rect' of type 'Gdk.Rectangle' not supported

var rangeGetRestrictToFillLevelFunction *gi.Function
var rangeGetRestrictToFillLevelFunction_Once sync.Once

func rangeGetRestrictToFillLevelFunction_Set() error {
	var err error
	rangeGetRestrictToFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetRestrictToFillLevelFunction, err = rangeStruct.InvokerNew("get_restrict_to_fill_level")
	})
	return err
}

// GetRestrictToFillLevel is a representation of the C type gtk_range_get_restrict_to_fill_level.
func (recv *Range) GetRestrictToFillLevel() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetRestrictToFillLevelFunction_Set()
	if err == nil {
		ret = rangeGetRestrictToFillLevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var rangeGetRoundDigitsFunction *gi.Function
var rangeGetRoundDigitsFunction_Once sync.Once

func rangeGetRoundDigitsFunction_Set() error {
	var err error
	rangeGetRoundDigitsFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetRoundDigitsFunction, err = rangeStruct.InvokerNew("get_round_digits")
	})
	return err
}

// GetRoundDigits is a representation of the C type gtk_range_get_round_digits.
func (recv *Range) GetRoundDigits() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetRoundDigitsFunction_Set()
	if err == nil {
		ret = rangeGetRoundDigitsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var rangeGetShowFillLevelFunction *gi.Function
var rangeGetShowFillLevelFunction_Once sync.Once

func rangeGetShowFillLevelFunction_Set() error {
	var err error
	rangeGetShowFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetShowFillLevelFunction, err = rangeStruct.InvokerNew("get_show_fill_level")
	})
	return err
}

// GetShowFillLevel is a representation of the C type gtk_range_get_show_fill_level.
func (recv *Range) GetShowFillLevel() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetShowFillLevelFunction_Set()
	if err == nil {
		ret = rangeGetShowFillLevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var rangeGetSliderRangeFunction *gi.Function
var rangeGetSliderRangeFunction_Once sync.Once

func rangeGetSliderRangeFunction_Set() error {
	var err error
	rangeGetSliderRangeFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetSliderRangeFunction, err = rangeStruct.InvokerNew("get_slider_range")
	})
	return err
}

// GetSliderRange is a representation of the C type gtk_range_get_slider_range.
func (recv *Range) GetSliderRange() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := rangeGetSliderRangeFunction_Set()
	if err == nil {
		rangeGetSliderRangeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var rangeGetSliderSizeFixedFunction *gi.Function
var rangeGetSliderSizeFixedFunction_Once sync.Once

func rangeGetSliderSizeFixedFunction_Set() error {
	var err error
	rangeGetSliderSizeFixedFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetSliderSizeFixedFunction, err = rangeStruct.InvokerNew("get_slider_size_fixed")
	})
	return err
}

// GetSliderSizeFixed is a representation of the C type gtk_range_get_slider_size_fixed.
func (recv *Range) GetSliderSizeFixed() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetSliderSizeFixedFunction_Set()
	if err == nil {
		ret = rangeGetSliderSizeFixedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_range_get_upper_stepper_sensitivity' : return type 'SensitivityType' not supported

var rangeGetValueFunction *gi.Function
var rangeGetValueFunction_Once sync.Once

func rangeGetValueFunction_Set() error {
	var err error
	rangeGetValueFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeGetValueFunction, err = rangeStruct.InvokerNew("get_value")
	})
	return err
}

// GetValue is a representation of the C type gtk_range_get_value.
func (recv *Range) GetValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rangeGetValueFunction_Set()
	if err == nil {
		ret = rangeGetValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var rangeSetAdjustmentFunction *gi.Function
var rangeSetAdjustmentFunction_Once sync.Once

func rangeSetAdjustmentFunction_Set() error {
	var err error
	rangeSetAdjustmentFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetAdjustmentFunction, err = rangeStruct.InvokerNew("set_adjustment")
	})
	return err
}

// SetAdjustment is a representation of the C type gtk_range_set_adjustment.
func (recv *Range) SetAdjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := rangeSetAdjustmentFunction_Set()
	if err == nil {
		rangeSetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetFillLevelFunction *gi.Function
var rangeSetFillLevelFunction_Once sync.Once

func rangeSetFillLevelFunction_Set() error {
	var err error
	rangeSetFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetFillLevelFunction, err = rangeStruct.InvokerNew("set_fill_level")
	})
	return err
}

// SetFillLevel is a representation of the C type gtk_range_set_fill_level.
func (recv *Range) SetFillLevel(fillLevel float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(fillLevel)

	err := rangeSetFillLevelFunction_Set()
	if err == nil {
		rangeSetFillLevelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetFlippableFunction *gi.Function
var rangeSetFlippableFunction_Once sync.Once

func rangeSetFlippableFunction_Set() error {
	var err error
	rangeSetFlippableFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetFlippableFunction, err = rangeStruct.InvokerNew("set_flippable")
	})
	return err
}

// SetFlippable is a representation of the C type gtk_range_set_flippable.
func (recv *Range) SetFlippable(flippable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(flippable)

	err := rangeSetFlippableFunction_Set()
	if err == nil {
		rangeSetFlippableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetIncrementsFunction *gi.Function
var rangeSetIncrementsFunction_Once sync.Once

func rangeSetIncrementsFunction_Set() error {
	var err error
	rangeSetIncrementsFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetIncrementsFunction, err = rangeStruct.InvokerNew("set_increments")
	})
	return err
}

// SetIncrements is a representation of the C type gtk_range_set_increments.
func (recv *Range) SetIncrements(step float64, page float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(step)
	inArgs[2].SetFloat64(page)

	err := rangeSetIncrementsFunction_Set()
	if err == nil {
		rangeSetIncrementsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetInvertedFunction *gi.Function
var rangeSetInvertedFunction_Once sync.Once

func rangeSetInvertedFunction_Set() error {
	var err error
	rangeSetInvertedFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetInvertedFunction, err = rangeStruct.InvokerNew("set_inverted")
	})
	return err
}

// SetInverted is a representation of the C type gtk_range_set_inverted.
func (recv *Range) SetInverted(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := rangeSetInvertedFunction_Set()
	if err == nil {
		rangeSetInvertedFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_range_set_lower_stepper_sensitivity' : parameter 'sensitivity' of type 'SensitivityType' not supported

var rangeSetMinSliderSizeFunction *gi.Function
var rangeSetMinSliderSizeFunction_Once sync.Once

func rangeSetMinSliderSizeFunction_Set() error {
	var err error
	rangeSetMinSliderSizeFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetMinSliderSizeFunction, err = rangeStruct.InvokerNew("set_min_slider_size")
	})
	return err
}

// SetMinSliderSize is a representation of the C type gtk_range_set_min_slider_size.
func (recv *Range) SetMinSliderSize(minSize int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(minSize)

	err := rangeSetMinSliderSizeFunction_Set()
	if err == nil {
		rangeSetMinSliderSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetRangeFunction *gi.Function
var rangeSetRangeFunction_Once sync.Once

func rangeSetRangeFunction_Set() error {
	var err error
	rangeSetRangeFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetRangeFunction, err = rangeStruct.InvokerNew("set_range")
	})
	return err
}

// SetRange is a representation of the C type gtk_range_set_range.
func (recv *Range) SetRange(min float64, max float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(min)
	inArgs[2].SetFloat64(max)

	err := rangeSetRangeFunction_Set()
	if err == nil {
		rangeSetRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetRestrictToFillLevelFunction *gi.Function
var rangeSetRestrictToFillLevelFunction_Once sync.Once

func rangeSetRestrictToFillLevelFunction_Set() error {
	var err error
	rangeSetRestrictToFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetRestrictToFillLevelFunction, err = rangeStruct.InvokerNew("set_restrict_to_fill_level")
	})
	return err
}

// SetRestrictToFillLevel is a representation of the C type gtk_range_set_restrict_to_fill_level.
func (recv *Range) SetRestrictToFillLevel(restrictToFillLevel bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(restrictToFillLevel)

	err := rangeSetRestrictToFillLevelFunction_Set()
	if err == nil {
		rangeSetRestrictToFillLevelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetRoundDigitsFunction *gi.Function
var rangeSetRoundDigitsFunction_Once sync.Once

func rangeSetRoundDigitsFunction_Set() error {
	var err error
	rangeSetRoundDigitsFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetRoundDigitsFunction, err = rangeStruct.InvokerNew("set_round_digits")
	})
	return err
}

// SetRoundDigits is a representation of the C type gtk_range_set_round_digits.
func (recv *Range) SetRoundDigits(roundDigits int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(roundDigits)

	err := rangeSetRoundDigitsFunction_Set()
	if err == nil {
		rangeSetRoundDigitsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetShowFillLevelFunction *gi.Function
var rangeSetShowFillLevelFunction_Once sync.Once

func rangeSetShowFillLevelFunction_Set() error {
	var err error
	rangeSetShowFillLevelFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetShowFillLevelFunction, err = rangeStruct.InvokerNew("set_show_fill_level")
	})
	return err
}

// SetShowFillLevel is a representation of the C type gtk_range_set_show_fill_level.
func (recv *Range) SetShowFillLevel(showFillLevel bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showFillLevel)

	err := rangeSetShowFillLevelFunction_Set()
	if err == nil {
		rangeSetShowFillLevelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var rangeSetSliderSizeFixedFunction *gi.Function
var rangeSetSliderSizeFixedFunction_Once sync.Once

func rangeSetSliderSizeFixedFunction_Set() error {
	var err error
	rangeSetSliderSizeFixedFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetSliderSizeFixedFunction, err = rangeStruct.InvokerNew("set_slider_size_fixed")
	})
	return err
}

// SetSliderSizeFixed is a representation of the C type gtk_range_set_slider_size_fixed.
func (recv *Range) SetSliderSizeFixed(sizeFixed bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sizeFixed)

	err := rangeSetSliderSizeFixedFunction_Set()
	if err == nil {
		rangeSetSliderSizeFixedFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_range_set_upper_stepper_sensitivity' : parameter 'sensitivity' of type 'SensitivityType' not supported

var rangeSetValueFunction *gi.Function
var rangeSetValueFunction_Once sync.Once

func rangeSetValueFunction_Set() error {
	var err error
	rangeSetValueFunction_Once.Do(func() {
		err = rangeStruct_Set()
		if err != nil {
			return
		}
		rangeSetValueFunction, err = rangeStruct.InvokerNew("set_value")
	})
	return err
}

// SetValue is a representation of the C type gtk_range_set_value.
func (recv *Range) SetValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := rangeSetValueFunction_Set()
	if err == nil {
		rangeSetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

// RangeStruct creates an uninitialised Range.
func RangeStruct() *Range {
	err := rangeStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Range{}
	structGo.Native = rangeStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeRange)
	return structGo
}
func finalizeRange(obj *Range) {
	rangeStruct.Free(obj.Native)
}

var rangeAccessibleStruct *gi.Struct
var rangeAccessibleStruct_Once sync.Once

func rangeAccessibleStruct_Set() error {
	var err error
	rangeAccessibleStruct_Once.Do(func() {
		rangeAccessibleStruct, err = gi.StructNew("Gtk", "RangeAccessible")
	})
	return err
}

type RangeAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *RangeAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(rangeAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RangeAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rangeAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *RangeAccessible) FieldPriv() *RangeAccessiblePrivate {
	argValue := gi.FieldGet(rangeAccessibleStruct, recv.Native, "priv")
	value := &RangeAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *RangeAccessible) SetFieldPriv(value *RangeAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rangeAccessibleStruct, recv.Native, "priv", argValue)
}

// RangeAccessibleStruct creates an uninitialised RangeAccessible.
func RangeAccessibleStruct() *RangeAccessible {
	err := rangeAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &RangeAccessible{}
	structGo.Native = rangeAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeRangeAccessible)
	return structGo
}
func finalizeRangeAccessible(obj *RangeAccessible) {
	rangeAccessibleStruct.Free(obj.Native)
}

var rcStyleStruct *gi.Struct
var rcStyleStruct_Once sync.Once

func rcStyleStruct_Set() error {
	var err error
	rcStyleStruct_Once.Do(func() {
		rcStyleStruct, err = gi.StructNew("Gtk", "RcStyle")
	})
	return err
}

type RcStyle struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldName returns the C field 'name'.
func (recv *RcStyle) FieldName() string {
	argValue := gi.FieldGet(rcStyleStruct, recv.Native, "name")
	value := argValue.String(false)
	return value
}

// SetFieldName sets the value of the C field 'name'.
func (recv *RcStyle) SetFieldName(value string) {
	var argValue gi.Argument
	argValue.SetString(value)
	gi.FieldSet(rcStyleStruct, recv.Native, "name", argValue)
}

// UNSUPPORTED : C value 'bg_pixmap_name' : for field getter : missing Type

// UNSUPPORTED : C value 'bg_pixmap_name' : for field setter : missing Type

// UNSUPPORTED : C value 'font_desc' : for field getter : no Go type for 'Pango.FontDescription'

// UNSUPPORTED : C value 'font_desc' : for field setter : no Go type for 'Pango.FontDescription'

// UNSUPPORTED : C value 'color_flags' : for field getter : missing Type

// UNSUPPORTED : C value 'color_flags' : for field setter : missing Type

// UNSUPPORTED : C value 'fg' : for field getter : missing Type

// UNSUPPORTED : C value 'fg' : for field setter : missing Type

// UNSUPPORTED : C value 'bg' : for field getter : missing Type

// UNSUPPORTED : C value 'bg' : for field setter : missing Type

// UNSUPPORTED : C value 'text' : for field getter : missing Type

// UNSUPPORTED : C value 'text' : for field setter : missing Type

// UNSUPPORTED : C value 'base' : for field getter : missing Type

// UNSUPPORTED : C value 'base' : for field setter : missing Type

// FieldXthickness returns the C field 'xthickness'.
func (recv *RcStyle) FieldXthickness() int32 {
	argValue := gi.FieldGet(rcStyleStruct, recv.Native, "xthickness")
	value := argValue.Int32()
	return value
}

// SetFieldXthickness sets the value of the C field 'xthickness'.
func (recv *RcStyle) SetFieldXthickness(value int32) {
	var argValue gi.Argument
	argValue.SetInt32(value)
	gi.FieldSet(rcStyleStruct, recv.Native, "xthickness", argValue)
}

// FieldYthickness returns the C field 'ythickness'.
func (recv *RcStyle) FieldYthickness() int32 {
	argValue := gi.FieldGet(rcStyleStruct, recv.Native, "ythickness")
	value := argValue.Int32()
	return value
}

// SetFieldYthickness sets the value of the C field 'ythickness'.
func (recv *RcStyle) SetFieldYthickness(value int32) {
	var argValue gi.Argument
	argValue.SetInt32(value)
	gi.FieldSet(rcStyleStruct, recv.Native, "ythickness", argValue)
}

var rcStyleNewFunction *gi.Function
var rcStyleNewFunction_Once sync.Once

func rcStyleNewFunction_Set() error {
	var err error
	rcStyleNewFunction_Once.Do(func() {
		err = rcStyleStruct_Set()
		if err != nil {
			return
		}
		rcStyleNewFunction, err = rcStyleStruct.InvokerNew("new")
	})
	return err
}

// RcStyleNew is a representation of the C type gtk_rc_style_new.
func RcStyleNew() *RcStyle {

	var ret gi.Argument

	err := rcStyleNewFunction_Set()
	if err == nil {
		ret = rcStyleNewFunction.Invoke(nil, nil)
	}

	retGo := &RcStyle{}
	retGo.Native = ret.Pointer()

	return retGo
}

var rcStyleCopyFunction *gi.Function
var rcStyleCopyFunction_Once sync.Once

func rcStyleCopyFunction_Set() error {
	var err error
	rcStyleCopyFunction_Once.Do(func() {
		err = rcStyleStruct_Set()
		if err != nil {
			return
		}
		rcStyleCopyFunction, err = rcStyleStruct.InvokerNew("copy")
	})
	return err
}

// Copy is a representation of the C type gtk_rc_style_copy.
func (recv *RcStyle) Copy() *RcStyle {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := rcStyleCopyFunction_Set()
	if err == nil {
		ret = rcStyleCopyFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RcStyle{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentActionStruct *gi.Struct
var recentActionStruct_Once sync.Once

func recentActionStruct_Set() error {
	var err error
	recentActionStruct_Once.Do(func() {
		recentActionStruct, err = gi.StructNew("Gtk", "RecentAction")
	})
	return err
}

type RecentAction struct {
	Action
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *RecentAction) FieldParentInstance() *Action {
	argValue := gi.FieldGet(recentActionStruct, recv.Native, "parent_instance")
	value := &Action{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *RecentAction) SetFieldParentInstance(value *Action) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(recentActionStruct, recv.Native, "parent_instance", argValue)
}

var recentActionNewFunction *gi.Function
var recentActionNewFunction_Once sync.Once

func recentActionNewFunction_Set() error {
	var err error
	recentActionNewFunction_Once.Do(func() {
		err = recentActionStruct_Set()
		if err != nil {
			return
		}
		recentActionNewFunction, err = recentActionStruct.InvokerNew("new")
	})
	return err
}

// RecentActionNew is a representation of the C type gtk_recent_action_new.
func RecentActionNew(name string, label string, tooltip string, stockId string) *RecentAction {
	var inArgs [4]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetString(label)
	inArgs[2].SetString(tooltip)
	inArgs[3].SetString(stockId)

	var ret gi.Argument

	err := recentActionNewFunction_Set()
	if err == nil {
		ret = recentActionNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RecentAction{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentActionNewForManagerFunction *gi.Function
var recentActionNewForManagerFunction_Once sync.Once

func recentActionNewForManagerFunction_Set() error {
	var err error
	recentActionNewForManagerFunction_Once.Do(func() {
		err = recentActionStruct_Set()
		if err != nil {
			return
		}
		recentActionNewForManagerFunction, err = recentActionStruct.InvokerNew("new_for_manager")
	})
	return err
}

// RecentActionNewForManager is a representation of the C type gtk_recent_action_new_for_manager.
func RecentActionNewForManager(name string, label string, tooltip string, stockId string, manager *RecentManager) *RecentAction {
	var inArgs [5]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetString(label)
	inArgs[2].SetString(tooltip)
	inArgs[3].SetString(stockId)
	inArgs[4].SetPointer(manager.Native)

	var ret gi.Argument

	err := recentActionNewForManagerFunction_Set()
	if err == nil {
		ret = recentActionNewForManagerFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RecentAction{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentActionGetShowNumbersFunction *gi.Function
var recentActionGetShowNumbersFunction_Once sync.Once

func recentActionGetShowNumbersFunction_Set() error {
	var err error
	recentActionGetShowNumbersFunction_Once.Do(func() {
		err = recentActionStruct_Set()
		if err != nil {
			return
		}
		recentActionGetShowNumbersFunction, err = recentActionStruct.InvokerNew("get_show_numbers")
	})
	return err
}

// GetShowNumbers is a representation of the C type gtk_recent_action_get_show_numbers.
func (recv *RecentAction) GetShowNumbers() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := recentActionGetShowNumbersFunction_Set()
	if err == nil {
		ret = recentActionGetShowNumbersFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentActionSetShowNumbersFunction *gi.Function
var recentActionSetShowNumbersFunction_Once sync.Once

func recentActionSetShowNumbersFunction_Set() error {
	var err error
	recentActionSetShowNumbersFunction_Once.Do(func() {
		err = recentActionStruct_Set()
		if err != nil {
			return
		}
		recentActionSetShowNumbersFunction, err = recentActionStruct.InvokerNew("set_show_numbers")
	})
	return err
}

// SetShowNumbers is a representation of the C type gtk_recent_action_set_show_numbers.
func (recv *RecentAction) SetShowNumbers(showNumbers bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showNumbers)

	err := recentActionSetShowNumbersFunction_Set()
	if err == nil {
		recentActionSetShowNumbersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentChooserDialogStruct *gi.Struct
var recentChooserDialogStruct_Once sync.Once

func recentChooserDialogStruct_Set() error {
	var err error
	recentChooserDialogStruct_Once.Do(func() {
		recentChooserDialogStruct, err = gi.StructNew("Gtk", "RecentChooserDialog")
	})
	return err
}

type RecentChooserDialog struct {
	Dialog
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *RecentChooserDialog) FieldParentInstance() *Dialog {
	argValue := gi.FieldGet(recentChooserDialogStruct, recv.Native, "parent_instance")
	value := &Dialog{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *RecentChooserDialog) SetFieldParentInstance(value *Dialog) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(recentChooserDialogStruct, recv.Native, "parent_instance", argValue)
}

// UNSUPPORTED : C value 'gtk_recent_chooser_dialog_new' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_recent_chooser_dialog_new_for_manager' : parameter '...' of type 'nil' not supported

var recentChooserMenuStruct *gi.Struct
var recentChooserMenuStruct_Once sync.Once

func recentChooserMenuStruct_Set() error {
	var err error
	recentChooserMenuStruct_Once.Do(func() {
		recentChooserMenuStruct, err = gi.StructNew("Gtk", "RecentChooserMenu")
	})
	return err
}

type RecentChooserMenu struct {
	Menu
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *RecentChooserMenu) FieldParentInstance() *Menu {
	argValue := gi.FieldGet(recentChooserMenuStruct, recv.Native, "parent_instance")
	value := &Menu{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *RecentChooserMenu) SetFieldParentInstance(value *Menu) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(recentChooserMenuStruct, recv.Native, "parent_instance", argValue)
}

var recentChooserMenuNewFunction *gi.Function
var recentChooserMenuNewFunction_Once sync.Once

func recentChooserMenuNewFunction_Set() error {
	var err error
	recentChooserMenuNewFunction_Once.Do(func() {
		err = recentChooserMenuStruct_Set()
		if err != nil {
			return
		}
		recentChooserMenuNewFunction, err = recentChooserMenuStruct.InvokerNew("new")
	})
	return err
}

// RecentChooserMenuNew is a representation of the C type gtk_recent_chooser_menu_new.
func RecentChooserMenuNew() *RecentChooserMenu {

	var ret gi.Argument

	err := recentChooserMenuNewFunction_Set()
	if err == nil {
		ret = recentChooserMenuNewFunction.Invoke(nil, nil)
	}

	retGo := &RecentChooserMenu{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentChooserMenuNewForManagerFunction *gi.Function
var recentChooserMenuNewForManagerFunction_Once sync.Once

func recentChooserMenuNewForManagerFunction_Set() error {
	var err error
	recentChooserMenuNewForManagerFunction_Once.Do(func() {
		err = recentChooserMenuStruct_Set()
		if err != nil {
			return
		}
		recentChooserMenuNewForManagerFunction, err = recentChooserMenuStruct.InvokerNew("new_for_manager")
	})
	return err
}

// RecentChooserMenuNewForManager is a representation of the C type gtk_recent_chooser_menu_new_for_manager.
func RecentChooserMenuNewForManager(manager *RecentManager) *RecentChooserMenu {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(manager.Native)

	var ret gi.Argument

	err := recentChooserMenuNewForManagerFunction_Set()
	if err == nil {
		ret = recentChooserMenuNewForManagerFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RecentChooserMenu{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentChooserMenuGetShowNumbersFunction *gi.Function
var recentChooserMenuGetShowNumbersFunction_Once sync.Once

func recentChooserMenuGetShowNumbersFunction_Set() error {
	var err error
	recentChooserMenuGetShowNumbersFunction_Once.Do(func() {
		err = recentChooserMenuStruct_Set()
		if err != nil {
			return
		}
		recentChooserMenuGetShowNumbersFunction, err = recentChooserMenuStruct.InvokerNew("get_show_numbers")
	})
	return err
}

// GetShowNumbers is a representation of the C type gtk_recent_chooser_menu_get_show_numbers.
func (recv *RecentChooserMenu) GetShowNumbers() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := recentChooserMenuGetShowNumbersFunction_Set()
	if err == nil {
		ret = recentChooserMenuGetShowNumbersFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentChooserMenuSetShowNumbersFunction *gi.Function
var recentChooserMenuSetShowNumbersFunction_Once sync.Once

func recentChooserMenuSetShowNumbersFunction_Set() error {
	var err error
	recentChooserMenuSetShowNumbersFunction_Once.Do(func() {
		err = recentChooserMenuStruct_Set()
		if err != nil {
			return
		}
		recentChooserMenuSetShowNumbersFunction, err = recentChooserMenuStruct.InvokerNew("set_show_numbers")
	})
	return err
}

// SetShowNumbers is a representation of the C type gtk_recent_chooser_menu_set_show_numbers.
func (recv *RecentChooserMenu) SetShowNumbers(showNumbers bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showNumbers)

	err := recentChooserMenuSetShowNumbersFunction_Set()
	if err == nil {
		recentChooserMenuSetShowNumbersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentChooserWidgetStruct *gi.Struct
var recentChooserWidgetStruct_Once sync.Once

func recentChooserWidgetStruct_Set() error {
	var err error
	recentChooserWidgetStruct_Once.Do(func() {
		recentChooserWidgetStruct, err = gi.StructNew("Gtk", "RecentChooserWidget")
	})
	return err
}

type RecentChooserWidget struct {
	Box
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *RecentChooserWidget) FieldParentInstance() *Box {
	argValue := gi.FieldGet(recentChooserWidgetStruct, recv.Native, "parent_instance")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *RecentChooserWidget) SetFieldParentInstance(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(recentChooserWidgetStruct, recv.Native, "parent_instance", argValue)
}

var recentChooserWidgetNewFunction *gi.Function
var recentChooserWidgetNewFunction_Once sync.Once

func recentChooserWidgetNewFunction_Set() error {
	var err error
	recentChooserWidgetNewFunction_Once.Do(func() {
		err = recentChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		recentChooserWidgetNewFunction, err = recentChooserWidgetStruct.InvokerNew("new")
	})
	return err
}

// RecentChooserWidgetNew is a representation of the C type gtk_recent_chooser_widget_new.
func RecentChooserWidgetNew() *RecentChooserWidget {

	var ret gi.Argument

	err := recentChooserWidgetNewFunction_Set()
	if err == nil {
		ret = recentChooserWidgetNewFunction.Invoke(nil, nil)
	}

	retGo := &RecentChooserWidget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentChooserWidgetNewForManagerFunction *gi.Function
var recentChooserWidgetNewForManagerFunction_Once sync.Once

func recentChooserWidgetNewForManagerFunction_Set() error {
	var err error
	recentChooserWidgetNewForManagerFunction_Once.Do(func() {
		err = recentChooserWidgetStruct_Set()
		if err != nil {
			return
		}
		recentChooserWidgetNewForManagerFunction, err = recentChooserWidgetStruct.InvokerNew("new_for_manager")
	})
	return err
}

// RecentChooserWidgetNewForManager is a representation of the C type gtk_recent_chooser_widget_new_for_manager.
func RecentChooserWidgetNewForManager(manager *RecentManager) *RecentChooserWidget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(manager.Native)

	var ret gi.Argument

	err := recentChooserWidgetNewForManagerFunction_Set()
	if err == nil {
		ret = recentChooserWidgetNewForManagerFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RecentChooserWidget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentFilterStruct *gi.Struct
var recentFilterStruct_Once sync.Once

func recentFilterStruct_Set() error {
	var err error
	recentFilterStruct_Once.Do(func() {
		recentFilterStruct, err = gi.StructNew("Gtk", "RecentFilter")
	})
	return err
}

type RecentFilter struct {
	gobject.InitiallyUnowned
}

var recentFilterNewFunction *gi.Function
var recentFilterNewFunction_Once sync.Once

func recentFilterNewFunction_Set() error {
	var err error
	recentFilterNewFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterNewFunction, err = recentFilterStruct.InvokerNew("new")
	})
	return err
}

// RecentFilterNew is a representation of the C type gtk_recent_filter_new.
func RecentFilterNew() *RecentFilter {

	var ret gi.Argument

	err := recentFilterNewFunction_Set()
	if err == nil {
		ret = recentFilterNewFunction.Invoke(nil, nil)
	}

	retGo := &RecentFilter{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentFilterAddAgeFunction *gi.Function
var recentFilterAddAgeFunction_Once sync.Once

func recentFilterAddAgeFunction_Set() error {
	var err error
	recentFilterAddAgeFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddAgeFunction, err = recentFilterStruct.InvokerNew("add_age")
	})
	return err
}

// AddAge is a representation of the C type gtk_recent_filter_add_age.
func (recv *RecentFilter) AddAge(days int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(days)

	err := recentFilterAddAgeFunction_Set()
	if err == nil {
		recentFilterAddAgeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentFilterAddApplicationFunction *gi.Function
var recentFilterAddApplicationFunction_Once sync.Once

func recentFilterAddApplicationFunction_Set() error {
	var err error
	recentFilterAddApplicationFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddApplicationFunction, err = recentFilterStruct.InvokerNew("add_application")
	})
	return err
}

// AddApplication is a representation of the C type gtk_recent_filter_add_application.
func (recv *RecentFilter) AddApplication(application string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(application)

	err := recentFilterAddApplicationFunction_Set()
	if err == nil {
		recentFilterAddApplicationFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_recent_filter_add_custom' : parameter 'needed' of type 'RecentFilterFlags' not supported

var recentFilterAddGroupFunction *gi.Function
var recentFilterAddGroupFunction_Once sync.Once

func recentFilterAddGroupFunction_Set() error {
	var err error
	recentFilterAddGroupFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddGroupFunction, err = recentFilterStruct.InvokerNew("add_group")
	})
	return err
}

// AddGroup is a representation of the C type gtk_recent_filter_add_group.
func (recv *RecentFilter) AddGroup(group string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(group)

	err := recentFilterAddGroupFunction_Set()
	if err == nil {
		recentFilterAddGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentFilterAddMimeTypeFunction *gi.Function
var recentFilterAddMimeTypeFunction_Once sync.Once

func recentFilterAddMimeTypeFunction_Set() error {
	var err error
	recentFilterAddMimeTypeFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddMimeTypeFunction, err = recentFilterStruct.InvokerNew("add_mime_type")
	})
	return err
}

// AddMimeType is a representation of the C type gtk_recent_filter_add_mime_type.
func (recv *RecentFilter) AddMimeType(mimeType string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(mimeType)

	err := recentFilterAddMimeTypeFunction_Set()
	if err == nil {
		recentFilterAddMimeTypeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentFilterAddPatternFunction *gi.Function
var recentFilterAddPatternFunction_Once sync.Once

func recentFilterAddPatternFunction_Set() error {
	var err error
	recentFilterAddPatternFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddPatternFunction, err = recentFilterStruct.InvokerNew("add_pattern")
	})
	return err
}

// AddPattern is a representation of the C type gtk_recent_filter_add_pattern.
func (recv *RecentFilter) AddPattern(pattern string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(pattern)

	err := recentFilterAddPatternFunction_Set()
	if err == nil {
		recentFilterAddPatternFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentFilterAddPixbufFormatsFunction *gi.Function
var recentFilterAddPixbufFormatsFunction_Once sync.Once

func recentFilterAddPixbufFormatsFunction_Set() error {
	var err error
	recentFilterAddPixbufFormatsFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterAddPixbufFormatsFunction, err = recentFilterStruct.InvokerNew("add_pixbuf_formats")
	})
	return err
}

// AddPixbufFormats is a representation of the C type gtk_recent_filter_add_pixbuf_formats.
func (recv *RecentFilter) AddPixbufFormats() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := recentFilterAddPixbufFormatsFunction_Set()
	if err == nil {
		recentFilterAddPixbufFormatsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentFilterFilterFunction *gi.Function
var recentFilterFilterFunction_Once sync.Once

func recentFilterFilterFunction_Set() error {
	var err error
	recentFilterFilterFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterFilterFunction, err = recentFilterStruct.InvokerNew("filter")
	})
	return err
}

// Filter is a representation of the C type gtk_recent_filter_filter.
func (recv *RecentFilter) Filter(filterInfo *RecentFilterInfo) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(filterInfo.Native)

	var ret gi.Argument

	err := recentFilterFilterFunction_Set()
	if err == nil {
		ret = recentFilterFilterFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentFilterGetNameFunction *gi.Function
var recentFilterGetNameFunction_Once sync.Once

func recentFilterGetNameFunction_Set() error {
	var err error
	recentFilterGetNameFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterGetNameFunction, err = recentFilterStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_recent_filter_get_name.
func (recv *RecentFilter) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := recentFilterGetNameFunction_Set()
	if err == nil {
		ret = recentFilterGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_recent_filter_get_needed' : return type 'RecentFilterFlags' not supported

var recentFilterSetNameFunction *gi.Function
var recentFilterSetNameFunction_Once sync.Once

func recentFilterSetNameFunction_Set() error {
	var err error
	recentFilterSetNameFunction_Once.Do(func() {
		err = recentFilterStruct_Set()
		if err != nil {
			return
		}
		recentFilterSetNameFunction, err = recentFilterStruct.InvokerNew("set_name")
	})
	return err
}

// SetName is a representation of the C type gtk_recent_filter_set_name.
func (recv *RecentFilter) SetName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := recentFilterSetNameFunction_Set()
	if err == nil {
		recentFilterSetNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var recentManagerStruct *gi.Struct
var recentManagerStruct_Once sync.Once

func recentManagerStruct_Set() error {
	var err error
	recentManagerStruct_Once.Do(func() {
		recentManagerStruct, err = gi.StructNew("Gtk", "RecentManager")
	})
	return err
}

type RecentManager struct {
	gobject.Object
}

var recentManagerNewFunction *gi.Function
var recentManagerNewFunction_Once sync.Once

func recentManagerNewFunction_Set() error {
	var err error
	recentManagerNewFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerNewFunction, err = recentManagerStruct.InvokerNew("new")
	})
	return err
}

// RecentManagerNew is a representation of the C type gtk_recent_manager_new.
func RecentManagerNew() *RecentManager {

	var ret gi.Argument

	err := recentManagerNewFunction_Set()
	if err == nil {
		ret = recentManagerNewFunction.Invoke(nil, nil)
	}

	retGo := &RecentManager{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentManagerAddFullFunction *gi.Function
var recentManagerAddFullFunction_Once sync.Once

func recentManagerAddFullFunction_Set() error {
	var err error
	recentManagerAddFullFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerAddFullFunction, err = recentManagerStruct.InvokerNew("add_full")
	})
	return err
}

// AddFull is a representation of the C type gtk_recent_manager_add_full.
func (recv *RecentManager) AddFull(uri string, recentData *RecentData) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)
	inArgs[2].SetPointer(recentData.Native)

	var ret gi.Argument

	err := recentManagerAddFullFunction_Set()
	if err == nil {
		ret = recentManagerAddFullFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentManagerAddItemFunction *gi.Function
var recentManagerAddItemFunction_Once sync.Once

func recentManagerAddItemFunction_Set() error {
	var err error
	recentManagerAddItemFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerAddItemFunction, err = recentManagerStruct.InvokerNew("add_item")
	})
	return err
}

// AddItem is a representation of the C type gtk_recent_manager_add_item.
func (recv *RecentManager) AddItem(uri string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)

	var ret gi.Argument

	err := recentManagerAddItemFunction_Set()
	if err == nil {
		ret = recentManagerAddItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_recent_manager_get_items' : return type 'GLib.List' not supported

var recentManagerHasItemFunction *gi.Function
var recentManagerHasItemFunction_Once sync.Once

func recentManagerHasItemFunction_Set() error {
	var err error
	recentManagerHasItemFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerHasItemFunction, err = recentManagerStruct.InvokerNew("has_item")
	})
	return err
}

// HasItem is a representation of the C type gtk_recent_manager_has_item.
func (recv *RecentManager) HasItem(uri string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)

	var ret gi.Argument

	err := recentManagerHasItemFunction_Set()
	if err == nil {
		ret = recentManagerHasItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentManagerLookupItemFunction *gi.Function
var recentManagerLookupItemFunction_Once sync.Once

func recentManagerLookupItemFunction_Set() error {
	var err error
	recentManagerLookupItemFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerLookupItemFunction, err = recentManagerStruct.InvokerNew("lookup_item")
	})
	return err
}

// LookupItem is a representation of the C type gtk_recent_manager_lookup_item.
func (recv *RecentManager) LookupItem(uri string) *RecentInfo {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)

	var ret gi.Argument

	err := recentManagerLookupItemFunction_Set()
	if err == nil {
		ret = recentManagerLookupItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RecentInfo{}
	retGo.Native = ret.Pointer()

	return retGo
}

var recentManagerMoveItemFunction *gi.Function
var recentManagerMoveItemFunction_Once sync.Once

func recentManagerMoveItemFunction_Set() error {
	var err error
	recentManagerMoveItemFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerMoveItemFunction, err = recentManagerStruct.InvokerNew("move_item")
	})
	return err
}

// MoveItem is a representation of the C type gtk_recent_manager_move_item.
func (recv *RecentManager) MoveItem(uri string, newUri string) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)
	inArgs[2].SetString(newUri)

	var ret gi.Argument

	err := recentManagerMoveItemFunction_Set()
	if err == nil {
		ret = recentManagerMoveItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var recentManagerPurgeItemsFunction *gi.Function
var recentManagerPurgeItemsFunction_Once sync.Once

func recentManagerPurgeItemsFunction_Set() error {
	var err error
	recentManagerPurgeItemsFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerPurgeItemsFunction, err = recentManagerStruct.InvokerNew("purge_items")
	})
	return err
}

// PurgeItems is a representation of the C type gtk_recent_manager_purge_items.
func (recv *RecentManager) PurgeItems() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := recentManagerPurgeItemsFunction_Set()
	if err == nil {
		ret = recentManagerPurgeItemsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var recentManagerRemoveItemFunction *gi.Function
var recentManagerRemoveItemFunction_Once sync.Once

func recentManagerRemoveItemFunction_Set() error {
	var err error
	recentManagerRemoveItemFunction_Once.Do(func() {
		err = recentManagerStruct_Set()
		if err != nil {
			return
		}
		recentManagerRemoveItemFunction, err = recentManagerStruct.InvokerNew("remove_item")
	})
	return err
}

// RemoveItem is a representation of the C type gtk_recent_manager_remove_item.
func (recv *RecentManager) RemoveItem(uri string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(uri)

	var ret gi.Argument

	err := recentManagerRemoveItemFunction_Set()
	if err == nil {
		ret = recentManagerRemoveItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var rendererCellAccessibleStruct *gi.Struct
var rendererCellAccessibleStruct_Once sync.Once

func rendererCellAccessibleStruct_Set() error {
	var err error
	rendererCellAccessibleStruct_Once.Do(func() {
		rendererCellAccessibleStruct, err = gi.StructNew("Gtk", "RendererCellAccessible")
	})
	return err
}

type RendererCellAccessible struct {
	CellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *RendererCellAccessible) FieldParent() *CellAccessible {
	argValue := gi.FieldGet(rendererCellAccessibleStruct, recv.Native, "parent")
	value := &CellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *RendererCellAccessible) SetFieldParent(value *CellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rendererCellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *RendererCellAccessible) FieldPriv() *RendererCellAccessiblePrivate {
	argValue := gi.FieldGet(rendererCellAccessibleStruct, recv.Native, "priv")
	value := &RendererCellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *RendererCellAccessible) SetFieldPriv(value *RendererCellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(rendererCellAccessibleStruct, recv.Native, "priv", argValue)
}

var rendererCellAccessibleNewFunction *gi.Function
var rendererCellAccessibleNewFunction_Once sync.Once

func rendererCellAccessibleNewFunction_Set() error {
	var err error
	rendererCellAccessibleNewFunction_Once.Do(func() {
		err = rendererCellAccessibleStruct_Set()
		if err != nil {
			return
		}
		rendererCellAccessibleNewFunction, err = rendererCellAccessibleStruct.InvokerNew("new")
	})
	return err
}

// RendererCellAccessibleNew is a representation of the C type gtk_renderer_cell_accessible_new.
func RendererCellAccessibleNew(renderer *CellRenderer) *RendererCellAccessible {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(renderer.Native)

	var ret gi.Argument

	err := rendererCellAccessibleNewFunction_Set()
	if err == nil {
		ret = rendererCellAccessibleNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RendererCellAccessible{}
	retGo.Native = ret.Pointer()

	return retGo
}

var revealerStruct *gi.Struct
var revealerStruct_Once sync.Once

func revealerStruct_Set() error {
	var err error
	revealerStruct_Once.Do(func() {
		revealerStruct, err = gi.StructNew("Gtk", "Revealer")
	})
	return err
}

type Revealer struct {
	Bin
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *Revealer) FieldParentInstance() *Bin {
	argValue := gi.FieldGet(revealerStruct, recv.Native, "parent_instance")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *Revealer) SetFieldParentInstance(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(revealerStruct, recv.Native, "parent_instance", argValue)
}

var revealerNewFunction *gi.Function
var revealerNewFunction_Once sync.Once

func revealerNewFunction_Set() error {
	var err error
	revealerNewFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerNewFunction, err = revealerStruct.InvokerNew("new")
	})
	return err
}

// RevealerNew is a representation of the C type gtk_revealer_new.
func RevealerNew() *Revealer {

	var ret gi.Argument

	err := revealerNewFunction_Set()
	if err == nil {
		ret = revealerNewFunction.Invoke(nil, nil)
	}

	retGo := &Revealer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var revealerGetChildRevealedFunction *gi.Function
var revealerGetChildRevealedFunction_Once sync.Once

func revealerGetChildRevealedFunction_Set() error {
	var err error
	revealerGetChildRevealedFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerGetChildRevealedFunction, err = revealerStruct.InvokerNew("get_child_revealed")
	})
	return err
}

// GetChildRevealed is a representation of the C type gtk_revealer_get_child_revealed.
func (recv *Revealer) GetChildRevealed() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := revealerGetChildRevealedFunction_Set()
	if err == nil {
		ret = revealerGetChildRevealedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var revealerGetRevealChildFunction *gi.Function
var revealerGetRevealChildFunction_Once sync.Once

func revealerGetRevealChildFunction_Set() error {
	var err error
	revealerGetRevealChildFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerGetRevealChildFunction, err = revealerStruct.InvokerNew("get_reveal_child")
	})
	return err
}

// GetRevealChild is a representation of the C type gtk_revealer_get_reveal_child.
func (recv *Revealer) GetRevealChild() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := revealerGetRevealChildFunction_Set()
	if err == nil {
		ret = revealerGetRevealChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var revealerGetTransitionDurationFunction *gi.Function
var revealerGetTransitionDurationFunction_Once sync.Once

func revealerGetTransitionDurationFunction_Set() error {
	var err error
	revealerGetTransitionDurationFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerGetTransitionDurationFunction, err = revealerStruct.InvokerNew("get_transition_duration")
	})
	return err
}

// GetTransitionDuration is a representation of the C type gtk_revealer_get_transition_duration.
func (recv *Revealer) GetTransitionDuration() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := revealerGetTransitionDurationFunction_Set()
	if err == nil {
		ret = revealerGetTransitionDurationFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_revealer_get_transition_type' : return type 'RevealerTransitionType' not supported

var revealerSetRevealChildFunction *gi.Function
var revealerSetRevealChildFunction_Once sync.Once

func revealerSetRevealChildFunction_Set() error {
	var err error
	revealerSetRevealChildFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerSetRevealChildFunction, err = revealerStruct.InvokerNew("set_reveal_child")
	})
	return err
}

// SetRevealChild is a representation of the C type gtk_revealer_set_reveal_child.
func (recv *Revealer) SetRevealChild(revealChild bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(revealChild)

	err := revealerSetRevealChildFunction_Set()
	if err == nil {
		revealerSetRevealChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var revealerSetTransitionDurationFunction *gi.Function
var revealerSetTransitionDurationFunction_Once sync.Once

func revealerSetTransitionDurationFunction_Set() error {
	var err error
	revealerSetTransitionDurationFunction_Once.Do(func() {
		err = revealerStruct_Set()
		if err != nil {
			return
		}
		revealerSetTransitionDurationFunction, err = revealerStruct.InvokerNew("set_transition_duration")
	})
	return err
}

// SetTransitionDuration is a representation of the C type gtk_revealer_set_transition_duration.
func (recv *Revealer) SetTransitionDuration(duration uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(duration)

	err := revealerSetTransitionDurationFunction_Set()
	if err == nil {
		revealerSetTransitionDurationFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_revealer_set_transition_type' : parameter 'transition' of type 'RevealerTransitionType' not supported

var scaleStruct *gi.Struct
var scaleStruct_Once sync.Once

func scaleStruct_Set() error {
	var err error
	scaleStruct_Once.Do(func() {
		scaleStruct, err = gi.StructNew("Gtk", "Scale")
	})
	return err
}

type Scale struct {
	Range
}

// FieldRange returns the C field 'range'.
func (recv *Scale) FieldRange() *Range {
	argValue := gi.FieldGet(scaleStruct, recv.Native, "range")
	value := &Range{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldRange sets the value of the C field 'range'.
func (recv *Scale) SetFieldRange(value *Range) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleStruct, recv.Native, "range", argValue)
}

// UNSUPPORTED : C value 'gtk_scale_new' : parameter 'orientation' of type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_scale_new_with_range' : parameter 'orientation' of type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_scale_add_mark' : parameter 'position' of type 'PositionType' not supported

var scaleClearMarksFunction *gi.Function
var scaleClearMarksFunction_Once sync.Once

func scaleClearMarksFunction_Set() error {
	var err error
	scaleClearMarksFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleClearMarksFunction, err = scaleStruct.InvokerNew("clear_marks")
	})
	return err
}

// ClearMarks is a representation of the C type gtk_scale_clear_marks.
func (recv *Scale) ClearMarks() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := scaleClearMarksFunction_Set()
	if err == nil {
		scaleClearMarksFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scaleGetDigitsFunction *gi.Function
var scaleGetDigitsFunction_Once sync.Once

func scaleGetDigitsFunction_Set() error {
	var err error
	scaleGetDigitsFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleGetDigitsFunction, err = scaleStruct.InvokerNew("get_digits")
	})
	return err
}

// GetDigits is a representation of the C type gtk_scale_get_digits.
func (recv *Scale) GetDigits() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleGetDigitsFunction_Set()
	if err == nil {
		ret = scaleGetDigitsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var scaleGetDrawValueFunction *gi.Function
var scaleGetDrawValueFunction_Once sync.Once

func scaleGetDrawValueFunction_Set() error {
	var err error
	scaleGetDrawValueFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleGetDrawValueFunction, err = scaleStruct.InvokerNew("get_draw_value")
	})
	return err
}

// GetDrawValue is a representation of the C type gtk_scale_get_draw_value.
func (recv *Scale) GetDrawValue() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleGetDrawValueFunction_Set()
	if err == nil {
		ret = scaleGetDrawValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var scaleGetHasOriginFunction *gi.Function
var scaleGetHasOriginFunction_Once sync.Once

func scaleGetHasOriginFunction_Set() error {
	var err error
	scaleGetHasOriginFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleGetHasOriginFunction, err = scaleStruct.InvokerNew("get_has_origin")
	})
	return err
}

// GetHasOrigin is a representation of the C type gtk_scale_get_has_origin.
func (recv *Scale) GetHasOrigin() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleGetHasOriginFunction_Set()
	if err == nil {
		ret = scaleGetHasOriginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_scale_get_layout' : return type 'Pango.Layout' not supported

var scaleGetLayoutOffsetsFunction *gi.Function
var scaleGetLayoutOffsetsFunction_Once sync.Once

func scaleGetLayoutOffsetsFunction_Set() error {
	var err error
	scaleGetLayoutOffsetsFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleGetLayoutOffsetsFunction, err = scaleStruct.InvokerNew("get_layout_offsets")
	})
	return err
}

// GetLayoutOffsets is a representation of the C type gtk_scale_get_layout_offsets.
func (recv *Scale) GetLayoutOffsets() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := scaleGetLayoutOffsetsFunction_Set()
	if err == nil {
		scaleGetLayoutOffsetsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_scale_get_value_pos' : return type 'PositionType' not supported

var scaleSetDigitsFunction *gi.Function
var scaleSetDigitsFunction_Once sync.Once

func scaleSetDigitsFunction_Set() error {
	var err error
	scaleSetDigitsFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleSetDigitsFunction, err = scaleStruct.InvokerNew("set_digits")
	})
	return err
}

// SetDigits is a representation of the C type gtk_scale_set_digits.
func (recv *Scale) SetDigits(digits int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(digits)

	err := scaleSetDigitsFunction_Set()
	if err == nil {
		scaleSetDigitsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scaleSetDrawValueFunction *gi.Function
var scaleSetDrawValueFunction_Once sync.Once

func scaleSetDrawValueFunction_Set() error {
	var err error
	scaleSetDrawValueFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleSetDrawValueFunction, err = scaleStruct.InvokerNew("set_draw_value")
	})
	return err
}

// SetDrawValue is a representation of the C type gtk_scale_set_draw_value.
func (recv *Scale) SetDrawValue(drawValue bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(drawValue)

	err := scaleSetDrawValueFunction_Set()
	if err == nil {
		scaleSetDrawValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scaleSetHasOriginFunction *gi.Function
var scaleSetHasOriginFunction_Once sync.Once

func scaleSetHasOriginFunction_Set() error {
	var err error
	scaleSetHasOriginFunction_Once.Do(func() {
		err = scaleStruct_Set()
		if err != nil {
			return
		}
		scaleSetHasOriginFunction, err = scaleStruct.InvokerNew("set_has_origin")
	})
	return err
}

// SetHasOrigin is a representation of the C type gtk_scale_set_has_origin.
func (recv *Scale) SetHasOrigin(hasOrigin bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasOrigin)

	err := scaleSetHasOriginFunction_Set()
	if err == nil {
		scaleSetHasOriginFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_scale_set_value_pos' : parameter 'pos' of type 'PositionType' not supported

var scaleAccessibleStruct *gi.Struct
var scaleAccessibleStruct_Once sync.Once

func scaleAccessibleStruct_Set() error {
	var err error
	scaleAccessibleStruct_Once.Do(func() {
		scaleAccessibleStruct, err = gi.StructNew("Gtk", "ScaleAccessible")
	})
	return err
}

type ScaleAccessible struct {
	RangeAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ScaleAccessible) FieldParent() *RangeAccessible {
	argValue := gi.FieldGet(scaleAccessibleStruct, recv.Native, "parent")
	value := &RangeAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ScaleAccessible) SetFieldParent(value *RangeAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ScaleAccessible) FieldPriv() *ScaleAccessiblePrivate {
	argValue := gi.FieldGet(scaleAccessibleStruct, recv.Native, "priv")
	value := &ScaleAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ScaleAccessible) SetFieldPriv(value *ScaleAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleAccessibleStruct, recv.Native, "priv", argValue)
}

// ScaleAccessibleStruct creates an uninitialised ScaleAccessible.
func ScaleAccessibleStruct() *ScaleAccessible {
	err := scaleAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ScaleAccessible{}
	structGo.Native = scaleAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeScaleAccessible)
	return structGo
}
func finalizeScaleAccessible(obj *ScaleAccessible) {
	scaleAccessibleStruct.Free(obj.Native)
}

var scaleButtonStruct *gi.Struct
var scaleButtonStruct_Once sync.Once

func scaleButtonStruct_Set() error {
	var err error
	scaleButtonStruct_Once.Do(func() {
		scaleButtonStruct, err = gi.StructNew("Gtk", "ScaleButton")
	})
	return err
}

type ScaleButton struct {
	Button
}

// FieldParent returns the C field 'parent'.
func (recv *ScaleButton) FieldParent() *Button {
	argValue := gi.FieldGet(scaleButtonStruct, recv.Native, "parent")
	value := &Button{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ScaleButton) SetFieldParent(value *Button) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleButtonStruct, recv.Native, "parent", argValue)
}

// UNSUPPORTED : C value 'gtk_scale_button_new' : parameter 'size' of type 'IconSize' not supported

var scaleButtonGetAdjustmentFunction *gi.Function
var scaleButtonGetAdjustmentFunction_Once sync.Once

func scaleButtonGetAdjustmentFunction_Set() error {
	var err error
	scaleButtonGetAdjustmentFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonGetAdjustmentFunction, err = scaleButtonStruct.InvokerNew("get_adjustment")
	})
	return err
}

// GetAdjustment is a representation of the C type gtk_scale_button_get_adjustment.
func (recv *ScaleButton) GetAdjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleButtonGetAdjustmentFunction_Set()
	if err == nil {
		ret = scaleButtonGetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scaleButtonGetMinusButtonFunction *gi.Function
var scaleButtonGetMinusButtonFunction_Once sync.Once

func scaleButtonGetMinusButtonFunction_Set() error {
	var err error
	scaleButtonGetMinusButtonFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonGetMinusButtonFunction, err = scaleButtonStruct.InvokerNew("get_minus_button")
	})
	return err
}

// GetMinusButton is a representation of the C type gtk_scale_button_get_minus_button.
func (recv *ScaleButton) GetMinusButton() *Button {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleButtonGetMinusButtonFunction_Set()
	if err == nil {
		ret = scaleButtonGetMinusButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scaleButtonGetPlusButtonFunction *gi.Function
var scaleButtonGetPlusButtonFunction_Once sync.Once

func scaleButtonGetPlusButtonFunction_Set() error {
	var err error
	scaleButtonGetPlusButtonFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonGetPlusButtonFunction, err = scaleButtonStruct.InvokerNew("get_plus_button")
	})
	return err
}

// GetPlusButton is a representation of the C type gtk_scale_button_get_plus_button.
func (recv *ScaleButton) GetPlusButton() *Button {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleButtonGetPlusButtonFunction_Set()
	if err == nil {
		ret = scaleButtonGetPlusButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Button{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scaleButtonGetPopupFunction *gi.Function
var scaleButtonGetPopupFunction_Once sync.Once

func scaleButtonGetPopupFunction_Set() error {
	var err error
	scaleButtonGetPopupFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonGetPopupFunction, err = scaleButtonStruct.InvokerNew("get_popup")
	})
	return err
}

// GetPopup is a representation of the C type gtk_scale_button_get_popup.
func (recv *ScaleButton) GetPopup() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleButtonGetPopupFunction_Set()
	if err == nil {
		ret = scaleButtonGetPopupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scaleButtonGetValueFunction *gi.Function
var scaleButtonGetValueFunction_Once sync.Once

func scaleButtonGetValueFunction_Set() error {
	var err error
	scaleButtonGetValueFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonGetValueFunction, err = scaleButtonStruct.InvokerNew("get_value")
	})
	return err
}

// GetValue is a representation of the C type gtk_scale_button_get_value.
func (recv *ScaleButton) GetValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scaleButtonGetValueFunction_Set()
	if err == nil {
		ret = scaleButtonGetValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var scaleButtonSetAdjustmentFunction *gi.Function
var scaleButtonSetAdjustmentFunction_Once sync.Once

func scaleButtonSetAdjustmentFunction_Set() error {
	var err error
	scaleButtonSetAdjustmentFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonSetAdjustmentFunction, err = scaleButtonStruct.InvokerNew("set_adjustment")
	})
	return err
}

// SetAdjustment is a representation of the C type gtk_scale_button_set_adjustment.
func (recv *ScaleButton) SetAdjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := scaleButtonSetAdjustmentFunction_Set()
	if err == nil {
		scaleButtonSetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_scale_button_set_icons' : parameter 'icons' of type 'nil' not supported

var scaleButtonSetValueFunction *gi.Function
var scaleButtonSetValueFunction_Once sync.Once

func scaleButtonSetValueFunction_Set() error {
	var err error
	scaleButtonSetValueFunction_Once.Do(func() {
		err = scaleButtonStruct_Set()
		if err != nil {
			return
		}
		scaleButtonSetValueFunction, err = scaleButtonStruct.InvokerNew("set_value")
	})
	return err
}

// SetValue is a representation of the C type gtk_scale_button_set_value.
func (recv *ScaleButton) SetValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := scaleButtonSetValueFunction_Set()
	if err == nil {
		scaleButtonSetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scaleButtonAccessibleStruct *gi.Struct
var scaleButtonAccessibleStruct_Once sync.Once

func scaleButtonAccessibleStruct_Set() error {
	var err error
	scaleButtonAccessibleStruct_Once.Do(func() {
		scaleButtonAccessibleStruct, err = gi.StructNew("Gtk", "ScaleButtonAccessible")
	})
	return err
}

type ScaleButtonAccessible struct {
	ButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ScaleButtonAccessible) FieldParent() *ButtonAccessible {
	argValue := gi.FieldGet(scaleButtonAccessibleStruct, recv.Native, "parent")
	value := &ButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ScaleButtonAccessible) SetFieldParent(value *ButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ScaleButtonAccessible) FieldPriv() *ScaleButtonAccessiblePrivate {
	argValue := gi.FieldGet(scaleButtonAccessibleStruct, recv.Native, "priv")
	value := &ScaleButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ScaleButtonAccessible) SetFieldPriv(value *ScaleButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scaleButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// ScaleButtonAccessibleStruct creates an uninitialised ScaleButtonAccessible.
func ScaleButtonAccessibleStruct() *ScaleButtonAccessible {
	err := scaleButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ScaleButtonAccessible{}
	structGo.Native = scaleButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeScaleButtonAccessible)
	return structGo
}
func finalizeScaleButtonAccessible(obj *ScaleButtonAccessible) {
	scaleButtonAccessibleStruct.Free(obj.Native)
}

var scrollbarStruct *gi.Struct
var scrollbarStruct_Once sync.Once

func scrollbarStruct_Set() error {
	var err error
	scrollbarStruct_Once.Do(func() {
		scrollbarStruct, err = gi.StructNew("Gtk", "Scrollbar")
	})
	return err
}

type Scrollbar struct {
	Range
}

// FieldRange returns the C field 'range'.
func (recv *Scrollbar) FieldRange() *Range {
	argValue := gi.FieldGet(scrollbarStruct, recv.Native, "range")
	value := &Range{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldRange sets the value of the C field 'range'.
func (recv *Scrollbar) SetFieldRange(value *Range) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scrollbarStruct, recv.Native, "range", argValue)
}

// UNSUPPORTED : C value 'gtk_scrollbar_new' : parameter 'orientation' of type 'Orientation' not supported

var scrolledWindowStruct *gi.Struct
var scrolledWindowStruct_Once sync.Once

func scrolledWindowStruct_Set() error {
	var err error
	scrolledWindowStruct_Once.Do(func() {
		scrolledWindowStruct, err = gi.StructNew("Gtk", "ScrolledWindow")
	})
	return err
}

type ScrolledWindow struct {
	Bin
}

// FieldContainer returns the C field 'container'.
func (recv *ScrolledWindow) FieldContainer() *Bin {
	argValue := gi.FieldGet(scrolledWindowStruct, recv.Native, "container")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *ScrolledWindow) SetFieldContainer(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scrolledWindowStruct, recv.Native, "container", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ScrolledWindow) FieldPriv() *ScrolledWindowPrivate {
	argValue := gi.FieldGet(scrolledWindowStruct, recv.Native, "priv")
	value := &ScrolledWindowPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ScrolledWindow) SetFieldPriv(value *ScrolledWindowPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scrolledWindowStruct, recv.Native, "priv", argValue)
}

var scrolledWindowNewFunction *gi.Function
var scrolledWindowNewFunction_Once sync.Once

func scrolledWindowNewFunction_Set() error {
	var err error
	scrolledWindowNewFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowNewFunction, err = scrolledWindowStruct.InvokerNew("new")
	})
	return err
}

// ScrolledWindowNew is a representation of the C type gtk_scrolled_window_new.
func ScrolledWindowNew(hadjustment *Adjustment, vadjustment *Adjustment) *ScrolledWindow {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(hadjustment.Native)
	inArgs[1].SetPointer(vadjustment.Native)

	var ret gi.Argument

	err := scrolledWindowNewFunction_Set()
	if err == nil {
		ret = scrolledWindowNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ScrolledWindow{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scrolledWindowAddWithViewportFunction *gi.Function
var scrolledWindowAddWithViewportFunction_Once sync.Once

func scrolledWindowAddWithViewportFunction_Set() error {
	var err error
	scrolledWindowAddWithViewportFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowAddWithViewportFunction, err = scrolledWindowStruct.InvokerNew("add_with_viewport")
	})
	return err
}

// AddWithViewport is a representation of the C type gtk_scrolled_window_add_with_viewport.
func (recv *ScrolledWindow) AddWithViewport(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := scrolledWindowAddWithViewportFunction_Set()
	if err == nil {
		scrolledWindowAddWithViewportFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowGetCaptureButtonPressFunction *gi.Function
var scrolledWindowGetCaptureButtonPressFunction_Once sync.Once

func scrolledWindowGetCaptureButtonPressFunction_Set() error {
	var err error
	scrolledWindowGetCaptureButtonPressFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetCaptureButtonPressFunction, err = scrolledWindowStruct.InvokerNew("get_capture_button_press")
	})
	return err
}

// GetCaptureButtonPress is a representation of the C type gtk_scrolled_window_get_capture_button_press.
func (recv *ScrolledWindow) GetCaptureButtonPress() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetCaptureButtonPressFunction_Set()
	if err == nil {
		ret = scrolledWindowGetCaptureButtonPressFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var scrolledWindowGetHadjustmentFunction *gi.Function
var scrolledWindowGetHadjustmentFunction_Once sync.Once

func scrolledWindowGetHadjustmentFunction_Set() error {
	var err error
	scrolledWindowGetHadjustmentFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetHadjustmentFunction, err = scrolledWindowStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_scrolled_window_get_hadjustment.
func (recv *ScrolledWindow) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetHadjustmentFunction_Set()
	if err == nil {
		ret = scrolledWindowGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scrolledWindowGetHscrollbarFunction *gi.Function
var scrolledWindowGetHscrollbarFunction_Once sync.Once

func scrolledWindowGetHscrollbarFunction_Set() error {
	var err error
	scrolledWindowGetHscrollbarFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetHscrollbarFunction, err = scrolledWindowStruct.InvokerNew("get_hscrollbar")
	})
	return err
}

// GetHscrollbar is a representation of the C type gtk_scrolled_window_get_hscrollbar.
func (recv *ScrolledWindow) GetHscrollbar() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetHscrollbarFunction_Set()
	if err == nil {
		ret = scrolledWindowGetHscrollbarFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scrolledWindowGetKineticScrollingFunction *gi.Function
var scrolledWindowGetKineticScrollingFunction_Once sync.Once

func scrolledWindowGetKineticScrollingFunction_Set() error {
	var err error
	scrolledWindowGetKineticScrollingFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetKineticScrollingFunction, err = scrolledWindowStruct.InvokerNew("get_kinetic_scrolling")
	})
	return err
}

// GetKineticScrolling is a representation of the C type gtk_scrolled_window_get_kinetic_scrolling.
func (recv *ScrolledWindow) GetKineticScrolling() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetKineticScrollingFunction_Set()
	if err == nil {
		ret = scrolledWindowGetKineticScrollingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var scrolledWindowGetMaxContentHeightFunction *gi.Function
var scrolledWindowGetMaxContentHeightFunction_Once sync.Once

func scrolledWindowGetMaxContentHeightFunction_Set() error {
	var err error
	scrolledWindowGetMaxContentHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetMaxContentHeightFunction, err = scrolledWindowStruct.InvokerNew("get_max_content_height")
	})
	return err
}

// GetMaxContentHeight is a representation of the C type gtk_scrolled_window_get_max_content_height.
func (recv *ScrolledWindow) GetMaxContentHeight() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetMaxContentHeightFunction_Set()
	if err == nil {
		ret = scrolledWindowGetMaxContentHeightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var scrolledWindowGetMaxContentWidthFunction *gi.Function
var scrolledWindowGetMaxContentWidthFunction_Once sync.Once

func scrolledWindowGetMaxContentWidthFunction_Set() error {
	var err error
	scrolledWindowGetMaxContentWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetMaxContentWidthFunction, err = scrolledWindowStruct.InvokerNew("get_max_content_width")
	})
	return err
}

// GetMaxContentWidth is a representation of the C type gtk_scrolled_window_get_max_content_width.
func (recv *ScrolledWindow) GetMaxContentWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetMaxContentWidthFunction_Set()
	if err == nil {
		ret = scrolledWindowGetMaxContentWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var scrolledWindowGetMinContentHeightFunction *gi.Function
var scrolledWindowGetMinContentHeightFunction_Once sync.Once

func scrolledWindowGetMinContentHeightFunction_Set() error {
	var err error
	scrolledWindowGetMinContentHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetMinContentHeightFunction, err = scrolledWindowStruct.InvokerNew("get_min_content_height")
	})
	return err
}

// GetMinContentHeight is a representation of the C type gtk_scrolled_window_get_min_content_height.
func (recv *ScrolledWindow) GetMinContentHeight() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetMinContentHeightFunction_Set()
	if err == nil {
		ret = scrolledWindowGetMinContentHeightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var scrolledWindowGetMinContentWidthFunction *gi.Function
var scrolledWindowGetMinContentWidthFunction_Once sync.Once

func scrolledWindowGetMinContentWidthFunction_Set() error {
	var err error
	scrolledWindowGetMinContentWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetMinContentWidthFunction, err = scrolledWindowStruct.InvokerNew("get_min_content_width")
	})
	return err
}

// GetMinContentWidth is a representation of the C type gtk_scrolled_window_get_min_content_width.
func (recv *ScrolledWindow) GetMinContentWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetMinContentWidthFunction_Set()
	if err == nil {
		ret = scrolledWindowGetMinContentWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var scrolledWindowGetOverlayScrollingFunction *gi.Function
var scrolledWindowGetOverlayScrollingFunction_Once sync.Once

func scrolledWindowGetOverlayScrollingFunction_Set() error {
	var err error
	scrolledWindowGetOverlayScrollingFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetOverlayScrollingFunction, err = scrolledWindowStruct.InvokerNew("get_overlay_scrolling")
	})
	return err
}

// GetOverlayScrolling is a representation of the C type gtk_scrolled_window_get_overlay_scrolling.
func (recv *ScrolledWindow) GetOverlayScrolling() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetOverlayScrollingFunction_Set()
	if err == nil {
		ret = scrolledWindowGetOverlayScrollingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_scrolled_window_get_placement' : return type 'CornerType' not supported

// UNSUPPORTED : C value 'gtk_scrolled_window_get_policy' : parameter 'hscrollbar_policy' of type 'PolicyType' not supported

var scrolledWindowGetPropagateNaturalHeightFunction *gi.Function
var scrolledWindowGetPropagateNaturalHeightFunction_Once sync.Once

func scrolledWindowGetPropagateNaturalHeightFunction_Set() error {
	var err error
	scrolledWindowGetPropagateNaturalHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetPropagateNaturalHeightFunction, err = scrolledWindowStruct.InvokerNew("get_propagate_natural_height")
	})
	return err
}

// GetPropagateNaturalHeight is a representation of the C type gtk_scrolled_window_get_propagate_natural_height.
func (recv *ScrolledWindow) GetPropagateNaturalHeight() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetPropagateNaturalHeightFunction_Set()
	if err == nil {
		ret = scrolledWindowGetPropagateNaturalHeightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var scrolledWindowGetPropagateNaturalWidthFunction *gi.Function
var scrolledWindowGetPropagateNaturalWidthFunction_Once sync.Once

func scrolledWindowGetPropagateNaturalWidthFunction_Set() error {
	var err error
	scrolledWindowGetPropagateNaturalWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetPropagateNaturalWidthFunction, err = scrolledWindowStruct.InvokerNew("get_propagate_natural_width")
	})
	return err
}

// GetPropagateNaturalWidth is a representation of the C type gtk_scrolled_window_get_propagate_natural_width.
func (recv *ScrolledWindow) GetPropagateNaturalWidth() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetPropagateNaturalWidthFunction_Set()
	if err == nil {
		ret = scrolledWindowGetPropagateNaturalWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_scrolled_window_get_shadow_type' : return type 'ShadowType' not supported

var scrolledWindowGetVadjustmentFunction *gi.Function
var scrolledWindowGetVadjustmentFunction_Once sync.Once

func scrolledWindowGetVadjustmentFunction_Set() error {
	var err error
	scrolledWindowGetVadjustmentFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetVadjustmentFunction, err = scrolledWindowStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_scrolled_window_get_vadjustment.
func (recv *ScrolledWindow) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetVadjustmentFunction_Set()
	if err == nil {
		ret = scrolledWindowGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scrolledWindowGetVscrollbarFunction *gi.Function
var scrolledWindowGetVscrollbarFunction_Once sync.Once

func scrolledWindowGetVscrollbarFunction_Set() error {
	var err error
	scrolledWindowGetVscrollbarFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowGetVscrollbarFunction, err = scrolledWindowStruct.InvokerNew("get_vscrollbar")
	})
	return err
}

// GetVscrollbar is a representation of the C type gtk_scrolled_window_get_vscrollbar.
func (recv *ScrolledWindow) GetVscrollbar() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := scrolledWindowGetVscrollbarFunction_Set()
	if err == nil {
		ret = scrolledWindowGetVscrollbarFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var scrolledWindowSetCaptureButtonPressFunction *gi.Function
var scrolledWindowSetCaptureButtonPressFunction_Once sync.Once

func scrolledWindowSetCaptureButtonPressFunction_Set() error {
	var err error
	scrolledWindowSetCaptureButtonPressFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetCaptureButtonPressFunction, err = scrolledWindowStruct.InvokerNew("set_capture_button_press")
	})
	return err
}

// SetCaptureButtonPress is a representation of the C type gtk_scrolled_window_set_capture_button_press.
func (recv *ScrolledWindow) SetCaptureButtonPress(captureButtonPress bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(captureButtonPress)

	err := scrolledWindowSetCaptureButtonPressFunction_Set()
	if err == nil {
		scrolledWindowSetCaptureButtonPressFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetHadjustmentFunction *gi.Function
var scrolledWindowSetHadjustmentFunction_Once sync.Once

func scrolledWindowSetHadjustmentFunction_Set() error {
	var err error
	scrolledWindowSetHadjustmentFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetHadjustmentFunction, err = scrolledWindowStruct.InvokerNew("set_hadjustment")
	})
	return err
}

// SetHadjustment is a representation of the C type gtk_scrolled_window_set_hadjustment.
func (recv *ScrolledWindow) SetHadjustment(hadjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(hadjustment.Native)

	err := scrolledWindowSetHadjustmentFunction_Set()
	if err == nil {
		scrolledWindowSetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetKineticScrollingFunction *gi.Function
var scrolledWindowSetKineticScrollingFunction_Once sync.Once

func scrolledWindowSetKineticScrollingFunction_Set() error {
	var err error
	scrolledWindowSetKineticScrollingFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetKineticScrollingFunction, err = scrolledWindowStruct.InvokerNew("set_kinetic_scrolling")
	})
	return err
}

// SetKineticScrolling is a representation of the C type gtk_scrolled_window_set_kinetic_scrolling.
func (recv *ScrolledWindow) SetKineticScrolling(kineticScrolling bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(kineticScrolling)

	err := scrolledWindowSetKineticScrollingFunction_Set()
	if err == nil {
		scrolledWindowSetKineticScrollingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetMaxContentHeightFunction *gi.Function
var scrolledWindowSetMaxContentHeightFunction_Once sync.Once

func scrolledWindowSetMaxContentHeightFunction_Set() error {
	var err error
	scrolledWindowSetMaxContentHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetMaxContentHeightFunction, err = scrolledWindowStruct.InvokerNew("set_max_content_height")
	})
	return err
}

// SetMaxContentHeight is a representation of the C type gtk_scrolled_window_set_max_content_height.
func (recv *ScrolledWindow) SetMaxContentHeight(height int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(height)

	err := scrolledWindowSetMaxContentHeightFunction_Set()
	if err == nil {
		scrolledWindowSetMaxContentHeightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetMaxContentWidthFunction *gi.Function
var scrolledWindowSetMaxContentWidthFunction_Once sync.Once

func scrolledWindowSetMaxContentWidthFunction_Set() error {
	var err error
	scrolledWindowSetMaxContentWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetMaxContentWidthFunction, err = scrolledWindowStruct.InvokerNew("set_max_content_width")
	})
	return err
}

// SetMaxContentWidth is a representation of the C type gtk_scrolled_window_set_max_content_width.
func (recv *ScrolledWindow) SetMaxContentWidth(width int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	err := scrolledWindowSetMaxContentWidthFunction_Set()
	if err == nil {
		scrolledWindowSetMaxContentWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetMinContentHeightFunction *gi.Function
var scrolledWindowSetMinContentHeightFunction_Once sync.Once

func scrolledWindowSetMinContentHeightFunction_Set() error {
	var err error
	scrolledWindowSetMinContentHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetMinContentHeightFunction, err = scrolledWindowStruct.InvokerNew("set_min_content_height")
	})
	return err
}

// SetMinContentHeight is a representation of the C type gtk_scrolled_window_set_min_content_height.
func (recv *ScrolledWindow) SetMinContentHeight(height int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(height)

	err := scrolledWindowSetMinContentHeightFunction_Set()
	if err == nil {
		scrolledWindowSetMinContentHeightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetMinContentWidthFunction *gi.Function
var scrolledWindowSetMinContentWidthFunction_Once sync.Once

func scrolledWindowSetMinContentWidthFunction_Set() error {
	var err error
	scrolledWindowSetMinContentWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetMinContentWidthFunction, err = scrolledWindowStruct.InvokerNew("set_min_content_width")
	})
	return err
}

// SetMinContentWidth is a representation of the C type gtk_scrolled_window_set_min_content_width.
func (recv *ScrolledWindow) SetMinContentWidth(width int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	err := scrolledWindowSetMinContentWidthFunction_Set()
	if err == nil {
		scrolledWindowSetMinContentWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetOverlayScrollingFunction *gi.Function
var scrolledWindowSetOverlayScrollingFunction_Once sync.Once

func scrolledWindowSetOverlayScrollingFunction_Set() error {
	var err error
	scrolledWindowSetOverlayScrollingFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetOverlayScrollingFunction, err = scrolledWindowStruct.InvokerNew("set_overlay_scrolling")
	})
	return err
}

// SetOverlayScrolling is a representation of the C type gtk_scrolled_window_set_overlay_scrolling.
func (recv *ScrolledWindow) SetOverlayScrolling(overlayScrolling bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(overlayScrolling)

	err := scrolledWindowSetOverlayScrollingFunction_Set()
	if err == nil {
		scrolledWindowSetOverlayScrollingFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_scrolled_window_set_placement' : parameter 'window_placement' of type 'CornerType' not supported

// UNSUPPORTED : C value 'gtk_scrolled_window_set_policy' : parameter 'hscrollbar_policy' of type 'PolicyType' not supported

var scrolledWindowSetPropagateNaturalHeightFunction *gi.Function
var scrolledWindowSetPropagateNaturalHeightFunction_Once sync.Once

func scrolledWindowSetPropagateNaturalHeightFunction_Set() error {
	var err error
	scrolledWindowSetPropagateNaturalHeightFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetPropagateNaturalHeightFunction, err = scrolledWindowStruct.InvokerNew("set_propagate_natural_height")
	})
	return err
}

// SetPropagateNaturalHeight is a representation of the C type gtk_scrolled_window_set_propagate_natural_height.
func (recv *ScrolledWindow) SetPropagateNaturalHeight(propagate bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(propagate)

	err := scrolledWindowSetPropagateNaturalHeightFunction_Set()
	if err == nil {
		scrolledWindowSetPropagateNaturalHeightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowSetPropagateNaturalWidthFunction *gi.Function
var scrolledWindowSetPropagateNaturalWidthFunction_Once sync.Once

func scrolledWindowSetPropagateNaturalWidthFunction_Set() error {
	var err error
	scrolledWindowSetPropagateNaturalWidthFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetPropagateNaturalWidthFunction, err = scrolledWindowStruct.InvokerNew("set_propagate_natural_width")
	})
	return err
}

// SetPropagateNaturalWidth is a representation of the C type gtk_scrolled_window_set_propagate_natural_width.
func (recv *ScrolledWindow) SetPropagateNaturalWidth(propagate bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(propagate)

	err := scrolledWindowSetPropagateNaturalWidthFunction_Set()
	if err == nil {
		scrolledWindowSetPropagateNaturalWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_scrolled_window_set_shadow_type' : parameter 'type' of type 'ShadowType' not supported

var scrolledWindowSetVadjustmentFunction *gi.Function
var scrolledWindowSetVadjustmentFunction_Once sync.Once

func scrolledWindowSetVadjustmentFunction_Set() error {
	var err error
	scrolledWindowSetVadjustmentFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowSetVadjustmentFunction, err = scrolledWindowStruct.InvokerNew("set_vadjustment")
	})
	return err
}

// SetVadjustment is a representation of the C type gtk_scrolled_window_set_vadjustment.
func (recv *ScrolledWindow) SetVadjustment(vadjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(vadjustment.Native)

	err := scrolledWindowSetVadjustmentFunction_Set()
	if err == nil {
		scrolledWindowSetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowUnsetPlacementFunction *gi.Function
var scrolledWindowUnsetPlacementFunction_Once sync.Once

func scrolledWindowUnsetPlacementFunction_Set() error {
	var err error
	scrolledWindowUnsetPlacementFunction_Once.Do(func() {
		err = scrolledWindowStruct_Set()
		if err != nil {
			return
		}
		scrolledWindowUnsetPlacementFunction, err = scrolledWindowStruct.InvokerNew("unset_placement")
	})
	return err
}

// UnsetPlacement is a representation of the C type gtk_scrolled_window_unset_placement.
func (recv *ScrolledWindow) UnsetPlacement() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := scrolledWindowUnsetPlacementFunction_Set()
	if err == nil {
		scrolledWindowUnsetPlacementFunction.Invoke(inArgs[:], nil)
	}

	return
}

var scrolledWindowAccessibleStruct *gi.Struct
var scrolledWindowAccessibleStruct_Once sync.Once

func scrolledWindowAccessibleStruct_Set() error {
	var err error
	scrolledWindowAccessibleStruct_Once.Do(func() {
		scrolledWindowAccessibleStruct, err = gi.StructNew("Gtk", "ScrolledWindowAccessible")
	})
	return err
}

type ScrolledWindowAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ScrolledWindowAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(scrolledWindowAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ScrolledWindowAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scrolledWindowAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ScrolledWindowAccessible) FieldPriv() *ScrolledWindowAccessiblePrivate {
	argValue := gi.FieldGet(scrolledWindowAccessibleStruct, recv.Native, "priv")
	value := &ScrolledWindowAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ScrolledWindowAccessible) SetFieldPriv(value *ScrolledWindowAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(scrolledWindowAccessibleStruct, recv.Native, "priv", argValue)
}

// ScrolledWindowAccessibleStruct creates an uninitialised ScrolledWindowAccessible.
func ScrolledWindowAccessibleStruct() *ScrolledWindowAccessible {
	err := scrolledWindowAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ScrolledWindowAccessible{}
	structGo.Native = scrolledWindowAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeScrolledWindowAccessible)
	return structGo
}
func finalizeScrolledWindowAccessible(obj *ScrolledWindowAccessible) {
	scrolledWindowAccessibleStruct.Free(obj.Native)
}

var searchBarStruct *gi.Struct
var searchBarStruct_Once sync.Once

func searchBarStruct_Set() error {
	var err error
	searchBarStruct_Once.Do(func() {
		searchBarStruct, err = gi.StructNew("Gtk", "SearchBar")
	})
	return err
}

type SearchBar struct {
	Bin
}

var searchBarNewFunction *gi.Function
var searchBarNewFunction_Once sync.Once

func searchBarNewFunction_Set() error {
	var err error
	searchBarNewFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarNewFunction, err = searchBarStruct.InvokerNew("new")
	})
	return err
}

// SearchBarNew is a representation of the C type gtk_search_bar_new.
func SearchBarNew() *SearchBar {

	var ret gi.Argument

	err := searchBarNewFunction_Set()
	if err == nil {
		ret = searchBarNewFunction.Invoke(nil, nil)
	}

	retGo := &SearchBar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var searchBarConnectEntryFunction *gi.Function
var searchBarConnectEntryFunction_Once sync.Once

func searchBarConnectEntryFunction_Set() error {
	var err error
	searchBarConnectEntryFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarConnectEntryFunction, err = searchBarStruct.InvokerNew("connect_entry")
	})
	return err
}

// ConnectEntry is a representation of the C type gtk_search_bar_connect_entry.
func (recv *SearchBar) ConnectEntry(entry *Entry) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(entry.Native)

	err := searchBarConnectEntryFunction_Set()
	if err == nil {
		searchBarConnectEntryFunction.Invoke(inArgs[:], nil)
	}

	return
}

var searchBarGetSearchModeFunction *gi.Function
var searchBarGetSearchModeFunction_Once sync.Once

func searchBarGetSearchModeFunction_Set() error {
	var err error
	searchBarGetSearchModeFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarGetSearchModeFunction, err = searchBarStruct.InvokerNew("get_search_mode")
	})
	return err
}

// GetSearchMode is a representation of the C type gtk_search_bar_get_search_mode.
func (recv *SearchBar) GetSearchMode() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := searchBarGetSearchModeFunction_Set()
	if err == nil {
		ret = searchBarGetSearchModeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var searchBarGetShowCloseButtonFunction *gi.Function
var searchBarGetShowCloseButtonFunction_Once sync.Once

func searchBarGetShowCloseButtonFunction_Set() error {
	var err error
	searchBarGetShowCloseButtonFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarGetShowCloseButtonFunction, err = searchBarStruct.InvokerNew("get_show_close_button")
	})
	return err
}

// GetShowCloseButton is a representation of the C type gtk_search_bar_get_show_close_button.
func (recv *SearchBar) GetShowCloseButton() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := searchBarGetShowCloseButtonFunction_Set()
	if err == nil {
		ret = searchBarGetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_search_bar_handle_event' : parameter 'event' of type 'Gdk.Event' not supported

var searchBarSetSearchModeFunction *gi.Function
var searchBarSetSearchModeFunction_Once sync.Once

func searchBarSetSearchModeFunction_Set() error {
	var err error
	searchBarSetSearchModeFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarSetSearchModeFunction, err = searchBarStruct.InvokerNew("set_search_mode")
	})
	return err
}

// SetSearchMode is a representation of the C type gtk_search_bar_set_search_mode.
func (recv *SearchBar) SetSearchMode(searchMode bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(searchMode)

	err := searchBarSetSearchModeFunction_Set()
	if err == nil {
		searchBarSetSearchModeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var searchBarSetShowCloseButtonFunction *gi.Function
var searchBarSetShowCloseButtonFunction_Once sync.Once

func searchBarSetShowCloseButtonFunction_Set() error {
	var err error
	searchBarSetShowCloseButtonFunction_Once.Do(func() {
		err = searchBarStruct_Set()
		if err != nil {
			return
		}
		searchBarSetShowCloseButtonFunction, err = searchBarStruct.InvokerNew("set_show_close_button")
	})
	return err
}

// SetShowCloseButton is a representation of the C type gtk_search_bar_set_show_close_button.
func (recv *SearchBar) SetShowCloseButton(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := searchBarSetShowCloseButtonFunction_Set()
	if err == nil {
		searchBarSetShowCloseButtonFunction.Invoke(inArgs[:], nil)
	}

	return
}

var searchEntryStruct *gi.Struct
var searchEntryStruct_Once sync.Once

func searchEntryStruct_Set() error {
	var err error
	searchEntryStruct_Once.Do(func() {
		searchEntryStruct, err = gi.StructNew("Gtk", "SearchEntry")
	})
	return err
}

type SearchEntry struct {
	Entry
}

// FieldParent returns the C field 'parent'.
func (recv *SearchEntry) FieldParent() *Entry {
	argValue := gi.FieldGet(searchEntryStruct, recv.Native, "parent")
	value := &Entry{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *SearchEntry) SetFieldParent(value *Entry) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(searchEntryStruct, recv.Native, "parent", argValue)
}

var searchEntryNewFunction *gi.Function
var searchEntryNewFunction_Once sync.Once

func searchEntryNewFunction_Set() error {
	var err error
	searchEntryNewFunction_Once.Do(func() {
		err = searchEntryStruct_Set()
		if err != nil {
			return
		}
		searchEntryNewFunction, err = searchEntryStruct.InvokerNew("new")
	})
	return err
}

// SearchEntryNew is a representation of the C type gtk_search_entry_new.
func SearchEntryNew() *SearchEntry {

	var ret gi.Argument

	err := searchEntryNewFunction_Set()
	if err == nil {
		ret = searchEntryNewFunction.Invoke(nil, nil)
	}

	retGo := &SearchEntry{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_search_entry_handle_event' : parameter 'event' of type 'Gdk.Event' not supported

var separatorStruct *gi.Struct
var separatorStruct_Once sync.Once

func separatorStruct_Set() error {
	var err error
	separatorStruct_Once.Do(func() {
		separatorStruct, err = gi.StructNew("Gtk", "Separator")
	})
	return err
}

type Separator struct {
	Widget
}

// FieldWidget returns the C field 'widget'.
func (recv *Separator) FieldWidget() *Widget {
	argValue := gi.FieldGet(separatorStruct, recv.Native, "widget")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *Separator) SetFieldWidget(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(separatorStruct, recv.Native, "widget", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Separator) FieldPriv() *SeparatorPrivate {
	argValue := gi.FieldGet(separatorStruct, recv.Native, "priv")
	value := &SeparatorPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Separator) SetFieldPriv(value *SeparatorPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(separatorStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_separator_new' : parameter 'orientation' of type 'Orientation' not supported

var separatorMenuItemStruct *gi.Struct
var separatorMenuItemStruct_Once sync.Once

func separatorMenuItemStruct_Set() error {
	var err error
	separatorMenuItemStruct_Once.Do(func() {
		separatorMenuItemStruct, err = gi.StructNew("Gtk", "SeparatorMenuItem")
	})
	return err
}

type SeparatorMenuItem struct {
	MenuItem
}

// FieldMenuItem returns the C field 'menu_item'.
func (recv *SeparatorMenuItem) FieldMenuItem() *MenuItem {
	argValue := gi.FieldGet(separatorMenuItemStruct, recv.Native, "menu_item")
	value := &MenuItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuItem sets the value of the C field 'menu_item'.
func (recv *SeparatorMenuItem) SetFieldMenuItem(value *MenuItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(separatorMenuItemStruct, recv.Native, "menu_item", argValue)
}

var separatorMenuItemNewFunction *gi.Function
var separatorMenuItemNewFunction_Once sync.Once

func separatorMenuItemNewFunction_Set() error {
	var err error
	separatorMenuItemNewFunction_Once.Do(func() {
		err = separatorMenuItemStruct_Set()
		if err != nil {
			return
		}
		separatorMenuItemNewFunction, err = separatorMenuItemStruct.InvokerNew("new")
	})
	return err
}

// SeparatorMenuItemNew is a representation of the C type gtk_separator_menu_item_new.
func SeparatorMenuItemNew() *SeparatorMenuItem {

	var ret gi.Argument

	err := separatorMenuItemNewFunction_Set()
	if err == nil {
		ret = separatorMenuItemNewFunction.Invoke(nil, nil)
	}

	retGo := &SeparatorMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var separatorToolItemStruct *gi.Struct
var separatorToolItemStruct_Once sync.Once

func separatorToolItemStruct_Set() error {
	var err error
	separatorToolItemStruct_Once.Do(func() {
		separatorToolItemStruct, err = gi.StructNew("Gtk", "SeparatorToolItem")
	})
	return err
}

type SeparatorToolItem struct {
	ToolItem
}

// FieldParent returns the C field 'parent'.
func (recv *SeparatorToolItem) FieldParent() *ToolItem {
	argValue := gi.FieldGet(separatorToolItemStruct, recv.Native, "parent")
	value := &ToolItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *SeparatorToolItem) SetFieldParent(value *ToolItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(separatorToolItemStruct, recv.Native, "parent", argValue)
}

var separatorToolItemNewFunction *gi.Function
var separatorToolItemNewFunction_Once sync.Once

func separatorToolItemNewFunction_Set() error {
	var err error
	separatorToolItemNewFunction_Once.Do(func() {
		err = separatorToolItemStruct_Set()
		if err != nil {
			return
		}
		separatorToolItemNewFunction, err = separatorToolItemStruct.InvokerNew("new")
	})
	return err
}

// SeparatorToolItemNew is a representation of the C type gtk_separator_tool_item_new.
func SeparatorToolItemNew() *SeparatorToolItem {

	var ret gi.Argument

	err := separatorToolItemNewFunction_Set()
	if err == nil {
		ret = separatorToolItemNewFunction.Invoke(nil, nil)
	}

	retGo := &SeparatorToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var separatorToolItemGetDrawFunction *gi.Function
var separatorToolItemGetDrawFunction_Once sync.Once

func separatorToolItemGetDrawFunction_Set() error {
	var err error
	separatorToolItemGetDrawFunction_Once.Do(func() {
		err = separatorToolItemStruct_Set()
		if err != nil {
			return
		}
		separatorToolItemGetDrawFunction, err = separatorToolItemStruct.InvokerNew("get_draw")
	})
	return err
}

// GetDraw is a representation of the C type gtk_separator_tool_item_get_draw.
func (recv *SeparatorToolItem) GetDraw() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := separatorToolItemGetDrawFunction_Set()
	if err == nil {
		ret = separatorToolItemGetDrawFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var separatorToolItemSetDrawFunction *gi.Function
var separatorToolItemSetDrawFunction_Once sync.Once

func separatorToolItemSetDrawFunction_Set() error {
	var err error
	separatorToolItemSetDrawFunction_Once.Do(func() {
		err = separatorToolItemStruct_Set()
		if err != nil {
			return
		}
		separatorToolItemSetDrawFunction, err = separatorToolItemStruct.InvokerNew("set_draw")
	})
	return err
}

// SetDraw is a representation of the C type gtk_separator_tool_item_set_draw.
func (recv *SeparatorToolItem) SetDraw(draw bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(draw)

	err := separatorToolItemSetDrawFunction_Set()
	if err == nil {
		separatorToolItemSetDrawFunction.Invoke(inArgs[:], nil)
	}

	return
}

var settingsStruct *gi.Struct
var settingsStruct_Once sync.Once

func settingsStruct_Set() error {
	var err error
	settingsStruct_Once.Do(func() {
		settingsStruct, err = gi.StructNew("Gtk", "Settings")
	})
	return err
}

type Settings struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var settingsResetPropertyFunction *gi.Function
var settingsResetPropertyFunction_Once sync.Once

func settingsResetPropertyFunction_Set() error {
	var err error
	settingsResetPropertyFunction_Once.Do(func() {
		err = settingsStruct_Set()
		if err != nil {
			return
		}
		settingsResetPropertyFunction, err = settingsStruct.InvokerNew("reset_property")
	})
	return err
}

// ResetProperty is a representation of the C type gtk_settings_reset_property.
func (recv *Settings) ResetProperty(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := settingsResetPropertyFunction_Set()
	if err == nil {
		settingsResetPropertyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var settingsSetDoublePropertyFunction *gi.Function
var settingsSetDoublePropertyFunction_Once sync.Once

func settingsSetDoublePropertyFunction_Set() error {
	var err error
	settingsSetDoublePropertyFunction_Once.Do(func() {
		err = settingsStruct_Set()
		if err != nil {
			return
		}
		settingsSetDoublePropertyFunction, err = settingsStruct.InvokerNew("set_double_property")
	})
	return err
}

// SetDoubleProperty is a representation of the C type gtk_settings_set_double_property.
func (recv *Settings) SetDoubleProperty(name string, vDouble float64, origin string) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetFloat64(vDouble)
	inArgs[3].SetString(origin)

	err := settingsSetDoublePropertyFunction_Set()
	if err == nil {
		settingsSetDoublePropertyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var settingsSetLongPropertyFunction *gi.Function
var settingsSetLongPropertyFunction_Once sync.Once

func settingsSetLongPropertyFunction_Set() error {
	var err error
	settingsSetLongPropertyFunction_Once.Do(func() {
		err = settingsStruct_Set()
		if err != nil {
			return
		}
		settingsSetLongPropertyFunction, err = settingsStruct.InvokerNew("set_long_property")
	})
	return err
}

// SetLongProperty is a representation of the C type gtk_settings_set_long_property.
func (recv *Settings) SetLongProperty(name string, vLong int64, origin string) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetInt64(vLong)
	inArgs[3].SetString(origin)

	err := settingsSetLongPropertyFunction_Set()
	if err == nil {
		settingsSetLongPropertyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var settingsSetPropertyValueFunction *gi.Function
var settingsSetPropertyValueFunction_Once sync.Once

func settingsSetPropertyValueFunction_Set() error {
	var err error
	settingsSetPropertyValueFunction_Once.Do(func() {
		err = settingsStruct_Set()
		if err != nil {
			return
		}
		settingsSetPropertyValueFunction, err = settingsStruct.InvokerNew("set_property_value")
	})
	return err
}

// SetPropertyValue is a representation of the C type gtk_settings_set_property_value.
func (recv *Settings) SetPropertyValue(name string, svalue *SettingsValue) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetPointer(svalue.Native)

	err := settingsSetPropertyValueFunction_Set()
	if err == nil {
		settingsSetPropertyValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var settingsSetStringPropertyFunction *gi.Function
var settingsSetStringPropertyFunction_Once sync.Once

func settingsSetStringPropertyFunction_Set() error {
	var err error
	settingsSetStringPropertyFunction_Once.Do(func() {
		err = settingsStruct_Set()
		if err != nil {
			return
		}
		settingsSetStringPropertyFunction, err = settingsStruct.InvokerNew("set_string_property")
	})
	return err
}

// SetStringProperty is a representation of the C type gtk_settings_set_string_property.
func (recv *Settings) SetStringProperty(name string, vString string, origin string) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetString(vString)
	inArgs[3].SetString(origin)

	err := settingsSetStringPropertyFunction_Set()
	if err == nil {
		settingsSetStringPropertyFunction.Invoke(inArgs[:], nil)
	}

	return
}

// SettingsStruct creates an uninitialised Settings.
func SettingsStruct() *Settings {
	err := settingsStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Settings{}
	structGo.Native = settingsStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeSettings)
	return structGo
}
func finalizeSettings(obj *Settings) {
	settingsStruct.Free(obj.Native)
}

var shortcutLabelStruct *gi.Struct
var shortcutLabelStruct_Once sync.Once

func shortcutLabelStruct_Set() error {
	var err error
	shortcutLabelStruct_Once.Do(func() {
		shortcutLabelStruct, err = gi.StructNew("Gtk", "ShortcutLabel")
	})
	return err
}

type ShortcutLabel struct {
	Box
}

var shortcutLabelNewFunction *gi.Function
var shortcutLabelNewFunction_Once sync.Once

func shortcutLabelNewFunction_Set() error {
	var err error
	shortcutLabelNewFunction_Once.Do(func() {
		err = shortcutLabelStruct_Set()
		if err != nil {
			return
		}
		shortcutLabelNewFunction, err = shortcutLabelStruct.InvokerNew("new")
	})
	return err
}

// ShortcutLabelNew is a representation of the C type gtk_shortcut_label_new.
func ShortcutLabelNew(accelerator string) *ShortcutLabel {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(accelerator)

	var ret gi.Argument

	err := shortcutLabelNewFunction_Set()
	if err == nil {
		ret = shortcutLabelNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ShortcutLabel{}
	retGo.Native = ret.Pointer()

	return retGo
}

var shortcutLabelGetAcceleratorFunction *gi.Function
var shortcutLabelGetAcceleratorFunction_Once sync.Once

func shortcutLabelGetAcceleratorFunction_Set() error {
	var err error
	shortcutLabelGetAcceleratorFunction_Once.Do(func() {
		err = shortcutLabelStruct_Set()
		if err != nil {
			return
		}
		shortcutLabelGetAcceleratorFunction, err = shortcutLabelStruct.InvokerNew("get_accelerator")
	})
	return err
}

// GetAccelerator is a representation of the C type gtk_shortcut_label_get_accelerator.
func (recv *ShortcutLabel) GetAccelerator() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := shortcutLabelGetAcceleratorFunction_Set()
	if err == nil {
		ret = shortcutLabelGetAcceleratorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var shortcutLabelGetDisabledTextFunction *gi.Function
var shortcutLabelGetDisabledTextFunction_Once sync.Once

func shortcutLabelGetDisabledTextFunction_Set() error {
	var err error
	shortcutLabelGetDisabledTextFunction_Once.Do(func() {
		err = shortcutLabelStruct_Set()
		if err != nil {
			return
		}
		shortcutLabelGetDisabledTextFunction, err = shortcutLabelStruct.InvokerNew("get_disabled_text")
	})
	return err
}

// GetDisabledText is a representation of the C type gtk_shortcut_label_get_disabled_text.
func (recv *ShortcutLabel) GetDisabledText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := shortcutLabelGetDisabledTextFunction_Set()
	if err == nil {
		ret = shortcutLabelGetDisabledTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var shortcutLabelSetAcceleratorFunction *gi.Function
var shortcutLabelSetAcceleratorFunction_Once sync.Once

func shortcutLabelSetAcceleratorFunction_Set() error {
	var err error
	shortcutLabelSetAcceleratorFunction_Once.Do(func() {
		err = shortcutLabelStruct_Set()
		if err != nil {
			return
		}
		shortcutLabelSetAcceleratorFunction, err = shortcutLabelStruct.InvokerNew("set_accelerator")
	})
	return err
}

// SetAccelerator is a representation of the C type gtk_shortcut_label_set_accelerator.
func (recv *ShortcutLabel) SetAccelerator(accelerator string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accelerator)

	err := shortcutLabelSetAcceleratorFunction_Set()
	if err == nil {
		shortcutLabelSetAcceleratorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var shortcutLabelSetDisabledTextFunction *gi.Function
var shortcutLabelSetDisabledTextFunction_Once sync.Once

func shortcutLabelSetDisabledTextFunction_Set() error {
	var err error
	shortcutLabelSetDisabledTextFunction_Once.Do(func() {
		err = shortcutLabelStruct_Set()
		if err != nil {
			return
		}
		shortcutLabelSetDisabledTextFunction, err = shortcutLabelStruct.InvokerNew("set_disabled_text")
	})
	return err
}

// SetDisabledText is a representation of the C type gtk_shortcut_label_set_disabled_text.
func (recv *ShortcutLabel) SetDisabledText(disabledText string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(disabledText)

	err := shortcutLabelSetDisabledTextFunction_Set()
	if err == nil {
		shortcutLabelSetDisabledTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var shortcutsGroupStruct *gi.Struct
var shortcutsGroupStruct_Once sync.Once

func shortcutsGroupStruct_Set() error {
	var err error
	shortcutsGroupStruct_Once.Do(func() {
		shortcutsGroupStruct, err = gi.StructNew("Gtk", "ShortcutsGroup")
	})
	return err
}

type ShortcutsGroup struct {
	Box
}

// ShortcutsGroupStruct creates an uninitialised ShortcutsGroup.
func ShortcutsGroupStruct() *ShortcutsGroup {
	err := shortcutsGroupStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ShortcutsGroup{}
	structGo.Native = shortcutsGroupStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeShortcutsGroup)
	return structGo
}
func finalizeShortcutsGroup(obj *ShortcutsGroup) {
	shortcutsGroupStruct.Free(obj.Native)
}

var shortcutsSectionStruct *gi.Struct
var shortcutsSectionStruct_Once sync.Once

func shortcutsSectionStruct_Set() error {
	var err error
	shortcutsSectionStruct_Once.Do(func() {
		shortcutsSectionStruct, err = gi.StructNew("Gtk", "ShortcutsSection")
	})
	return err
}

type ShortcutsSection struct {
	Box
}

// ShortcutsSectionStruct creates an uninitialised ShortcutsSection.
func ShortcutsSectionStruct() *ShortcutsSection {
	err := shortcutsSectionStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ShortcutsSection{}
	structGo.Native = shortcutsSectionStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeShortcutsSection)
	return structGo
}
func finalizeShortcutsSection(obj *ShortcutsSection) {
	shortcutsSectionStruct.Free(obj.Native)
}

var shortcutsShortcutStruct *gi.Struct
var shortcutsShortcutStruct_Once sync.Once

func shortcutsShortcutStruct_Set() error {
	var err error
	shortcutsShortcutStruct_Once.Do(func() {
		shortcutsShortcutStruct, err = gi.StructNew("Gtk", "ShortcutsShortcut")
	})
	return err
}

type ShortcutsShortcut struct {
	Box
}

// ShortcutsShortcutStruct creates an uninitialised ShortcutsShortcut.
func ShortcutsShortcutStruct() *ShortcutsShortcut {
	err := shortcutsShortcutStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ShortcutsShortcut{}
	structGo.Native = shortcutsShortcutStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeShortcutsShortcut)
	return structGo
}
func finalizeShortcutsShortcut(obj *ShortcutsShortcut) {
	shortcutsShortcutStruct.Free(obj.Native)
}

var shortcutsWindowStruct *gi.Struct
var shortcutsWindowStruct_Once sync.Once

func shortcutsWindowStruct_Set() error {
	var err error
	shortcutsWindowStruct_Once.Do(func() {
		shortcutsWindowStruct, err = gi.StructNew("Gtk", "ShortcutsWindow")
	})
	return err
}

type ShortcutsWindow struct {
	Window
}

// FieldWindow returns the C field 'window'.
func (recv *ShortcutsWindow) FieldWindow() *Window {
	argValue := gi.FieldGet(shortcutsWindowStruct, recv.Native, "window")
	value := &Window{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWindow sets the value of the C field 'window'.
func (recv *ShortcutsWindow) SetFieldWindow(value *Window) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(shortcutsWindowStruct, recv.Native, "window", argValue)
}

// ShortcutsWindowStruct creates an uninitialised ShortcutsWindow.
func ShortcutsWindowStruct() *ShortcutsWindow {
	err := shortcutsWindowStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ShortcutsWindow{}
	structGo.Native = shortcutsWindowStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeShortcutsWindow)
	return structGo
}
func finalizeShortcutsWindow(obj *ShortcutsWindow) {
	shortcutsWindowStruct.Free(obj.Native)
}

var sizeGroupStruct *gi.Struct
var sizeGroupStruct_Once sync.Once

func sizeGroupStruct_Set() error {
	var err error
	sizeGroupStruct_Once.Do(func() {
		sizeGroupStruct, err = gi.StructNew("Gtk", "SizeGroup")
	})
	return err
}

type SizeGroup struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'gtk_size_group_new' : parameter 'mode' of type 'SizeGroupMode' not supported

var sizeGroupAddWidgetFunction *gi.Function
var sizeGroupAddWidgetFunction_Once sync.Once

func sizeGroupAddWidgetFunction_Set() error {
	var err error
	sizeGroupAddWidgetFunction_Once.Do(func() {
		err = sizeGroupStruct_Set()
		if err != nil {
			return
		}
		sizeGroupAddWidgetFunction, err = sizeGroupStruct.InvokerNew("add_widget")
	})
	return err
}

// AddWidget is a representation of the C type gtk_size_group_add_widget.
func (recv *SizeGroup) AddWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := sizeGroupAddWidgetFunction_Set()
	if err == nil {
		sizeGroupAddWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var sizeGroupGetIgnoreHiddenFunction *gi.Function
var sizeGroupGetIgnoreHiddenFunction_Once sync.Once

func sizeGroupGetIgnoreHiddenFunction_Set() error {
	var err error
	sizeGroupGetIgnoreHiddenFunction_Once.Do(func() {
		err = sizeGroupStruct_Set()
		if err != nil {
			return
		}
		sizeGroupGetIgnoreHiddenFunction, err = sizeGroupStruct.InvokerNew("get_ignore_hidden")
	})
	return err
}

// GetIgnoreHidden is a representation of the C type gtk_size_group_get_ignore_hidden.
func (recv *SizeGroup) GetIgnoreHidden() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := sizeGroupGetIgnoreHiddenFunction_Set()
	if err == nil {
		ret = sizeGroupGetIgnoreHiddenFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_size_group_get_mode' : return type 'SizeGroupMode' not supported

// UNSUPPORTED : C value 'gtk_size_group_get_widgets' : return type 'GLib.SList' not supported

var sizeGroupRemoveWidgetFunction *gi.Function
var sizeGroupRemoveWidgetFunction_Once sync.Once

func sizeGroupRemoveWidgetFunction_Set() error {
	var err error
	sizeGroupRemoveWidgetFunction_Once.Do(func() {
		err = sizeGroupStruct_Set()
		if err != nil {
			return
		}
		sizeGroupRemoveWidgetFunction, err = sizeGroupStruct.InvokerNew("remove_widget")
	})
	return err
}

// RemoveWidget is a representation of the C type gtk_size_group_remove_widget.
func (recv *SizeGroup) RemoveWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := sizeGroupRemoveWidgetFunction_Set()
	if err == nil {
		sizeGroupRemoveWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var sizeGroupSetIgnoreHiddenFunction *gi.Function
var sizeGroupSetIgnoreHiddenFunction_Once sync.Once

func sizeGroupSetIgnoreHiddenFunction_Set() error {
	var err error
	sizeGroupSetIgnoreHiddenFunction_Once.Do(func() {
		err = sizeGroupStruct_Set()
		if err != nil {
			return
		}
		sizeGroupSetIgnoreHiddenFunction, err = sizeGroupStruct.InvokerNew("set_ignore_hidden")
	})
	return err
}

// SetIgnoreHidden is a representation of the C type gtk_size_group_set_ignore_hidden.
func (recv *SizeGroup) SetIgnoreHidden(ignoreHidden bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(ignoreHidden)

	err := sizeGroupSetIgnoreHiddenFunction_Set()
	if err == nil {
		sizeGroupSetIgnoreHiddenFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_size_group_set_mode' : parameter 'mode' of type 'SizeGroupMode' not supported

var socketStruct *gi.Struct
var socketStruct_Once sync.Once

func socketStruct_Set() error {
	var err error
	socketStruct_Once.Do(func() {
		socketStruct, err = gi.StructNew("Gtk", "Socket")
	})
	return err
}

type Socket struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Socket) FieldContainer() *Container {
	argValue := gi.FieldGet(socketStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Socket) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(socketStruct, recv.Native, "container", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Socket) FieldPriv() *SocketPrivate {
	argValue := gi.FieldGet(socketStruct, recv.Native, "priv")
	value := &SocketPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Socket) SetFieldPriv(value *SocketPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(socketStruct, recv.Native, "priv", argValue)
}

var socketNewFunction *gi.Function
var socketNewFunction_Once sync.Once

func socketNewFunction_Set() error {
	var err error
	socketNewFunction_Once.Do(func() {
		err = socketStruct_Set()
		if err != nil {
			return
		}
		socketNewFunction, err = socketStruct.InvokerNew("new")
	})
	return err
}

// SocketNew is a representation of the C type gtk_socket_new.
func SocketNew() *Socket {

	var ret gi.Argument

	err := socketNewFunction_Set()
	if err == nil {
		ret = socketNewFunction.Invoke(nil, nil)
	}

	retGo := &Socket{}
	retGo.Native = ret.Pointer()

	return retGo
}

var socketAddIdFunction *gi.Function
var socketAddIdFunction_Once sync.Once

func socketAddIdFunction_Set() error {
	var err error
	socketAddIdFunction_Once.Do(func() {
		err = socketStruct_Set()
		if err != nil {
			return
		}
		socketAddIdFunction, err = socketStruct.InvokerNew("add_id")
	})
	return err
}

// AddId is a representation of the C type gtk_socket_add_id.
func (recv *Socket) AddId(window xlib.Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint64(uint64(window))

	err := socketAddIdFunction_Set()
	if err == nil {
		socketAddIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var socketGetIdFunction *gi.Function
var socketGetIdFunction_Once sync.Once

func socketGetIdFunction_Set() error {
	var err error
	socketGetIdFunction_Once.Do(func() {
		err = socketStruct_Set()
		if err != nil {
			return
		}
		socketGetIdFunction, err = socketStruct.InvokerNew("get_id")
	})
	return err
}

// GetId is a representation of the C type gtk_socket_get_id.
func (recv *Socket) GetId() xlib.Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := socketGetIdFunction_Set()
	if err == nil {
		ret = socketGetIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := xlib.Window(ret.Uint64())

	return retGo
}

// UNSUPPORTED : C value 'gtk_socket_get_plug_window' : return type 'Gdk.Window' not supported

var spinButtonStruct *gi.Struct
var spinButtonStruct_Once sync.Once

func spinButtonStruct_Set() error {
	var err error
	spinButtonStruct_Once.Do(func() {
		spinButtonStruct, err = gi.StructNew("Gtk", "SpinButton")
	})
	return err
}

type SpinButton struct {
	Entry
}

// FieldEntry returns the C field 'entry'.
func (recv *SpinButton) FieldEntry() *Entry {
	argValue := gi.FieldGet(spinButtonStruct, recv.Native, "entry")
	value := &Entry{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldEntry sets the value of the C field 'entry'.
func (recv *SpinButton) SetFieldEntry(value *Entry) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinButtonStruct, recv.Native, "entry", argValue)
}

var spinButtonNewFunction *gi.Function
var spinButtonNewFunction_Once sync.Once

func spinButtonNewFunction_Set() error {
	var err error
	spinButtonNewFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonNewFunction, err = spinButtonStruct.InvokerNew("new")
	})
	return err
}

// SpinButtonNew is a representation of the C type gtk_spin_button_new.
func SpinButtonNew(adjustment *Adjustment, climbRate float64, digits uint32) *SpinButton {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(adjustment.Native)
	inArgs[1].SetFloat64(climbRate)
	inArgs[2].SetUint32(digits)

	var ret gi.Argument

	err := spinButtonNewFunction_Set()
	if err == nil {
		ret = spinButtonNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &SpinButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var spinButtonNewWithRangeFunction *gi.Function
var spinButtonNewWithRangeFunction_Once sync.Once

func spinButtonNewWithRangeFunction_Set() error {
	var err error
	spinButtonNewWithRangeFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonNewWithRangeFunction, err = spinButtonStruct.InvokerNew("new_with_range")
	})
	return err
}

// SpinButtonNewWithRange is a representation of the C type gtk_spin_button_new_with_range.
func SpinButtonNewWithRange(min float64, max float64, step float64) *SpinButton {
	var inArgs [3]gi.Argument
	inArgs[0].SetFloat64(min)
	inArgs[1].SetFloat64(max)
	inArgs[2].SetFloat64(step)

	var ret gi.Argument

	err := spinButtonNewWithRangeFunction_Set()
	if err == nil {
		ret = spinButtonNewWithRangeFunction.Invoke(inArgs[:], nil)
	}

	retGo := &SpinButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var spinButtonConfigureFunction *gi.Function
var spinButtonConfigureFunction_Once sync.Once

func spinButtonConfigureFunction_Set() error {
	var err error
	spinButtonConfigureFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonConfigureFunction, err = spinButtonStruct.InvokerNew("configure")
	})
	return err
}

// Configure is a representation of the C type gtk_spin_button_configure.
func (recv *SpinButton) Configure(adjustment *Adjustment, climbRate float64, digits uint32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)
	inArgs[2].SetFloat64(climbRate)
	inArgs[3].SetUint32(digits)

	err := spinButtonConfigureFunction_Set()
	if err == nil {
		spinButtonConfigureFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonGetAdjustmentFunction *gi.Function
var spinButtonGetAdjustmentFunction_Once sync.Once

func spinButtonGetAdjustmentFunction_Set() error {
	var err error
	spinButtonGetAdjustmentFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetAdjustmentFunction, err = spinButtonStruct.InvokerNew("get_adjustment")
	})
	return err
}

// GetAdjustment is a representation of the C type gtk_spin_button_get_adjustment.
func (recv *SpinButton) GetAdjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetAdjustmentFunction_Set()
	if err == nil {
		ret = spinButtonGetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var spinButtonGetDigitsFunction *gi.Function
var spinButtonGetDigitsFunction_Once sync.Once

func spinButtonGetDigitsFunction_Set() error {
	var err error
	spinButtonGetDigitsFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetDigitsFunction, err = spinButtonStruct.InvokerNew("get_digits")
	})
	return err
}

// GetDigits is a representation of the C type gtk_spin_button_get_digits.
func (recv *SpinButton) GetDigits() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetDigitsFunction_Set()
	if err == nil {
		ret = spinButtonGetDigitsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var spinButtonGetIncrementsFunction *gi.Function
var spinButtonGetIncrementsFunction_Once sync.Once

func spinButtonGetIncrementsFunction_Set() error {
	var err error
	spinButtonGetIncrementsFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetIncrementsFunction, err = spinButtonStruct.InvokerNew("get_increments")
	})
	return err
}

// GetIncrements is a representation of the C type gtk_spin_button_get_increments.
func (recv *SpinButton) GetIncrements() (float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := spinButtonGetIncrementsFunction_Set()
	if err == nil {
		spinButtonGetIncrementsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return out0, out1
}

var spinButtonGetNumericFunction *gi.Function
var spinButtonGetNumericFunction_Once sync.Once

func spinButtonGetNumericFunction_Set() error {
	var err error
	spinButtonGetNumericFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetNumericFunction, err = spinButtonStruct.InvokerNew("get_numeric")
	})
	return err
}

// GetNumeric is a representation of the C type gtk_spin_button_get_numeric.
func (recv *SpinButton) GetNumeric() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetNumericFunction_Set()
	if err == nil {
		ret = spinButtonGetNumericFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var spinButtonGetRangeFunction *gi.Function
var spinButtonGetRangeFunction_Once sync.Once

func spinButtonGetRangeFunction_Set() error {
	var err error
	spinButtonGetRangeFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetRangeFunction, err = spinButtonStruct.InvokerNew("get_range")
	})
	return err
}

// GetRange is a representation of the C type gtk_spin_button_get_range.
func (recv *SpinButton) GetRange() (float64, float64) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := spinButtonGetRangeFunction_Set()
	if err == nil {
		spinButtonGetRangeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Float64()
	out1 := outArgs[1].Float64()

	return out0, out1
}

var spinButtonGetSnapToTicksFunction *gi.Function
var spinButtonGetSnapToTicksFunction_Once sync.Once

func spinButtonGetSnapToTicksFunction_Set() error {
	var err error
	spinButtonGetSnapToTicksFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetSnapToTicksFunction, err = spinButtonStruct.InvokerNew("get_snap_to_ticks")
	})
	return err
}

// GetSnapToTicks is a representation of the C type gtk_spin_button_get_snap_to_ticks.
func (recv *SpinButton) GetSnapToTicks() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetSnapToTicksFunction_Set()
	if err == nil {
		ret = spinButtonGetSnapToTicksFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_spin_button_get_update_policy' : return type 'SpinButtonUpdatePolicy' not supported

var spinButtonGetValueFunction *gi.Function
var spinButtonGetValueFunction_Once sync.Once

func spinButtonGetValueFunction_Set() error {
	var err error
	spinButtonGetValueFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetValueFunction, err = spinButtonStruct.InvokerNew("get_value")
	})
	return err
}

// GetValue is a representation of the C type gtk_spin_button_get_value.
func (recv *SpinButton) GetValue() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetValueFunction_Set()
	if err == nil {
		ret = spinButtonGetValueFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var spinButtonGetValueAsIntFunction *gi.Function
var spinButtonGetValueAsIntFunction_Once sync.Once

func spinButtonGetValueAsIntFunction_Set() error {
	var err error
	spinButtonGetValueAsIntFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetValueAsIntFunction, err = spinButtonStruct.InvokerNew("get_value_as_int")
	})
	return err
}

// GetValueAsInt is a representation of the C type gtk_spin_button_get_value_as_int.
func (recv *SpinButton) GetValueAsInt() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetValueAsIntFunction_Set()
	if err == nil {
		ret = spinButtonGetValueAsIntFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var spinButtonGetWrapFunction *gi.Function
var spinButtonGetWrapFunction_Once sync.Once

func spinButtonGetWrapFunction_Set() error {
	var err error
	spinButtonGetWrapFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonGetWrapFunction, err = spinButtonStruct.InvokerNew("get_wrap")
	})
	return err
}

// GetWrap is a representation of the C type gtk_spin_button_get_wrap.
func (recv *SpinButton) GetWrap() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := spinButtonGetWrapFunction_Set()
	if err == nil {
		ret = spinButtonGetWrapFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var spinButtonSetAdjustmentFunction *gi.Function
var spinButtonSetAdjustmentFunction_Once sync.Once

func spinButtonSetAdjustmentFunction_Set() error {
	var err error
	spinButtonSetAdjustmentFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetAdjustmentFunction, err = spinButtonStruct.InvokerNew("set_adjustment")
	})
	return err
}

// SetAdjustment is a representation of the C type gtk_spin_button_set_adjustment.
func (recv *SpinButton) SetAdjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := spinButtonSetAdjustmentFunction_Set()
	if err == nil {
		spinButtonSetAdjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetDigitsFunction *gi.Function
var spinButtonSetDigitsFunction_Once sync.Once

func spinButtonSetDigitsFunction_Set() error {
	var err error
	spinButtonSetDigitsFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetDigitsFunction, err = spinButtonStruct.InvokerNew("set_digits")
	})
	return err
}

// SetDigits is a representation of the C type gtk_spin_button_set_digits.
func (recv *SpinButton) SetDigits(digits uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(digits)

	err := spinButtonSetDigitsFunction_Set()
	if err == nil {
		spinButtonSetDigitsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetIncrementsFunction *gi.Function
var spinButtonSetIncrementsFunction_Once sync.Once

func spinButtonSetIncrementsFunction_Set() error {
	var err error
	spinButtonSetIncrementsFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetIncrementsFunction, err = spinButtonStruct.InvokerNew("set_increments")
	})
	return err
}

// SetIncrements is a representation of the C type gtk_spin_button_set_increments.
func (recv *SpinButton) SetIncrements(step float64, page float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(step)
	inArgs[2].SetFloat64(page)

	err := spinButtonSetIncrementsFunction_Set()
	if err == nil {
		spinButtonSetIncrementsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetNumericFunction *gi.Function
var spinButtonSetNumericFunction_Once sync.Once

func spinButtonSetNumericFunction_Set() error {
	var err error
	spinButtonSetNumericFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetNumericFunction, err = spinButtonStruct.InvokerNew("set_numeric")
	})
	return err
}

// SetNumeric is a representation of the C type gtk_spin_button_set_numeric.
func (recv *SpinButton) SetNumeric(numeric bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(numeric)

	err := spinButtonSetNumericFunction_Set()
	if err == nil {
		spinButtonSetNumericFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetRangeFunction *gi.Function
var spinButtonSetRangeFunction_Once sync.Once

func spinButtonSetRangeFunction_Set() error {
	var err error
	spinButtonSetRangeFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetRangeFunction, err = spinButtonStruct.InvokerNew("set_range")
	})
	return err
}

// SetRange is a representation of the C type gtk_spin_button_set_range.
func (recv *SpinButton) SetRange(min float64, max float64) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(min)
	inArgs[2].SetFloat64(max)

	err := spinButtonSetRangeFunction_Set()
	if err == nil {
		spinButtonSetRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetSnapToTicksFunction *gi.Function
var spinButtonSetSnapToTicksFunction_Once sync.Once

func spinButtonSetSnapToTicksFunction_Set() error {
	var err error
	spinButtonSetSnapToTicksFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetSnapToTicksFunction, err = spinButtonStruct.InvokerNew("set_snap_to_ticks")
	})
	return err
}

// SetSnapToTicks is a representation of the C type gtk_spin_button_set_snap_to_ticks.
func (recv *SpinButton) SetSnapToTicks(snapToTicks bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(snapToTicks)

	err := spinButtonSetSnapToTicksFunction_Set()
	if err == nil {
		spinButtonSetSnapToTicksFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_spin_button_set_update_policy' : parameter 'policy' of type 'SpinButtonUpdatePolicy' not supported

var spinButtonSetValueFunction *gi.Function
var spinButtonSetValueFunction_Once sync.Once

func spinButtonSetValueFunction_Set() error {
	var err error
	spinButtonSetValueFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetValueFunction, err = spinButtonStruct.InvokerNew("set_value")
	})
	return err
}

// SetValue is a representation of the C type gtk_spin_button_set_value.
func (recv *SpinButton) SetValue(value float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(value)

	err := spinButtonSetValueFunction_Set()
	if err == nil {
		spinButtonSetValueFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonSetWrapFunction *gi.Function
var spinButtonSetWrapFunction_Once sync.Once

func spinButtonSetWrapFunction_Set() error {
	var err error
	spinButtonSetWrapFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonSetWrapFunction, err = spinButtonStruct.InvokerNew("set_wrap")
	})
	return err
}

// SetWrap is a representation of the C type gtk_spin_button_set_wrap.
func (recv *SpinButton) SetWrap(wrap bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(wrap)

	err := spinButtonSetWrapFunction_Set()
	if err == nil {
		spinButtonSetWrapFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_spin_button_spin' : parameter 'direction' of type 'SpinType' not supported

var spinButtonUpdateFunction *gi.Function
var spinButtonUpdateFunction_Once sync.Once

func spinButtonUpdateFunction_Set() error {
	var err error
	spinButtonUpdateFunction_Once.Do(func() {
		err = spinButtonStruct_Set()
		if err != nil {
			return
		}
		spinButtonUpdateFunction, err = spinButtonStruct.InvokerNew("update")
	})
	return err
}

// Update is a representation of the C type gtk_spin_button_update.
func (recv *SpinButton) Update() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := spinButtonUpdateFunction_Set()
	if err == nil {
		spinButtonUpdateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinButtonAccessibleStruct *gi.Struct
var spinButtonAccessibleStruct_Once sync.Once

func spinButtonAccessibleStruct_Set() error {
	var err error
	spinButtonAccessibleStruct_Once.Do(func() {
		spinButtonAccessibleStruct, err = gi.StructNew("Gtk", "SpinButtonAccessible")
	})
	return err
}

type SpinButtonAccessible struct {
	EntryAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *SpinButtonAccessible) FieldParent() *EntryAccessible {
	argValue := gi.FieldGet(spinButtonAccessibleStruct, recv.Native, "parent")
	value := &EntryAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *SpinButtonAccessible) SetFieldParent(value *EntryAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *SpinButtonAccessible) FieldPriv() *SpinButtonAccessiblePrivate {
	argValue := gi.FieldGet(spinButtonAccessibleStruct, recv.Native, "priv")
	value := &SpinButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *SpinButtonAccessible) SetFieldPriv(value *SpinButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// SpinButtonAccessibleStruct creates an uninitialised SpinButtonAccessible.
func SpinButtonAccessibleStruct() *SpinButtonAccessible {
	err := spinButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &SpinButtonAccessible{}
	structGo.Native = spinButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeSpinButtonAccessible)
	return structGo
}
func finalizeSpinButtonAccessible(obj *SpinButtonAccessible) {
	spinButtonAccessibleStruct.Free(obj.Native)
}

var spinnerStruct *gi.Struct
var spinnerStruct_Once sync.Once

func spinnerStruct_Set() error {
	var err error
	spinnerStruct_Once.Do(func() {
		spinnerStruct, err = gi.StructNew("Gtk", "Spinner")
	})
	return err
}

type Spinner struct {
	Widget
}

// FieldParent returns the C field 'parent'.
func (recv *Spinner) FieldParent() *Widget {
	argValue := gi.FieldGet(spinnerStruct, recv.Native, "parent")
	value := &Widget{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *Spinner) SetFieldParent(value *Widget) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinnerStruct, recv.Native, "parent", argValue)
}

var spinnerNewFunction *gi.Function
var spinnerNewFunction_Once sync.Once

func spinnerNewFunction_Set() error {
	var err error
	spinnerNewFunction_Once.Do(func() {
		err = spinnerStruct_Set()
		if err != nil {
			return
		}
		spinnerNewFunction, err = spinnerStruct.InvokerNew("new")
	})
	return err
}

// SpinnerNew is a representation of the C type gtk_spinner_new.
func SpinnerNew() *Spinner {

	var ret gi.Argument

	err := spinnerNewFunction_Set()
	if err == nil {
		ret = spinnerNewFunction.Invoke(nil, nil)
	}

	retGo := &Spinner{}
	retGo.Native = ret.Pointer()

	return retGo
}

var spinnerStartFunction *gi.Function
var spinnerStartFunction_Once sync.Once

func spinnerStartFunction_Set() error {
	var err error
	spinnerStartFunction_Once.Do(func() {
		err = spinnerStruct_Set()
		if err != nil {
			return
		}
		spinnerStartFunction, err = spinnerStruct.InvokerNew("start")
	})
	return err
}

// Start is a representation of the C type gtk_spinner_start.
func (recv *Spinner) Start() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := spinnerStartFunction_Set()
	if err == nil {
		spinnerStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinnerStopFunction *gi.Function
var spinnerStopFunction_Once sync.Once

func spinnerStopFunction_Set() error {
	var err error
	spinnerStopFunction_Once.Do(func() {
		err = spinnerStruct_Set()
		if err != nil {
			return
		}
		spinnerStopFunction, err = spinnerStruct.InvokerNew("stop")
	})
	return err
}

// Stop is a representation of the C type gtk_spinner_stop.
func (recv *Spinner) Stop() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := spinnerStopFunction_Set()
	if err == nil {
		spinnerStopFunction.Invoke(inArgs[:], nil)
	}

	return
}

var spinnerAccessibleStruct *gi.Struct
var spinnerAccessibleStruct_Once sync.Once

func spinnerAccessibleStruct_Set() error {
	var err error
	spinnerAccessibleStruct_Once.Do(func() {
		spinnerAccessibleStruct, err = gi.StructNew("Gtk", "SpinnerAccessible")
	})
	return err
}

type SpinnerAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *SpinnerAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(spinnerAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *SpinnerAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinnerAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *SpinnerAccessible) FieldPriv() *SpinnerAccessiblePrivate {
	argValue := gi.FieldGet(spinnerAccessibleStruct, recv.Native, "priv")
	value := &SpinnerAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *SpinnerAccessible) SetFieldPriv(value *SpinnerAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(spinnerAccessibleStruct, recv.Native, "priv", argValue)
}

// SpinnerAccessibleStruct creates an uninitialised SpinnerAccessible.
func SpinnerAccessibleStruct() *SpinnerAccessible {
	err := spinnerAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &SpinnerAccessible{}
	structGo.Native = spinnerAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeSpinnerAccessible)
	return structGo
}
func finalizeSpinnerAccessible(obj *SpinnerAccessible) {
	spinnerAccessibleStruct.Free(obj.Native)
}

var stackStruct *gi.Struct
var stackStruct_Once sync.Once

func stackStruct_Set() error {
	var err error
	stackStruct_Once.Do(func() {
		stackStruct, err = gi.StructNew("Gtk", "Stack")
	})
	return err
}

type Stack struct {
	Container
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *Stack) FieldParentInstance() *Container {
	argValue := gi.FieldGet(stackStruct, recv.Native, "parent_instance")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *Stack) SetFieldParentInstance(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(stackStruct, recv.Native, "parent_instance", argValue)
}

var stackNewFunction *gi.Function
var stackNewFunction_Once sync.Once

func stackNewFunction_Set() error {
	var err error
	stackNewFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackNewFunction, err = stackStruct.InvokerNew("new")
	})
	return err
}

// StackNew is a representation of the C type gtk_stack_new.
func StackNew() *Stack {

	var ret gi.Argument

	err := stackNewFunction_Set()
	if err == nil {
		ret = stackNewFunction.Invoke(nil, nil)
	}

	retGo := &Stack{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackAddNamedFunction *gi.Function
var stackAddNamedFunction_Once sync.Once

func stackAddNamedFunction_Set() error {
	var err error
	stackAddNamedFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackAddNamedFunction, err = stackStruct.InvokerNew("add_named")
	})
	return err
}

// AddNamed is a representation of the C type gtk_stack_add_named.
func (recv *Stack) AddNamed(child *Widget, name string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetString(name)

	err := stackAddNamedFunction_Set()
	if err == nil {
		stackAddNamedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackAddTitledFunction *gi.Function
var stackAddTitledFunction_Once sync.Once

func stackAddTitledFunction_Set() error {
	var err error
	stackAddTitledFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackAddTitledFunction, err = stackStruct.InvokerNew("add_titled")
	})
	return err
}

// AddTitled is a representation of the C type gtk_stack_add_titled.
func (recv *Stack) AddTitled(child *Widget, name string, title string) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetString(name)
	inArgs[3].SetString(title)

	err := stackAddTitledFunction_Set()
	if err == nil {
		stackAddTitledFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackGetChildByNameFunction *gi.Function
var stackGetChildByNameFunction_Once sync.Once

func stackGetChildByNameFunction_Set() error {
	var err error
	stackGetChildByNameFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetChildByNameFunction, err = stackStruct.InvokerNew("get_child_by_name")
	})
	return err
}

// GetChildByName is a representation of the C type gtk_stack_get_child_by_name.
func (recv *Stack) GetChildByName(name string) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	var ret gi.Argument

	err := stackGetChildByNameFunction_Set()
	if err == nil {
		ret = stackGetChildByNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackGetHhomogeneousFunction *gi.Function
var stackGetHhomogeneousFunction_Once sync.Once

func stackGetHhomogeneousFunction_Set() error {
	var err error
	stackGetHhomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetHhomogeneousFunction, err = stackStruct.InvokerNew("get_hhomogeneous")
	})
	return err
}

// GetHhomogeneous is a representation of the C type gtk_stack_get_hhomogeneous.
func (recv *Stack) GetHhomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetHhomogeneousFunction_Set()
	if err == nil {
		ret = stackGetHhomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var stackGetHomogeneousFunction *gi.Function
var stackGetHomogeneousFunction_Once sync.Once

func stackGetHomogeneousFunction_Set() error {
	var err error
	stackGetHomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetHomogeneousFunction, err = stackStruct.InvokerNew("get_homogeneous")
	})
	return err
}

// GetHomogeneous is a representation of the C type gtk_stack_get_homogeneous.
func (recv *Stack) GetHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetHomogeneousFunction_Set()
	if err == nil {
		ret = stackGetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var stackGetInterpolateSizeFunction *gi.Function
var stackGetInterpolateSizeFunction_Once sync.Once

func stackGetInterpolateSizeFunction_Set() error {
	var err error
	stackGetInterpolateSizeFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetInterpolateSizeFunction, err = stackStruct.InvokerNew("get_interpolate_size")
	})
	return err
}

// GetInterpolateSize is a representation of the C type gtk_stack_get_interpolate_size.
func (recv *Stack) GetInterpolateSize() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetInterpolateSizeFunction_Set()
	if err == nil {
		ret = stackGetInterpolateSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var stackGetTransitionDurationFunction *gi.Function
var stackGetTransitionDurationFunction_Once sync.Once

func stackGetTransitionDurationFunction_Set() error {
	var err error
	stackGetTransitionDurationFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetTransitionDurationFunction, err = stackStruct.InvokerNew("get_transition_duration")
	})
	return err
}

// GetTransitionDuration is a representation of the C type gtk_stack_get_transition_duration.
func (recv *Stack) GetTransitionDuration() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetTransitionDurationFunction_Set()
	if err == nil {
		ret = stackGetTransitionDurationFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var stackGetTransitionRunningFunction *gi.Function
var stackGetTransitionRunningFunction_Once sync.Once

func stackGetTransitionRunningFunction_Set() error {
	var err error
	stackGetTransitionRunningFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetTransitionRunningFunction, err = stackStruct.InvokerNew("get_transition_running")
	})
	return err
}

// GetTransitionRunning is a representation of the C type gtk_stack_get_transition_running.
func (recv *Stack) GetTransitionRunning() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetTransitionRunningFunction_Set()
	if err == nil {
		ret = stackGetTransitionRunningFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_stack_get_transition_type' : return type 'StackTransitionType' not supported

var stackGetVhomogeneousFunction *gi.Function
var stackGetVhomogeneousFunction_Once sync.Once

func stackGetVhomogeneousFunction_Set() error {
	var err error
	stackGetVhomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetVhomogeneousFunction, err = stackStruct.InvokerNew("get_vhomogeneous")
	})
	return err
}

// GetVhomogeneous is a representation of the C type gtk_stack_get_vhomogeneous.
func (recv *Stack) GetVhomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetVhomogeneousFunction_Set()
	if err == nil {
		ret = stackGetVhomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var stackGetVisibleChildFunction *gi.Function
var stackGetVisibleChildFunction_Once sync.Once

func stackGetVisibleChildFunction_Set() error {
	var err error
	stackGetVisibleChildFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetVisibleChildFunction, err = stackStruct.InvokerNew("get_visible_child")
	})
	return err
}

// GetVisibleChild is a representation of the C type gtk_stack_get_visible_child.
func (recv *Stack) GetVisibleChild() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetVisibleChildFunction_Set()
	if err == nil {
		ret = stackGetVisibleChildFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackGetVisibleChildNameFunction *gi.Function
var stackGetVisibleChildNameFunction_Once sync.Once

func stackGetVisibleChildNameFunction_Set() error {
	var err error
	stackGetVisibleChildNameFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackGetVisibleChildNameFunction, err = stackStruct.InvokerNew("get_visible_child_name")
	})
	return err
}

// GetVisibleChildName is a representation of the C type gtk_stack_get_visible_child_name.
func (recv *Stack) GetVisibleChildName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackGetVisibleChildNameFunction_Set()
	if err == nil {
		ret = stackGetVisibleChildNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var stackSetHhomogeneousFunction *gi.Function
var stackSetHhomogeneousFunction_Once sync.Once

func stackSetHhomogeneousFunction_Set() error {
	var err error
	stackSetHhomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetHhomogeneousFunction, err = stackStruct.InvokerNew("set_hhomogeneous")
	})
	return err
}

// SetHhomogeneous is a representation of the C type gtk_stack_set_hhomogeneous.
func (recv *Stack) SetHhomogeneous(hhomogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hhomogeneous)

	err := stackSetHhomogeneousFunction_Set()
	if err == nil {
		stackSetHhomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackSetHomogeneousFunction *gi.Function
var stackSetHomogeneousFunction_Once sync.Once

func stackSetHomogeneousFunction_Set() error {
	var err error
	stackSetHomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetHomogeneousFunction, err = stackStruct.InvokerNew("set_homogeneous")
	})
	return err
}

// SetHomogeneous is a representation of the C type gtk_stack_set_homogeneous.
func (recv *Stack) SetHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := stackSetHomogeneousFunction_Set()
	if err == nil {
		stackSetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackSetInterpolateSizeFunction *gi.Function
var stackSetInterpolateSizeFunction_Once sync.Once

func stackSetInterpolateSizeFunction_Set() error {
	var err error
	stackSetInterpolateSizeFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetInterpolateSizeFunction, err = stackStruct.InvokerNew("set_interpolate_size")
	})
	return err
}

// SetInterpolateSize is a representation of the C type gtk_stack_set_interpolate_size.
func (recv *Stack) SetInterpolateSize(interpolateSize bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(interpolateSize)

	err := stackSetInterpolateSizeFunction_Set()
	if err == nil {
		stackSetInterpolateSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackSetTransitionDurationFunction *gi.Function
var stackSetTransitionDurationFunction_Once sync.Once

func stackSetTransitionDurationFunction_Set() error {
	var err error
	stackSetTransitionDurationFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetTransitionDurationFunction, err = stackStruct.InvokerNew("set_transition_duration")
	})
	return err
}

// SetTransitionDuration is a representation of the C type gtk_stack_set_transition_duration.
func (recv *Stack) SetTransitionDuration(duration uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(duration)

	err := stackSetTransitionDurationFunction_Set()
	if err == nil {
		stackSetTransitionDurationFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_stack_set_transition_type' : parameter 'transition' of type 'StackTransitionType' not supported

var stackSetVhomogeneousFunction *gi.Function
var stackSetVhomogeneousFunction_Once sync.Once

func stackSetVhomogeneousFunction_Set() error {
	var err error
	stackSetVhomogeneousFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetVhomogeneousFunction, err = stackStruct.InvokerNew("set_vhomogeneous")
	})
	return err
}

// SetVhomogeneous is a representation of the C type gtk_stack_set_vhomogeneous.
func (recv *Stack) SetVhomogeneous(vhomogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(vhomogeneous)

	err := stackSetVhomogeneousFunction_Set()
	if err == nil {
		stackSetVhomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackSetVisibleChildFunction *gi.Function
var stackSetVisibleChildFunction_Once sync.Once

func stackSetVisibleChildFunction_Set() error {
	var err error
	stackSetVisibleChildFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetVisibleChildFunction, err = stackStruct.InvokerNew("set_visible_child")
	})
	return err
}

// SetVisibleChild is a representation of the C type gtk_stack_set_visible_child.
func (recv *Stack) SetVisibleChild(child *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)

	err := stackSetVisibleChildFunction_Set()
	if err == nil {
		stackSetVisibleChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_stack_set_visible_child_full' : parameter 'transition' of type 'StackTransitionType' not supported

var stackSetVisibleChildNameFunction *gi.Function
var stackSetVisibleChildNameFunction_Once sync.Once

func stackSetVisibleChildNameFunction_Set() error {
	var err error
	stackSetVisibleChildNameFunction_Once.Do(func() {
		err = stackStruct_Set()
		if err != nil {
			return
		}
		stackSetVisibleChildNameFunction, err = stackStruct.InvokerNew("set_visible_child_name")
	})
	return err
}

// SetVisibleChildName is a representation of the C type gtk_stack_set_visible_child_name.
func (recv *Stack) SetVisibleChildName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := stackSetVisibleChildNameFunction_Set()
	if err == nil {
		stackSetVisibleChildNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackAccessibleStruct *gi.Struct
var stackAccessibleStruct_Once sync.Once

func stackAccessibleStruct_Set() error {
	var err error
	stackAccessibleStruct_Once.Do(func() {
		stackAccessibleStruct, err = gi.StructNew("Gtk", "StackAccessible")
	})
	return err
}

type StackAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *StackAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(stackAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *StackAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(stackAccessibleStruct, recv.Native, "parent", argValue)
}

// StackAccessibleStruct creates an uninitialised StackAccessible.
func StackAccessibleStruct() *StackAccessible {
	err := stackAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &StackAccessible{}
	structGo.Native = stackAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeStackAccessible)
	return structGo
}
func finalizeStackAccessible(obj *StackAccessible) {
	stackAccessibleStruct.Free(obj.Native)
}

var stackSidebarStruct *gi.Struct
var stackSidebarStruct_Once sync.Once

func stackSidebarStruct_Set() error {
	var err error
	stackSidebarStruct_Once.Do(func() {
		stackSidebarStruct, err = gi.StructNew("Gtk", "StackSidebar")
	})
	return err
}

type StackSidebar struct {
	Bin
}

// FieldParent returns the C field 'parent'.
func (recv *StackSidebar) FieldParent() *Bin {
	argValue := gi.FieldGet(stackSidebarStruct, recv.Native, "parent")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *StackSidebar) SetFieldParent(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(stackSidebarStruct, recv.Native, "parent", argValue)
}

var stackSidebarNewFunction *gi.Function
var stackSidebarNewFunction_Once sync.Once

func stackSidebarNewFunction_Set() error {
	var err error
	stackSidebarNewFunction_Once.Do(func() {
		err = stackSidebarStruct_Set()
		if err != nil {
			return
		}
		stackSidebarNewFunction, err = stackSidebarStruct.InvokerNew("new")
	})
	return err
}

// StackSidebarNew is a representation of the C type gtk_stack_sidebar_new.
func StackSidebarNew() *StackSidebar {

	var ret gi.Argument

	err := stackSidebarNewFunction_Set()
	if err == nil {
		ret = stackSidebarNewFunction.Invoke(nil, nil)
	}

	retGo := &StackSidebar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackSidebarGetStackFunction *gi.Function
var stackSidebarGetStackFunction_Once sync.Once

func stackSidebarGetStackFunction_Set() error {
	var err error
	stackSidebarGetStackFunction_Once.Do(func() {
		err = stackSidebarStruct_Set()
		if err != nil {
			return
		}
		stackSidebarGetStackFunction, err = stackSidebarStruct.InvokerNew("get_stack")
	})
	return err
}

// GetStack is a representation of the C type gtk_stack_sidebar_get_stack.
func (recv *StackSidebar) GetStack() *Stack {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackSidebarGetStackFunction_Set()
	if err == nil {
		ret = stackSidebarGetStackFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Stack{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackSidebarSetStackFunction *gi.Function
var stackSidebarSetStackFunction_Once sync.Once

func stackSidebarSetStackFunction_Set() error {
	var err error
	stackSidebarSetStackFunction_Once.Do(func() {
		err = stackSidebarStruct_Set()
		if err != nil {
			return
		}
		stackSidebarSetStackFunction, err = stackSidebarStruct.InvokerNew("set_stack")
	})
	return err
}

// SetStack is a representation of the C type gtk_stack_sidebar_set_stack.
func (recv *StackSidebar) SetStack(stack *Stack) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(stack.Native)

	err := stackSidebarSetStackFunction_Set()
	if err == nil {
		stackSidebarSetStackFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stackSwitcherStruct *gi.Struct
var stackSwitcherStruct_Once sync.Once

func stackSwitcherStruct_Set() error {
	var err error
	stackSwitcherStruct_Once.Do(func() {
		stackSwitcherStruct, err = gi.StructNew("Gtk", "StackSwitcher")
	})
	return err
}

type StackSwitcher struct {
	Box
}

// FieldWidget returns the C field 'widget'.
func (recv *StackSwitcher) FieldWidget() *Box {
	argValue := gi.FieldGet(stackSwitcherStruct, recv.Native, "widget")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldWidget sets the value of the C field 'widget'.
func (recv *StackSwitcher) SetFieldWidget(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(stackSwitcherStruct, recv.Native, "widget", argValue)
}

var stackSwitcherNewFunction *gi.Function
var stackSwitcherNewFunction_Once sync.Once

func stackSwitcherNewFunction_Set() error {
	var err error
	stackSwitcherNewFunction_Once.Do(func() {
		err = stackSwitcherStruct_Set()
		if err != nil {
			return
		}
		stackSwitcherNewFunction, err = stackSwitcherStruct.InvokerNew("new")
	})
	return err
}

// StackSwitcherNew is a representation of the C type gtk_stack_switcher_new.
func StackSwitcherNew() *StackSwitcher {

	var ret gi.Argument

	err := stackSwitcherNewFunction_Set()
	if err == nil {
		ret = stackSwitcherNewFunction.Invoke(nil, nil)
	}

	retGo := &StackSwitcher{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackSwitcherGetStackFunction *gi.Function
var stackSwitcherGetStackFunction_Once sync.Once

func stackSwitcherGetStackFunction_Set() error {
	var err error
	stackSwitcherGetStackFunction_Once.Do(func() {
		err = stackSwitcherStruct_Set()
		if err != nil {
			return
		}
		stackSwitcherGetStackFunction, err = stackSwitcherStruct.InvokerNew("get_stack")
	})
	return err
}

// GetStack is a representation of the C type gtk_stack_switcher_get_stack.
func (recv *StackSwitcher) GetStack() *Stack {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := stackSwitcherGetStackFunction_Set()
	if err == nil {
		ret = stackSwitcherGetStackFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Stack{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stackSwitcherSetStackFunction *gi.Function
var stackSwitcherSetStackFunction_Once sync.Once

func stackSwitcherSetStackFunction_Set() error {
	var err error
	stackSwitcherSetStackFunction_Once.Do(func() {
		err = stackSwitcherStruct_Set()
		if err != nil {
			return
		}
		stackSwitcherSetStackFunction, err = stackSwitcherStruct.InvokerNew("set_stack")
	})
	return err
}

// SetStack is a representation of the C type gtk_stack_switcher_set_stack.
func (recv *StackSwitcher) SetStack(stack *Stack) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(stack.Native)

	err := stackSwitcherSetStackFunction_Set()
	if err == nil {
		stackSwitcherSetStackFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconStruct *gi.Struct
var statusIconStruct_Once sync.Once

func statusIconStruct_Set() error {
	var err error
	statusIconStruct_Once.Do(func() {
		statusIconStruct, err = gi.StructNew("Gtk", "StatusIcon")
	})
	return err
}

type StatusIcon struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *StatusIcon) FieldPriv() *StatusIconPrivate {
	argValue := gi.FieldGet(statusIconStruct, recv.Native, "priv")
	value := &StatusIconPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *StatusIcon) SetFieldPriv(value *StatusIconPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(statusIconStruct, recv.Native, "priv", argValue)
}

var statusIconNewFunction *gi.Function
var statusIconNewFunction_Once sync.Once

func statusIconNewFunction_Set() error {
	var err error
	statusIconNewFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconNewFunction, err = statusIconStruct.InvokerNew("new")
	})
	return err
}

// StatusIconNew is a representation of the C type gtk_status_icon_new.
func StatusIconNew() *StatusIcon {

	var ret gi.Argument

	err := statusIconNewFunction_Set()
	if err == nil {
		ret = statusIconNewFunction.Invoke(nil, nil)
	}

	retGo := &StatusIcon{}
	retGo.Native = ret.Pointer()

	return retGo
}

var statusIconNewFromFileFunction *gi.Function
var statusIconNewFromFileFunction_Once sync.Once

func statusIconNewFromFileFunction_Set() error {
	var err error
	statusIconNewFromFileFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconNewFromFileFunction, err = statusIconStruct.InvokerNew("new_from_file")
	})
	return err
}

// StatusIconNewFromFile is a representation of the C type gtk_status_icon_new_from_file.
func StatusIconNewFromFile(filename string) *StatusIcon {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(filename)

	var ret gi.Argument

	err := statusIconNewFromFileFunction_Set()
	if err == nil {
		ret = statusIconNewFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StatusIcon{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_status_icon_new_from_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

var statusIconNewFromIconNameFunction *gi.Function
var statusIconNewFromIconNameFunction_Once sync.Once

func statusIconNewFromIconNameFunction_Set() error {
	var err error
	statusIconNewFromIconNameFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconNewFromIconNameFunction, err = statusIconStruct.InvokerNew("new_from_icon_name")
	})
	return err
}

// StatusIconNewFromIconName is a representation of the C type gtk_status_icon_new_from_icon_name.
func StatusIconNewFromIconName(iconName string) *StatusIcon {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(iconName)

	var ret gi.Argument

	err := statusIconNewFromIconNameFunction_Set()
	if err == nil {
		ret = statusIconNewFromIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StatusIcon{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_status_icon_new_from_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var statusIconNewFromStockFunction *gi.Function
var statusIconNewFromStockFunction_Once sync.Once

func statusIconNewFromStockFunction_Set() error {
	var err error
	statusIconNewFromStockFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconNewFromStockFunction, err = statusIconStruct.InvokerNew("new_from_stock")
	})
	return err
}

// StatusIconNewFromStock is a representation of the C type gtk_status_icon_new_from_stock.
func StatusIconNewFromStock(stockId string) *StatusIcon {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(stockId)

	var ret gi.Argument

	err := statusIconNewFromStockFunction_Set()
	if err == nil {
		ret = statusIconNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StatusIcon{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_status_icon_get_geometry' : parameter 'screen' of type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_status_icon_get_gicon' : return type 'Gio.Icon' not supported

var statusIconGetHasTooltipFunction *gi.Function
var statusIconGetHasTooltipFunction_Once sync.Once

func statusIconGetHasTooltipFunction_Set() error {
	var err error
	statusIconGetHasTooltipFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetHasTooltipFunction, err = statusIconStruct.InvokerNew("get_has_tooltip")
	})
	return err
}

// GetHasTooltip is a representation of the C type gtk_status_icon_get_has_tooltip.
func (recv *StatusIcon) GetHasTooltip() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetHasTooltipFunction_Set()
	if err == nil {
		ret = statusIconGetHasTooltipFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var statusIconGetIconNameFunction *gi.Function
var statusIconGetIconNameFunction_Once sync.Once

func statusIconGetIconNameFunction_Set() error {
	var err error
	statusIconGetIconNameFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetIconNameFunction, err = statusIconStruct.InvokerNew("get_icon_name")
	})
	return err
}

// GetIconName is a representation of the C type gtk_status_icon_get_icon_name.
func (recv *StatusIcon) GetIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetIconNameFunction_Set()
	if err == nil {
		ret = statusIconGetIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_status_icon_get_pixbuf' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_status_icon_get_screen' : return type 'Gdk.Screen' not supported

var statusIconGetSizeFunction *gi.Function
var statusIconGetSizeFunction_Once sync.Once

func statusIconGetSizeFunction_Set() error {
	var err error
	statusIconGetSizeFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetSizeFunction, err = statusIconStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_status_icon_get_size.
func (recv *StatusIcon) GetSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetSizeFunction_Set()
	if err == nil {
		ret = statusIconGetSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var statusIconGetStockFunction *gi.Function
var statusIconGetStockFunction_Once sync.Once

func statusIconGetStockFunction_Set() error {
	var err error
	statusIconGetStockFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetStockFunction, err = statusIconStruct.InvokerNew("get_stock")
	})
	return err
}

// GetStock is a representation of the C type gtk_status_icon_get_stock.
func (recv *StatusIcon) GetStock() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetStockFunction_Set()
	if err == nil {
		ret = statusIconGetStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_status_icon_get_storage_type' : return type 'ImageType' not supported

var statusIconGetTitleFunction *gi.Function
var statusIconGetTitleFunction_Once sync.Once

func statusIconGetTitleFunction_Set() error {
	var err error
	statusIconGetTitleFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetTitleFunction, err = statusIconStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_status_icon_get_title.
func (recv *StatusIcon) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetTitleFunction_Set()
	if err == nil {
		ret = statusIconGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var statusIconGetTooltipMarkupFunction *gi.Function
var statusIconGetTooltipMarkupFunction_Once sync.Once

func statusIconGetTooltipMarkupFunction_Set() error {
	var err error
	statusIconGetTooltipMarkupFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetTooltipMarkupFunction, err = statusIconStruct.InvokerNew("get_tooltip_markup")
	})
	return err
}

// GetTooltipMarkup is a representation of the C type gtk_status_icon_get_tooltip_markup.
func (recv *StatusIcon) GetTooltipMarkup() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetTooltipMarkupFunction_Set()
	if err == nil {
		ret = statusIconGetTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var statusIconGetTooltipTextFunction *gi.Function
var statusIconGetTooltipTextFunction_Once sync.Once

func statusIconGetTooltipTextFunction_Set() error {
	var err error
	statusIconGetTooltipTextFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetTooltipTextFunction, err = statusIconStruct.InvokerNew("get_tooltip_text")
	})
	return err
}

// GetTooltipText is a representation of the C type gtk_status_icon_get_tooltip_text.
func (recv *StatusIcon) GetTooltipText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetTooltipTextFunction_Set()
	if err == nil {
		ret = statusIconGetTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var statusIconGetVisibleFunction *gi.Function
var statusIconGetVisibleFunction_Once sync.Once

func statusIconGetVisibleFunction_Set() error {
	var err error
	statusIconGetVisibleFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetVisibleFunction, err = statusIconStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_status_icon_get_visible.
func (recv *StatusIcon) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetVisibleFunction_Set()
	if err == nil {
		ret = statusIconGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var statusIconGetX11WindowIdFunction *gi.Function
var statusIconGetX11WindowIdFunction_Once sync.Once

func statusIconGetX11WindowIdFunction_Set() error {
	var err error
	statusIconGetX11WindowIdFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconGetX11WindowIdFunction, err = statusIconStruct.InvokerNew("get_x11_window_id")
	})
	return err
}

// GetX11WindowId is a representation of the C type gtk_status_icon_get_x11_window_id.
func (recv *StatusIcon) GetX11WindowId() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconGetX11WindowIdFunction_Set()
	if err == nil {
		ret = statusIconGetX11WindowIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var statusIconIsEmbeddedFunction *gi.Function
var statusIconIsEmbeddedFunction_Once sync.Once

func statusIconIsEmbeddedFunction_Set() error {
	var err error
	statusIconIsEmbeddedFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconIsEmbeddedFunction, err = statusIconStruct.InvokerNew("is_embedded")
	})
	return err
}

// IsEmbedded is a representation of the C type gtk_status_icon_is_embedded.
func (recv *StatusIcon) IsEmbedded() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusIconIsEmbeddedFunction_Set()
	if err == nil {
		ret = statusIconIsEmbeddedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var statusIconSetFromFileFunction *gi.Function
var statusIconSetFromFileFunction_Once sync.Once

func statusIconSetFromFileFunction_Set() error {
	var err error
	statusIconSetFromFileFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetFromFileFunction, err = statusIconStruct.InvokerNew("set_from_file")
	})
	return err
}

// SetFromFile is a representation of the C type gtk_status_icon_set_from_file.
func (recv *StatusIcon) SetFromFile(filename string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	err := statusIconSetFromFileFunction_Set()
	if err == nil {
		statusIconSetFromFileFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_status_icon_set_from_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

var statusIconSetFromIconNameFunction *gi.Function
var statusIconSetFromIconNameFunction_Once sync.Once

func statusIconSetFromIconNameFunction_Set() error {
	var err error
	statusIconSetFromIconNameFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetFromIconNameFunction, err = statusIconStruct.InvokerNew("set_from_icon_name")
	})
	return err
}

// SetFromIconName is a representation of the C type gtk_status_icon_set_from_icon_name.
func (recv *StatusIcon) SetFromIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := statusIconSetFromIconNameFunction_Set()
	if err == nil {
		statusIconSetFromIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_status_icon_set_from_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var statusIconSetFromStockFunction *gi.Function
var statusIconSetFromStockFunction_Once sync.Once

func statusIconSetFromStockFunction_Set() error {
	var err error
	statusIconSetFromStockFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetFromStockFunction, err = statusIconStruct.InvokerNew("set_from_stock")
	})
	return err
}

// SetFromStock is a representation of the C type gtk_status_icon_set_from_stock.
func (recv *StatusIcon) SetFromStock(stockId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	err := statusIconSetFromStockFunction_Set()
	if err == nil {
		statusIconSetFromStockFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconSetHasTooltipFunction *gi.Function
var statusIconSetHasTooltipFunction_Once sync.Once

func statusIconSetHasTooltipFunction_Set() error {
	var err error
	statusIconSetHasTooltipFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetHasTooltipFunction, err = statusIconStruct.InvokerNew("set_has_tooltip")
	})
	return err
}

// SetHasTooltip is a representation of the C type gtk_status_icon_set_has_tooltip.
func (recv *StatusIcon) SetHasTooltip(hasTooltip bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasTooltip)

	err := statusIconSetHasTooltipFunction_Set()
	if err == nil {
		statusIconSetHasTooltipFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconSetNameFunction *gi.Function
var statusIconSetNameFunction_Once sync.Once

func statusIconSetNameFunction_Set() error {
	var err error
	statusIconSetNameFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetNameFunction, err = statusIconStruct.InvokerNew("set_name")
	})
	return err
}

// SetName is a representation of the C type gtk_status_icon_set_name.
func (recv *StatusIcon) SetName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := statusIconSetNameFunction_Set()
	if err == nil {
		statusIconSetNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_status_icon_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

var statusIconSetTitleFunction *gi.Function
var statusIconSetTitleFunction_Once sync.Once

func statusIconSetTitleFunction_Set() error {
	var err error
	statusIconSetTitleFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetTitleFunction, err = statusIconStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_status_icon_set_title.
func (recv *StatusIcon) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := statusIconSetTitleFunction_Set()
	if err == nil {
		statusIconSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconSetTooltipMarkupFunction *gi.Function
var statusIconSetTooltipMarkupFunction_Once sync.Once

func statusIconSetTooltipMarkupFunction_Set() error {
	var err error
	statusIconSetTooltipMarkupFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetTooltipMarkupFunction, err = statusIconStruct.InvokerNew("set_tooltip_markup")
	})
	return err
}

// SetTooltipMarkup is a representation of the C type gtk_status_icon_set_tooltip_markup.
func (recv *StatusIcon) SetTooltipMarkup(markup string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markup)

	err := statusIconSetTooltipMarkupFunction_Set()
	if err == nil {
		statusIconSetTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconSetTooltipTextFunction *gi.Function
var statusIconSetTooltipTextFunction_Once sync.Once

func statusIconSetTooltipTextFunction_Set() error {
	var err error
	statusIconSetTooltipTextFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetTooltipTextFunction, err = statusIconStruct.InvokerNew("set_tooltip_text")
	})
	return err
}

// SetTooltipText is a representation of the C type gtk_status_icon_set_tooltip_text.
func (recv *StatusIcon) SetTooltipText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := statusIconSetTooltipTextFunction_Set()
	if err == nil {
		statusIconSetTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusIconSetVisibleFunction *gi.Function
var statusIconSetVisibleFunction_Once sync.Once

func statusIconSetVisibleFunction_Set() error {
	var err error
	statusIconSetVisibleFunction_Once.Do(func() {
		err = statusIconStruct_Set()
		if err != nil {
			return
		}
		statusIconSetVisibleFunction, err = statusIconStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_status_icon_set_visible.
func (recv *StatusIcon) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := statusIconSetVisibleFunction_Set()
	if err == nil {
		statusIconSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusbarStruct *gi.Struct
var statusbarStruct_Once sync.Once

func statusbarStruct_Set() error {
	var err error
	statusbarStruct_Once.Do(func() {
		statusbarStruct, err = gi.StructNew("Gtk", "Statusbar")
	})
	return err
}

type Statusbar struct {
	Box
}

// FieldParentWidget returns the C field 'parent_widget'.
func (recv *Statusbar) FieldParentWidget() *Box {
	argValue := gi.FieldGet(statusbarStruct, recv.Native, "parent_widget")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentWidget sets the value of the C field 'parent_widget'.
func (recv *Statusbar) SetFieldParentWidget(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(statusbarStruct, recv.Native, "parent_widget", argValue)
}

var statusbarNewFunction *gi.Function
var statusbarNewFunction_Once sync.Once

func statusbarNewFunction_Set() error {
	var err error
	statusbarNewFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarNewFunction, err = statusbarStruct.InvokerNew("new")
	})
	return err
}

// StatusbarNew is a representation of the C type gtk_statusbar_new.
func StatusbarNew() *Statusbar {

	var ret gi.Argument

	err := statusbarNewFunction_Set()
	if err == nil {
		ret = statusbarNewFunction.Invoke(nil, nil)
	}

	retGo := &Statusbar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var statusbarGetContextIdFunction *gi.Function
var statusbarGetContextIdFunction_Once sync.Once

func statusbarGetContextIdFunction_Set() error {
	var err error
	statusbarGetContextIdFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarGetContextIdFunction, err = statusbarStruct.InvokerNew("get_context_id")
	})
	return err
}

// GetContextId is a representation of the C type gtk_statusbar_get_context_id.
func (recv *Statusbar) GetContextId(contextDescription string) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(contextDescription)

	var ret gi.Argument

	err := statusbarGetContextIdFunction_Set()
	if err == nil {
		ret = statusbarGetContextIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var statusbarGetMessageAreaFunction *gi.Function
var statusbarGetMessageAreaFunction_Once sync.Once

func statusbarGetMessageAreaFunction_Set() error {
	var err error
	statusbarGetMessageAreaFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarGetMessageAreaFunction, err = statusbarStruct.InvokerNew("get_message_area")
	})
	return err
}

// GetMessageArea is a representation of the C type gtk_statusbar_get_message_area.
func (recv *Statusbar) GetMessageArea() *Box {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := statusbarGetMessageAreaFunction_Set()
	if err == nil {
		ret = statusbarGetMessageAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Box{}
	retGo.Native = ret.Pointer()

	return retGo
}

var statusbarPopFunction *gi.Function
var statusbarPopFunction_Once sync.Once

func statusbarPopFunction_Set() error {
	var err error
	statusbarPopFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarPopFunction, err = statusbarStruct.InvokerNew("pop")
	})
	return err
}

// Pop is a representation of the C type gtk_statusbar_pop.
func (recv *Statusbar) Pop(contextId uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(contextId)

	err := statusbarPopFunction_Set()
	if err == nil {
		statusbarPopFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusbarPushFunction *gi.Function
var statusbarPushFunction_Once sync.Once

func statusbarPushFunction_Set() error {
	var err error
	statusbarPushFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarPushFunction, err = statusbarStruct.InvokerNew("push")
	})
	return err
}

// Push is a representation of the C type gtk_statusbar_push.
func (recv *Statusbar) Push(contextId uint32, text string) uint32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(contextId)
	inArgs[2].SetString(text)

	var ret gi.Argument

	err := statusbarPushFunction_Set()
	if err == nil {
		ret = statusbarPushFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var statusbarRemoveFunction *gi.Function
var statusbarRemoveFunction_Once sync.Once

func statusbarRemoveFunction_Set() error {
	var err error
	statusbarRemoveFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarRemoveFunction, err = statusbarStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_statusbar_remove.
func (recv *Statusbar) Remove(contextId uint32, messageId uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(contextId)
	inArgs[2].SetUint32(messageId)

	err := statusbarRemoveFunction_Set()
	if err == nil {
		statusbarRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusbarRemoveAllFunction *gi.Function
var statusbarRemoveAllFunction_Once sync.Once

func statusbarRemoveAllFunction_Set() error {
	var err error
	statusbarRemoveAllFunction_Once.Do(func() {
		err = statusbarStruct_Set()
		if err != nil {
			return
		}
		statusbarRemoveAllFunction, err = statusbarStruct.InvokerNew("remove_all")
	})
	return err
}

// RemoveAll is a representation of the C type gtk_statusbar_remove_all.
func (recv *Statusbar) RemoveAll(contextId uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(contextId)

	err := statusbarRemoveAllFunction_Set()
	if err == nil {
		statusbarRemoveAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var statusbarAccessibleStruct *gi.Struct
var statusbarAccessibleStruct_Once sync.Once

func statusbarAccessibleStruct_Set() error {
	var err error
	statusbarAccessibleStruct_Once.Do(func() {
		statusbarAccessibleStruct, err = gi.StructNew("Gtk", "StatusbarAccessible")
	})
	return err
}

type StatusbarAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *StatusbarAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(statusbarAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *StatusbarAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(statusbarAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *StatusbarAccessible) FieldPriv() *StatusbarAccessiblePrivate {
	argValue := gi.FieldGet(statusbarAccessibleStruct, recv.Native, "priv")
	value := &StatusbarAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *StatusbarAccessible) SetFieldPriv(value *StatusbarAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(statusbarAccessibleStruct, recv.Native, "priv", argValue)
}

// StatusbarAccessibleStruct creates an uninitialised StatusbarAccessible.
func StatusbarAccessibleStruct() *StatusbarAccessible {
	err := statusbarAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &StatusbarAccessible{}
	structGo.Native = statusbarAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeStatusbarAccessible)
	return structGo
}
func finalizeStatusbarAccessible(obj *StatusbarAccessible) {
	statusbarAccessibleStruct.Free(obj.Native)
}

var styleStruct *gi.Struct
var styleStruct_Once sync.Once

func styleStruct_Set() error {
	var err error
	styleStruct_Once.Do(func() {
		styleStruct, err = gi.StructNew("Gtk", "Style")
	})
	return err
}

type Style struct {
	gobject.Object
}

// UNSUPPORTED : C value 'fg' : for field getter : missing Type

// UNSUPPORTED : C value 'fg' : for field setter : missing Type

// UNSUPPORTED : C value 'bg' : for field getter : missing Type

// UNSUPPORTED : C value 'bg' : for field setter : missing Type

// UNSUPPORTED : C value 'light' : for field getter : missing Type

// UNSUPPORTED : C value 'light' : for field setter : missing Type

// UNSUPPORTED : C value 'dark' : for field getter : missing Type

// UNSUPPORTED : C value 'dark' : for field setter : missing Type

// UNSUPPORTED : C value 'mid' : for field getter : missing Type

// UNSUPPORTED : C value 'mid' : for field setter : missing Type

// UNSUPPORTED : C value 'text' : for field getter : missing Type

// UNSUPPORTED : C value 'text' : for field setter : missing Type

// UNSUPPORTED : C value 'base' : for field getter : missing Type

// UNSUPPORTED : C value 'base' : for field setter : missing Type

// UNSUPPORTED : C value 'text_aa' : for field getter : missing Type

// UNSUPPORTED : C value 'text_aa' : for field setter : missing Type

// UNSUPPORTED : C value 'black' : for field getter : no Go type for 'Gdk.Color'

// UNSUPPORTED : C value 'black' : for field setter : no Go type for 'Gdk.Color'

// UNSUPPORTED : C value 'white' : for field getter : no Go type for 'Gdk.Color'

// UNSUPPORTED : C value 'white' : for field setter : no Go type for 'Gdk.Color'

// UNSUPPORTED : C value 'font_desc' : for field getter : no Go type for 'Pango.FontDescription'

// UNSUPPORTED : C value 'font_desc' : for field setter : no Go type for 'Pango.FontDescription'

// FieldXthickness returns the C field 'xthickness'.
func (recv *Style) FieldXthickness() int32 {
	argValue := gi.FieldGet(styleStruct, recv.Native, "xthickness")
	value := argValue.Int32()
	return value
}

// SetFieldXthickness sets the value of the C field 'xthickness'.
func (recv *Style) SetFieldXthickness(value int32) {
	var argValue gi.Argument
	argValue.SetInt32(value)
	gi.FieldSet(styleStruct, recv.Native, "xthickness", argValue)
}

// FieldYthickness returns the C field 'ythickness'.
func (recv *Style) FieldYthickness() int32 {
	argValue := gi.FieldGet(styleStruct, recv.Native, "ythickness")
	value := argValue.Int32()
	return value
}

// SetFieldYthickness sets the value of the C field 'ythickness'.
func (recv *Style) SetFieldYthickness(value int32) {
	var argValue gi.Argument
	argValue.SetInt32(value)
	gi.FieldSet(styleStruct, recv.Native, "ythickness", argValue)
}

// UNSUPPORTED : C value 'background' : for field getter : missing Type

// UNSUPPORTED : C value 'background' : for field setter : missing Type

var styleNewFunction *gi.Function
var styleNewFunction_Once sync.Once

func styleNewFunction_Set() error {
	var err error
	styleNewFunction_Once.Do(func() {
		err = styleStruct_Set()
		if err != nil {
			return
		}
		styleNewFunction, err = styleStruct.InvokerNew("new")
	})
	return err
}

// StyleNew is a representation of the C type gtk_style_new.
func StyleNew() *Style {

	var ret gi.Argument

	err := styleNewFunction_Set()
	if err == nil {
		ret = styleNewFunction.Invoke(nil, nil)
	}

	retGo := &Style{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_apply_default_background' : parameter 'cr' of type 'cairo.Context' not supported

// UNSUPPORTED : C value 'gtk_style_attach' : parameter 'window' of type 'Gdk.Window' not supported

var styleCopyFunction *gi.Function
var styleCopyFunction_Once sync.Once

func styleCopyFunction_Set() error {
	var err error
	styleCopyFunction_Once.Do(func() {
		err = styleStruct_Set()
		if err != nil {
			return
		}
		styleCopyFunction, err = styleStruct.InvokerNew("copy")
	})
	return err
}

// Copy is a representation of the C type gtk_style_copy.
func (recv *Style) Copy() *Style {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := styleCopyFunction_Set()
	if err == nil {
		ret = styleCopyFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Style{}
	retGo.Native = ret.Pointer()

	return retGo
}

var styleDetachFunction *gi.Function
var styleDetachFunction_Once sync.Once

func styleDetachFunction_Set() error {
	var err error
	styleDetachFunction_Once.Do(func() {
		err = styleStruct_Set()
		if err != nil {
			return
		}
		styleDetachFunction, err = styleStruct.InvokerNew("detach")
	})
	return err
}

// Detach is a representation of the C type gtk_style_detach.
func (recv *Style) Detach() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := styleDetachFunction_Set()
	if err == nil {
		styleDetachFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_get' : parameter 'widget_type' of type 'GType' not supported

// UNSUPPORTED : C value 'gtk_style_get_style_property' : parameter 'widget_type' of type 'GType' not supported

// UNSUPPORTED : C value 'gtk_style_get_valist' : parameter 'widget_type' of type 'GType' not supported

var styleHasContextFunction *gi.Function
var styleHasContextFunction_Once sync.Once

func styleHasContextFunction_Set() error {
	var err error
	styleHasContextFunction_Once.Do(func() {
		err = styleStruct_Set()
		if err != nil {
			return
		}
		styleHasContextFunction, err = styleStruct.InvokerNew("has_context")
	})
	return err
}

// HasContext is a representation of the C type gtk_style_has_context.
func (recv *Style) HasContext() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := styleHasContextFunction_Set()
	if err == nil {
		ret = styleHasContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_lookup_color' : parameter 'color' of type 'Gdk.Color' not supported

var styleLookupIconSetFunction *gi.Function
var styleLookupIconSetFunction_Once sync.Once

func styleLookupIconSetFunction_Set() error {
	var err error
	styleLookupIconSetFunction_Once.Do(func() {
		err = styleStruct_Set()
		if err != nil {
			return
		}
		styleLookupIconSetFunction, err = styleStruct.InvokerNew("lookup_icon_set")
	})
	return err
}

// LookupIconSet is a representation of the C type gtk_style_lookup_icon_set.
func (recv *Style) LookupIconSet(stockId string) *IconSet {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	var ret gi.Argument

	err := styleLookupIconSetFunction_Set()
	if err == nil {
		ret = styleLookupIconSetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IconSet{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_render_icon' : parameter 'direction' of type 'TextDirection' not supported

// UNSUPPORTED : C value 'gtk_style_set_background' : parameter 'window' of type 'Gdk.Window' not supported

var styleContextStruct *gi.Struct
var styleContextStruct_Once sync.Once

func styleContextStruct_Set() error {
	var err error
	styleContextStruct_Once.Do(func() {
		styleContextStruct, err = gi.StructNew("Gtk", "StyleContext")
	})
	return err
}

type StyleContext struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_object' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_object' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *StyleContext) FieldPriv() *StyleContextPrivate {
	argValue := gi.FieldGet(styleContextStruct, recv.Native, "priv")
	value := &StyleContextPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *StyleContext) SetFieldPriv(value *StyleContextPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(styleContextStruct, recv.Native, "priv", argValue)
}

var styleContextNewFunction *gi.Function
var styleContextNewFunction_Once sync.Once

func styleContextNewFunction_Set() error {
	var err error
	styleContextNewFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextNewFunction, err = styleContextStruct.InvokerNew("new")
	})
	return err
}

// StyleContextNew is a representation of the C type gtk_style_context_new.
func StyleContextNew() *StyleContext {

	var ret gi.Argument

	err := styleContextNewFunction_Set()
	if err == nil {
		ret = styleContextNewFunction.Invoke(nil, nil)
	}

	retGo := &StyleContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var styleContextAddClassFunction *gi.Function
var styleContextAddClassFunction_Once sync.Once

func styleContextAddClassFunction_Set() error {
	var err error
	styleContextAddClassFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextAddClassFunction, err = styleContextStruct.InvokerNew("add_class")
	})
	return err
}

// AddClass is a representation of the C type gtk_style_context_add_class.
func (recv *StyleContext) AddClass(className string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(className)

	err := styleContextAddClassFunction_Set()
	if err == nil {
		styleContextAddClassFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_add_provider' : parameter 'provider' of type 'StyleProvider' not supported

// UNSUPPORTED : C value 'gtk_style_context_add_region' : parameter 'flags' of type 'RegionFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_cancel_animations' : parameter 'region_id' of type 'gpointer' not supported

// UNSUPPORTED : C value 'gtk_style_context_get' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_background_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_border' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_border_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_direction' : return type 'TextDirection' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_font' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_frame_clock' : return type 'Gdk.FrameClock' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_junction_sides' : return type 'JunctionSides' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_margin' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_padding' : parameter 'state' of type 'StateFlags' not supported

var styleContextGetParentFunction *gi.Function
var styleContextGetParentFunction_Once sync.Once

func styleContextGetParentFunction_Set() error {
	var err error
	styleContextGetParentFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextGetParentFunction, err = styleContextStruct.InvokerNew("get_parent")
	})
	return err
}

// GetParent is a representation of the C type gtk_style_context_get_parent.
func (recv *StyleContext) GetParent() *StyleContext {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := styleContextGetParentFunction_Set()
	if err == nil {
		ret = styleContextGetParentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StyleContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var styleContextGetPathFunction *gi.Function
var styleContextGetPathFunction_Once sync.Once

func styleContextGetPathFunction_Set() error {
	var err error
	styleContextGetPathFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextGetPathFunction, err = styleContextStruct.InvokerNew("get_path")
	})
	return err
}

// GetPath is a representation of the C type gtk_style_context_get_path.
func (recv *StyleContext) GetPath() *WidgetPath {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := styleContextGetPathFunction_Set()
	if err == nil {
		ret = styleContextGetPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &WidgetPath{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_context_get_property' : parameter 'state' of type 'StateFlags' not supported

var styleContextGetScaleFunction *gi.Function
var styleContextGetScaleFunction_Once sync.Once

func styleContextGetScaleFunction_Set() error {
	var err error
	styleContextGetScaleFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextGetScaleFunction, err = styleContextStruct.InvokerNew("get_scale")
	})
	return err
}

// GetScale is a representation of the C type gtk_style_context_get_scale.
func (recv *StyleContext) GetScale() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := styleContextGetScaleFunction_Set()
	if err == nil {
		ret = styleContextGetScaleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_context_get_screen' : return type 'Gdk.Screen' not supported

var styleContextGetSectionFunction *gi.Function
var styleContextGetSectionFunction_Once sync.Once

func styleContextGetSectionFunction_Set() error {
	var err error
	styleContextGetSectionFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextGetSectionFunction, err = styleContextStruct.InvokerNew("get_section")
	})
	return err
}

// GetSection is a representation of the C type gtk_style_context_get_section.
func (recv *StyleContext) GetSection(property string) *CssSection {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(property)

	var ret gi.Argument

	err := styleContextGetSectionFunction_Set()
	if err == nil {
		ret = styleContextGetSectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &CssSection{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_context_get_state' : return type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_style' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_style_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_style_valist' : parameter 'args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_style_context_get_valist' : parameter 'state' of type 'StateFlags' not supported

var styleContextHasClassFunction *gi.Function
var styleContextHasClassFunction_Once sync.Once

func styleContextHasClassFunction_Set() error {
	var err error
	styleContextHasClassFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextHasClassFunction, err = styleContextStruct.InvokerNew("has_class")
	})
	return err
}

// HasClass is a representation of the C type gtk_style_context_has_class.
func (recv *StyleContext) HasClass(className string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(className)

	var ret gi.Argument

	err := styleContextHasClassFunction_Set()
	if err == nil {
		ret = styleContextHasClassFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_context_has_region' : parameter 'flags_return' of type 'RegionFlags' not supported

var styleContextInvalidateFunction *gi.Function
var styleContextInvalidateFunction_Once sync.Once

func styleContextInvalidateFunction_Set() error {
	var err error
	styleContextInvalidateFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextInvalidateFunction, err = styleContextStruct.InvokerNew("invalidate")
	})
	return err
}

// Invalidate is a representation of the C type gtk_style_context_invalidate.
func (recv *StyleContext) Invalidate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := styleContextInvalidateFunction_Set()
	if err == nil {
		styleContextInvalidateFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_list_classes' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_style_context_list_regions' : return type 'GLib.List' not supported

// UNSUPPORTED : C value 'gtk_style_context_lookup_color' : parameter 'color' of type 'Gdk.RGBA' not supported

var styleContextLookupIconSetFunction *gi.Function
var styleContextLookupIconSetFunction_Once sync.Once

func styleContextLookupIconSetFunction_Set() error {
	var err error
	styleContextLookupIconSetFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextLookupIconSetFunction, err = styleContextStruct.InvokerNew("lookup_icon_set")
	})
	return err
}

// LookupIconSet is a representation of the C type gtk_style_context_lookup_icon_set.
func (recv *StyleContext) LookupIconSet(stockId string) *IconSet {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	var ret gi.Argument

	err := styleContextLookupIconSetFunction_Set()
	if err == nil {
		ret = styleContextLookupIconSetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &IconSet{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_style_context_notify_state_change' : parameter 'window' of type 'Gdk.Window' not supported

var styleContextPopAnimatableRegionFunction *gi.Function
var styleContextPopAnimatableRegionFunction_Once sync.Once

func styleContextPopAnimatableRegionFunction_Set() error {
	var err error
	styleContextPopAnimatableRegionFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextPopAnimatableRegionFunction, err = styleContextStruct.InvokerNew("pop_animatable_region")
	})
	return err
}

// PopAnimatableRegion is a representation of the C type gtk_style_context_pop_animatable_region.
func (recv *StyleContext) PopAnimatableRegion() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := styleContextPopAnimatableRegionFunction_Set()
	if err == nil {
		styleContextPopAnimatableRegionFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_push_animatable_region' : parameter 'region_id' of type 'gpointer' not supported

var styleContextRemoveClassFunction *gi.Function
var styleContextRemoveClassFunction_Once sync.Once

func styleContextRemoveClassFunction_Set() error {
	var err error
	styleContextRemoveClassFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextRemoveClassFunction, err = styleContextStruct.InvokerNew("remove_class")
	})
	return err
}

// RemoveClass is a representation of the C type gtk_style_context_remove_class.
func (recv *StyleContext) RemoveClass(className string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(className)

	err := styleContextRemoveClassFunction_Set()
	if err == nil {
		styleContextRemoveClassFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_remove_provider' : parameter 'provider' of type 'StyleProvider' not supported

var styleContextRemoveRegionFunction *gi.Function
var styleContextRemoveRegionFunction_Once sync.Once

func styleContextRemoveRegionFunction_Set() error {
	var err error
	styleContextRemoveRegionFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextRemoveRegionFunction, err = styleContextStruct.InvokerNew("remove_region")
	})
	return err
}

// RemoveRegion is a representation of the C type gtk_style_context_remove_region.
func (recv *StyleContext) RemoveRegion(regionName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(regionName)

	err := styleContextRemoveRegionFunction_Set()
	if err == nil {
		styleContextRemoveRegionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var styleContextRestoreFunction *gi.Function
var styleContextRestoreFunction_Once sync.Once

func styleContextRestoreFunction_Set() error {
	var err error
	styleContextRestoreFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextRestoreFunction, err = styleContextStruct.InvokerNew("restore")
	})
	return err
}

// Restore is a representation of the C type gtk_style_context_restore.
func (recv *StyleContext) Restore() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := styleContextRestoreFunction_Set()
	if err == nil {
		styleContextRestoreFunction.Invoke(inArgs[:], nil)
	}

	return
}

var styleContextSaveFunction *gi.Function
var styleContextSaveFunction_Once sync.Once

func styleContextSaveFunction_Set() error {
	var err error
	styleContextSaveFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextSaveFunction, err = styleContextStruct.InvokerNew("save")
	})
	return err
}

// Save is a representation of the C type gtk_style_context_save.
func (recv *StyleContext) Save() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := styleContextSaveFunction_Set()
	if err == nil {
		styleContextSaveFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_scroll_animations' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_style_context_set_background' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_style_context_set_direction' : parameter 'direction' of type 'TextDirection' not supported

// UNSUPPORTED : C value 'gtk_style_context_set_frame_clock' : parameter 'frame_clock' of type 'Gdk.FrameClock' not supported

// UNSUPPORTED : C value 'gtk_style_context_set_junction_sides' : parameter 'sides' of type 'JunctionSides' not supported

var styleContextSetParentFunction *gi.Function
var styleContextSetParentFunction_Once sync.Once

func styleContextSetParentFunction_Set() error {
	var err error
	styleContextSetParentFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextSetParentFunction, err = styleContextStruct.InvokerNew("set_parent")
	})
	return err
}

// SetParent is a representation of the C type gtk_style_context_set_parent.
func (recv *StyleContext) SetParent(parent *StyleContext) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	err := styleContextSetParentFunction_Set()
	if err == nil {
		styleContextSetParentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var styleContextSetPathFunction *gi.Function
var styleContextSetPathFunction_Once sync.Once

func styleContextSetPathFunction_Set() error {
	var err error
	styleContextSetPathFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextSetPathFunction, err = styleContextStruct.InvokerNew("set_path")
	})
	return err
}

// SetPath is a representation of the C type gtk_style_context_set_path.
func (recv *StyleContext) SetPath(path *WidgetPath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := styleContextSetPathFunction_Set()
	if err == nil {
		styleContextSetPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var styleContextSetScaleFunction *gi.Function
var styleContextSetScaleFunction_Once sync.Once

func styleContextSetScaleFunction_Set() error {
	var err error
	styleContextSetScaleFunction_Once.Do(func() {
		err = styleContextStruct_Set()
		if err != nil {
			return
		}
		styleContextSetScaleFunction, err = styleContextStruct.InvokerNew("set_scale")
	})
	return err
}

// SetScale is a representation of the C type gtk_style_context_set_scale.
func (recv *StyleContext) SetScale(scale int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(scale)

	err := styleContextSetScaleFunction_Set()
	if err == nil {
		styleContextSetScaleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_context_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_style_context_set_state' : parameter 'flags' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_context_state_is_running' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_style_context_to_string' : parameter 'flags' of type 'StyleContextPrintFlags' not supported

var stylePropertiesStruct *gi.Struct
var stylePropertiesStruct_Once sync.Once

func stylePropertiesStruct_Set() error {
	var err error
	stylePropertiesStruct_Once.Do(func() {
		stylePropertiesStruct, err = gi.StructNew("Gtk", "StyleProperties")
	})
	return err
}

type StyleProperties struct {
	gobject.Object
}

var stylePropertiesNewFunction *gi.Function
var stylePropertiesNewFunction_Once sync.Once

func stylePropertiesNewFunction_Set() error {
	var err error
	stylePropertiesNewFunction_Once.Do(func() {
		err = stylePropertiesStruct_Set()
		if err != nil {
			return
		}
		stylePropertiesNewFunction, err = stylePropertiesStruct.InvokerNew("new")
	})
	return err
}

// StylePropertiesNew is a representation of the C type gtk_style_properties_new.
func StylePropertiesNew() *StyleProperties {

	var ret gi.Argument

	err := stylePropertiesNewFunction_Set()
	if err == nil {
		ret = stylePropertiesNewFunction.Invoke(nil, nil)
	}

	retGo := &StyleProperties{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stylePropertiesClearFunction *gi.Function
var stylePropertiesClearFunction_Once sync.Once

func stylePropertiesClearFunction_Set() error {
	var err error
	stylePropertiesClearFunction_Once.Do(func() {
		err = stylePropertiesStruct_Set()
		if err != nil {
			return
		}
		stylePropertiesClearFunction, err = stylePropertiesStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_style_properties_clear.
func (recv *StyleProperties) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := stylePropertiesClearFunction_Set()
	if err == nil {
		stylePropertiesClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_properties_get' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_properties_get_property' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_properties_get_valist' : parameter 'state' of type 'StateFlags' not supported

var stylePropertiesLookupColorFunction *gi.Function
var stylePropertiesLookupColorFunction_Once sync.Once

func stylePropertiesLookupColorFunction_Set() error {
	var err error
	stylePropertiesLookupColorFunction_Once.Do(func() {
		err = stylePropertiesStruct_Set()
		if err != nil {
			return
		}
		stylePropertiesLookupColorFunction, err = stylePropertiesStruct.InvokerNew("lookup_color")
	})
	return err
}

// LookupColor is a representation of the C type gtk_style_properties_lookup_color.
func (recv *StyleProperties) LookupColor(name string) *SymbolicColor {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	var ret gi.Argument

	err := stylePropertiesLookupColorFunction_Set()
	if err == nil {
		ret = stylePropertiesLookupColorFunction.Invoke(inArgs[:], nil)
	}

	retGo := &SymbolicColor{}
	retGo.Native = ret.Pointer()

	return retGo
}

var stylePropertiesMapColorFunction *gi.Function
var stylePropertiesMapColorFunction_Once sync.Once

func stylePropertiesMapColorFunction_Set() error {
	var err error
	stylePropertiesMapColorFunction_Once.Do(func() {
		err = stylePropertiesStruct_Set()
		if err != nil {
			return
		}
		stylePropertiesMapColorFunction, err = stylePropertiesStruct.InvokerNew("map_color")
	})
	return err
}

// MapColor is a representation of the C type gtk_style_properties_map_color.
func (recv *StyleProperties) MapColor(name string, color *SymbolicColor) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetPointer(color.Native)

	err := stylePropertiesMapColorFunction_Set()
	if err == nil {
		stylePropertiesMapColorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var stylePropertiesMergeFunction *gi.Function
var stylePropertiesMergeFunction_Once sync.Once

func stylePropertiesMergeFunction_Set() error {
	var err error
	stylePropertiesMergeFunction_Once.Do(func() {
		err = stylePropertiesStruct_Set()
		if err != nil {
			return
		}
		stylePropertiesMergeFunction, err = stylePropertiesStruct.InvokerNew("merge")
	})
	return err
}

// Merge is a representation of the C type gtk_style_properties_merge.
func (recv *StyleProperties) Merge(propsToMerge *StyleProperties, replace bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(propsToMerge.Native)
	inArgs[2].SetBoolean(replace)

	err := stylePropertiesMergeFunction_Set()
	if err == nil {
		stylePropertiesMergeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_style_properties_set' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_properties_set_property' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_properties_set_valist' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_style_properties_unset_property' : parameter 'state' of type 'StateFlags' not supported

var switchStruct *gi.Struct
var switchStruct_Once sync.Once

func switchStruct_Set() error {
	var err error
	switchStruct_Once.Do(func() {
		switchStruct, err = gi.StructNew("Gtk", "Switch")
	})
	return err
}

type Switch struct {
	Widget
}

var switchNewFunction *gi.Function
var switchNewFunction_Once sync.Once

func switchNewFunction_Set() error {
	var err error
	switchNewFunction_Once.Do(func() {
		err = switchStruct_Set()
		if err != nil {
			return
		}
		switchNewFunction, err = switchStruct.InvokerNew("new")
	})
	return err
}

// SwitchNew is a representation of the C type gtk_switch_new.
func SwitchNew() *Switch {

	var ret gi.Argument

	err := switchNewFunction_Set()
	if err == nil {
		ret = switchNewFunction.Invoke(nil, nil)
	}

	retGo := &Switch{}
	retGo.Native = ret.Pointer()

	return retGo
}

var switchGetActiveFunction *gi.Function
var switchGetActiveFunction_Once sync.Once

func switchGetActiveFunction_Set() error {
	var err error
	switchGetActiveFunction_Once.Do(func() {
		err = switchStruct_Set()
		if err != nil {
			return
		}
		switchGetActiveFunction, err = switchStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_switch_get_active.
func (recv *Switch) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := switchGetActiveFunction_Set()
	if err == nil {
		ret = switchGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var switchGetStateFunction *gi.Function
var switchGetStateFunction_Once sync.Once

func switchGetStateFunction_Set() error {
	var err error
	switchGetStateFunction_Once.Do(func() {
		err = switchStruct_Set()
		if err != nil {
			return
		}
		switchGetStateFunction, err = switchStruct.InvokerNew("get_state")
	})
	return err
}

// GetState is a representation of the C type gtk_switch_get_state.
func (recv *Switch) GetState() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := switchGetStateFunction_Set()
	if err == nil {
		ret = switchGetStateFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var switchSetActiveFunction *gi.Function
var switchSetActiveFunction_Once sync.Once

func switchSetActiveFunction_Set() error {
	var err error
	switchSetActiveFunction_Once.Do(func() {
		err = switchStruct_Set()
		if err != nil {
			return
		}
		switchSetActiveFunction, err = switchStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_switch_set_active.
func (recv *Switch) SetActive(isActive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isActive)

	err := switchSetActiveFunction_Set()
	if err == nil {
		switchSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var switchSetStateFunction *gi.Function
var switchSetStateFunction_Once sync.Once

func switchSetStateFunction_Set() error {
	var err error
	switchSetStateFunction_Once.Do(func() {
		err = switchStruct_Set()
		if err != nil {
			return
		}
		switchSetStateFunction, err = switchStruct.InvokerNew("set_state")
	})
	return err
}

// SetState is a representation of the C type gtk_switch_set_state.
func (recv *Switch) SetState(state bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(state)

	err := switchSetStateFunction_Set()
	if err == nil {
		switchSetStateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var switchAccessibleStruct *gi.Struct
var switchAccessibleStruct_Once sync.Once

func switchAccessibleStruct_Set() error {
	var err error
	switchAccessibleStruct_Once.Do(func() {
		switchAccessibleStruct, err = gi.StructNew("Gtk", "SwitchAccessible")
	})
	return err
}

type SwitchAccessible struct {
	WidgetAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *SwitchAccessible) FieldParent() *WidgetAccessible {
	argValue := gi.FieldGet(switchAccessibleStruct, recv.Native, "parent")
	value := &WidgetAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *SwitchAccessible) SetFieldParent(value *WidgetAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(switchAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *SwitchAccessible) FieldPriv() *SwitchAccessiblePrivate {
	argValue := gi.FieldGet(switchAccessibleStruct, recv.Native, "priv")
	value := &SwitchAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *SwitchAccessible) SetFieldPriv(value *SwitchAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(switchAccessibleStruct, recv.Native, "priv", argValue)
}

// SwitchAccessibleStruct creates an uninitialised SwitchAccessible.
func SwitchAccessibleStruct() *SwitchAccessible {
	err := switchAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &SwitchAccessible{}
	structGo.Native = switchAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeSwitchAccessible)
	return structGo
}
func finalizeSwitchAccessible(obj *SwitchAccessible) {
	switchAccessibleStruct.Free(obj.Native)
}

var tableStruct *gi.Struct
var tableStruct_Once sync.Once

func tableStruct_Set() error {
	var err error
	tableStruct_Once.Do(func() {
		tableStruct, err = gi.StructNew("Gtk", "Table")
	})
	return err
}

type Table struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Table) FieldContainer() *Container {
	argValue := gi.FieldGet(tableStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Table) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(tableStruct, recv.Native, "container", argValue)
}

var tableNewFunction *gi.Function
var tableNewFunction_Once sync.Once

func tableNewFunction_Set() error {
	var err error
	tableNewFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableNewFunction, err = tableStruct.InvokerNew("new")
	})
	return err
}

// TableNew is a representation of the C type gtk_table_new.
func TableNew(rows uint32, columns uint32, homogeneous bool) *Table {
	var inArgs [3]gi.Argument
	inArgs[0].SetUint32(rows)
	inArgs[1].SetUint32(columns)
	inArgs[2].SetBoolean(homogeneous)

	var ret gi.Argument

	err := tableNewFunction_Set()
	if err == nil {
		ret = tableNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Table{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_table_attach' : parameter 'xoptions' of type 'AttachOptions' not supported

var tableAttachDefaultsFunction *gi.Function
var tableAttachDefaultsFunction_Once sync.Once

func tableAttachDefaultsFunction_Set() error {
	var err error
	tableAttachDefaultsFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableAttachDefaultsFunction, err = tableStruct.InvokerNew("attach_defaults")
	})
	return err
}

// AttachDefaults is a representation of the C type gtk_table_attach_defaults.
func (recv *Table) AttachDefaults(widget *Widget, leftAttach uint32, rightAttach uint32, topAttach uint32, bottomAttach uint32) {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)
	inArgs[2].SetUint32(leftAttach)
	inArgs[3].SetUint32(rightAttach)
	inArgs[4].SetUint32(topAttach)
	inArgs[5].SetUint32(bottomAttach)

	err := tableAttachDefaultsFunction_Set()
	if err == nil {
		tableAttachDefaultsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableGetColSpacingFunction *gi.Function
var tableGetColSpacingFunction_Once sync.Once

func tableGetColSpacingFunction_Set() error {
	var err error
	tableGetColSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetColSpacingFunction, err = tableStruct.InvokerNew("get_col_spacing")
	})
	return err
}

// GetColSpacing is a representation of the C type gtk_table_get_col_spacing.
func (recv *Table) GetColSpacing(column uint32) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(column)

	var ret gi.Argument

	err := tableGetColSpacingFunction_Set()
	if err == nil {
		ret = tableGetColSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var tableGetDefaultColSpacingFunction *gi.Function
var tableGetDefaultColSpacingFunction_Once sync.Once

func tableGetDefaultColSpacingFunction_Set() error {
	var err error
	tableGetDefaultColSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetDefaultColSpacingFunction, err = tableStruct.InvokerNew("get_default_col_spacing")
	})
	return err
}

// GetDefaultColSpacing is a representation of the C type gtk_table_get_default_col_spacing.
func (recv *Table) GetDefaultColSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := tableGetDefaultColSpacingFunction_Set()
	if err == nil {
		ret = tableGetDefaultColSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var tableGetDefaultRowSpacingFunction *gi.Function
var tableGetDefaultRowSpacingFunction_Once sync.Once

func tableGetDefaultRowSpacingFunction_Set() error {
	var err error
	tableGetDefaultRowSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetDefaultRowSpacingFunction, err = tableStruct.InvokerNew("get_default_row_spacing")
	})
	return err
}

// GetDefaultRowSpacing is a representation of the C type gtk_table_get_default_row_spacing.
func (recv *Table) GetDefaultRowSpacing() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := tableGetDefaultRowSpacingFunction_Set()
	if err == nil {
		ret = tableGetDefaultRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var tableGetHomogeneousFunction *gi.Function
var tableGetHomogeneousFunction_Once sync.Once

func tableGetHomogeneousFunction_Set() error {
	var err error
	tableGetHomogeneousFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetHomogeneousFunction, err = tableStruct.InvokerNew("get_homogeneous")
	})
	return err
}

// GetHomogeneous is a representation of the C type gtk_table_get_homogeneous.
func (recv *Table) GetHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := tableGetHomogeneousFunction_Set()
	if err == nil {
		ret = tableGetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var tableGetRowSpacingFunction *gi.Function
var tableGetRowSpacingFunction_Once sync.Once

func tableGetRowSpacingFunction_Set() error {
	var err error
	tableGetRowSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetRowSpacingFunction, err = tableStruct.InvokerNew("get_row_spacing")
	})
	return err
}

// GetRowSpacing is a representation of the C type gtk_table_get_row_spacing.
func (recv *Table) GetRowSpacing(row uint32) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(row)

	var ret gi.Argument

	err := tableGetRowSpacingFunction_Set()
	if err == nil {
		ret = tableGetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var tableGetSizeFunction *gi.Function
var tableGetSizeFunction_Once sync.Once

func tableGetSizeFunction_Set() error {
	var err error
	tableGetSizeFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableGetSizeFunction, err = tableStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_table_get_size.
func (recv *Table) GetSize() (uint32, uint32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := tableGetSizeFunction_Set()
	if err == nil {
		tableGetSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].Uint32()

	return out0, out1
}

var tableResizeFunction *gi.Function
var tableResizeFunction_Once sync.Once

func tableResizeFunction_Set() error {
	var err error
	tableResizeFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableResizeFunction, err = tableStruct.InvokerNew("resize")
	})
	return err
}

// Resize is a representation of the C type gtk_table_resize.
func (recv *Table) Resize(rows uint32, columns uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(rows)
	inArgs[2].SetUint32(columns)

	err := tableResizeFunction_Set()
	if err == nil {
		tableResizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableSetColSpacingFunction *gi.Function
var tableSetColSpacingFunction_Once sync.Once

func tableSetColSpacingFunction_Set() error {
	var err error
	tableSetColSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableSetColSpacingFunction, err = tableStruct.InvokerNew("set_col_spacing")
	})
	return err
}

// SetColSpacing is a representation of the C type gtk_table_set_col_spacing.
func (recv *Table) SetColSpacing(column uint32, spacing uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(column)
	inArgs[2].SetUint32(spacing)

	err := tableSetColSpacingFunction_Set()
	if err == nil {
		tableSetColSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableSetColSpacingsFunction *gi.Function
var tableSetColSpacingsFunction_Once sync.Once

func tableSetColSpacingsFunction_Set() error {
	var err error
	tableSetColSpacingsFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableSetColSpacingsFunction, err = tableStruct.InvokerNew("set_col_spacings")
	})
	return err
}

// SetColSpacings is a representation of the C type gtk_table_set_col_spacings.
func (recv *Table) SetColSpacings(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := tableSetColSpacingsFunction_Set()
	if err == nil {
		tableSetColSpacingsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableSetHomogeneousFunction *gi.Function
var tableSetHomogeneousFunction_Once sync.Once

func tableSetHomogeneousFunction_Set() error {
	var err error
	tableSetHomogeneousFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableSetHomogeneousFunction, err = tableStruct.InvokerNew("set_homogeneous")
	})
	return err
}

// SetHomogeneous is a representation of the C type gtk_table_set_homogeneous.
func (recv *Table) SetHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := tableSetHomogeneousFunction_Set()
	if err == nil {
		tableSetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableSetRowSpacingFunction *gi.Function
var tableSetRowSpacingFunction_Once sync.Once

func tableSetRowSpacingFunction_Set() error {
	var err error
	tableSetRowSpacingFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableSetRowSpacingFunction, err = tableStruct.InvokerNew("set_row_spacing")
	})
	return err
}

// SetRowSpacing is a representation of the C type gtk_table_set_row_spacing.
func (recv *Table) SetRowSpacing(row uint32, spacing uint32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(row)
	inArgs[2].SetUint32(spacing)

	err := tableSetRowSpacingFunction_Set()
	if err == nil {
		tableSetRowSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tableSetRowSpacingsFunction *gi.Function
var tableSetRowSpacingsFunction_Once sync.Once

func tableSetRowSpacingsFunction_Set() error {
	var err error
	tableSetRowSpacingsFunction_Once.Do(func() {
		err = tableStruct_Set()
		if err != nil {
			return
		}
		tableSetRowSpacingsFunction, err = tableStruct.InvokerNew("set_row_spacings")
	})
	return err
}

// SetRowSpacings is a representation of the C type gtk_table_set_row_spacings.
func (recv *Table) SetRowSpacings(spacing uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(spacing)

	err := tableSetRowSpacingsFunction_Set()
	if err == nil {
		tableSetRowSpacingsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tearoffMenuItemStruct *gi.Struct
var tearoffMenuItemStruct_Once sync.Once

func tearoffMenuItemStruct_Set() error {
	var err error
	tearoffMenuItemStruct_Once.Do(func() {
		tearoffMenuItemStruct, err = gi.StructNew("Gtk", "TearoffMenuItem")
	})
	return err
}

type TearoffMenuItem struct {
	MenuItem
}

// FieldMenuItem returns the C field 'menu_item'.
func (recv *TearoffMenuItem) FieldMenuItem() *MenuItem {
	argValue := gi.FieldGet(tearoffMenuItemStruct, recv.Native, "menu_item")
	value := &MenuItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldMenuItem sets the value of the C field 'menu_item'.
func (recv *TearoffMenuItem) SetFieldMenuItem(value *MenuItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(tearoffMenuItemStruct, recv.Native, "menu_item", argValue)
}

var tearoffMenuItemNewFunction *gi.Function
var tearoffMenuItemNewFunction_Once sync.Once

func tearoffMenuItemNewFunction_Set() error {
	var err error
	tearoffMenuItemNewFunction_Once.Do(func() {
		err = tearoffMenuItemStruct_Set()
		if err != nil {
			return
		}
		tearoffMenuItemNewFunction, err = tearoffMenuItemStruct.InvokerNew("new")
	})
	return err
}

// TearoffMenuItemNew is a representation of the C type gtk_tearoff_menu_item_new.
func TearoffMenuItemNew() *TearoffMenuItem {

	var ret gi.Argument

	err := tearoffMenuItemNewFunction_Set()
	if err == nil {
		ret = tearoffMenuItemNewFunction.Invoke(nil, nil)
	}

	retGo := &TearoffMenuItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferStruct *gi.Struct
var textBufferStruct_Once sync.Once

func textBufferStruct_Set() error {
	var err error
	textBufferStruct_Once.Do(func() {
		textBufferStruct, err = gi.StructNew("Gtk", "TextBuffer")
	})
	return err
}

type TextBuffer struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *TextBuffer) FieldPriv() *TextBufferPrivate {
	argValue := gi.FieldGet(textBufferStruct, recv.Native, "priv")
	value := &TextBufferPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TextBuffer) SetFieldPriv(value *TextBufferPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textBufferStruct, recv.Native, "priv", argValue)
}

var textBufferNewFunction *gi.Function
var textBufferNewFunction_Once sync.Once

func textBufferNewFunction_Set() error {
	var err error
	textBufferNewFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferNewFunction, err = textBufferStruct.InvokerNew("new")
	})
	return err
}

// TextBufferNew is a representation of the C type gtk_text_buffer_new.
func TextBufferNew(table *TextTagTable) *TextBuffer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(table.Native)

	var ret gi.Argument

	err := textBufferNewFunction_Set()
	if err == nil {
		ret = textBufferNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextBuffer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferAddMarkFunction *gi.Function
var textBufferAddMarkFunction_Once sync.Once

func textBufferAddMarkFunction_Set() error {
	var err error
	textBufferAddMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferAddMarkFunction, err = textBufferStruct.InvokerNew("add_mark")
	})
	return err
}

// AddMark is a representation of the C type gtk_text_buffer_add_mark.
func (recv *TextBuffer) AddMark(mark *TextMark, where *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)
	inArgs[2].SetPointer(where.Native)

	err := textBufferAddMarkFunction_Set()
	if err == nil {
		textBufferAddMarkFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferAddSelectionClipboardFunction *gi.Function
var textBufferAddSelectionClipboardFunction_Once sync.Once

func textBufferAddSelectionClipboardFunction_Set() error {
	var err error
	textBufferAddSelectionClipboardFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferAddSelectionClipboardFunction, err = textBufferStruct.InvokerNew("add_selection_clipboard")
	})
	return err
}

// AddSelectionClipboard is a representation of the C type gtk_text_buffer_add_selection_clipboard.
func (recv *TextBuffer) AddSelectionClipboard(clipboard *Clipboard) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(clipboard.Native)

	err := textBufferAddSelectionClipboardFunction_Set()
	if err == nil {
		textBufferAddSelectionClipboardFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferApplyTagFunction *gi.Function
var textBufferApplyTagFunction_Once sync.Once

func textBufferApplyTagFunction_Set() error {
	var err error
	textBufferApplyTagFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferApplyTagFunction, err = textBufferStruct.InvokerNew("apply_tag")
	})
	return err
}

// ApplyTag is a representation of the C type gtk_text_buffer_apply_tag.
func (recv *TextBuffer) ApplyTag(tag *TextTag, start *TextIter, end *TextIter) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tag.Native)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)

	err := textBufferApplyTagFunction_Set()
	if err == nil {
		textBufferApplyTagFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferApplyTagByNameFunction *gi.Function
var textBufferApplyTagByNameFunction_Once sync.Once

func textBufferApplyTagByNameFunction_Set() error {
	var err error
	textBufferApplyTagByNameFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferApplyTagByNameFunction, err = textBufferStruct.InvokerNew("apply_tag_by_name")
	})
	return err
}

// ApplyTagByName is a representation of the C type gtk_text_buffer_apply_tag_by_name.
func (recv *TextBuffer) ApplyTagByName(name string, start *TextIter, end *TextIter) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)

	err := textBufferApplyTagByNameFunction_Set()
	if err == nil {
		textBufferApplyTagByNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferBackspaceFunction *gi.Function
var textBufferBackspaceFunction_Once sync.Once

func textBufferBackspaceFunction_Set() error {
	var err error
	textBufferBackspaceFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferBackspaceFunction, err = textBufferStruct.InvokerNew("backspace")
	})
	return err
}

// Backspace is a representation of the C type gtk_text_buffer_backspace.
func (recv *TextBuffer) Backspace(iter *TextIter, interactive bool, defaultEditable bool) bool {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetBoolean(interactive)
	inArgs[3].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferBackspaceFunction_Set()
	if err == nil {
		ret = textBufferBackspaceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferBeginUserActionFunction *gi.Function
var textBufferBeginUserActionFunction_Once sync.Once

func textBufferBeginUserActionFunction_Set() error {
	var err error
	textBufferBeginUserActionFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferBeginUserActionFunction, err = textBufferStruct.InvokerNew("begin_user_action")
	})
	return err
}

// BeginUserAction is a representation of the C type gtk_text_buffer_begin_user_action.
func (recv *TextBuffer) BeginUserAction() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := textBufferBeginUserActionFunction_Set()
	if err == nil {
		textBufferBeginUserActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferCopyClipboardFunction *gi.Function
var textBufferCopyClipboardFunction_Once sync.Once

func textBufferCopyClipboardFunction_Set() error {
	var err error
	textBufferCopyClipboardFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferCopyClipboardFunction, err = textBufferStruct.InvokerNew("copy_clipboard")
	})
	return err
}

// CopyClipboard is a representation of the C type gtk_text_buffer_copy_clipboard.
func (recv *TextBuffer) CopyClipboard(clipboard *Clipboard) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(clipboard.Native)

	err := textBufferCopyClipboardFunction_Set()
	if err == nil {
		textBufferCopyClipboardFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferCreateChildAnchorFunction *gi.Function
var textBufferCreateChildAnchorFunction_Once sync.Once

func textBufferCreateChildAnchorFunction_Set() error {
	var err error
	textBufferCreateChildAnchorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferCreateChildAnchorFunction, err = textBufferStruct.InvokerNew("create_child_anchor")
	})
	return err
}

// CreateChildAnchor is a representation of the C type gtk_text_buffer_create_child_anchor.
func (recv *TextBuffer) CreateChildAnchor(iter *TextIter) *TextChildAnchor {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textBufferCreateChildAnchorFunction_Set()
	if err == nil {
		ret = textBufferCreateChildAnchorFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextChildAnchor{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferCreateMarkFunction *gi.Function
var textBufferCreateMarkFunction_Once sync.Once

func textBufferCreateMarkFunction_Set() error {
	var err error
	textBufferCreateMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferCreateMarkFunction, err = textBufferStruct.InvokerNew("create_mark")
	})
	return err
}

// CreateMark is a representation of the C type gtk_text_buffer_create_mark.
func (recv *TextBuffer) CreateMark(markName string, where *TextIter, leftGravity bool) *TextMark {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markName)
	inArgs[2].SetPointer(where.Native)
	inArgs[3].SetBoolean(leftGravity)

	var ret gi.Argument

	err := textBufferCreateMarkFunction_Set()
	if err == nil {
		ret = textBufferCreateMarkFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextMark{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_buffer_create_tag' : parameter '...' of type 'nil' not supported

var textBufferCutClipboardFunction *gi.Function
var textBufferCutClipboardFunction_Once sync.Once

func textBufferCutClipboardFunction_Set() error {
	var err error
	textBufferCutClipboardFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferCutClipboardFunction, err = textBufferStruct.InvokerNew("cut_clipboard")
	})
	return err
}

// CutClipboard is a representation of the C type gtk_text_buffer_cut_clipboard.
func (recv *TextBuffer) CutClipboard(clipboard *Clipboard, defaultEditable bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(clipboard.Native)
	inArgs[2].SetBoolean(defaultEditable)

	err := textBufferCutClipboardFunction_Set()
	if err == nil {
		textBufferCutClipboardFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferDeleteFunction *gi.Function
var textBufferDeleteFunction_Once sync.Once

func textBufferDeleteFunction_Set() error {
	var err error
	textBufferDeleteFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferDeleteFunction, err = textBufferStruct.InvokerNew("delete")
	})
	return err
}

// Delete is a representation of the C type gtk_text_buffer_delete.
func (recv *TextBuffer) Delete(start *TextIter, end *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(start.Native)
	inArgs[2].SetPointer(end.Native)

	err := textBufferDeleteFunction_Set()
	if err == nil {
		textBufferDeleteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferDeleteInteractiveFunction *gi.Function
var textBufferDeleteInteractiveFunction_Once sync.Once

func textBufferDeleteInteractiveFunction_Set() error {
	var err error
	textBufferDeleteInteractiveFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferDeleteInteractiveFunction, err = textBufferStruct.InvokerNew("delete_interactive")
	})
	return err
}

// DeleteInteractive is a representation of the C type gtk_text_buffer_delete_interactive.
func (recv *TextBuffer) DeleteInteractive(startIter *TextIter, endIter *TextIter, defaultEditable bool) bool {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(startIter.Native)
	inArgs[2].SetPointer(endIter.Native)
	inArgs[3].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferDeleteInteractiveFunction_Set()
	if err == nil {
		ret = textBufferDeleteInteractiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferDeleteMarkFunction *gi.Function
var textBufferDeleteMarkFunction_Once sync.Once

func textBufferDeleteMarkFunction_Set() error {
	var err error
	textBufferDeleteMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferDeleteMarkFunction, err = textBufferStruct.InvokerNew("delete_mark")
	})
	return err
}

// DeleteMark is a representation of the C type gtk_text_buffer_delete_mark.
func (recv *TextBuffer) DeleteMark(mark *TextMark) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)

	err := textBufferDeleteMarkFunction_Set()
	if err == nil {
		textBufferDeleteMarkFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferDeleteMarkByNameFunction *gi.Function
var textBufferDeleteMarkByNameFunction_Once sync.Once

func textBufferDeleteMarkByNameFunction_Set() error {
	var err error
	textBufferDeleteMarkByNameFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferDeleteMarkByNameFunction, err = textBufferStruct.InvokerNew("delete_mark_by_name")
	})
	return err
}

// DeleteMarkByName is a representation of the C type gtk_text_buffer_delete_mark_by_name.
func (recv *TextBuffer) DeleteMarkByName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := textBufferDeleteMarkByNameFunction_Set()
	if err == nil {
		textBufferDeleteMarkByNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferDeleteSelectionFunction *gi.Function
var textBufferDeleteSelectionFunction_Once sync.Once

func textBufferDeleteSelectionFunction_Set() error {
	var err error
	textBufferDeleteSelectionFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferDeleteSelectionFunction, err = textBufferStruct.InvokerNew("delete_selection")
	})
	return err
}

// DeleteSelection is a representation of the C type gtk_text_buffer_delete_selection.
func (recv *TextBuffer) DeleteSelection(interactive bool, defaultEditable bool) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(interactive)
	inArgs[2].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferDeleteSelectionFunction_Set()
	if err == nil {
		ret = textBufferDeleteSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_buffer_deserialize' : parameter 'format' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_deserialize_get_can_create_tags' : parameter 'format' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_deserialize_set_can_create_tags' : parameter 'format' of type 'Gdk.Atom' not supported

var textBufferEndUserActionFunction *gi.Function
var textBufferEndUserActionFunction_Once sync.Once

func textBufferEndUserActionFunction_Set() error {
	var err error
	textBufferEndUserActionFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferEndUserActionFunction, err = textBufferStruct.InvokerNew("end_user_action")
	})
	return err
}

// EndUserAction is a representation of the C type gtk_text_buffer_end_user_action.
func (recv *TextBuffer) EndUserAction() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := textBufferEndUserActionFunction_Set()
	if err == nil {
		textBufferEndUserActionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferGetBoundsFunction *gi.Function
var textBufferGetBoundsFunction_Once sync.Once

func textBufferGetBoundsFunction_Set() error {
	var err error
	textBufferGetBoundsFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetBoundsFunction, err = textBufferStruct.InvokerNew("get_bounds")
	})
	return err
}

// GetBounds is a representation of the C type gtk_text_buffer_get_bounds.
func (recv *TextBuffer) GetBounds() (*TextIter, *TextIter) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := textBufferGetBoundsFunction_Set()
	if err == nil {
		textBufferGetBoundsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TextIter{}
	out1.Native = outArgs[1].Pointer()

	return out0, out1
}

var textBufferGetCharCountFunction *gi.Function
var textBufferGetCharCountFunction_Once sync.Once

func textBufferGetCharCountFunction_Set() error {
	var err error
	textBufferGetCharCountFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetCharCountFunction, err = textBufferStruct.InvokerNew("get_char_count")
	})
	return err
}

// GetCharCount is a representation of the C type gtk_text_buffer_get_char_count.
func (recv *TextBuffer) GetCharCount() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetCharCountFunction_Set()
	if err == nil {
		ret = textBufferGetCharCountFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textBufferGetCopyTargetListFunction *gi.Function
var textBufferGetCopyTargetListFunction_Once sync.Once

func textBufferGetCopyTargetListFunction_Set() error {
	var err error
	textBufferGetCopyTargetListFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetCopyTargetListFunction, err = textBufferStruct.InvokerNew("get_copy_target_list")
	})
	return err
}

// GetCopyTargetList is a representation of the C type gtk_text_buffer_get_copy_target_list.
func (recv *TextBuffer) GetCopyTargetList() *TargetList {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetCopyTargetListFunction_Set()
	if err == nil {
		ret = textBufferGetCopyTargetListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TargetList{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetDeserializeFormatsFunction *gi.Function
var textBufferGetDeserializeFormatsFunction_Once sync.Once

func textBufferGetDeserializeFormatsFunction_Set() error {
	var err error
	textBufferGetDeserializeFormatsFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetDeserializeFormatsFunction, err = textBufferStruct.InvokerNew("get_deserialize_formats")
	})
	return err
}

// GetDeserializeFormats is a representation of the C type gtk_text_buffer_get_deserialize_formats.
func (recv *TextBuffer) GetDeserializeFormats() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetDeserializeFormatsFunction_Set()
	if err == nil {
		textBufferGetDeserializeFormatsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()

	return out0
}

var textBufferGetEndIterFunction *gi.Function
var textBufferGetEndIterFunction_Once sync.Once

func textBufferGetEndIterFunction_Set() error {
	var err error
	textBufferGetEndIterFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetEndIterFunction, err = textBufferStruct.InvokerNew("get_end_iter")
	})
	return err
}

// GetEndIter is a representation of the C type gtk_text_buffer_get_end_iter.
func (recv *TextBuffer) GetEndIter() *TextIter {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetEndIterFunction_Set()
	if err == nil {
		textBufferGetEndIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetHasSelectionFunction *gi.Function
var textBufferGetHasSelectionFunction_Once sync.Once

func textBufferGetHasSelectionFunction_Set() error {
	var err error
	textBufferGetHasSelectionFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetHasSelectionFunction, err = textBufferStruct.InvokerNew("get_has_selection")
	})
	return err
}

// GetHasSelection is a representation of the C type gtk_text_buffer_get_has_selection.
func (recv *TextBuffer) GetHasSelection() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetHasSelectionFunction_Set()
	if err == nil {
		ret = textBufferGetHasSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferGetInsertFunction *gi.Function
var textBufferGetInsertFunction_Once sync.Once

func textBufferGetInsertFunction_Set() error {
	var err error
	textBufferGetInsertFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetInsertFunction, err = textBufferStruct.InvokerNew("get_insert")
	})
	return err
}

// GetInsert is a representation of the C type gtk_text_buffer_get_insert.
func (recv *TextBuffer) GetInsert() *TextMark {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetInsertFunction_Set()
	if err == nil {
		ret = textBufferGetInsertFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextMark{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetIterAtChildAnchorFunction *gi.Function
var textBufferGetIterAtChildAnchorFunction_Once sync.Once

func textBufferGetIterAtChildAnchorFunction_Set() error {
	var err error
	textBufferGetIterAtChildAnchorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtChildAnchorFunction, err = textBufferStruct.InvokerNew("get_iter_at_child_anchor")
	})
	return err
}

// GetIterAtChildAnchor is a representation of the C type gtk_text_buffer_get_iter_at_child_anchor.
func (recv *TextBuffer) GetIterAtChildAnchor(anchor *TextChildAnchor) *TextIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(anchor.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtChildAnchorFunction_Set()
	if err == nil {
		textBufferGetIterAtChildAnchorFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetIterAtLineFunction *gi.Function
var textBufferGetIterAtLineFunction_Once sync.Once

func textBufferGetIterAtLineFunction_Set() error {
	var err error
	textBufferGetIterAtLineFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtLineFunction, err = textBufferStruct.InvokerNew("get_iter_at_line")
	})
	return err
}

// GetIterAtLine is a representation of the C type gtk_text_buffer_get_iter_at_line.
func (recv *TextBuffer) GetIterAtLine(lineNumber int32) *TextIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(lineNumber)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtLineFunction_Set()
	if err == nil {
		textBufferGetIterAtLineFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetIterAtLineIndexFunction *gi.Function
var textBufferGetIterAtLineIndexFunction_Once sync.Once

func textBufferGetIterAtLineIndexFunction_Set() error {
	var err error
	textBufferGetIterAtLineIndexFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtLineIndexFunction, err = textBufferStruct.InvokerNew("get_iter_at_line_index")
	})
	return err
}

// GetIterAtLineIndex is a representation of the C type gtk_text_buffer_get_iter_at_line_index.
func (recv *TextBuffer) GetIterAtLineIndex(lineNumber int32, byteIndex int32) *TextIter {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(lineNumber)
	inArgs[2].SetInt32(byteIndex)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtLineIndexFunction_Set()
	if err == nil {
		textBufferGetIterAtLineIndexFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetIterAtLineOffsetFunction *gi.Function
var textBufferGetIterAtLineOffsetFunction_Once sync.Once

func textBufferGetIterAtLineOffsetFunction_Set() error {
	var err error
	textBufferGetIterAtLineOffsetFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtLineOffsetFunction, err = textBufferStruct.InvokerNew("get_iter_at_line_offset")
	})
	return err
}

// GetIterAtLineOffset is a representation of the C type gtk_text_buffer_get_iter_at_line_offset.
func (recv *TextBuffer) GetIterAtLineOffset(lineNumber int32, charOffset int32) *TextIter {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(lineNumber)
	inArgs[2].SetInt32(charOffset)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtLineOffsetFunction_Set()
	if err == nil {
		textBufferGetIterAtLineOffsetFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetIterAtMarkFunction *gi.Function
var textBufferGetIterAtMarkFunction_Once sync.Once

func textBufferGetIterAtMarkFunction_Set() error {
	var err error
	textBufferGetIterAtMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtMarkFunction, err = textBufferStruct.InvokerNew("get_iter_at_mark")
	})
	return err
}

// GetIterAtMark is a representation of the C type gtk_text_buffer_get_iter_at_mark.
func (recv *TextBuffer) GetIterAtMark(mark *TextMark) *TextIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtMarkFunction_Set()
	if err == nil {
		textBufferGetIterAtMarkFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetIterAtOffsetFunction *gi.Function
var textBufferGetIterAtOffsetFunction_Once sync.Once

func textBufferGetIterAtOffsetFunction_Set() error {
	var err error
	textBufferGetIterAtOffsetFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetIterAtOffsetFunction, err = textBufferStruct.InvokerNew("get_iter_at_offset")
	})
	return err
}

// GetIterAtOffset is a representation of the C type gtk_text_buffer_get_iter_at_offset.
func (recv *TextBuffer) GetIterAtOffset(charOffset int32) *TextIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(charOffset)

	var outArgs [1]gi.Argument

	err := textBufferGetIterAtOffsetFunction_Set()
	if err == nil {
		textBufferGetIterAtOffsetFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetLineCountFunction *gi.Function
var textBufferGetLineCountFunction_Once sync.Once

func textBufferGetLineCountFunction_Set() error {
	var err error
	textBufferGetLineCountFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetLineCountFunction, err = textBufferStruct.InvokerNew("get_line_count")
	})
	return err
}

// GetLineCount is a representation of the C type gtk_text_buffer_get_line_count.
func (recv *TextBuffer) GetLineCount() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetLineCountFunction_Set()
	if err == nil {
		ret = textBufferGetLineCountFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textBufferGetMarkFunction *gi.Function
var textBufferGetMarkFunction_Once sync.Once

func textBufferGetMarkFunction_Set() error {
	var err error
	textBufferGetMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetMarkFunction, err = textBufferStruct.InvokerNew("get_mark")
	})
	return err
}

// GetMark is a representation of the C type gtk_text_buffer_get_mark.
func (recv *TextBuffer) GetMark(name string) *TextMark {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	var ret gi.Argument

	err := textBufferGetMarkFunction_Set()
	if err == nil {
		ret = textBufferGetMarkFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextMark{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetModifiedFunction *gi.Function
var textBufferGetModifiedFunction_Once sync.Once

func textBufferGetModifiedFunction_Set() error {
	var err error
	textBufferGetModifiedFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetModifiedFunction, err = textBufferStruct.InvokerNew("get_modified")
	})
	return err
}

// GetModified is a representation of the C type gtk_text_buffer_get_modified.
func (recv *TextBuffer) GetModified() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetModifiedFunction_Set()
	if err == nil {
		ret = textBufferGetModifiedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferGetPasteTargetListFunction *gi.Function
var textBufferGetPasteTargetListFunction_Once sync.Once

func textBufferGetPasteTargetListFunction_Set() error {
	var err error
	textBufferGetPasteTargetListFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetPasteTargetListFunction, err = textBufferStruct.InvokerNew("get_paste_target_list")
	})
	return err
}

// GetPasteTargetList is a representation of the C type gtk_text_buffer_get_paste_target_list.
func (recv *TextBuffer) GetPasteTargetList() *TargetList {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetPasteTargetListFunction_Set()
	if err == nil {
		ret = textBufferGetPasteTargetListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TargetList{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetSelectionBoundFunction *gi.Function
var textBufferGetSelectionBoundFunction_Once sync.Once

func textBufferGetSelectionBoundFunction_Set() error {
	var err error
	textBufferGetSelectionBoundFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetSelectionBoundFunction, err = textBufferStruct.InvokerNew("get_selection_bound")
	})
	return err
}

// GetSelectionBound is a representation of the C type gtk_text_buffer_get_selection_bound.
func (recv *TextBuffer) GetSelectionBound() *TextMark {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetSelectionBoundFunction_Set()
	if err == nil {
		ret = textBufferGetSelectionBoundFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextMark{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetSelectionBoundsFunction *gi.Function
var textBufferGetSelectionBoundsFunction_Once sync.Once

func textBufferGetSelectionBoundsFunction_Set() error {
	var err error
	textBufferGetSelectionBoundsFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetSelectionBoundsFunction, err = textBufferStruct.InvokerNew("get_selection_bounds")
	})
	return err
}

// GetSelectionBounds is a representation of the C type gtk_text_buffer_get_selection_bounds.
func (recv *TextBuffer) GetSelectionBounds() (bool, *TextIter, *TextIter) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := textBufferGetSelectionBoundsFunction_Set()
	if err == nil {
		ret = textBufferGetSelectionBoundsFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TextIter{}
	out1.Native = outArgs[1].Pointer()

	return retGo, out0, out1
}

var textBufferGetSerializeFormatsFunction *gi.Function
var textBufferGetSerializeFormatsFunction_Once sync.Once

func textBufferGetSerializeFormatsFunction_Set() error {
	var err error
	textBufferGetSerializeFormatsFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetSerializeFormatsFunction, err = textBufferStruct.InvokerNew("get_serialize_formats")
	})
	return err
}

// GetSerializeFormats is a representation of the C type gtk_text_buffer_get_serialize_formats.
func (recv *TextBuffer) GetSerializeFormats() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetSerializeFormatsFunction_Set()
	if err == nil {
		textBufferGetSerializeFormatsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()

	return out0
}

var textBufferGetSliceFunction *gi.Function
var textBufferGetSliceFunction_Once sync.Once

func textBufferGetSliceFunction_Set() error {
	var err error
	textBufferGetSliceFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetSliceFunction, err = textBufferStruct.InvokerNew("get_slice")
	})
	return err
}

// GetSlice is a representation of the C type gtk_text_buffer_get_slice.
func (recv *TextBuffer) GetSlice(start *TextIter, end *TextIter, includeHiddenChars bool) string {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(start.Native)
	inArgs[2].SetPointer(end.Native)
	inArgs[3].SetBoolean(includeHiddenChars)

	var ret gi.Argument

	err := textBufferGetSliceFunction_Set()
	if err == nil {
		ret = textBufferGetSliceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var textBufferGetStartIterFunction *gi.Function
var textBufferGetStartIterFunction_Once sync.Once

func textBufferGetStartIterFunction_Set() error {
	var err error
	textBufferGetStartIterFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetStartIterFunction, err = textBufferStruct.InvokerNew("get_start_iter")
	})
	return err
}

// GetStartIter is a representation of the C type gtk_text_buffer_get_start_iter.
func (recv *TextBuffer) GetStartIter() *TextIter {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := textBufferGetStartIterFunction_Set()
	if err == nil {
		textBufferGetStartIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var textBufferGetTagTableFunction *gi.Function
var textBufferGetTagTableFunction_Once sync.Once

func textBufferGetTagTableFunction_Set() error {
	var err error
	textBufferGetTagTableFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetTagTableFunction, err = textBufferStruct.InvokerNew("get_tag_table")
	})
	return err
}

// GetTagTable is a representation of the C type gtk_text_buffer_get_tag_table.
func (recv *TextBuffer) GetTagTable() *TextTagTable {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textBufferGetTagTableFunction_Set()
	if err == nil {
		ret = textBufferGetTagTableFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextTagTable{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textBufferGetTextFunction *gi.Function
var textBufferGetTextFunction_Once sync.Once

func textBufferGetTextFunction_Set() error {
	var err error
	textBufferGetTextFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferGetTextFunction, err = textBufferStruct.InvokerNew("get_text")
	})
	return err
}

// GetText is a representation of the C type gtk_text_buffer_get_text.
func (recv *TextBuffer) GetText(start *TextIter, end *TextIter, includeHiddenChars bool) string {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(start.Native)
	inArgs[2].SetPointer(end.Native)
	inArgs[3].SetBoolean(includeHiddenChars)

	var ret gi.Argument

	err := textBufferGetTextFunction_Set()
	if err == nil {
		ret = textBufferGetTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var textBufferInsertFunction *gi.Function
var textBufferInsertFunction_Once sync.Once

func textBufferInsertFunction_Set() error {
	var err error
	textBufferInsertFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertFunction, err = textBufferStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_text_buffer_insert.
func (recv *TextBuffer) Insert(iter *TextIter, text string, len int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetString(text)
	inArgs[3].SetInt32(len)

	err := textBufferInsertFunction_Set()
	if err == nil {
		textBufferInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferInsertAtCursorFunction *gi.Function
var textBufferInsertAtCursorFunction_Once sync.Once

func textBufferInsertAtCursorFunction_Set() error {
	var err error
	textBufferInsertAtCursorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertAtCursorFunction, err = textBufferStruct.InvokerNew("insert_at_cursor")
	})
	return err
}

// InsertAtCursor is a representation of the C type gtk_text_buffer_insert_at_cursor.
func (recv *TextBuffer) InsertAtCursor(text string, len int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)
	inArgs[2].SetInt32(len)

	err := textBufferInsertAtCursorFunction_Set()
	if err == nil {
		textBufferInsertAtCursorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferInsertChildAnchorFunction *gi.Function
var textBufferInsertChildAnchorFunction_Once sync.Once

func textBufferInsertChildAnchorFunction_Set() error {
	var err error
	textBufferInsertChildAnchorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertChildAnchorFunction, err = textBufferStruct.InvokerNew("insert_child_anchor")
	})
	return err
}

// InsertChildAnchor is a representation of the C type gtk_text_buffer_insert_child_anchor.
func (recv *TextBuffer) InsertChildAnchor(iter *TextIter, anchor *TextChildAnchor) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(anchor.Native)

	err := textBufferInsertChildAnchorFunction_Set()
	if err == nil {
		textBufferInsertChildAnchorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferInsertInteractiveFunction *gi.Function
var textBufferInsertInteractiveFunction_Once sync.Once

func textBufferInsertInteractiveFunction_Set() error {
	var err error
	textBufferInsertInteractiveFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertInteractiveFunction, err = textBufferStruct.InvokerNew("insert_interactive")
	})
	return err
}

// InsertInteractive is a representation of the C type gtk_text_buffer_insert_interactive.
func (recv *TextBuffer) InsertInteractive(iter *TextIter, text string, len int32, defaultEditable bool) bool {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetString(text)
	inArgs[3].SetInt32(len)
	inArgs[4].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferInsertInteractiveFunction_Set()
	if err == nil {
		ret = textBufferInsertInteractiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferInsertInteractiveAtCursorFunction *gi.Function
var textBufferInsertInteractiveAtCursorFunction_Once sync.Once

func textBufferInsertInteractiveAtCursorFunction_Set() error {
	var err error
	textBufferInsertInteractiveAtCursorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertInteractiveAtCursorFunction, err = textBufferStruct.InvokerNew("insert_interactive_at_cursor")
	})
	return err
}

// InsertInteractiveAtCursor is a representation of the C type gtk_text_buffer_insert_interactive_at_cursor.
func (recv *TextBuffer) InsertInteractiveAtCursor(text string, len int32, defaultEditable bool) bool {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)
	inArgs[2].SetInt32(len)
	inArgs[3].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferInsertInteractiveAtCursorFunction_Set()
	if err == nil {
		ret = textBufferInsertInteractiveAtCursorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textBufferInsertMarkupFunction *gi.Function
var textBufferInsertMarkupFunction_Once sync.Once

func textBufferInsertMarkupFunction_Set() error {
	var err error
	textBufferInsertMarkupFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertMarkupFunction, err = textBufferStruct.InvokerNew("insert_markup")
	})
	return err
}

// InsertMarkup is a representation of the C type gtk_text_buffer_insert_markup.
func (recv *TextBuffer) InsertMarkup(iter *TextIter, markup string, len int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetString(markup)
	inArgs[3].SetInt32(len)

	err := textBufferInsertMarkupFunction_Set()
	if err == nil {
		textBufferInsertMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_buffer_insert_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var textBufferInsertRangeFunction *gi.Function
var textBufferInsertRangeFunction_Once sync.Once

func textBufferInsertRangeFunction_Set() error {
	var err error
	textBufferInsertRangeFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertRangeFunction, err = textBufferStruct.InvokerNew("insert_range")
	})
	return err
}

// InsertRange is a representation of the C type gtk_text_buffer_insert_range.
func (recv *TextBuffer) InsertRange(iter *TextIter, start *TextIter, end *TextIter) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)

	err := textBufferInsertRangeFunction_Set()
	if err == nil {
		textBufferInsertRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferInsertRangeInteractiveFunction *gi.Function
var textBufferInsertRangeInteractiveFunction_Once sync.Once

func textBufferInsertRangeInteractiveFunction_Set() error {
	var err error
	textBufferInsertRangeInteractiveFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferInsertRangeInteractiveFunction, err = textBufferStruct.InvokerNew("insert_range_interactive")
	})
	return err
}

// InsertRangeInteractive is a representation of the C type gtk_text_buffer_insert_range_interactive.
func (recv *TextBuffer) InsertRangeInteractive(iter *TextIter, start *TextIter, end *TextIter, defaultEditable bool) bool {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)
	inArgs[4].SetBoolean(defaultEditable)

	var ret gi.Argument

	err := textBufferInsertRangeInteractiveFunction_Set()
	if err == nil {
		ret = textBufferInsertRangeInteractiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_buffer_insert_with_tags' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_insert_with_tags_by_name' : parameter '...' of type 'nil' not supported

var textBufferMoveMarkFunction *gi.Function
var textBufferMoveMarkFunction_Once sync.Once

func textBufferMoveMarkFunction_Set() error {
	var err error
	textBufferMoveMarkFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferMoveMarkFunction, err = textBufferStruct.InvokerNew("move_mark")
	})
	return err
}

// MoveMark is a representation of the C type gtk_text_buffer_move_mark.
func (recv *TextBuffer) MoveMark(mark *TextMark, where *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)
	inArgs[2].SetPointer(where.Native)

	err := textBufferMoveMarkFunction_Set()
	if err == nil {
		textBufferMoveMarkFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferMoveMarkByNameFunction *gi.Function
var textBufferMoveMarkByNameFunction_Once sync.Once

func textBufferMoveMarkByNameFunction_Set() error {
	var err error
	textBufferMoveMarkByNameFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferMoveMarkByNameFunction, err = textBufferStruct.InvokerNew("move_mark_by_name")
	})
	return err
}

// MoveMarkByName is a representation of the C type gtk_text_buffer_move_mark_by_name.
func (recv *TextBuffer) MoveMarkByName(name string, where *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetPointer(where.Native)

	err := textBufferMoveMarkByNameFunction_Set()
	if err == nil {
		textBufferMoveMarkByNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferPasteClipboardFunction *gi.Function
var textBufferPasteClipboardFunction_Once sync.Once

func textBufferPasteClipboardFunction_Set() error {
	var err error
	textBufferPasteClipboardFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferPasteClipboardFunction, err = textBufferStruct.InvokerNew("paste_clipboard")
	})
	return err
}

// PasteClipboard is a representation of the C type gtk_text_buffer_paste_clipboard.
func (recv *TextBuffer) PasteClipboard(clipboard *Clipboard, overrideLocation *TextIter, defaultEditable bool) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(clipboard.Native)
	inArgs[2].SetPointer(overrideLocation.Native)
	inArgs[3].SetBoolean(defaultEditable)

	err := textBufferPasteClipboardFunction_Set()
	if err == nil {
		textBufferPasteClipboardFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferPlaceCursorFunction *gi.Function
var textBufferPlaceCursorFunction_Once sync.Once

func textBufferPlaceCursorFunction_Set() error {
	var err error
	textBufferPlaceCursorFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferPlaceCursorFunction, err = textBufferStruct.InvokerNew("place_cursor")
	})
	return err
}

// PlaceCursor is a representation of the C type gtk_text_buffer_place_cursor.
func (recv *TextBuffer) PlaceCursor(where *TextIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(where.Native)

	err := textBufferPlaceCursorFunction_Set()
	if err == nil {
		textBufferPlaceCursorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_buffer_register_deserialize_format' : parameter 'function' of type 'TextBufferDeserializeFunc' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_register_deserialize_tagset' : return type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_register_serialize_format' : parameter 'function' of type 'TextBufferSerializeFunc' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_register_serialize_tagset' : return type 'Gdk.Atom' not supported

var textBufferRemoveAllTagsFunction *gi.Function
var textBufferRemoveAllTagsFunction_Once sync.Once

func textBufferRemoveAllTagsFunction_Set() error {
	var err error
	textBufferRemoveAllTagsFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferRemoveAllTagsFunction, err = textBufferStruct.InvokerNew("remove_all_tags")
	})
	return err
}

// RemoveAllTags is a representation of the C type gtk_text_buffer_remove_all_tags.
func (recv *TextBuffer) RemoveAllTags(start *TextIter, end *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(start.Native)
	inArgs[2].SetPointer(end.Native)

	err := textBufferRemoveAllTagsFunction_Set()
	if err == nil {
		textBufferRemoveAllTagsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferRemoveSelectionClipboardFunction *gi.Function
var textBufferRemoveSelectionClipboardFunction_Once sync.Once

func textBufferRemoveSelectionClipboardFunction_Set() error {
	var err error
	textBufferRemoveSelectionClipboardFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferRemoveSelectionClipboardFunction, err = textBufferStruct.InvokerNew("remove_selection_clipboard")
	})
	return err
}

// RemoveSelectionClipboard is a representation of the C type gtk_text_buffer_remove_selection_clipboard.
func (recv *TextBuffer) RemoveSelectionClipboard(clipboard *Clipboard) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(clipboard.Native)

	err := textBufferRemoveSelectionClipboardFunction_Set()
	if err == nil {
		textBufferRemoveSelectionClipboardFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferRemoveTagFunction *gi.Function
var textBufferRemoveTagFunction_Once sync.Once

func textBufferRemoveTagFunction_Set() error {
	var err error
	textBufferRemoveTagFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferRemoveTagFunction, err = textBufferStruct.InvokerNew("remove_tag")
	})
	return err
}

// RemoveTag is a representation of the C type gtk_text_buffer_remove_tag.
func (recv *TextBuffer) RemoveTag(tag *TextTag, start *TextIter, end *TextIter) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tag.Native)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)

	err := textBufferRemoveTagFunction_Set()
	if err == nil {
		textBufferRemoveTagFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferRemoveTagByNameFunction *gi.Function
var textBufferRemoveTagByNameFunction_Once sync.Once

func textBufferRemoveTagByNameFunction_Set() error {
	var err error
	textBufferRemoveTagByNameFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferRemoveTagByNameFunction, err = textBufferStruct.InvokerNew("remove_tag_by_name")
	})
	return err
}

// RemoveTagByName is a representation of the C type gtk_text_buffer_remove_tag_by_name.
func (recv *TextBuffer) RemoveTagByName(name string, start *TextIter, end *TextIter) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)
	inArgs[2].SetPointer(start.Native)
	inArgs[3].SetPointer(end.Native)

	err := textBufferRemoveTagByNameFunction_Set()
	if err == nil {
		textBufferRemoveTagByNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferSelectRangeFunction *gi.Function
var textBufferSelectRangeFunction_Once sync.Once

func textBufferSelectRangeFunction_Set() error {
	var err error
	textBufferSelectRangeFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferSelectRangeFunction, err = textBufferStruct.InvokerNew("select_range")
	})
	return err
}

// SelectRange is a representation of the C type gtk_text_buffer_select_range.
func (recv *TextBuffer) SelectRange(ins *TextIter, bound *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(ins.Native)
	inArgs[2].SetPointer(bound.Native)

	err := textBufferSelectRangeFunction_Set()
	if err == nil {
		textBufferSelectRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_buffer_serialize' : parameter 'format' of type 'Gdk.Atom' not supported

var textBufferSetModifiedFunction *gi.Function
var textBufferSetModifiedFunction_Once sync.Once

func textBufferSetModifiedFunction_Set() error {
	var err error
	textBufferSetModifiedFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferSetModifiedFunction, err = textBufferStruct.InvokerNew("set_modified")
	})
	return err
}

// SetModified is a representation of the C type gtk_text_buffer_set_modified.
func (recv *TextBuffer) SetModified(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := textBufferSetModifiedFunction_Set()
	if err == nil {
		textBufferSetModifiedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textBufferSetTextFunction *gi.Function
var textBufferSetTextFunction_Once sync.Once

func textBufferSetTextFunction_Set() error {
	var err error
	textBufferSetTextFunction_Once.Do(func() {
		err = textBufferStruct_Set()
		if err != nil {
			return
		}
		textBufferSetTextFunction, err = textBufferStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_text_buffer_set_text.
func (recv *TextBuffer) SetText(text string, len int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)
	inArgs[2].SetInt32(len)

	err := textBufferSetTextFunction_Set()
	if err == nil {
		textBufferSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_buffer_unregister_deserialize_format' : parameter 'format' of type 'Gdk.Atom' not supported

// UNSUPPORTED : C value 'gtk_text_buffer_unregister_serialize_format' : parameter 'format' of type 'Gdk.Atom' not supported

var textCellAccessibleStruct *gi.Struct
var textCellAccessibleStruct_Once sync.Once

func textCellAccessibleStruct_Set() error {
	var err error
	textCellAccessibleStruct_Once.Do(func() {
		textCellAccessibleStruct, err = gi.StructNew("Gtk", "TextCellAccessible")
	})
	return err
}

type TextCellAccessible struct {
	RendererCellAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *TextCellAccessible) FieldParent() *RendererCellAccessible {
	argValue := gi.FieldGet(textCellAccessibleStruct, recv.Native, "parent")
	value := &RendererCellAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *TextCellAccessible) SetFieldParent(value *RendererCellAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textCellAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *TextCellAccessible) FieldPriv() *TextCellAccessiblePrivate {
	argValue := gi.FieldGet(textCellAccessibleStruct, recv.Native, "priv")
	value := &TextCellAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TextCellAccessible) SetFieldPriv(value *TextCellAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textCellAccessibleStruct, recv.Native, "priv", argValue)
}

// TextCellAccessibleStruct creates an uninitialised TextCellAccessible.
func TextCellAccessibleStruct() *TextCellAccessible {
	err := textCellAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TextCellAccessible{}
	structGo.Native = textCellAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTextCellAccessible)
	return structGo
}
func finalizeTextCellAccessible(obj *TextCellAccessible) {
	textCellAccessibleStruct.Free(obj.Native)
}

var textChildAnchorStruct *gi.Struct
var textChildAnchorStruct_Once sync.Once

func textChildAnchorStruct_Set() error {
	var err error
	textChildAnchorStruct_Once.Do(func() {
		textChildAnchorStruct, err = gi.StructNew("Gtk", "TextChildAnchor")
	})
	return err
}

type TextChildAnchor struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var textChildAnchorNewFunction *gi.Function
var textChildAnchorNewFunction_Once sync.Once

func textChildAnchorNewFunction_Set() error {
	var err error
	textChildAnchorNewFunction_Once.Do(func() {
		err = textChildAnchorStruct_Set()
		if err != nil {
			return
		}
		textChildAnchorNewFunction, err = textChildAnchorStruct.InvokerNew("new")
	})
	return err
}

// TextChildAnchorNew is a representation of the C type gtk_text_child_anchor_new.
func TextChildAnchorNew() *TextChildAnchor {

	var ret gi.Argument

	err := textChildAnchorNewFunction_Set()
	if err == nil {
		ret = textChildAnchorNewFunction.Invoke(nil, nil)
	}

	retGo := &TextChildAnchor{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textChildAnchorGetDeletedFunction *gi.Function
var textChildAnchorGetDeletedFunction_Once sync.Once

func textChildAnchorGetDeletedFunction_Set() error {
	var err error
	textChildAnchorGetDeletedFunction_Once.Do(func() {
		err = textChildAnchorStruct_Set()
		if err != nil {
			return
		}
		textChildAnchorGetDeletedFunction, err = textChildAnchorStruct.InvokerNew("get_deleted")
	})
	return err
}

// GetDeleted is a representation of the C type gtk_text_child_anchor_get_deleted.
func (recv *TextChildAnchor) GetDeleted() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textChildAnchorGetDeletedFunction_Set()
	if err == nil {
		ret = textChildAnchorGetDeletedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_child_anchor_get_widgets' : return type 'GLib.List' not supported

var textMarkStruct *gi.Struct
var textMarkStruct_Once sync.Once

func textMarkStruct_Set() error {
	var err error
	textMarkStruct_Once.Do(func() {
		textMarkStruct, err = gi.StructNew("Gtk", "TextMark")
	})
	return err
}

type TextMark struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

var textMarkNewFunction *gi.Function
var textMarkNewFunction_Once sync.Once

func textMarkNewFunction_Set() error {
	var err error
	textMarkNewFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkNewFunction, err = textMarkStruct.InvokerNew("new")
	})
	return err
}

// TextMarkNew is a representation of the C type gtk_text_mark_new.
func TextMarkNew(name string, leftGravity bool) *TextMark {
	var inArgs [2]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetBoolean(leftGravity)

	var ret gi.Argument

	err := textMarkNewFunction_Set()
	if err == nil {
		ret = textMarkNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextMark{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textMarkGetBufferFunction *gi.Function
var textMarkGetBufferFunction_Once sync.Once

func textMarkGetBufferFunction_Set() error {
	var err error
	textMarkGetBufferFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkGetBufferFunction, err = textMarkStruct.InvokerNew("get_buffer")
	})
	return err
}

// GetBuffer is a representation of the C type gtk_text_mark_get_buffer.
func (recv *TextMark) GetBuffer() *TextBuffer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textMarkGetBufferFunction_Set()
	if err == nil {
		ret = textMarkGetBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextBuffer{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textMarkGetDeletedFunction *gi.Function
var textMarkGetDeletedFunction_Once sync.Once

func textMarkGetDeletedFunction_Set() error {
	var err error
	textMarkGetDeletedFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkGetDeletedFunction, err = textMarkStruct.InvokerNew("get_deleted")
	})
	return err
}

// GetDeleted is a representation of the C type gtk_text_mark_get_deleted.
func (recv *TextMark) GetDeleted() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textMarkGetDeletedFunction_Set()
	if err == nil {
		ret = textMarkGetDeletedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textMarkGetLeftGravityFunction *gi.Function
var textMarkGetLeftGravityFunction_Once sync.Once

func textMarkGetLeftGravityFunction_Set() error {
	var err error
	textMarkGetLeftGravityFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkGetLeftGravityFunction, err = textMarkStruct.InvokerNew("get_left_gravity")
	})
	return err
}

// GetLeftGravity is a representation of the C type gtk_text_mark_get_left_gravity.
func (recv *TextMark) GetLeftGravity() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textMarkGetLeftGravityFunction_Set()
	if err == nil {
		ret = textMarkGetLeftGravityFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textMarkGetNameFunction *gi.Function
var textMarkGetNameFunction_Once sync.Once

func textMarkGetNameFunction_Set() error {
	var err error
	textMarkGetNameFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkGetNameFunction, err = textMarkStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_text_mark_get_name.
func (recv *TextMark) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textMarkGetNameFunction_Set()
	if err == nil {
		ret = textMarkGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var textMarkGetVisibleFunction *gi.Function
var textMarkGetVisibleFunction_Once sync.Once

func textMarkGetVisibleFunction_Set() error {
	var err error
	textMarkGetVisibleFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkGetVisibleFunction, err = textMarkStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_text_mark_get_visible.
func (recv *TextMark) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textMarkGetVisibleFunction_Set()
	if err == nil {
		ret = textMarkGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textMarkSetVisibleFunction *gi.Function
var textMarkSetVisibleFunction_Once sync.Once

func textMarkSetVisibleFunction_Set() error {
	var err error
	textMarkSetVisibleFunction_Once.Do(func() {
		err = textMarkStruct_Set()
		if err != nil {
			return
		}
		textMarkSetVisibleFunction, err = textMarkStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_text_mark_set_visible.
func (recv *TextMark) SetVisible(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := textMarkSetVisibleFunction_Set()
	if err == nil {
		textMarkSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textTagStruct *gi.Struct
var textTagStruct_Once sync.Once

func textTagStruct_Set() error {
	var err error
	textTagStruct_Once.Do(func() {
		textTagStruct, err = gi.StructNew("Gtk", "TextTag")
	})
	return err
}

type TextTag struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *TextTag) FieldPriv() *TextTagPrivate {
	argValue := gi.FieldGet(textTagStruct, recv.Native, "priv")
	value := &TextTagPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TextTag) SetFieldPriv(value *TextTagPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textTagStruct, recv.Native, "priv", argValue)
}

var textTagNewFunction *gi.Function
var textTagNewFunction_Once sync.Once

func textTagNewFunction_Set() error {
	var err error
	textTagNewFunction_Once.Do(func() {
		err = textTagStruct_Set()
		if err != nil {
			return
		}
		textTagNewFunction, err = textTagStruct.InvokerNew("new")
	})
	return err
}

// TextTagNew is a representation of the C type gtk_text_tag_new.
func TextTagNew(name string) *TextTag {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(name)

	var ret gi.Argument

	err := textTagNewFunction_Set()
	if err == nil {
		ret = textTagNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextTag{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textTagChangedFunction *gi.Function
var textTagChangedFunction_Once sync.Once

func textTagChangedFunction_Set() error {
	var err error
	textTagChangedFunction_Once.Do(func() {
		err = textTagStruct_Set()
		if err != nil {
			return
		}
		textTagChangedFunction, err = textTagStruct.InvokerNew("changed")
	})
	return err
}

// Changed is a representation of the C type gtk_text_tag_changed.
func (recv *TextTag) Changed(sizeChanged bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sizeChanged)

	err := textTagChangedFunction_Set()
	if err == nil {
		textTagChangedFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_tag_event' : parameter 'event_object' of type 'GObject.Object' not supported

var textTagGetPriorityFunction *gi.Function
var textTagGetPriorityFunction_Once sync.Once

func textTagGetPriorityFunction_Set() error {
	var err error
	textTagGetPriorityFunction_Once.Do(func() {
		err = textTagStruct_Set()
		if err != nil {
			return
		}
		textTagGetPriorityFunction, err = textTagStruct.InvokerNew("get_priority")
	})
	return err
}

// GetPriority is a representation of the C type gtk_text_tag_get_priority.
func (recv *TextTag) GetPriority() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textTagGetPriorityFunction_Set()
	if err == nil {
		ret = textTagGetPriorityFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textTagSetPriorityFunction *gi.Function
var textTagSetPriorityFunction_Once sync.Once

func textTagSetPriorityFunction_Set() error {
	var err error
	textTagSetPriorityFunction_Once.Do(func() {
		err = textTagStruct_Set()
		if err != nil {
			return
		}
		textTagSetPriorityFunction, err = textTagStruct.InvokerNew("set_priority")
	})
	return err
}

// SetPriority is a representation of the C type gtk_text_tag_set_priority.
func (recv *TextTag) SetPriority(priority int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(priority)

	err := textTagSetPriorityFunction_Set()
	if err == nil {
		textTagSetPriorityFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textTagTableStruct *gi.Struct
var textTagTableStruct_Once sync.Once

func textTagTableStruct_Set() error {
	var err error
	textTagTableStruct_Once.Do(func() {
		textTagTableStruct, err = gi.StructNew("Gtk", "TextTagTable")
	})
	return err
}

type TextTagTable struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *TextTagTable) FieldPriv() *TextTagTablePrivate {
	argValue := gi.FieldGet(textTagTableStruct, recv.Native, "priv")
	value := &TextTagTablePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TextTagTable) SetFieldPriv(value *TextTagTablePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textTagTableStruct, recv.Native, "priv", argValue)
}

var textTagTableNewFunction *gi.Function
var textTagTableNewFunction_Once sync.Once

func textTagTableNewFunction_Set() error {
	var err error
	textTagTableNewFunction_Once.Do(func() {
		err = textTagTableStruct_Set()
		if err != nil {
			return
		}
		textTagTableNewFunction, err = textTagTableStruct.InvokerNew("new")
	})
	return err
}

// TextTagTableNew is a representation of the C type gtk_text_tag_table_new.
func TextTagTableNew() *TextTagTable {

	var ret gi.Argument

	err := textTagTableNewFunction_Set()
	if err == nil {
		ret = textTagTableNewFunction.Invoke(nil, nil)
	}

	retGo := &TextTagTable{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textTagTableAddFunction *gi.Function
var textTagTableAddFunction_Once sync.Once

func textTagTableAddFunction_Set() error {
	var err error
	textTagTableAddFunction_Once.Do(func() {
		err = textTagTableStruct_Set()
		if err != nil {
			return
		}
		textTagTableAddFunction, err = textTagTableStruct.InvokerNew("add")
	})
	return err
}

// Add is a representation of the C type gtk_text_tag_table_add.
func (recv *TextTagTable) Add(tag *TextTag) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tag.Native)

	var ret gi.Argument

	err := textTagTableAddFunction_Set()
	if err == nil {
		ret = textTagTableAddFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_tag_table_foreach' : parameter 'func' of type 'TextTagTableForeach' not supported

var textTagTableGetSizeFunction *gi.Function
var textTagTableGetSizeFunction_Once sync.Once

func textTagTableGetSizeFunction_Set() error {
	var err error
	textTagTableGetSizeFunction_Once.Do(func() {
		err = textTagTableStruct_Set()
		if err != nil {
			return
		}
		textTagTableGetSizeFunction, err = textTagTableStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_text_tag_table_get_size.
func (recv *TextTagTable) GetSize() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textTagTableGetSizeFunction_Set()
	if err == nil {
		ret = textTagTableGetSizeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textTagTableLookupFunction *gi.Function
var textTagTableLookupFunction_Once sync.Once

func textTagTableLookupFunction_Set() error {
	var err error
	textTagTableLookupFunction_Once.Do(func() {
		err = textTagTableStruct_Set()
		if err != nil {
			return
		}
		textTagTableLookupFunction, err = textTagTableStruct.InvokerNew("lookup")
	})
	return err
}

// Lookup is a representation of the C type gtk_text_tag_table_lookup.
func (recv *TextTagTable) Lookup(name string) *TextTag {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	var ret gi.Argument

	err := textTagTableLookupFunction_Set()
	if err == nil {
		ret = textTagTableLookupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextTag{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textTagTableRemoveFunction *gi.Function
var textTagTableRemoveFunction_Once sync.Once

func textTagTableRemoveFunction_Set() error {
	var err error
	textTagTableRemoveFunction_Once.Do(func() {
		err = textTagTableStruct_Set()
		if err != nil {
			return
		}
		textTagTableRemoveFunction, err = textTagTableStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_text_tag_table_remove.
func (recv *TextTagTable) Remove(tag *TextTag) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tag.Native)

	err := textTagTableRemoveFunction_Set()
	if err == nil {
		textTagTableRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewStruct *gi.Struct
var textViewStruct_Once sync.Once

func textViewStruct_Set() error {
	var err error
	textViewStruct_Once.Do(func() {
		textViewStruct, err = gi.StructNew("Gtk", "TextView")
	})
	return err
}

type TextView struct {
	Container
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *TextView) FieldParentInstance() *Container {
	argValue := gi.FieldGet(textViewStruct, recv.Native, "parent_instance")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *TextView) SetFieldParentInstance(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textViewStruct, recv.Native, "parent_instance", argValue)
}

var textViewNewFunction *gi.Function
var textViewNewFunction_Once sync.Once

func textViewNewFunction_Set() error {
	var err error
	textViewNewFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewNewFunction, err = textViewStruct.InvokerNew("new")
	})
	return err
}

// TextViewNew is a representation of the C type gtk_text_view_new.
func TextViewNew() *TextView {

	var ret gi.Argument

	err := textViewNewFunction_Set()
	if err == nil {
		ret = textViewNewFunction.Invoke(nil, nil)
	}

	retGo := &TextView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textViewNewWithBufferFunction *gi.Function
var textViewNewWithBufferFunction_Once sync.Once

func textViewNewWithBufferFunction_Set() error {
	var err error
	textViewNewWithBufferFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewNewWithBufferFunction, err = textViewStruct.InvokerNew("new_with_buffer")
	})
	return err
}

// TextViewNewWithBuffer is a representation of the C type gtk_text_view_new_with_buffer.
func TextViewNewWithBuffer(buffer *TextBuffer) *TextView {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(buffer.Native)

	var ret gi.Argument

	err := textViewNewWithBufferFunction_Set()
	if err == nil {
		ret = textViewNewWithBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextView{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textViewAddChildAtAnchorFunction *gi.Function
var textViewAddChildAtAnchorFunction_Once sync.Once

func textViewAddChildAtAnchorFunction_Set() error {
	var err error
	textViewAddChildAtAnchorFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewAddChildAtAnchorFunction, err = textViewStruct.InvokerNew("add_child_at_anchor")
	})
	return err
}

// AddChildAtAnchor is a representation of the C type gtk_text_view_add_child_at_anchor.
func (recv *TextView) AddChildAtAnchor(child *Widget, anchor *TextChildAnchor) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetPointer(anchor.Native)

	err := textViewAddChildAtAnchorFunction_Set()
	if err == nil {
		textViewAddChildAtAnchorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_view_add_child_in_window' : parameter 'which_window' of type 'TextWindowType' not supported

var textViewBackwardDisplayLineFunction *gi.Function
var textViewBackwardDisplayLineFunction_Once sync.Once

func textViewBackwardDisplayLineFunction_Set() error {
	var err error
	textViewBackwardDisplayLineFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewBackwardDisplayLineFunction, err = textViewStruct.InvokerNew("backward_display_line")
	})
	return err
}

// BackwardDisplayLine is a representation of the C type gtk_text_view_backward_display_line.
func (recv *TextView) BackwardDisplayLine(iter *TextIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textViewBackwardDisplayLineFunction_Set()
	if err == nil {
		ret = textViewBackwardDisplayLineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewBackwardDisplayLineStartFunction *gi.Function
var textViewBackwardDisplayLineStartFunction_Once sync.Once

func textViewBackwardDisplayLineStartFunction_Set() error {
	var err error
	textViewBackwardDisplayLineStartFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewBackwardDisplayLineStartFunction, err = textViewStruct.InvokerNew("backward_display_line_start")
	})
	return err
}

// BackwardDisplayLineStart is a representation of the C type gtk_text_view_backward_display_line_start.
func (recv *TextView) BackwardDisplayLineStart(iter *TextIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textViewBackwardDisplayLineStartFunction_Set()
	if err == nil {
		ret = textViewBackwardDisplayLineStartFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_buffer_to_window_coords' : parameter 'win' of type 'TextWindowType' not supported

var textViewForwardDisplayLineFunction *gi.Function
var textViewForwardDisplayLineFunction_Once sync.Once

func textViewForwardDisplayLineFunction_Set() error {
	var err error
	textViewForwardDisplayLineFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewForwardDisplayLineFunction, err = textViewStruct.InvokerNew("forward_display_line")
	})
	return err
}

// ForwardDisplayLine is a representation of the C type gtk_text_view_forward_display_line.
func (recv *TextView) ForwardDisplayLine(iter *TextIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textViewForwardDisplayLineFunction_Set()
	if err == nil {
		ret = textViewForwardDisplayLineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewForwardDisplayLineEndFunction *gi.Function
var textViewForwardDisplayLineEndFunction_Once sync.Once

func textViewForwardDisplayLineEndFunction_Set() error {
	var err error
	textViewForwardDisplayLineEndFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewForwardDisplayLineEndFunction, err = textViewStruct.InvokerNew("forward_display_line_end")
	})
	return err
}

// ForwardDisplayLineEnd is a representation of the C type gtk_text_view_forward_display_line_end.
func (recv *TextView) ForwardDisplayLineEnd(iter *TextIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textViewForwardDisplayLineEndFunction_Set()
	if err == nil {
		ret = textViewForwardDisplayLineEndFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewGetAcceptsTabFunction *gi.Function
var textViewGetAcceptsTabFunction_Once sync.Once

func textViewGetAcceptsTabFunction_Set() error {
	var err error
	textViewGetAcceptsTabFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetAcceptsTabFunction, err = textViewStruct.InvokerNew("get_accepts_tab")
	})
	return err
}

// GetAcceptsTab is a representation of the C type gtk_text_view_get_accepts_tab.
func (recv *TextView) GetAcceptsTab() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetAcceptsTabFunction_Set()
	if err == nil {
		ret = textViewGetAcceptsTabFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_get_border_window_size' : parameter 'type' of type 'TextWindowType' not supported

var textViewGetBottomMarginFunction *gi.Function
var textViewGetBottomMarginFunction_Once sync.Once

func textViewGetBottomMarginFunction_Set() error {
	var err error
	textViewGetBottomMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetBottomMarginFunction, err = textViewStruct.InvokerNew("get_bottom_margin")
	})
	return err
}

// GetBottomMargin is a representation of the C type gtk_text_view_get_bottom_margin.
func (recv *TextView) GetBottomMargin() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetBottomMarginFunction_Set()
	if err == nil {
		ret = textViewGetBottomMarginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetBufferFunction *gi.Function
var textViewGetBufferFunction_Once sync.Once

func textViewGetBufferFunction_Set() error {
	var err error
	textViewGetBufferFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetBufferFunction, err = textViewStruct.InvokerNew("get_buffer")
	})
	return err
}

// GetBuffer is a representation of the C type gtk_text_view_get_buffer.
func (recv *TextView) GetBuffer() *TextBuffer {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetBufferFunction_Set()
	if err == nil {
		ret = textViewGetBufferFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextBuffer{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_get_cursor_locations' : parameter 'strong' of type 'Gdk.Rectangle' not supported

var textViewGetCursorVisibleFunction *gi.Function
var textViewGetCursorVisibleFunction_Once sync.Once

func textViewGetCursorVisibleFunction_Set() error {
	var err error
	textViewGetCursorVisibleFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetCursorVisibleFunction, err = textViewStruct.InvokerNew("get_cursor_visible")
	})
	return err
}

// GetCursorVisible is a representation of the C type gtk_text_view_get_cursor_visible.
func (recv *TextView) GetCursorVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetCursorVisibleFunction_Set()
	if err == nil {
		ret = textViewGetCursorVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewGetDefaultAttributesFunction *gi.Function
var textViewGetDefaultAttributesFunction_Once sync.Once

func textViewGetDefaultAttributesFunction_Set() error {
	var err error
	textViewGetDefaultAttributesFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetDefaultAttributesFunction, err = textViewStruct.InvokerNew("get_default_attributes")
	})
	return err
}

// GetDefaultAttributes is a representation of the C type gtk_text_view_get_default_attributes.
func (recv *TextView) GetDefaultAttributes() *TextAttributes {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetDefaultAttributesFunction_Set()
	if err == nil {
		ret = textViewGetDefaultAttributesFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TextAttributes{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textViewGetEditableFunction *gi.Function
var textViewGetEditableFunction_Once sync.Once

func textViewGetEditableFunction_Set() error {
	var err error
	textViewGetEditableFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetEditableFunction, err = textViewStruct.InvokerNew("get_editable")
	})
	return err
}

// GetEditable is a representation of the C type gtk_text_view_get_editable.
func (recv *TextView) GetEditable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetEditableFunction_Set()
	if err == nil {
		ret = textViewGetEditableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewGetHadjustmentFunction *gi.Function
var textViewGetHadjustmentFunction_Once sync.Once

func textViewGetHadjustmentFunction_Set() error {
	var err error
	textViewGetHadjustmentFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetHadjustmentFunction, err = textViewStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_text_view_get_hadjustment.
func (recv *TextView) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetHadjustmentFunction_Set()
	if err == nil {
		ret = textViewGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var textViewGetIndentFunction *gi.Function
var textViewGetIndentFunction_Once sync.Once

func textViewGetIndentFunction_Set() error {
	var err error
	textViewGetIndentFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetIndentFunction, err = textViewStruct.InvokerNew("get_indent")
	})
	return err
}

// GetIndent is a representation of the C type gtk_text_view_get_indent.
func (recv *TextView) GetIndent() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetIndentFunction_Set()
	if err == nil {
		ret = textViewGetIndentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_get_input_hints' : return type 'InputHints' not supported

// UNSUPPORTED : C value 'gtk_text_view_get_input_purpose' : return type 'InputPurpose' not supported

var textViewGetIterAtLocationFunction *gi.Function
var textViewGetIterAtLocationFunction_Once sync.Once

func textViewGetIterAtLocationFunction_Set() error {
	var err error
	textViewGetIterAtLocationFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetIterAtLocationFunction, err = textViewStruct.InvokerNew("get_iter_at_location")
	})
	return err
}

// GetIterAtLocation is a representation of the C type gtk_text_view_get_iter_at_location.
func (recv *TextView) GetIterAtLocation(x int32, y int32) (bool, *TextIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := textViewGetIterAtLocationFunction_Set()
	if err == nil {
		ret = textViewGetIterAtLocationFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()

	return retGo, out0
}

var textViewGetIterAtPositionFunction *gi.Function
var textViewGetIterAtPositionFunction_Once sync.Once

func textViewGetIterAtPositionFunction_Set() error {
	var err error
	textViewGetIterAtPositionFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetIterAtPositionFunction, err = textViewStruct.InvokerNew("get_iter_at_position")
	})
	return err
}

// GetIterAtPosition is a representation of the C type gtk_text_view_get_iter_at_position.
func (recv *TextView) GetIterAtPosition(x int32, y int32) (bool, *TextIter, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := textViewGetIterAtPositionFunction_Set()
	if err == nil {
		ret = textViewGetIterAtPositionFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()
	out1 := outArgs[1].Int32()

	return retGo, out0, out1
}

// UNSUPPORTED : C value 'gtk_text_view_get_iter_location' : parameter 'location' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_text_view_get_justification' : return type 'Justification' not supported

var textViewGetLeftMarginFunction *gi.Function
var textViewGetLeftMarginFunction_Once sync.Once

func textViewGetLeftMarginFunction_Set() error {
	var err error
	textViewGetLeftMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetLeftMarginFunction, err = textViewStruct.InvokerNew("get_left_margin")
	})
	return err
}

// GetLeftMargin is a representation of the C type gtk_text_view_get_left_margin.
func (recv *TextView) GetLeftMargin() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetLeftMarginFunction_Set()
	if err == nil {
		ret = textViewGetLeftMarginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetLineAtYFunction *gi.Function
var textViewGetLineAtYFunction_Once sync.Once

func textViewGetLineAtYFunction_Set() error {
	var err error
	textViewGetLineAtYFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetLineAtYFunction, err = textViewStruct.InvokerNew("get_line_at_y")
	})
	return err
}

// GetLineAtY is a representation of the C type gtk_text_view_get_line_at_y.
func (recv *TextView) GetLineAtY(y int32) (*TextIter, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(y)

	var outArgs [2]gi.Argument

	err := textViewGetLineAtYFunction_Set()
	if err == nil {
		textViewGetLineAtYFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TextIter{}
	out0.Native = outArgs[0].Pointer()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var textViewGetLineYrangeFunction *gi.Function
var textViewGetLineYrangeFunction_Once sync.Once

func textViewGetLineYrangeFunction_Set() error {
	var err error
	textViewGetLineYrangeFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetLineYrangeFunction, err = textViewStruct.InvokerNew("get_line_yrange")
	})
	return err
}

// GetLineYrange is a representation of the C type gtk_text_view_get_line_yrange.
func (recv *TextView) GetLineYrange(iter *TextIter) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var outArgs [2]gi.Argument

	err := textViewGetLineYrangeFunction_Set()
	if err == nil {
		textViewGetLineYrangeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var textViewGetMonospaceFunction *gi.Function
var textViewGetMonospaceFunction_Once sync.Once

func textViewGetMonospaceFunction_Set() error {
	var err error
	textViewGetMonospaceFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetMonospaceFunction, err = textViewStruct.InvokerNew("get_monospace")
	})
	return err
}

// GetMonospace is a representation of the C type gtk_text_view_get_monospace.
func (recv *TextView) GetMonospace() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetMonospaceFunction_Set()
	if err == nil {
		ret = textViewGetMonospaceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewGetOverwriteFunction *gi.Function
var textViewGetOverwriteFunction_Once sync.Once

func textViewGetOverwriteFunction_Set() error {
	var err error
	textViewGetOverwriteFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetOverwriteFunction, err = textViewStruct.InvokerNew("get_overwrite")
	})
	return err
}

// GetOverwrite is a representation of the C type gtk_text_view_get_overwrite.
func (recv *TextView) GetOverwrite() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetOverwriteFunction_Set()
	if err == nil {
		ret = textViewGetOverwriteFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewGetPixelsAboveLinesFunction *gi.Function
var textViewGetPixelsAboveLinesFunction_Once sync.Once

func textViewGetPixelsAboveLinesFunction_Set() error {
	var err error
	textViewGetPixelsAboveLinesFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetPixelsAboveLinesFunction, err = textViewStruct.InvokerNew("get_pixels_above_lines")
	})
	return err
}

// GetPixelsAboveLines is a representation of the C type gtk_text_view_get_pixels_above_lines.
func (recv *TextView) GetPixelsAboveLines() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetPixelsAboveLinesFunction_Set()
	if err == nil {
		ret = textViewGetPixelsAboveLinesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetPixelsBelowLinesFunction *gi.Function
var textViewGetPixelsBelowLinesFunction_Once sync.Once

func textViewGetPixelsBelowLinesFunction_Set() error {
	var err error
	textViewGetPixelsBelowLinesFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetPixelsBelowLinesFunction, err = textViewStruct.InvokerNew("get_pixels_below_lines")
	})
	return err
}

// GetPixelsBelowLines is a representation of the C type gtk_text_view_get_pixels_below_lines.
func (recv *TextView) GetPixelsBelowLines() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetPixelsBelowLinesFunction_Set()
	if err == nil {
		ret = textViewGetPixelsBelowLinesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetPixelsInsideWrapFunction *gi.Function
var textViewGetPixelsInsideWrapFunction_Once sync.Once

func textViewGetPixelsInsideWrapFunction_Set() error {
	var err error
	textViewGetPixelsInsideWrapFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetPixelsInsideWrapFunction, err = textViewStruct.InvokerNew("get_pixels_inside_wrap")
	})
	return err
}

// GetPixelsInsideWrap is a representation of the C type gtk_text_view_get_pixels_inside_wrap.
func (recv *TextView) GetPixelsInsideWrap() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetPixelsInsideWrapFunction_Set()
	if err == nil {
		ret = textViewGetPixelsInsideWrapFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetRightMarginFunction *gi.Function
var textViewGetRightMarginFunction_Once sync.Once

func textViewGetRightMarginFunction_Set() error {
	var err error
	textViewGetRightMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetRightMarginFunction, err = textViewStruct.InvokerNew("get_right_margin")
	})
	return err
}

// GetRightMargin is a representation of the C type gtk_text_view_get_right_margin.
func (recv *TextView) GetRightMargin() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetRightMarginFunction_Set()
	if err == nil {
		ret = textViewGetRightMarginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_get_tabs' : return type 'Pango.TabArray' not supported

var textViewGetTopMarginFunction *gi.Function
var textViewGetTopMarginFunction_Once sync.Once

func textViewGetTopMarginFunction_Set() error {
	var err error
	textViewGetTopMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetTopMarginFunction, err = textViewStruct.InvokerNew("get_top_margin")
	})
	return err
}

// GetTopMargin is a representation of the C type gtk_text_view_get_top_margin.
func (recv *TextView) GetTopMargin() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetTopMarginFunction_Set()
	if err == nil {
		ret = textViewGetTopMarginFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var textViewGetVadjustmentFunction *gi.Function
var textViewGetVadjustmentFunction_Once sync.Once

func textViewGetVadjustmentFunction_Set() error {
	var err error
	textViewGetVadjustmentFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewGetVadjustmentFunction, err = textViewStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_text_view_get_vadjustment.
func (recv *TextView) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewGetVadjustmentFunction_Set()
	if err == nil {
		ret = textViewGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_get_visible_rect' : parameter 'visible_rect' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_text_view_get_window' : parameter 'win' of type 'TextWindowType' not supported

// UNSUPPORTED : C value 'gtk_text_view_get_window_type' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_text_view_get_wrap_mode' : return type 'WrapMode' not supported

// UNSUPPORTED : C value 'gtk_text_view_im_context_filter_keypress' : parameter 'event' of type 'Gdk.EventKey' not supported

var textViewMoveChildFunction *gi.Function
var textViewMoveChildFunction_Once sync.Once

func textViewMoveChildFunction_Set() error {
	var err error
	textViewMoveChildFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewMoveChildFunction, err = textViewStruct.InvokerNew("move_child")
	})
	return err
}

// MoveChild is a representation of the C type gtk_text_view_move_child.
func (recv *TextView) MoveChild(child *Widget, xpos int32, ypos int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(child.Native)
	inArgs[2].SetInt32(xpos)
	inArgs[3].SetInt32(ypos)

	err := textViewMoveChildFunction_Set()
	if err == nil {
		textViewMoveChildFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewMoveMarkOnscreenFunction *gi.Function
var textViewMoveMarkOnscreenFunction_Once sync.Once

func textViewMoveMarkOnscreenFunction_Set() error {
	var err error
	textViewMoveMarkOnscreenFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewMoveMarkOnscreenFunction, err = textViewStruct.InvokerNew("move_mark_onscreen")
	})
	return err
}

// MoveMarkOnscreen is a representation of the C type gtk_text_view_move_mark_onscreen.
func (recv *TextView) MoveMarkOnscreen(mark *TextMark) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)

	var ret gi.Argument

	err := textViewMoveMarkOnscreenFunction_Set()
	if err == nil {
		ret = textViewMoveMarkOnscreenFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewMoveVisuallyFunction *gi.Function
var textViewMoveVisuallyFunction_Once sync.Once

func textViewMoveVisuallyFunction_Set() error {
	var err error
	textViewMoveVisuallyFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewMoveVisuallyFunction, err = textViewStruct.InvokerNew("move_visually")
	})
	return err
}

// MoveVisually is a representation of the C type gtk_text_view_move_visually.
func (recv *TextView) MoveVisually(iter *TextIter, count int32) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetInt32(count)

	var ret gi.Argument

	err := textViewMoveVisuallyFunction_Set()
	if err == nil {
		ret = textViewMoveVisuallyFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewPlaceCursorOnscreenFunction *gi.Function
var textViewPlaceCursorOnscreenFunction_Once sync.Once

func textViewPlaceCursorOnscreenFunction_Set() error {
	var err error
	textViewPlaceCursorOnscreenFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewPlaceCursorOnscreenFunction, err = textViewStruct.InvokerNew("place_cursor_onscreen")
	})
	return err
}

// PlaceCursorOnscreen is a representation of the C type gtk_text_view_place_cursor_onscreen.
func (recv *TextView) PlaceCursorOnscreen() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := textViewPlaceCursorOnscreenFunction_Set()
	if err == nil {
		ret = textViewPlaceCursorOnscreenFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewResetCursorBlinkFunction *gi.Function
var textViewResetCursorBlinkFunction_Once sync.Once

func textViewResetCursorBlinkFunction_Set() error {
	var err error
	textViewResetCursorBlinkFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewResetCursorBlinkFunction, err = textViewStruct.InvokerNew("reset_cursor_blink")
	})
	return err
}

// ResetCursorBlink is a representation of the C type gtk_text_view_reset_cursor_blink.
func (recv *TextView) ResetCursorBlink() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := textViewResetCursorBlinkFunction_Set()
	if err == nil {
		textViewResetCursorBlinkFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewResetImContextFunction *gi.Function
var textViewResetImContextFunction_Once sync.Once

func textViewResetImContextFunction_Set() error {
	var err error
	textViewResetImContextFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewResetImContextFunction, err = textViewStruct.InvokerNew("reset_im_context")
	})
	return err
}

// ResetImContext is a representation of the C type gtk_text_view_reset_im_context.
func (recv *TextView) ResetImContext() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := textViewResetImContextFunction_Set()
	if err == nil {
		textViewResetImContextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewScrollMarkOnscreenFunction *gi.Function
var textViewScrollMarkOnscreenFunction_Once sync.Once

func textViewScrollMarkOnscreenFunction_Set() error {
	var err error
	textViewScrollMarkOnscreenFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewScrollMarkOnscreenFunction, err = textViewStruct.InvokerNew("scroll_mark_onscreen")
	})
	return err
}

// ScrollMarkOnscreen is a representation of the C type gtk_text_view_scroll_mark_onscreen.
func (recv *TextView) ScrollMarkOnscreen(mark *TextMark) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)

	err := textViewScrollMarkOnscreenFunction_Set()
	if err == nil {
		textViewScrollMarkOnscreenFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewScrollToIterFunction *gi.Function
var textViewScrollToIterFunction_Once sync.Once

func textViewScrollToIterFunction_Set() error {
	var err error
	textViewScrollToIterFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewScrollToIterFunction, err = textViewStruct.InvokerNew("scroll_to_iter")
	})
	return err
}

// ScrollToIter is a representation of the C type gtk_text_view_scroll_to_iter.
func (recv *TextView) ScrollToIter(iter *TextIter, withinMargin float64, useAlign bool, xalign float64, yalign float64) bool {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetFloat64(withinMargin)
	inArgs[3].SetBoolean(useAlign)
	inArgs[4].SetFloat64(xalign)
	inArgs[5].SetFloat64(yalign)

	var ret gi.Argument

	err := textViewScrollToIterFunction_Set()
	if err == nil {
		ret = textViewScrollToIterFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var textViewScrollToMarkFunction *gi.Function
var textViewScrollToMarkFunction_Once sync.Once

func textViewScrollToMarkFunction_Set() error {
	var err error
	textViewScrollToMarkFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewScrollToMarkFunction, err = textViewStruct.InvokerNew("scroll_to_mark")
	})
	return err
}

// ScrollToMark is a representation of the C type gtk_text_view_scroll_to_mark.
func (recv *TextView) ScrollToMark(mark *TextMark, withinMargin float64, useAlign bool, xalign float64, yalign float64) {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(mark.Native)
	inArgs[2].SetFloat64(withinMargin)
	inArgs[3].SetBoolean(useAlign)
	inArgs[4].SetFloat64(xalign)
	inArgs[5].SetFloat64(yalign)

	err := textViewScrollToMarkFunction_Set()
	if err == nil {
		textViewScrollToMarkFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetAcceptsTabFunction *gi.Function
var textViewSetAcceptsTabFunction_Once sync.Once

func textViewSetAcceptsTabFunction_Set() error {
	var err error
	textViewSetAcceptsTabFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetAcceptsTabFunction, err = textViewStruct.InvokerNew("set_accepts_tab")
	})
	return err
}

// SetAcceptsTab is a representation of the C type gtk_text_view_set_accepts_tab.
func (recv *TextView) SetAcceptsTab(acceptsTab bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(acceptsTab)

	err := textViewSetAcceptsTabFunction_Set()
	if err == nil {
		textViewSetAcceptsTabFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_view_set_border_window_size' : parameter 'type' of type 'TextWindowType' not supported

var textViewSetBottomMarginFunction *gi.Function
var textViewSetBottomMarginFunction_Once sync.Once

func textViewSetBottomMarginFunction_Set() error {
	var err error
	textViewSetBottomMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetBottomMarginFunction, err = textViewStruct.InvokerNew("set_bottom_margin")
	})
	return err
}

// SetBottomMargin is a representation of the C type gtk_text_view_set_bottom_margin.
func (recv *TextView) SetBottomMargin(bottomMargin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(bottomMargin)

	err := textViewSetBottomMarginFunction_Set()
	if err == nil {
		textViewSetBottomMarginFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetBufferFunction *gi.Function
var textViewSetBufferFunction_Once sync.Once

func textViewSetBufferFunction_Set() error {
	var err error
	textViewSetBufferFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetBufferFunction, err = textViewStruct.InvokerNew("set_buffer")
	})
	return err
}

// SetBuffer is a representation of the C type gtk_text_view_set_buffer.
func (recv *TextView) SetBuffer(buffer *TextBuffer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(buffer.Native)

	err := textViewSetBufferFunction_Set()
	if err == nil {
		textViewSetBufferFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetCursorVisibleFunction *gi.Function
var textViewSetCursorVisibleFunction_Once sync.Once

func textViewSetCursorVisibleFunction_Set() error {
	var err error
	textViewSetCursorVisibleFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetCursorVisibleFunction, err = textViewStruct.InvokerNew("set_cursor_visible")
	})
	return err
}

// SetCursorVisible is a representation of the C type gtk_text_view_set_cursor_visible.
func (recv *TextView) SetCursorVisible(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := textViewSetCursorVisibleFunction_Set()
	if err == nil {
		textViewSetCursorVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetEditableFunction *gi.Function
var textViewSetEditableFunction_Once sync.Once

func textViewSetEditableFunction_Set() error {
	var err error
	textViewSetEditableFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetEditableFunction, err = textViewStruct.InvokerNew("set_editable")
	})
	return err
}

// SetEditable is a representation of the C type gtk_text_view_set_editable.
func (recv *TextView) SetEditable(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := textViewSetEditableFunction_Set()
	if err == nil {
		textViewSetEditableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetIndentFunction *gi.Function
var textViewSetIndentFunction_Once sync.Once

func textViewSetIndentFunction_Set() error {
	var err error
	textViewSetIndentFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetIndentFunction, err = textViewStruct.InvokerNew("set_indent")
	})
	return err
}

// SetIndent is a representation of the C type gtk_text_view_set_indent.
func (recv *TextView) SetIndent(indent int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(indent)

	err := textViewSetIndentFunction_Set()
	if err == nil {
		textViewSetIndentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_view_set_input_hints' : parameter 'hints' of type 'InputHints' not supported

// UNSUPPORTED : C value 'gtk_text_view_set_input_purpose' : parameter 'purpose' of type 'InputPurpose' not supported

// UNSUPPORTED : C value 'gtk_text_view_set_justification' : parameter 'justification' of type 'Justification' not supported

var textViewSetLeftMarginFunction *gi.Function
var textViewSetLeftMarginFunction_Once sync.Once

func textViewSetLeftMarginFunction_Set() error {
	var err error
	textViewSetLeftMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetLeftMarginFunction, err = textViewStruct.InvokerNew("set_left_margin")
	})
	return err
}

// SetLeftMargin is a representation of the C type gtk_text_view_set_left_margin.
func (recv *TextView) SetLeftMargin(leftMargin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(leftMargin)

	err := textViewSetLeftMarginFunction_Set()
	if err == nil {
		textViewSetLeftMarginFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetMonospaceFunction *gi.Function
var textViewSetMonospaceFunction_Once sync.Once

func textViewSetMonospaceFunction_Set() error {
	var err error
	textViewSetMonospaceFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetMonospaceFunction, err = textViewStruct.InvokerNew("set_monospace")
	})
	return err
}

// SetMonospace is a representation of the C type gtk_text_view_set_monospace.
func (recv *TextView) SetMonospace(monospace bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(monospace)

	err := textViewSetMonospaceFunction_Set()
	if err == nil {
		textViewSetMonospaceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetOverwriteFunction *gi.Function
var textViewSetOverwriteFunction_Once sync.Once

func textViewSetOverwriteFunction_Set() error {
	var err error
	textViewSetOverwriteFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetOverwriteFunction, err = textViewStruct.InvokerNew("set_overwrite")
	})
	return err
}

// SetOverwrite is a representation of the C type gtk_text_view_set_overwrite.
func (recv *TextView) SetOverwrite(overwrite bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(overwrite)

	err := textViewSetOverwriteFunction_Set()
	if err == nil {
		textViewSetOverwriteFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetPixelsAboveLinesFunction *gi.Function
var textViewSetPixelsAboveLinesFunction_Once sync.Once

func textViewSetPixelsAboveLinesFunction_Set() error {
	var err error
	textViewSetPixelsAboveLinesFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetPixelsAboveLinesFunction, err = textViewStruct.InvokerNew("set_pixels_above_lines")
	})
	return err
}

// SetPixelsAboveLines is a representation of the C type gtk_text_view_set_pixels_above_lines.
func (recv *TextView) SetPixelsAboveLines(pixelsAboveLines int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pixelsAboveLines)

	err := textViewSetPixelsAboveLinesFunction_Set()
	if err == nil {
		textViewSetPixelsAboveLinesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetPixelsBelowLinesFunction *gi.Function
var textViewSetPixelsBelowLinesFunction_Once sync.Once

func textViewSetPixelsBelowLinesFunction_Set() error {
	var err error
	textViewSetPixelsBelowLinesFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetPixelsBelowLinesFunction, err = textViewStruct.InvokerNew("set_pixels_below_lines")
	})
	return err
}

// SetPixelsBelowLines is a representation of the C type gtk_text_view_set_pixels_below_lines.
func (recv *TextView) SetPixelsBelowLines(pixelsBelowLines int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pixelsBelowLines)

	err := textViewSetPixelsBelowLinesFunction_Set()
	if err == nil {
		textViewSetPixelsBelowLinesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetPixelsInsideWrapFunction *gi.Function
var textViewSetPixelsInsideWrapFunction_Once sync.Once

func textViewSetPixelsInsideWrapFunction_Set() error {
	var err error
	textViewSetPixelsInsideWrapFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetPixelsInsideWrapFunction, err = textViewStruct.InvokerNew("set_pixels_inside_wrap")
	})
	return err
}

// SetPixelsInsideWrap is a representation of the C type gtk_text_view_set_pixels_inside_wrap.
func (recv *TextView) SetPixelsInsideWrap(pixelsInsideWrap int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(pixelsInsideWrap)

	err := textViewSetPixelsInsideWrapFunction_Set()
	if err == nil {
		textViewSetPixelsInsideWrapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var textViewSetRightMarginFunction *gi.Function
var textViewSetRightMarginFunction_Once sync.Once

func textViewSetRightMarginFunction_Set() error {
	var err error
	textViewSetRightMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetRightMarginFunction, err = textViewStruct.InvokerNew("set_right_margin")
	})
	return err
}

// SetRightMargin is a representation of the C type gtk_text_view_set_right_margin.
func (recv *TextView) SetRightMargin(rightMargin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(rightMargin)

	err := textViewSetRightMarginFunction_Set()
	if err == nil {
		textViewSetRightMarginFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_view_set_tabs' : parameter 'tabs' of type 'Pango.TabArray' not supported

var textViewSetTopMarginFunction *gi.Function
var textViewSetTopMarginFunction_Once sync.Once

func textViewSetTopMarginFunction_Set() error {
	var err error
	textViewSetTopMarginFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewSetTopMarginFunction, err = textViewStruct.InvokerNew("set_top_margin")
	})
	return err
}

// SetTopMargin is a representation of the C type gtk_text_view_set_top_margin.
func (recv *TextView) SetTopMargin(topMargin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(topMargin)

	err := textViewSetTopMarginFunction_Set()
	if err == nil {
		textViewSetTopMarginFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_text_view_set_wrap_mode' : parameter 'wrap_mode' of type 'WrapMode' not supported

var textViewStartsDisplayLineFunction *gi.Function
var textViewStartsDisplayLineFunction_Once sync.Once

func textViewStartsDisplayLineFunction_Set() error {
	var err error
	textViewStartsDisplayLineFunction_Once.Do(func() {
		err = textViewStruct_Set()
		if err != nil {
			return
		}
		textViewStartsDisplayLineFunction, err = textViewStruct.InvokerNew("starts_display_line")
	})
	return err
}

// StartsDisplayLine is a representation of the C type gtk_text_view_starts_display_line.
func (recv *TextView) StartsDisplayLine(iter *TextIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := textViewStartsDisplayLineFunction_Set()
	if err == nil {
		ret = textViewStartsDisplayLineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_text_view_window_to_buffer_coords' : parameter 'win' of type 'TextWindowType' not supported

var textViewAccessibleStruct *gi.Struct
var textViewAccessibleStruct_Once sync.Once

func textViewAccessibleStruct_Set() error {
	var err error
	textViewAccessibleStruct_Once.Do(func() {
		textViewAccessibleStruct, err = gi.StructNew("Gtk", "TextViewAccessible")
	})
	return err
}

type TextViewAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *TextViewAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(textViewAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *TextViewAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textViewAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *TextViewAccessible) FieldPriv() *TextViewAccessiblePrivate {
	argValue := gi.FieldGet(textViewAccessibleStruct, recv.Native, "priv")
	value := &TextViewAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TextViewAccessible) SetFieldPriv(value *TextViewAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(textViewAccessibleStruct, recv.Native, "priv", argValue)
}

// TextViewAccessibleStruct creates an uninitialised TextViewAccessible.
func TextViewAccessibleStruct() *TextViewAccessible {
	err := textViewAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TextViewAccessible{}
	structGo.Native = textViewAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTextViewAccessible)
	return structGo
}
func finalizeTextViewAccessible(obj *TextViewAccessible) {
	textViewAccessibleStruct.Free(obj.Native)
}

var themingEngineStruct *gi.Struct
var themingEngineStruct_Once sync.Once

func themingEngineStruct_Set() error {
	var err error
	themingEngineStruct_Once.Do(func() {
		themingEngineStruct, err = gi.StructNew("Gtk", "ThemingEngine")
	})
	return err
}

type ThemingEngine struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_object' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_object' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *ThemingEngine) FieldPriv() *ThemingEnginePrivate {
	argValue := gi.FieldGet(themingEngineStruct, recv.Native, "priv")
	value := &ThemingEnginePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ThemingEngine) SetFieldPriv(value *ThemingEnginePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(themingEngineStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_theming_engine_get' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_background_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_border' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_border_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_direction' : return type 'TextDirection' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_font' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_junction_sides' : return type 'JunctionSides' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_margin' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_padding' : parameter 'state' of type 'StateFlags' not supported

var themingEngineGetPathFunction *gi.Function
var themingEngineGetPathFunction_Once sync.Once

func themingEngineGetPathFunction_Set() error {
	var err error
	themingEngineGetPathFunction_Once.Do(func() {
		err = themingEngineStruct_Set()
		if err != nil {
			return
		}
		themingEngineGetPathFunction, err = themingEngineStruct.InvokerNew("get_path")
	})
	return err
}

// GetPath is a representation of the C type gtk_theming_engine_get_path.
func (recv *ThemingEngine) GetPath() *WidgetPath {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := themingEngineGetPathFunction_Set()
	if err == nil {
		ret = themingEngineGetPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &WidgetPath{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_theming_engine_get_property' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_screen' : return type 'Gdk.Screen' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_state' : return type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_style' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_style_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_style_valist' : parameter 'args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_get_valist' : parameter 'state' of type 'StateFlags' not supported

var themingEngineHasClassFunction *gi.Function
var themingEngineHasClassFunction_Once sync.Once

func themingEngineHasClassFunction_Set() error {
	var err error
	themingEngineHasClassFunction_Once.Do(func() {
		err = themingEngineStruct_Set()
		if err != nil {
			return
		}
		themingEngineHasClassFunction, err = themingEngineStruct.InvokerNew("has_class")
	})
	return err
}

// HasClass is a representation of the C type gtk_theming_engine_has_class.
func (recv *ThemingEngine) HasClass(styleClass string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(styleClass)

	var ret gi.Argument

	err := themingEngineHasClassFunction_Set()
	if err == nil {
		ret = themingEngineHasClassFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_theming_engine_has_region' : parameter 'flags' of type 'RegionFlags' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_lookup_color' : parameter 'color' of type 'Gdk.RGBA' not supported

// UNSUPPORTED : C value 'gtk_theming_engine_state_is_running' : parameter 'state' of type 'StateType' not supported

// ThemingEngineStruct creates an uninitialised ThemingEngine.
func ThemingEngineStruct() *ThemingEngine {
	err := themingEngineStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ThemingEngine{}
	structGo.Native = themingEngineStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeThemingEngine)
	return structGo
}
func finalizeThemingEngine(obj *ThemingEngine) {
	themingEngineStruct.Free(obj.Native)
}

var toggleActionStruct *gi.Struct
var toggleActionStruct_Once sync.Once

func toggleActionStruct_Set() error {
	var err error
	toggleActionStruct_Once.Do(func() {
		toggleActionStruct, err = gi.StructNew("Gtk", "ToggleAction")
	})
	return err
}

type ToggleAction struct {
	Action
}

// FieldParent returns the C field 'parent'.
func (recv *ToggleAction) FieldParent() *Action {
	argValue := gi.FieldGet(toggleActionStruct, recv.Native, "parent")
	value := &Action{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ToggleAction) SetFieldParent(value *Action) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toggleActionStruct, recv.Native, "parent", argValue)
}

var toggleActionNewFunction *gi.Function
var toggleActionNewFunction_Once sync.Once

func toggleActionNewFunction_Set() error {
	var err error
	toggleActionNewFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionNewFunction, err = toggleActionStruct.InvokerNew("new")
	})
	return err
}

// ToggleActionNew is a representation of the C type gtk_toggle_action_new.
func ToggleActionNew(name string, label string, tooltip string, stockId string) *ToggleAction {
	var inArgs [4]gi.Argument
	inArgs[0].SetString(name)
	inArgs[1].SetString(label)
	inArgs[2].SetString(tooltip)
	inArgs[3].SetString(stockId)

	var ret gi.Argument

	err := toggleActionNewFunction_Set()
	if err == nil {
		ret = toggleActionNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToggleAction{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleActionGetActiveFunction *gi.Function
var toggleActionGetActiveFunction_Once sync.Once

func toggleActionGetActiveFunction_Set() error {
	var err error
	toggleActionGetActiveFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionGetActiveFunction, err = toggleActionStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_toggle_action_get_active.
func (recv *ToggleAction) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleActionGetActiveFunction_Set()
	if err == nil {
		ret = toggleActionGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleActionGetDrawAsRadioFunction *gi.Function
var toggleActionGetDrawAsRadioFunction_Once sync.Once

func toggleActionGetDrawAsRadioFunction_Set() error {
	var err error
	toggleActionGetDrawAsRadioFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionGetDrawAsRadioFunction, err = toggleActionStruct.InvokerNew("get_draw_as_radio")
	})
	return err
}

// GetDrawAsRadio is a representation of the C type gtk_toggle_action_get_draw_as_radio.
func (recv *ToggleAction) GetDrawAsRadio() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleActionGetDrawAsRadioFunction_Set()
	if err == nil {
		ret = toggleActionGetDrawAsRadioFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleActionSetActiveFunction *gi.Function
var toggleActionSetActiveFunction_Once sync.Once

func toggleActionSetActiveFunction_Set() error {
	var err error
	toggleActionSetActiveFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionSetActiveFunction, err = toggleActionStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_toggle_action_set_active.
func (recv *ToggleAction) SetActive(isActive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isActive)

	err := toggleActionSetActiveFunction_Set()
	if err == nil {
		toggleActionSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleActionSetDrawAsRadioFunction *gi.Function
var toggleActionSetDrawAsRadioFunction_Once sync.Once

func toggleActionSetDrawAsRadioFunction_Set() error {
	var err error
	toggleActionSetDrawAsRadioFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionSetDrawAsRadioFunction, err = toggleActionStruct.InvokerNew("set_draw_as_radio")
	})
	return err
}

// SetDrawAsRadio is a representation of the C type gtk_toggle_action_set_draw_as_radio.
func (recv *ToggleAction) SetDrawAsRadio(drawAsRadio bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(drawAsRadio)

	err := toggleActionSetDrawAsRadioFunction_Set()
	if err == nil {
		toggleActionSetDrawAsRadioFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleActionToggledFunction *gi.Function
var toggleActionToggledFunction_Once sync.Once

func toggleActionToggledFunction_Set() error {
	var err error
	toggleActionToggledFunction_Once.Do(func() {
		err = toggleActionStruct_Set()
		if err != nil {
			return
		}
		toggleActionToggledFunction, err = toggleActionStruct.InvokerNew("toggled")
	})
	return err
}

// Toggled is a representation of the C type gtk_toggle_action_toggled.
func (recv *ToggleAction) Toggled() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toggleActionToggledFunction_Set()
	if err == nil {
		toggleActionToggledFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleButtonStruct *gi.Struct
var toggleButtonStruct_Once sync.Once

func toggleButtonStruct_Set() error {
	var err error
	toggleButtonStruct_Once.Do(func() {
		toggleButtonStruct, err = gi.StructNew("Gtk", "ToggleButton")
	})
	return err
}

type ToggleButton struct {
	Button
}

var toggleButtonNewFunction *gi.Function
var toggleButtonNewFunction_Once sync.Once

func toggleButtonNewFunction_Set() error {
	var err error
	toggleButtonNewFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonNewFunction, err = toggleButtonStruct.InvokerNew("new")
	})
	return err
}

// ToggleButtonNew is a representation of the C type gtk_toggle_button_new.
func ToggleButtonNew() *ToggleButton {

	var ret gi.Argument

	err := toggleButtonNewFunction_Set()
	if err == nil {
		ret = toggleButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &ToggleButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleButtonNewWithLabelFunction *gi.Function
var toggleButtonNewWithLabelFunction_Once sync.Once

func toggleButtonNewWithLabelFunction_Set() error {
	var err error
	toggleButtonNewWithLabelFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonNewWithLabelFunction, err = toggleButtonStruct.InvokerNew("new_with_label")
	})
	return err
}

// ToggleButtonNewWithLabel is a representation of the C type gtk_toggle_button_new_with_label.
func ToggleButtonNewWithLabel(label string) *ToggleButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := toggleButtonNewWithLabelFunction_Set()
	if err == nil {
		ret = toggleButtonNewWithLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToggleButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleButtonNewWithMnemonicFunction *gi.Function
var toggleButtonNewWithMnemonicFunction_Once sync.Once

func toggleButtonNewWithMnemonicFunction_Set() error {
	var err error
	toggleButtonNewWithMnemonicFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonNewWithMnemonicFunction, err = toggleButtonStruct.InvokerNew("new_with_mnemonic")
	})
	return err
}

// ToggleButtonNewWithMnemonic is a representation of the C type gtk_toggle_button_new_with_mnemonic.
func ToggleButtonNewWithMnemonic(label string) *ToggleButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := toggleButtonNewWithMnemonicFunction_Set()
	if err == nil {
		ret = toggleButtonNewWithMnemonicFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToggleButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleButtonGetActiveFunction *gi.Function
var toggleButtonGetActiveFunction_Once sync.Once

func toggleButtonGetActiveFunction_Set() error {
	var err error
	toggleButtonGetActiveFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonGetActiveFunction, err = toggleButtonStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_toggle_button_get_active.
func (recv *ToggleButton) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleButtonGetActiveFunction_Set()
	if err == nil {
		ret = toggleButtonGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleButtonGetInconsistentFunction *gi.Function
var toggleButtonGetInconsistentFunction_Once sync.Once

func toggleButtonGetInconsistentFunction_Set() error {
	var err error
	toggleButtonGetInconsistentFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonGetInconsistentFunction, err = toggleButtonStruct.InvokerNew("get_inconsistent")
	})
	return err
}

// GetInconsistent is a representation of the C type gtk_toggle_button_get_inconsistent.
func (recv *ToggleButton) GetInconsistent() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleButtonGetInconsistentFunction_Set()
	if err == nil {
		ret = toggleButtonGetInconsistentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleButtonGetModeFunction *gi.Function
var toggleButtonGetModeFunction_Once sync.Once

func toggleButtonGetModeFunction_Set() error {
	var err error
	toggleButtonGetModeFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonGetModeFunction, err = toggleButtonStruct.InvokerNew("get_mode")
	})
	return err
}

// GetMode is a representation of the C type gtk_toggle_button_get_mode.
func (recv *ToggleButton) GetMode() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleButtonGetModeFunction_Set()
	if err == nil {
		ret = toggleButtonGetModeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleButtonSetActiveFunction *gi.Function
var toggleButtonSetActiveFunction_Once sync.Once

func toggleButtonSetActiveFunction_Set() error {
	var err error
	toggleButtonSetActiveFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonSetActiveFunction, err = toggleButtonStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_toggle_button_set_active.
func (recv *ToggleButton) SetActive(isActive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isActive)

	err := toggleButtonSetActiveFunction_Set()
	if err == nil {
		toggleButtonSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleButtonSetInconsistentFunction *gi.Function
var toggleButtonSetInconsistentFunction_Once sync.Once

func toggleButtonSetInconsistentFunction_Set() error {
	var err error
	toggleButtonSetInconsistentFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonSetInconsistentFunction, err = toggleButtonStruct.InvokerNew("set_inconsistent")
	})
	return err
}

// SetInconsistent is a representation of the C type gtk_toggle_button_set_inconsistent.
func (recv *ToggleButton) SetInconsistent(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := toggleButtonSetInconsistentFunction_Set()
	if err == nil {
		toggleButtonSetInconsistentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleButtonSetModeFunction *gi.Function
var toggleButtonSetModeFunction_Once sync.Once

func toggleButtonSetModeFunction_Set() error {
	var err error
	toggleButtonSetModeFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonSetModeFunction, err = toggleButtonStruct.InvokerNew("set_mode")
	})
	return err
}

// SetMode is a representation of the C type gtk_toggle_button_set_mode.
func (recv *ToggleButton) SetMode(drawIndicator bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(drawIndicator)

	err := toggleButtonSetModeFunction_Set()
	if err == nil {
		toggleButtonSetModeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleButtonToggledFunction *gi.Function
var toggleButtonToggledFunction_Once sync.Once

func toggleButtonToggledFunction_Set() error {
	var err error
	toggleButtonToggledFunction_Once.Do(func() {
		err = toggleButtonStruct_Set()
		if err != nil {
			return
		}
		toggleButtonToggledFunction, err = toggleButtonStruct.InvokerNew("toggled")
	})
	return err
}

// Toggled is a representation of the C type gtk_toggle_button_toggled.
func (recv *ToggleButton) Toggled() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toggleButtonToggledFunction_Set()
	if err == nil {
		toggleButtonToggledFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toggleButtonAccessibleStruct *gi.Struct
var toggleButtonAccessibleStruct_Once sync.Once

func toggleButtonAccessibleStruct_Set() error {
	var err error
	toggleButtonAccessibleStruct_Once.Do(func() {
		toggleButtonAccessibleStruct, err = gi.StructNew("Gtk", "ToggleButtonAccessible")
	})
	return err
}

type ToggleButtonAccessible struct {
	ButtonAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *ToggleButtonAccessible) FieldParent() *ButtonAccessible {
	argValue := gi.FieldGet(toggleButtonAccessibleStruct, recv.Native, "parent")
	value := &ButtonAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ToggleButtonAccessible) SetFieldParent(value *ButtonAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toggleButtonAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ToggleButtonAccessible) FieldPriv() *ToggleButtonAccessiblePrivate {
	argValue := gi.FieldGet(toggleButtonAccessibleStruct, recv.Native, "priv")
	value := &ToggleButtonAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ToggleButtonAccessible) SetFieldPriv(value *ToggleButtonAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toggleButtonAccessibleStruct, recv.Native, "priv", argValue)
}

// ToggleButtonAccessibleStruct creates an uninitialised ToggleButtonAccessible.
func ToggleButtonAccessibleStruct() *ToggleButtonAccessible {
	err := toggleButtonAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ToggleButtonAccessible{}
	structGo.Native = toggleButtonAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeToggleButtonAccessible)
	return structGo
}
func finalizeToggleButtonAccessible(obj *ToggleButtonAccessible) {
	toggleButtonAccessibleStruct.Free(obj.Native)
}

var toggleToolButtonStruct *gi.Struct
var toggleToolButtonStruct_Once sync.Once

func toggleToolButtonStruct_Set() error {
	var err error
	toggleToolButtonStruct_Once.Do(func() {
		toggleToolButtonStruct, err = gi.StructNew("Gtk", "ToggleToolButton")
	})
	return err
}

type ToggleToolButton struct {
	ToolButton
}

// FieldParent returns the C field 'parent'.
func (recv *ToggleToolButton) FieldParent() *ToolButton {
	argValue := gi.FieldGet(toggleToolButtonStruct, recv.Native, "parent")
	value := &ToolButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ToggleToolButton) SetFieldParent(value *ToolButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toggleToolButtonStruct, recv.Native, "parent", argValue)
}

var toggleToolButtonNewFunction *gi.Function
var toggleToolButtonNewFunction_Once sync.Once

func toggleToolButtonNewFunction_Set() error {
	var err error
	toggleToolButtonNewFunction_Once.Do(func() {
		err = toggleToolButtonStruct_Set()
		if err != nil {
			return
		}
		toggleToolButtonNewFunction, err = toggleToolButtonStruct.InvokerNew("new")
	})
	return err
}

// ToggleToolButtonNew is a representation of the C type gtk_toggle_tool_button_new.
func ToggleToolButtonNew() *ToggleToolButton {

	var ret gi.Argument

	err := toggleToolButtonNewFunction_Set()
	if err == nil {
		ret = toggleToolButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &ToggleToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleToolButtonNewFromStockFunction *gi.Function
var toggleToolButtonNewFromStockFunction_Once sync.Once

func toggleToolButtonNewFromStockFunction_Set() error {
	var err error
	toggleToolButtonNewFromStockFunction_Once.Do(func() {
		err = toggleToolButtonStruct_Set()
		if err != nil {
			return
		}
		toggleToolButtonNewFromStockFunction, err = toggleToolButtonStruct.InvokerNew("new_from_stock")
	})
	return err
}

// ToggleToolButtonNewFromStock is a representation of the C type gtk_toggle_tool_button_new_from_stock.
func ToggleToolButtonNewFromStock(stockId string) *ToggleToolButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(stockId)

	var ret gi.Argument

	err := toggleToolButtonNewFromStockFunction_Set()
	if err == nil {
		ret = toggleToolButtonNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToggleToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toggleToolButtonGetActiveFunction *gi.Function
var toggleToolButtonGetActiveFunction_Once sync.Once

func toggleToolButtonGetActiveFunction_Set() error {
	var err error
	toggleToolButtonGetActiveFunction_Once.Do(func() {
		err = toggleToolButtonStruct_Set()
		if err != nil {
			return
		}
		toggleToolButtonGetActiveFunction, err = toggleToolButtonStruct.InvokerNew("get_active")
	})
	return err
}

// GetActive is a representation of the C type gtk_toggle_tool_button_get_active.
func (recv *ToggleToolButton) GetActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toggleToolButtonGetActiveFunction_Set()
	if err == nil {
		ret = toggleToolButtonGetActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toggleToolButtonSetActiveFunction *gi.Function
var toggleToolButtonSetActiveFunction_Once sync.Once

func toggleToolButtonSetActiveFunction_Set() error {
	var err error
	toggleToolButtonSetActiveFunction_Once.Do(func() {
		err = toggleToolButtonStruct_Set()
		if err != nil {
			return
		}
		toggleToolButtonSetActiveFunction, err = toggleToolButtonStruct.InvokerNew("set_active")
	})
	return err
}

// SetActive is a representation of the C type gtk_toggle_tool_button_set_active.
func (recv *ToggleToolButton) SetActive(isActive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isActive)

	err := toggleToolButtonSetActiveFunction_Set()
	if err == nil {
		toggleToolButtonSetActiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonStruct *gi.Struct
var toolButtonStruct_Once sync.Once

func toolButtonStruct_Set() error {
	var err error
	toolButtonStruct_Once.Do(func() {
		toolButtonStruct, err = gi.StructNew("Gtk", "ToolButton")
	})
	return err
}

type ToolButton struct {
	ToolItem
}

// FieldParent returns the C field 'parent'.
func (recv *ToolButton) FieldParent() *ToolItem {
	argValue := gi.FieldGet(toolButtonStruct, recv.Native, "parent")
	value := &ToolItem{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ToolButton) SetFieldParent(value *ToolItem) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolButtonStruct, recv.Native, "parent", argValue)
}

var toolButtonNewFunction *gi.Function
var toolButtonNewFunction_Once sync.Once

func toolButtonNewFunction_Set() error {
	var err error
	toolButtonNewFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonNewFunction, err = toolButtonStruct.InvokerNew("new")
	})
	return err
}

// ToolButtonNew is a representation of the C type gtk_tool_button_new.
func ToolButtonNew(iconWidget *Widget, label string) *ToolButton {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(iconWidget.Native)
	inArgs[1].SetString(label)

	var ret gi.Argument

	err := toolButtonNewFunction_Set()
	if err == nil {
		ret = toolButtonNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolButtonNewFromStockFunction *gi.Function
var toolButtonNewFromStockFunction_Once sync.Once

func toolButtonNewFromStockFunction_Set() error {
	var err error
	toolButtonNewFromStockFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonNewFromStockFunction, err = toolButtonStruct.InvokerNew("new_from_stock")
	})
	return err
}

// ToolButtonNewFromStock is a representation of the C type gtk_tool_button_new_from_stock.
func ToolButtonNewFromStock(stockId string) *ToolButton {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(stockId)

	var ret gi.Argument

	err := toolButtonNewFromStockFunction_Set()
	if err == nil {
		ret = toolButtonNewFromStockFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolButtonGetIconNameFunction *gi.Function
var toolButtonGetIconNameFunction_Once sync.Once

func toolButtonGetIconNameFunction_Set() error {
	var err error
	toolButtonGetIconNameFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetIconNameFunction, err = toolButtonStruct.InvokerNew("get_icon_name")
	})
	return err
}

// GetIconName is a representation of the C type gtk_tool_button_get_icon_name.
func (recv *ToolButton) GetIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetIconNameFunction_Set()
	if err == nil {
		ret = toolButtonGetIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var toolButtonGetIconWidgetFunction *gi.Function
var toolButtonGetIconWidgetFunction_Once sync.Once

func toolButtonGetIconWidgetFunction_Set() error {
	var err error
	toolButtonGetIconWidgetFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetIconWidgetFunction, err = toolButtonStruct.InvokerNew("get_icon_widget")
	})
	return err
}

// GetIconWidget is a representation of the C type gtk_tool_button_get_icon_widget.
func (recv *ToolButton) GetIconWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetIconWidgetFunction_Set()
	if err == nil {
		ret = toolButtonGetIconWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolButtonGetLabelFunction *gi.Function
var toolButtonGetLabelFunction_Once sync.Once

func toolButtonGetLabelFunction_Set() error {
	var err error
	toolButtonGetLabelFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetLabelFunction, err = toolButtonStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_tool_button_get_label.
func (recv *ToolButton) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetLabelFunction_Set()
	if err == nil {
		ret = toolButtonGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var toolButtonGetLabelWidgetFunction *gi.Function
var toolButtonGetLabelWidgetFunction_Once sync.Once

func toolButtonGetLabelWidgetFunction_Set() error {
	var err error
	toolButtonGetLabelWidgetFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetLabelWidgetFunction, err = toolButtonStruct.InvokerNew("get_label_widget")
	})
	return err
}

// GetLabelWidget is a representation of the C type gtk_tool_button_get_label_widget.
func (recv *ToolButton) GetLabelWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetLabelWidgetFunction_Set()
	if err == nil {
		ret = toolButtonGetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolButtonGetStockIdFunction *gi.Function
var toolButtonGetStockIdFunction_Once sync.Once

func toolButtonGetStockIdFunction_Set() error {
	var err error
	toolButtonGetStockIdFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetStockIdFunction, err = toolButtonStruct.InvokerNew("get_stock_id")
	})
	return err
}

// GetStockId is a representation of the C type gtk_tool_button_get_stock_id.
func (recv *ToolButton) GetStockId() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetStockIdFunction_Set()
	if err == nil {
		ret = toolButtonGetStockIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var toolButtonGetUseUnderlineFunction *gi.Function
var toolButtonGetUseUnderlineFunction_Once sync.Once

func toolButtonGetUseUnderlineFunction_Set() error {
	var err error
	toolButtonGetUseUnderlineFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonGetUseUnderlineFunction, err = toolButtonStruct.InvokerNew("get_use_underline")
	})
	return err
}

// GetUseUnderline is a representation of the C type gtk_tool_button_get_use_underline.
func (recv *ToolButton) GetUseUnderline() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolButtonGetUseUnderlineFunction_Set()
	if err == nil {
		ret = toolButtonGetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolButtonSetIconNameFunction *gi.Function
var toolButtonSetIconNameFunction_Once sync.Once

func toolButtonSetIconNameFunction_Set() error {
	var err error
	toolButtonSetIconNameFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetIconNameFunction, err = toolButtonStruct.InvokerNew("set_icon_name")
	})
	return err
}

// SetIconName is a representation of the C type gtk_tool_button_set_icon_name.
func (recv *ToolButton) SetIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := toolButtonSetIconNameFunction_Set()
	if err == nil {
		toolButtonSetIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonSetIconWidgetFunction *gi.Function
var toolButtonSetIconWidgetFunction_Once sync.Once

func toolButtonSetIconWidgetFunction_Set() error {
	var err error
	toolButtonSetIconWidgetFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetIconWidgetFunction, err = toolButtonStruct.InvokerNew("set_icon_widget")
	})
	return err
}

// SetIconWidget is a representation of the C type gtk_tool_button_set_icon_widget.
func (recv *ToolButton) SetIconWidget(iconWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iconWidget.Native)

	err := toolButtonSetIconWidgetFunction_Set()
	if err == nil {
		toolButtonSetIconWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonSetLabelFunction *gi.Function
var toolButtonSetLabelFunction_Once sync.Once

func toolButtonSetLabelFunction_Set() error {
	var err error
	toolButtonSetLabelFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetLabelFunction, err = toolButtonStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_tool_button_set_label.
func (recv *ToolButton) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := toolButtonSetLabelFunction_Set()
	if err == nil {
		toolButtonSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonSetLabelWidgetFunction *gi.Function
var toolButtonSetLabelWidgetFunction_Once sync.Once

func toolButtonSetLabelWidgetFunction_Set() error {
	var err error
	toolButtonSetLabelWidgetFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetLabelWidgetFunction, err = toolButtonStruct.InvokerNew("set_label_widget")
	})
	return err
}

// SetLabelWidget is a representation of the C type gtk_tool_button_set_label_widget.
func (recv *ToolButton) SetLabelWidget(labelWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(labelWidget.Native)

	err := toolButtonSetLabelWidgetFunction_Set()
	if err == nil {
		toolButtonSetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonSetStockIdFunction *gi.Function
var toolButtonSetStockIdFunction_Once sync.Once

func toolButtonSetStockIdFunction_Set() error {
	var err error
	toolButtonSetStockIdFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetStockIdFunction, err = toolButtonStruct.InvokerNew("set_stock_id")
	})
	return err
}

// SetStockId is a representation of the C type gtk_tool_button_set_stock_id.
func (recv *ToolButton) SetStockId(stockId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	err := toolButtonSetStockIdFunction_Set()
	if err == nil {
		toolButtonSetStockIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolButtonSetUseUnderlineFunction *gi.Function
var toolButtonSetUseUnderlineFunction_Once sync.Once

func toolButtonSetUseUnderlineFunction_Set() error {
	var err error
	toolButtonSetUseUnderlineFunction_Once.Do(func() {
		err = toolButtonStruct_Set()
		if err != nil {
			return
		}
		toolButtonSetUseUnderlineFunction, err = toolButtonStruct.InvokerNew("set_use_underline")
	})
	return err
}

// SetUseUnderline is a representation of the C type gtk_tool_button_set_use_underline.
func (recv *ToolButton) SetUseUnderline(useUnderline bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useUnderline)

	err := toolButtonSetUseUnderlineFunction_Set()
	if err == nil {
		toolButtonSetUseUnderlineFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemStruct *gi.Struct
var toolItemStruct_Once sync.Once

func toolItemStruct_Set() error {
	var err error
	toolItemStruct_Once.Do(func() {
		toolItemStruct, err = gi.StructNew("Gtk", "ToolItem")
	})
	return err
}

type ToolItem struct {
	Bin
}

// FieldParent returns the C field 'parent'.
func (recv *ToolItem) FieldParent() *Bin {
	argValue := gi.FieldGet(toolItemStruct, recv.Native, "parent")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *ToolItem) SetFieldParent(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolItemStruct, recv.Native, "parent", argValue)
}

var toolItemNewFunction *gi.Function
var toolItemNewFunction_Once sync.Once

func toolItemNewFunction_Set() error {
	var err error
	toolItemNewFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemNewFunction, err = toolItemStruct.InvokerNew("new")
	})
	return err
}

// ToolItemNew is a representation of the C type gtk_tool_item_new.
func ToolItemNew() *ToolItem {

	var ret gi.Argument

	err := toolItemNewFunction_Set()
	if err == nil {
		ret = toolItemNewFunction.Invoke(nil, nil)
	}

	retGo := &ToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_ellipsize_mode' : return type 'Pango.EllipsizeMode' not supported

var toolItemGetExpandFunction *gi.Function
var toolItemGetExpandFunction_Once sync.Once

func toolItemGetExpandFunction_Set() error {
	var err error
	toolItemGetExpandFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetExpandFunction, err = toolItemStruct.InvokerNew("get_expand")
	})
	return err
}

// GetExpand is a representation of the C type gtk_tool_item_get_expand.
func (recv *ToolItem) GetExpand() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetExpandFunction_Set()
	if err == nil {
		ret = toolItemGetExpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolItemGetHomogeneousFunction *gi.Function
var toolItemGetHomogeneousFunction_Once sync.Once

func toolItemGetHomogeneousFunction_Set() error {
	var err error
	toolItemGetHomogeneousFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetHomogeneousFunction, err = toolItemStruct.InvokerNew("get_homogeneous")
	})
	return err
}

// GetHomogeneous is a representation of the C type gtk_tool_item_get_homogeneous.
func (recv *ToolItem) GetHomogeneous() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetHomogeneousFunction_Set()
	if err == nil {
		ret = toolItemGetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_icon_size' : return type 'IconSize' not supported

var toolItemGetIsImportantFunction *gi.Function
var toolItemGetIsImportantFunction_Once sync.Once

func toolItemGetIsImportantFunction_Set() error {
	var err error
	toolItemGetIsImportantFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetIsImportantFunction, err = toolItemStruct.InvokerNew("get_is_important")
	})
	return err
}

// GetIsImportant is a representation of the C type gtk_tool_item_get_is_important.
func (recv *ToolItem) GetIsImportant() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetIsImportantFunction_Set()
	if err == nil {
		ret = toolItemGetIsImportantFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_orientation' : return type 'Orientation' not supported

var toolItemGetProxyMenuItemFunction *gi.Function
var toolItemGetProxyMenuItemFunction_Once sync.Once

func toolItemGetProxyMenuItemFunction_Set() error {
	var err error
	toolItemGetProxyMenuItemFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetProxyMenuItemFunction, err = toolItemStruct.InvokerNew("get_proxy_menu_item")
	})
	return err
}

// GetProxyMenuItem is a representation of the C type gtk_tool_item_get_proxy_menu_item.
func (recv *ToolItem) GetProxyMenuItem(menuItemId string) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(menuItemId)

	var ret gi.Argument

	err := toolItemGetProxyMenuItemFunction_Set()
	if err == nil {
		ret = toolItemGetProxyMenuItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_relief_style' : return type 'ReliefStyle' not supported

var toolItemGetTextAlignmentFunction *gi.Function
var toolItemGetTextAlignmentFunction_Once sync.Once

func toolItemGetTextAlignmentFunction_Set() error {
	var err error
	toolItemGetTextAlignmentFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetTextAlignmentFunction, err = toolItemStruct.InvokerNew("get_text_alignment")
	})
	return err
}

// GetTextAlignment is a representation of the C type gtk_tool_item_get_text_alignment.
func (recv *ToolItem) GetTextAlignment() float32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetTextAlignmentFunction_Set()
	if err == nil {
		ret = toolItemGetTextAlignmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_text_orientation' : return type 'Orientation' not supported

var toolItemGetTextSizeGroupFunction *gi.Function
var toolItemGetTextSizeGroupFunction_Once sync.Once

func toolItemGetTextSizeGroupFunction_Set() error {
	var err error
	toolItemGetTextSizeGroupFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetTextSizeGroupFunction, err = toolItemStruct.InvokerNew("get_text_size_group")
	})
	return err
}

// GetTextSizeGroup is a representation of the C type gtk_tool_item_get_text_size_group.
func (recv *ToolItem) GetTextSizeGroup() *SizeGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetTextSizeGroupFunction_Set()
	if err == nil {
		ret = toolItemGetTextSizeGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &SizeGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_get_toolbar_style' : return type 'ToolbarStyle' not supported

var toolItemGetUseDragWindowFunction *gi.Function
var toolItemGetUseDragWindowFunction_Once sync.Once

func toolItemGetUseDragWindowFunction_Set() error {
	var err error
	toolItemGetUseDragWindowFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetUseDragWindowFunction, err = toolItemStruct.InvokerNew("get_use_drag_window")
	})
	return err
}

// GetUseDragWindow is a representation of the C type gtk_tool_item_get_use_drag_window.
func (recv *ToolItem) GetUseDragWindow() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetUseDragWindowFunction_Set()
	if err == nil {
		ret = toolItemGetUseDragWindowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolItemGetVisibleHorizontalFunction *gi.Function
var toolItemGetVisibleHorizontalFunction_Once sync.Once

func toolItemGetVisibleHorizontalFunction_Set() error {
	var err error
	toolItemGetVisibleHorizontalFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetVisibleHorizontalFunction, err = toolItemStruct.InvokerNew("get_visible_horizontal")
	})
	return err
}

// GetVisibleHorizontal is a representation of the C type gtk_tool_item_get_visible_horizontal.
func (recv *ToolItem) GetVisibleHorizontal() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetVisibleHorizontalFunction_Set()
	if err == nil {
		ret = toolItemGetVisibleHorizontalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolItemGetVisibleVerticalFunction *gi.Function
var toolItemGetVisibleVerticalFunction_Once sync.Once

func toolItemGetVisibleVerticalFunction_Set() error {
	var err error
	toolItemGetVisibleVerticalFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemGetVisibleVerticalFunction, err = toolItemStruct.InvokerNew("get_visible_vertical")
	})
	return err
}

// GetVisibleVertical is a representation of the C type gtk_tool_item_get_visible_vertical.
func (recv *ToolItem) GetVisibleVertical() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGetVisibleVerticalFunction_Set()
	if err == nil {
		ret = toolItemGetVisibleVerticalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolItemRebuildMenuFunction *gi.Function
var toolItemRebuildMenuFunction_Once sync.Once

func toolItemRebuildMenuFunction_Set() error {
	var err error
	toolItemRebuildMenuFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemRebuildMenuFunction, err = toolItemStruct.InvokerNew("rebuild_menu")
	})
	return err
}

// RebuildMenu is a representation of the C type gtk_tool_item_rebuild_menu.
func (recv *ToolItem) RebuildMenu() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolItemRebuildMenuFunction_Set()
	if err == nil {
		toolItemRebuildMenuFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemRetrieveProxyMenuItemFunction *gi.Function
var toolItemRetrieveProxyMenuItemFunction_Once sync.Once

func toolItemRetrieveProxyMenuItemFunction_Set() error {
	var err error
	toolItemRetrieveProxyMenuItemFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemRetrieveProxyMenuItemFunction, err = toolItemStruct.InvokerNew("retrieve_proxy_menu_item")
	})
	return err
}

// RetrieveProxyMenuItem is a representation of the C type gtk_tool_item_retrieve_proxy_menu_item.
func (recv *ToolItem) RetrieveProxyMenuItem() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemRetrieveProxyMenuItemFunction_Set()
	if err == nil {
		ret = toolItemRetrieveProxyMenuItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolItemSetExpandFunction *gi.Function
var toolItemSetExpandFunction_Once sync.Once

func toolItemSetExpandFunction_Set() error {
	var err error
	toolItemSetExpandFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetExpandFunction, err = toolItemStruct.InvokerNew("set_expand")
	})
	return err
}

// SetExpand is a representation of the C type gtk_tool_item_set_expand.
func (recv *ToolItem) SetExpand(expand bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expand)

	err := toolItemSetExpandFunction_Set()
	if err == nil {
		toolItemSetExpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetHomogeneousFunction *gi.Function
var toolItemSetHomogeneousFunction_Once sync.Once

func toolItemSetHomogeneousFunction_Set() error {
	var err error
	toolItemSetHomogeneousFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetHomogeneousFunction, err = toolItemStruct.InvokerNew("set_homogeneous")
	})
	return err
}

// SetHomogeneous is a representation of the C type gtk_tool_item_set_homogeneous.
func (recv *ToolItem) SetHomogeneous(homogeneous bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(homogeneous)

	err := toolItemSetHomogeneousFunction_Set()
	if err == nil {
		toolItemSetHomogeneousFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetIsImportantFunction *gi.Function
var toolItemSetIsImportantFunction_Once sync.Once

func toolItemSetIsImportantFunction_Set() error {
	var err error
	toolItemSetIsImportantFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetIsImportantFunction, err = toolItemStruct.InvokerNew("set_is_important")
	})
	return err
}

// SetIsImportant is a representation of the C type gtk_tool_item_set_is_important.
func (recv *ToolItem) SetIsImportant(isImportant bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isImportant)

	err := toolItemSetIsImportantFunction_Set()
	if err == nil {
		toolItemSetIsImportantFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetProxyMenuItemFunction *gi.Function
var toolItemSetProxyMenuItemFunction_Once sync.Once

func toolItemSetProxyMenuItemFunction_Set() error {
	var err error
	toolItemSetProxyMenuItemFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetProxyMenuItemFunction, err = toolItemStruct.InvokerNew("set_proxy_menu_item")
	})
	return err
}

// SetProxyMenuItem is a representation of the C type gtk_tool_item_set_proxy_menu_item.
func (recv *ToolItem) SetProxyMenuItem(menuItemId string, menuItem *Widget) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(menuItemId)
	inArgs[2].SetPointer(menuItem.Native)

	err := toolItemSetProxyMenuItemFunction_Set()
	if err == nil {
		toolItemSetProxyMenuItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetTooltipMarkupFunction *gi.Function
var toolItemSetTooltipMarkupFunction_Once sync.Once

func toolItemSetTooltipMarkupFunction_Set() error {
	var err error
	toolItemSetTooltipMarkupFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetTooltipMarkupFunction, err = toolItemStruct.InvokerNew("set_tooltip_markup")
	})
	return err
}

// SetTooltipMarkup is a representation of the C type gtk_tool_item_set_tooltip_markup.
func (recv *ToolItem) SetTooltipMarkup(markup string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markup)

	err := toolItemSetTooltipMarkupFunction_Set()
	if err == nil {
		toolItemSetTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetTooltipTextFunction *gi.Function
var toolItemSetTooltipTextFunction_Once sync.Once

func toolItemSetTooltipTextFunction_Set() error {
	var err error
	toolItemSetTooltipTextFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetTooltipTextFunction, err = toolItemStruct.InvokerNew("set_tooltip_text")
	})
	return err
}

// SetTooltipText is a representation of the C type gtk_tool_item_set_tooltip_text.
func (recv *ToolItem) SetTooltipText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := toolItemSetTooltipTextFunction_Set()
	if err == nil {
		toolItemSetTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetUseDragWindowFunction *gi.Function
var toolItemSetUseDragWindowFunction_Once sync.Once

func toolItemSetUseDragWindowFunction_Set() error {
	var err error
	toolItemSetUseDragWindowFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetUseDragWindowFunction, err = toolItemStruct.InvokerNew("set_use_drag_window")
	})
	return err
}

// SetUseDragWindow is a representation of the C type gtk_tool_item_set_use_drag_window.
func (recv *ToolItem) SetUseDragWindow(useDragWindow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(useDragWindow)

	err := toolItemSetUseDragWindowFunction_Set()
	if err == nil {
		toolItemSetUseDragWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetVisibleHorizontalFunction *gi.Function
var toolItemSetVisibleHorizontalFunction_Once sync.Once

func toolItemSetVisibleHorizontalFunction_Set() error {
	var err error
	toolItemSetVisibleHorizontalFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetVisibleHorizontalFunction, err = toolItemStruct.InvokerNew("set_visible_horizontal")
	})
	return err
}

// SetVisibleHorizontal is a representation of the C type gtk_tool_item_set_visible_horizontal.
func (recv *ToolItem) SetVisibleHorizontal(visibleHorizontal bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visibleHorizontal)

	err := toolItemSetVisibleHorizontalFunction_Set()
	if err == nil {
		toolItemSetVisibleHorizontalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemSetVisibleVerticalFunction *gi.Function
var toolItemSetVisibleVerticalFunction_Once sync.Once

func toolItemSetVisibleVerticalFunction_Set() error {
	var err error
	toolItemSetVisibleVerticalFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemSetVisibleVerticalFunction, err = toolItemStruct.InvokerNew("set_visible_vertical")
	})
	return err
}

// SetVisibleVertical is a representation of the C type gtk_tool_item_set_visible_vertical.
func (recv *ToolItem) SetVisibleVertical(visibleVertical bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visibleVertical)

	err := toolItemSetVisibleVerticalFunction_Set()
	if err == nil {
		toolItemSetVisibleVerticalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemToolbarReconfiguredFunction *gi.Function
var toolItemToolbarReconfiguredFunction_Once sync.Once

func toolItemToolbarReconfiguredFunction_Set() error {
	var err error
	toolItemToolbarReconfiguredFunction_Once.Do(func() {
		err = toolItemStruct_Set()
		if err != nil {
			return
		}
		toolItemToolbarReconfiguredFunction, err = toolItemStruct.InvokerNew("toolbar_reconfigured")
	})
	return err
}

// ToolbarReconfigured is a representation of the C type gtk_tool_item_toolbar_reconfigured.
func (recv *ToolItem) ToolbarReconfigured() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolItemToolbarReconfiguredFunction_Set()
	if err == nil {
		toolItemToolbarReconfiguredFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemGroupStruct *gi.Struct
var toolItemGroupStruct_Once sync.Once

func toolItemGroupStruct_Set() error {
	var err error
	toolItemGroupStruct_Once.Do(func() {
		toolItemGroupStruct, err = gi.StructNew("Gtk", "ToolItemGroup")
	})
	return err
}

type ToolItemGroup struct {
	Container
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ToolItemGroup) FieldParentInstance() *Container {
	argValue := gi.FieldGet(toolItemGroupStruct, recv.Native, "parent_instance")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ToolItemGroup) SetFieldParentInstance(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolItemGroupStruct, recv.Native, "parent_instance", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ToolItemGroup) FieldPriv() *ToolItemGroupPrivate {
	argValue := gi.FieldGet(toolItemGroupStruct, recv.Native, "priv")
	value := &ToolItemGroupPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ToolItemGroup) SetFieldPriv(value *ToolItemGroupPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolItemGroupStruct, recv.Native, "priv", argValue)
}

var toolItemGroupNewFunction *gi.Function
var toolItemGroupNewFunction_Once sync.Once

func toolItemGroupNewFunction_Set() error {
	var err error
	toolItemGroupNewFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupNewFunction, err = toolItemGroupStruct.InvokerNew("new")
	})
	return err
}

// ToolItemGroupNew is a representation of the C type gtk_tool_item_group_new.
func ToolItemGroupNew(label string) *ToolItemGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetString(label)

	var ret gi.Argument

	err := toolItemGroupNewFunction_Set()
	if err == nil {
		ret = toolItemGroupNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItemGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolItemGroupGetCollapsedFunction *gi.Function
var toolItemGroupGetCollapsedFunction_Once sync.Once

func toolItemGroupGetCollapsedFunction_Set() error {
	var err error
	toolItemGroupGetCollapsedFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetCollapsedFunction, err = toolItemGroupStruct.InvokerNew("get_collapsed")
	})
	return err
}

// GetCollapsed is a representation of the C type gtk_tool_item_group_get_collapsed.
func (recv *ToolItemGroup) GetCollapsed() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGroupGetCollapsedFunction_Set()
	if err == nil {
		ret = toolItemGroupGetCollapsedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolItemGroupGetDropItemFunction *gi.Function
var toolItemGroupGetDropItemFunction_Once sync.Once

func toolItemGroupGetDropItemFunction_Set() error {
	var err error
	toolItemGroupGetDropItemFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetDropItemFunction, err = toolItemGroupStruct.InvokerNew("get_drop_item")
	})
	return err
}

// GetDropItem is a representation of the C type gtk_tool_item_group_get_drop_item.
func (recv *ToolItemGroup) GetDropItem(x int32, y int32) *ToolItem {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := toolItemGroupGetDropItemFunction_Set()
	if err == nil {
		ret = toolItemGroupGetDropItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_item_group_get_ellipsize' : return type 'Pango.EllipsizeMode' not supported

// UNSUPPORTED : C value 'gtk_tool_item_group_get_header_relief' : return type 'ReliefStyle' not supported

var toolItemGroupGetItemPositionFunction *gi.Function
var toolItemGroupGetItemPositionFunction_Once sync.Once

func toolItemGroupGetItemPositionFunction_Set() error {
	var err error
	toolItemGroupGetItemPositionFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetItemPositionFunction, err = toolItemGroupStruct.InvokerNew("get_item_position")
	})
	return err
}

// GetItemPosition is a representation of the C type gtk_tool_item_group_get_item_position.
func (recv *ToolItemGroup) GetItemPosition(item *ToolItem) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(item.Native)

	var ret gi.Argument

	err := toolItemGroupGetItemPositionFunction_Set()
	if err == nil {
		ret = toolItemGroupGetItemPositionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var toolItemGroupGetLabelFunction *gi.Function
var toolItemGroupGetLabelFunction_Once sync.Once

func toolItemGroupGetLabelFunction_Set() error {
	var err error
	toolItemGroupGetLabelFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetLabelFunction, err = toolItemGroupStruct.InvokerNew("get_label")
	})
	return err
}

// GetLabel is a representation of the C type gtk_tool_item_group_get_label.
func (recv *ToolItemGroup) GetLabel() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGroupGetLabelFunction_Set()
	if err == nil {
		ret = toolItemGroupGetLabelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var toolItemGroupGetLabelWidgetFunction *gi.Function
var toolItemGroupGetLabelWidgetFunction_Once sync.Once

func toolItemGroupGetLabelWidgetFunction_Set() error {
	var err error
	toolItemGroupGetLabelWidgetFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetLabelWidgetFunction, err = toolItemGroupStruct.InvokerNew("get_label_widget")
	})
	return err
}

// GetLabelWidget is a representation of the C type gtk_tool_item_group_get_label_widget.
func (recv *ToolItemGroup) GetLabelWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGroupGetLabelWidgetFunction_Set()
	if err == nil {
		ret = toolItemGroupGetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolItemGroupGetNItemsFunction *gi.Function
var toolItemGroupGetNItemsFunction_Once sync.Once

func toolItemGroupGetNItemsFunction_Set() error {
	var err error
	toolItemGroupGetNItemsFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetNItemsFunction, err = toolItemGroupStruct.InvokerNew("get_n_items")
	})
	return err
}

// GetNItems is a representation of the C type gtk_tool_item_group_get_n_items.
func (recv *ToolItemGroup) GetNItems() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolItemGroupGetNItemsFunction_Set()
	if err == nil {
		ret = toolItemGroupGetNItemsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var toolItemGroupGetNthItemFunction *gi.Function
var toolItemGroupGetNthItemFunction_Once sync.Once

func toolItemGroupGetNthItemFunction_Set() error {
	var err error
	toolItemGroupGetNthItemFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupGetNthItemFunction, err = toolItemGroupStruct.InvokerNew("get_nth_item")
	})
	return err
}

// GetNthItem is a representation of the C type gtk_tool_item_group_get_nth_item.
func (recv *ToolItemGroup) GetNthItem(index uint32) *ToolItem {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(index)

	var ret gi.Argument

	err := toolItemGroupGetNthItemFunction_Set()
	if err == nil {
		ret = toolItemGroupGetNthItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolItemGroupInsertFunction *gi.Function
var toolItemGroupInsertFunction_Once sync.Once

func toolItemGroupInsertFunction_Set() error {
	var err error
	toolItemGroupInsertFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupInsertFunction, err = toolItemGroupStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_tool_item_group_insert.
func (recv *ToolItemGroup) Insert(item *ToolItem, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(item.Native)
	inArgs[2].SetInt32(position)

	err := toolItemGroupInsertFunction_Set()
	if err == nil {
		toolItemGroupInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemGroupSetCollapsedFunction *gi.Function
var toolItemGroupSetCollapsedFunction_Once sync.Once

func toolItemGroupSetCollapsedFunction_Set() error {
	var err error
	toolItemGroupSetCollapsedFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupSetCollapsedFunction, err = toolItemGroupStruct.InvokerNew("set_collapsed")
	})
	return err
}

// SetCollapsed is a representation of the C type gtk_tool_item_group_set_collapsed.
func (recv *ToolItemGroup) SetCollapsed(collapsed bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(collapsed)

	err := toolItemGroupSetCollapsedFunction_Set()
	if err == nil {
		toolItemGroupSetCollapsedFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tool_item_group_set_ellipsize' : parameter 'ellipsize' of type 'Pango.EllipsizeMode' not supported

// UNSUPPORTED : C value 'gtk_tool_item_group_set_header_relief' : parameter 'style' of type 'ReliefStyle' not supported

var toolItemGroupSetItemPositionFunction *gi.Function
var toolItemGroupSetItemPositionFunction_Once sync.Once

func toolItemGroupSetItemPositionFunction_Set() error {
	var err error
	toolItemGroupSetItemPositionFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupSetItemPositionFunction, err = toolItemGroupStruct.InvokerNew("set_item_position")
	})
	return err
}

// SetItemPosition is a representation of the C type gtk_tool_item_group_set_item_position.
func (recv *ToolItemGroup) SetItemPosition(item *ToolItem, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(item.Native)
	inArgs[2].SetInt32(position)

	err := toolItemGroupSetItemPositionFunction_Set()
	if err == nil {
		toolItemGroupSetItemPositionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemGroupSetLabelFunction *gi.Function
var toolItemGroupSetLabelFunction_Once sync.Once

func toolItemGroupSetLabelFunction_Set() error {
	var err error
	toolItemGroupSetLabelFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupSetLabelFunction, err = toolItemGroupStruct.InvokerNew("set_label")
	})
	return err
}

// SetLabel is a representation of the C type gtk_tool_item_group_set_label.
func (recv *ToolItemGroup) SetLabel(label string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(label)

	err := toolItemGroupSetLabelFunction_Set()
	if err == nil {
		toolItemGroupSetLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolItemGroupSetLabelWidgetFunction *gi.Function
var toolItemGroupSetLabelWidgetFunction_Once sync.Once

func toolItemGroupSetLabelWidgetFunction_Set() error {
	var err error
	toolItemGroupSetLabelWidgetFunction_Once.Do(func() {
		err = toolItemGroupStruct_Set()
		if err != nil {
			return
		}
		toolItemGroupSetLabelWidgetFunction, err = toolItemGroupStruct.InvokerNew("set_label_widget")
	})
	return err
}

// SetLabelWidget is a representation of the C type gtk_tool_item_group_set_label_widget.
func (recv *ToolItemGroup) SetLabelWidget(labelWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(labelWidget.Native)

	err := toolItemGroupSetLabelWidgetFunction_Set()
	if err == nil {
		toolItemGroupSetLabelWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolPaletteStruct *gi.Struct
var toolPaletteStruct_Once sync.Once

func toolPaletteStruct_Set() error {
	var err error
	toolPaletteStruct_Once.Do(func() {
		toolPaletteStruct, err = gi.StructNew("Gtk", "ToolPalette")
	})
	return err
}

type ToolPalette struct {
	Container
}

// FieldParentInstance returns the C field 'parent_instance'.
func (recv *ToolPalette) FieldParentInstance() *Container {
	argValue := gi.FieldGet(toolPaletteStruct, recv.Native, "parent_instance")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParentInstance sets the value of the C field 'parent_instance'.
func (recv *ToolPalette) SetFieldParentInstance(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolPaletteStruct, recv.Native, "parent_instance", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *ToolPalette) FieldPriv() *ToolPalettePrivate {
	argValue := gi.FieldGet(toolPaletteStruct, recv.Native, "priv")
	value := &ToolPalettePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ToolPalette) SetFieldPriv(value *ToolPalettePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolPaletteStruct, recv.Native, "priv", argValue)
}

var toolPaletteNewFunction *gi.Function
var toolPaletteNewFunction_Once sync.Once

func toolPaletteNewFunction_Set() error {
	var err error
	toolPaletteNewFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteNewFunction, err = toolPaletteStruct.InvokerNew("new")
	})
	return err
}

// ToolPaletteNew is a representation of the C type gtk_tool_palette_new.
func ToolPaletteNew() *ToolPalette {

	var ret gi.Argument

	err := toolPaletteNewFunction_Set()
	if err == nil {
		ret = toolPaletteNewFunction.Invoke(nil, nil)
	}

	retGo := &ToolPalette{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_palette_add_drag_dest' : parameter 'flags' of type 'DestDefaults' not supported

var toolPaletteGetDragItemFunction *gi.Function
var toolPaletteGetDragItemFunction_Once sync.Once

func toolPaletteGetDragItemFunction_Set() error {
	var err error
	toolPaletteGetDragItemFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetDragItemFunction, err = toolPaletteStruct.InvokerNew("get_drag_item")
	})
	return err
}

// GetDragItem is a representation of the C type gtk_tool_palette_get_drag_item.
func (recv *ToolPalette) GetDragItem(selection *SelectionData) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(selection.Native)

	var ret gi.Argument

	err := toolPaletteGetDragItemFunction_Set()
	if err == nil {
		ret = toolPaletteGetDragItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolPaletteGetDropGroupFunction *gi.Function
var toolPaletteGetDropGroupFunction_Once sync.Once

func toolPaletteGetDropGroupFunction_Set() error {
	var err error
	toolPaletteGetDropGroupFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetDropGroupFunction, err = toolPaletteStruct.InvokerNew("get_drop_group")
	})
	return err
}

// GetDropGroup is a representation of the C type gtk_tool_palette_get_drop_group.
func (recv *ToolPalette) GetDropGroup(x int32, y int32) *ToolItemGroup {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := toolPaletteGetDropGroupFunction_Set()
	if err == nil {
		ret = toolPaletteGetDropGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItemGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolPaletteGetDropItemFunction *gi.Function
var toolPaletteGetDropItemFunction_Once sync.Once

func toolPaletteGetDropItemFunction_Set() error {
	var err error
	toolPaletteGetDropItemFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetDropItemFunction, err = toolPaletteStruct.InvokerNew("get_drop_item")
	})
	return err
}

// GetDropItem is a representation of the C type gtk_tool_palette_get_drop_item.
func (recv *ToolPalette) GetDropItem(x int32, y int32) *ToolItem {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := toolPaletteGetDropItemFunction_Set()
	if err == nil {
		ret = toolPaletteGetDropItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolPaletteGetExclusiveFunction *gi.Function
var toolPaletteGetExclusiveFunction_Once sync.Once

func toolPaletteGetExclusiveFunction_Set() error {
	var err error
	toolPaletteGetExclusiveFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetExclusiveFunction, err = toolPaletteStruct.InvokerNew("get_exclusive")
	})
	return err
}

// GetExclusive is a representation of the C type gtk_tool_palette_get_exclusive.
func (recv *ToolPalette) GetExclusive(group *ToolItemGroup) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)

	var ret gi.Argument

	err := toolPaletteGetExclusiveFunction_Set()
	if err == nil {
		ret = toolPaletteGetExclusiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolPaletteGetExpandFunction *gi.Function
var toolPaletteGetExpandFunction_Once sync.Once

func toolPaletteGetExpandFunction_Set() error {
	var err error
	toolPaletteGetExpandFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetExpandFunction, err = toolPaletteStruct.InvokerNew("get_expand")
	})
	return err
}

// GetExpand is a representation of the C type gtk_tool_palette_get_expand.
func (recv *ToolPalette) GetExpand(group *ToolItemGroup) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)

	var ret gi.Argument

	err := toolPaletteGetExpandFunction_Set()
	if err == nil {
		ret = toolPaletteGetExpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var toolPaletteGetGroupPositionFunction *gi.Function
var toolPaletteGetGroupPositionFunction_Once sync.Once

func toolPaletteGetGroupPositionFunction_Set() error {
	var err error
	toolPaletteGetGroupPositionFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetGroupPositionFunction, err = toolPaletteStruct.InvokerNew("get_group_position")
	})
	return err
}

// GetGroupPosition is a representation of the C type gtk_tool_palette_get_group_position.
func (recv *ToolPalette) GetGroupPosition(group *ToolItemGroup) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)

	var ret gi.Argument

	err := toolPaletteGetGroupPositionFunction_Set()
	if err == nil {
		ret = toolPaletteGetGroupPositionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var toolPaletteGetHadjustmentFunction *gi.Function
var toolPaletteGetHadjustmentFunction_Once sync.Once

func toolPaletteGetHadjustmentFunction_Set() error {
	var err error
	toolPaletteGetHadjustmentFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetHadjustmentFunction, err = toolPaletteStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_tool_palette_get_hadjustment.
func (recv *ToolPalette) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolPaletteGetHadjustmentFunction_Set()
	if err == nil {
		ret = toolPaletteGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_palette_get_icon_size' : return type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_tool_palette_get_style' : return type 'ToolbarStyle' not supported

var toolPaletteGetVadjustmentFunction *gi.Function
var toolPaletteGetVadjustmentFunction_Once sync.Once

func toolPaletteGetVadjustmentFunction_Set() error {
	var err error
	toolPaletteGetVadjustmentFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteGetVadjustmentFunction, err = toolPaletteStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_tool_palette_get_vadjustment.
func (recv *ToolPalette) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolPaletteGetVadjustmentFunction_Set()
	if err == nil {
		ret = toolPaletteGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tool_palette_set_drag_source' : parameter 'targets' of type 'ToolPaletteDragTargets' not supported

var toolPaletteSetExclusiveFunction *gi.Function
var toolPaletteSetExclusiveFunction_Once sync.Once

func toolPaletteSetExclusiveFunction_Set() error {
	var err error
	toolPaletteSetExclusiveFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteSetExclusiveFunction, err = toolPaletteStruct.InvokerNew("set_exclusive")
	})
	return err
}

// SetExclusive is a representation of the C type gtk_tool_palette_set_exclusive.
func (recv *ToolPalette) SetExclusive(group *ToolItemGroup, exclusive bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)
	inArgs[2].SetBoolean(exclusive)

	err := toolPaletteSetExclusiveFunction_Set()
	if err == nil {
		toolPaletteSetExclusiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolPaletteSetExpandFunction *gi.Function
var toolPaletteSetExpandFunction_Once sync.Once

func toolPaletteSetExpandFunction_Set() error {
	var err error
	toolPaletteSetExpandFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteSetExpandFunction, err = toolPaletteStruct.InvokerNew("set_expand")
	})
	return err
}

// SetExpand is a representation of the C type gtk_tool_palette_set_expand.
func (recv *ToolPalette) SetExpand(group *ToolItemGroup, expand bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)
	inArgs[2].SetBoolean(expand)

	err := toolPaletteSetExpandFunction_Set()
	if err == nil {
		toolPaletteSetExpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolPaletteSetGroupPositionFunction *gi.Function
var toolPaletteSetGroupPositionFunction_Once sync.Once

func toolPaletteSetGroupPositionFunction_Set() error {
	var err error
	toolPaletteSetGroupPositionFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteSetGroupPositionFunction, err = toolPaletteStruct.InvokerNew("set_group_position")
	})
	return err
}

// SetGroupPosition is a representation of the C type gtk_tool_palette_set_group_position.
func (recv *ToolPalette) SetGroupPosition(group *ToolItemGroup, position int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(group.Native)
	inArgs[2].SetInt32(position)

	err := toolPaletteSetGroupPositionFunction_Set()
	if err == nil {
		toolPaletteSetGroupPositionFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tool_palette_set_icon_size' : parameter 'icon_size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_tool_palette_set_style' : parameter 'style' of type 'ToolbarStyle' not supported

var toolPaletteUnsetIconSizeFunction *gi.Function
var toolPaletteUnsetIconSizeFunction_Once sync.Once

func toolPaletteUnsetIconSizeFunction_Set() error {
	var err error
	toolPaletteUnsetIconSizeFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteUnsetIconSizeFunction, err = toolPaletteStruct.InvokerNew("unset_icon_size")
	})
	return err
}

// UnsetIconSize is a representation of the C type gtk_tool_palette_unset_icon_size.
func (recv *ToolPalette) UnsetIconSize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolPaletteUnsetIconSizeFunction_Set()
	if err == nil {
		toolPaletteUnsetIconSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolPaletteUnsetStyleFunction *gi.Function
var toolPaletteUnsetStyleFunction_Once sync.Once

func toolPaletteUnsetStyleFunction_Set() error {
	var err error
	toolPaletteUnsetStyleFunction_Once.Do(func() {
		err = toolPaletteStruct_Set()
		if err != nil {
			return
		}
		toolPaletteUnsetStyleFunction, err = toolPaletteStruct.InvokerNew("unset_style")
	})
	return err
}

// UnsetStyle is a representation of the C type gtk_tool_palette_unset_style.
func (recv *ToolPalette) UnsetStyle() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolPaletteUnsetStyleFunction_Set()
	if err == nil {
		toolPaletteUnsetStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolbarStruct *gi.Struct
var toolbarStruct_Once sync.Once

func toolbarStruct_Set() error {
	var err error
	toolbarStruct_Once.Do(func() {
		toolbarStruct, err = gi.StructNew("Gtk", "Toolbar")
	})
	return err
}

type Toolbar struct {
	Container
}

// FieldContainer returns the C field 'container'.
func (recv *Toolbar) FieldContainer() *Container {
	argValue := gi.FieldGet(toolbarStruct, recv.Native, "container")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldContainer sets the value of the C field 'container'.
func (recv *Toolbar) SetFieldContainer(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolbarStruct, recv.Native, "container", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Toolbar) FieldPriv() *ToolbarPrivate {
	argValue := gi.FieldGet(toolbarStruct, recv.Native, "priv")
	value := &ToolbarPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Toolbar) SetFieldPriv(value *ToolbarPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toolbarStruct, recv.Native, "priv", argValue)
}

var toolbarNewFunction *gi.Function
var toolbarNewFunction_Once sync.Once

func toolbarNewFunction_Set() error {
	var err error
	toolbarNewFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarNewFunction, err = toolbarStruct.InvokerNew("new")
	})
	return err
}

// ToolbarNew is a representation of the C type gtk_toolbar_new.
func ToolbarNew() *Toolbar {

	var ret gi.Argument

	err := toolbarNewFunction_Set()
	if err == nil {
		ret = toolbarNewFunction.Invoke(nil, nil)
	}

	retGo := &Toolbar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var toolbarGetDropIndexFunction *gi.Function
var toolbarGetDropIndexFunction_Once sync.Once

func toolbarGetDropIndexFunction_Set() error {
	var err error
	toolbarGetDropIndexFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarGetDropIndexFunction, err = toolbarStruct.InvokerNew("get_drop_index")
	})
	return err
}

// GetDropIndex is a representation of the C type gtk_toolbar_get_drop_index.
func (recv *Toolbar) GetDropIndex(x int32, y int32) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var ret gi.Argument

	err := toolbarGetDropIndexFunction_Set()
	if err == nil {
		ret = toolbarGetDropIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_toolbar_get_icon_size' : return type 'IconSize' not supported

var toolbarGetItemIndexFunction *gi.Function
var toolbarGetItemIndexFunction_Once sync.Once

func toolbarGetItemIndexFunction_Set() error {
	var err error
	toolbarGetItemIndexFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarGetItemIndexFunction, err = toolbarStruct.InvokerNew("get_item_index")
	})
	return err
}

// GetItemIndex is a representation of the C type gtk_toolbar_get_item_index.
func (recv *Toolbar) GetItemIndex(item *ToolItem) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(item.Native)

	var ret gi.Argument

	err := toolbarGetItemIndexFunction_Set()
	if err == nil {
		ret = toolbarGetItemIndexFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var toolbarGetNItemsFunction *gi.Function
var toolbarGetNItemsFunction_Once sync.Once

func toolbarGetNItemsFunction_Set() error {
	var err error
	toolbarGetNItemsFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarGetNItemsFunction, err = toolbarStruct.InvokerNew("get_n_items")
	})
	return err
}

// GetNItems is a representation of the C type gtk_toolbar_get_n_items.
func (recv *Toolbar) GetNItems() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolbarGetNItemsFunction_Set()
	if err == nil {
		ret = toolbarGetNItemsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var toolbarGetNthItemFunction *gi.Function
var toolbarGetNthItemFunction_Once sync.Once

func toolbarGetNthItemFunction_Set() error {
	var err error
	toolbarGetNthItemFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarGetNthItemFunction, err = toolbarStruct.InvokerNew("get_nth_item")
	})
	return err
}

// GetNthItem is a representation of the C type gtk_toolbar_get_nth_item.
func (recv *Toolbar) GetNthItem(n int32) *ToolItem {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(n)

	var ret gi.Argument

	err := toolbarGetNthItemFunction_Set()
	if err == nil {
		ret = toolbarGetNthItemFunction.Invoke(inArgs[:], nil)
	}

	retGo := &ToolItem{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_toolbar_get_relief_style' : return type 'ReliefStyle' not supported

var toolbarGetShowArrowFunction *gi.Function
var toolbarGetShowArrowFunction_Once sync.Once

func toolbarGetShowArrowFunction_Set() error {
	var err error
	toolbarGetShowArrowFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarGetShowArrowFunction, err = toolbarStruct.InvokerNew("get_show_arrow")
	})
	return err
}

// GetShowArrow is a representation of the C type gtk_toolbar_get_show_arrow.
func (recv *Toolbar) GetShowArrow() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := toolbarGetShowArrowFunction_Set()
	if err == nil {
		ret = toolbarGetShowArrowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_toolbar_get_style' : return type 'ToolbarStyle' not supported

var toolbarInsertFunction *gi.Function
var toolbarInsertFunction_Once sync.Once

func toolbarInsertFunction_Set() error {
	var err error
	toolbarInsertFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarInsertFunction, err = toolbarStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_toolbar_insert.
func (recv *Toolbar) Insert(item *ToolItem, pos int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(item.Native)
	inArgs[2].SetInt32(pos)

	err := toolbarInsertFunction_Set()
	if err == nil {
		toolbarInsertFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolbarSetDropHighlightItemFunction *gi.Function
var toolbarSetDropHighlightItemFunction_Once sync.Once

func toolbarSetDropHighlightItemFunction_Set() error {
	var err error
	toolbarSetDropHighlightItemFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarSetDropHighlightItemFunction, err = toolbarStruct.InvokerNew("set_drop_highlight_item")
	})
	return err
}

// SetDropHighlightItem is a representation of the C type gtk_toolbar_set_drop_highlight_item.
func (recv *Toolbar) SetDropHighlightItem(toolItem *ToolItem, index int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(toolItem.Native)
	inArgs[2].SetInt32(index)

	err := toolbarSetDropHighlightItemFunction_Set()
	if err == nil {
		toolbarSetDropHighlightItemFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_toolbar_set_icon_size' : parameter 'icon_size' of type 'IconSize' not supported

var toolbarSetShowArrowFunction *gi.Function
var toolbarSetShowArrowFunction_Once sync.Once

func toolbarSetShowArrowFunction_Set() error {
	var err error
	toolbarSetShowArrowFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarSetShowArrowFunction, err = toolbarStruct.InvokerNew("set_show_arrow")
	})
	return err
}

// SetShowArrow is a representation of the C type gtk_toolbar_set_show_arrow.
func (recv *Toolbar) SetShowArrow(showArrow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(showArrow)

	err := toolbarSetShowArrowFunction_Set()
	if err == nil {
		toolbarSetShowArrowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_toolbar_set_style' : parameter 'style' of type 'ToolbarStyle' not supported

var toolbarUnsetIconSizeFunction *gi.Function
var toolbarUnsetIconSizeFunction_Once sync.Once

func toolbarUnsetIconSizeFunction_Set() error {
	var err error
	toolbarUnsetIconSizeFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarUnsetIconSizeFunction, err = toolbarStruct.InvokerNew("unset_icon_size")
	})
	return err
}

// UnsetIconSize is a representation of the C type gtk_toolbar_unset_icon_size.
func (recv *Toolbar) UnsetIconSize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolbarUnsetIconSizeFunction_Set()
	if err == nil {
		toolbarUnsetIconSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var toolbarUnsetStyleFunction *gi.Function
var toolbarUnsetStyleFunction_Once sync.Once

func toolbarUnsetStyleFunction_Set() error {
	var err error
	toolbarUnsetStyleFunction_Once.Do(func() {
		err = toolbarStruct_Set()
		if err != nil {
			return
		}
		toolbarUnsetStyleFunction, err = toolbarStruct.InvokerNew("unset_style")
	})
	return err
}

// UnsetStyle is a representation of the C type gtk_toolbar_unset_style.
func (recv *Toolbar) UnsetStyle() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := toolbarUnsetStyleFunction_Set()
	if err == nil {
		toolbarUnsetStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tooltipStruct *gi.Struct
var tooltipStruct_Once sync.Once

func tooltipStruct_Set() error {
	var err error
	tooltipStruct_Once.Do(func() {
		tooltipStruct, err = gi.StructNew("Gtk", "Tooltip")
	})
	return err
}

type Tooltip struct {
	gobject.Object
}

var tooltipSetCustomFunction *gi.Function
var tooltipSetCustomFunction_Once sync.Once

func tooltipSetCustomFunction_Set() error {
	var err error
	tooltipSetCustomFunction_Once.Do(func() {
		err = tooltipStruct_Set()
		if err != nil {
			return
		}
		tooltipSetCustomFunction, err = tooltipStruct.InvokerNew("set_custom")
	})
	return err
}

// SetCustom is a representation of the C type gtk_tooltip_set_custom.
func (recv *Tooltip) SetCustom(customWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(customWidget.Native)

	err := tooltipSetCustomFunction_Set()
	if err == nil {
		tooltipSetCustomFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tooltip_set_icon' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_tooltip_set_icon_from_gicon' : parameter 'gicon' of type 'Gio.Icon' not supported

// UNSUPPORTED : C value 'gtk_tooltip_set_icon_from_icon_name' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_tooltip_set_icon_from_stock' : parameter 'size' of type 'IconSize' not supported

var tooltipSetMarkupFunction *gi.Function
var tooltipSetMarkupFunction_Once sync.Once

func tooltipSetMarkupFunction_Set() error {
	var err error
	tooltipSetMarkupFunction_Once.Do(func() {
		err = tooltipStruct_Set()
		if err != nil {
			return
		}
		tooltipSetMarkupFunction, err = tooltipStruct.InvokerNew("set_markup")
	})
	return err
}

// SetMarkup is a representation of the C type gtk_tooltip_set_markup.
func (recv *Tooltip) SetMarkup(markup string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markup)

	err := tooltipSetMarkupFunction_Set()
	if err == nil {
		tooltipSetMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var tooltipSetTextFunction *gi.Function
var tooltipSetTextFunction_Once sync.Once

func tooltipSetTextFunction_Set() error {
	var err error
	tooltipSetTextFunction_Once.Do(func() {
		err = tooltipStruct_Set()
		if err != nil {
			return
		}
		tooltipSetTextFunction, err = tooltipStruct.InvokerNew("set_text")
	})
	return err
}

// SetText is a representation of the C type gtk_tooltip_set_text.
func (recv *Tooltip) SetText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := tooltipSetTextFunction_Set()
	if err == nil {
		tooltipSetTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tooltip_set_tip_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

// TooltipStruct creates an uninitialised Tooltip.
func TooltipStruct() *Tooltip {
	err := tooltipStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &Tooltip{}
	structGo.Native = tooltipStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTooltip)
	return structGo
}
func finalizeTooltip(obj *Tooltip) {
	tooltipStruct.Free(obj.Native)
}

var toplevelAccessibleStruct *gi.Struct
var toplevelAccessibleStruct_Once sync.Once

func toplevelAccessibleStruct_Set() error {
	var err error
	toplevelAccessibleStruct_Once.Do(func() {
		toplevelAccessibleStruct, err = gi.StructNew("Gtk", "ToplevelAccessible")
	})
	return err
}

type ToplevelAccessible struct {
	atk.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'Atk.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'Atk.Object'

// FieldPriv returns the C field 'priv'.
func (recv *ToplevelAccessible) FieldPriv() *ToplevelAccessiblePrivate {
	argValue := gi.FieldGet(toplevelAccessibleStruct, recv.Native, "priv")
	value := &ToplevelAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *ToplevelAccessible) SetFieldPriv(value *ToplevelAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(toplevelAccessibleStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_toplevel_accessible_get_children' : return type 'GLib.List' not supported

// ToplevelAccessibleStruct creates an uninitialised ToplevelAccessible.
func ToplevelAccessibleStruct() *ToplevelAccessible {
	err := toplevelAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &ToplevelAccessible{}
	structGo.Native = toplevelAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeToplevelAccessible)
	return structGo
}
func finalizeToplevelAccessible(obj *ToplevelAccessible) {
	toplevelAccessibleStruct.Free(obj.Native)
}

var treeModelFilterStruct *gi.Struct
var treeModelFilterStruct_Once sync.Once

func treeModelFilterStruct_Set() error {
	var err error
	treeModelFilterStruct_Once.Do(func() {
		treeModelFilterStruct, err = gi.StructNew("Gtk", "TreeModelFilter")
	})
	return err
}

type TreeModelFilter struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

var treeModelFilterClearCacheFunction *gi.Function
var treeModelFilterClearCacheFunction_Once sync.Once

func treeModelFilterClearCacheFunction_Set() error {
	var err error
	treeModelFilterClearCacheFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterClearCacheFunction, err = treeModelFilterStruct.InvokerNew("clear_cache")
	})
	return err
}

// ClearCache is a representation of the C type gtk_tree_model_filter_clear_cache.
func (recv *TreeModelFilter) ClearCache() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeModelFilterClearCacheFunction_Set()
	if err == nil {
		treeModelFilterClearCacheFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeModelFilterConvertChildIterToIterFunction *gi.Function
var treeModelFilterConvertChildIterToIterFunction_Once sync.Once

func treeModelFilterConvertChildIterToIterFunction_Set() error {
	var err error
	treeModelFilterConvertChildIterToIterFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterConvertChildIterToIterFunction, err = treeModelFilterStruct.InvokerNew("convert_child_iter_to_iter")
	})
	return err
}

// ConvertChildIterToIter is a representation of the C type gtk_tree_model_filter_convert_child_iter_to_iter.
func (recv *TreeModelFilter) ConvertChildIterToIter(childIter *TreeIter) (bool, *TreeIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childIter.Native)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := treeModelFilterConvertChildIterToIterFunction_Set()
	if err == nil {
		ret = treeModelFilterConvertChildIterToIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return retGo, out0
}

var treeModelFilterConvertChildPathToPathFunction *gi.Function
var treeModelFilterConvertChildPathToPathFunction_Once sync.Once

func treeModelFilterConvertChildPathToPathFunction_Set() error {
	var err error
	treeModelFilterConvertChildPathToPathFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterConvertChildPathToPathFunction, err = treeModelFilterStruct.InvokerNew("convert_child_path_to_path")
	})
	return err
}

// ConvertChildPathToPath is a representation of the C type gtk_tree_model_filter_convert_child_path_to_path.
func (recv *TreeModelFilter) ConvertChildPathToPath(childPath *TreePath) *TreePath {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childPath.Native)

	var ret gi.Argument

	err := treeModelFilterConvertChildPathToPathFunction_Set()
	if err == nil {
		ret = treeModelFilterConvertChildPathToPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeModelFilterConvertIterToChildIterFunction *gi.Function
var treeModelFilterConvertIterToChildIterFunction_Once sync.Once

func treeModelFilterConvertIterToChildIterFunction_Set() error {
	var err error
	treeModelFilterConvertIterToChildIterFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterConvertIterToChildIterFunction, err = treeModelFilterStruct.InvokerNew("convert_iter_to_child_iter")
	})
	return err
}

// ConvertIterToChildIter is a representation of the C type gtk_tree_model_filter_convert_iter_to_child_iter.
func (recv *TreeModelFilter) ConvertIterToChildIter(filterIter *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(filterIter.Native)

	var outArgs [1]gi.Argument

	err := treeModelFilterConvertIterToChildIterFunction_Set()
	if err == nil {
		treeModelFilterConvertIterToChildIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeModelFilterConvertPathToChildPathFunction *gi.Function
var treeModelFilterConvertPathToChildPathFunction_Once sync.Once

func treeModelFilterConvertPathToChildPathFunction_Set() error {
	var err error
	treeModelFilterConvertPathToChildPathFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterConvertPathToChildPathFunction, err = treeModelFilterStruct.InvokerNew("convert_path_to_child_path")
	})
	return err
}

// ConvertPathToChildPath is a representation of the C type gtk_tree_model_filter_convert_path_to_child_path.
func (recv *TreeModelFilter) ConvertPathToChildPath(filterPath *TreePath) *TreePath {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(filterPath.Native)

	var ret gi.Argument

	err := treeModelFilterConvertPathToChildPathFunction_Set()
	if err == nil {
		ret = treeModelFilterConvertPathToChildPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_model_filter_get_model' : return type 'TreeModel' not supported

var treeModelFilterRefilterFunction *gi.Function
var treeModelFilterRefilterFunction_Once sync.Once

func treeModelFilterRefilterFunction_Set() error {
	var err error
	treeModelFilterRefilterFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterRefilterFunction, err = treeModelFilterStruct.InvokerNew("refilter")
	})
	return err
}

// Refilter is a representation of the C type gtk_tree_model_filter_refilter.
func (recv *TreeModelFilter) Refilter() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeModelFilterRefilterFunction_Set()
	if err == nil {
		treeModelFilterRefilterFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_model_filter_set_modify_func' : parameter 'types' of type 'nil' not supported

var treeModelFilterSetVisibleColumnFunction *gi.Function
var treeModelFilterSetVisibleColumnFunction_Once sync.Once

func treeModelFilterSetVisibleColumnFunction_Set() error {
	var err error
	treeModelFilterSetVisibleColumnFunction_Once.Do(func() {
		err = treeModelFilterStruct_Set()
		if err != nil {
			return
		}
		treeModelFilterSetVisibleColumnFunction, err = treeModelFilterStruct.InvokerNew("set_visible_column")
	})
	return err
}

// SetVisibleColumn is a representation of the C type gtk_tree_model_filter_set_visible_column.
func (recv *TreeModelFilter) SetVisibleColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := treeModelFilterSetVisibleColumnFunction_Set()
	if err == nil {
		treeModelFilterSetVisibleColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_model_filter_set_visible_func' : parameter 'func' of type 'TreeModelFilterVisibleFunc' not supported

// TreeModelFilterStruct creates an uninitialised TreeModelFilter.
func TreeModelFilterStruct() *TreeModelFilter {
	err := treeModelFilterStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TreeModelFilter{}
	structGo.Native = treeModelFilterStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTreeModelFilter)
	return structGo
}
func finalizeTreeModelFilter(obj *TreeModelFilter) {
	treeModelFilterStruct.Free(obj.Native)
}

var treeModelSortStruct *gi.Struct
var treeModelSortStruct_Once sync.Once

func treeModelSortStruct_Set() error {
	var err error
	treeModelSortStruct_Once.Do(func() {
		treeModelSortStruct, err = gi.StructNew("Gtk", "TreeModelSort")
	})
	return err
}

type TreeModelSort struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

var treeModelSortClearCacheFunction *gi.Function
var treeModelSortClearCacheFunction_Once sync.Once

func treeModelSortClearCacheFunction_Set() error {
	var err error
	treeModelSortClearCacheFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortClearCacheFunction, err = treeModelSortStruct.InvokerNew("clear_cache")
	})
	return err
}

// ClearCache is a representation of the C type gtk_tree_model_sort_clear_cache.
func (recv *TreeModelSort) ClearCache() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeModelSortClearCacheFunction_Set()
	if err == nil {
		treeModelSortClearCacheFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeModelSortConvertChildIterToIterFunction *gi.Function
var treeModelSortConvertChildIterToIterFunction_Once sync.Once

func treeModelSortConvertChildIterToIterFunction_Set() error {
	var err error
	treeModelSortConvertChildIterToIterFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortConvertChildIterToIterFunction, err = treeModelSortStruct.InvokerNew("convert_child_iter_to_iter")
	})
	return err
}

// ConvertChildIterToIter is a representation of the C type gtk_tree_model_sort_convert_child_iter_to_iter.
func (recv *TreeModelSort) ConvertChildIterToIter(childIter *TreeIter) (bool, *TreeIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childIter.Native)

	var outArgs [1]gi.Argument
	var ret gi.Argument

	err := treeModelSortConvertChildIterToIterFunction_Set()
	if err == nil {
		ret = treeModelSortConvertChildIterToIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return retGo, out0
}

var treeModelSortConvertChildPathToPathFunction *gi.Function
var treeModelSortConvertChildPathToPathFunction_Once sync.Once

func treeModelSortConvertChildPathToPathFunction_Set() error {
	var err error
	treeModelSortConvertChildPathToPathFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortConvertChildPathToPathFunction, err = treeModelSortStruct.InvokerNew("convert_child_path_to_path")
	})
	return err
}

// ConvertChildPathToPath is a representation of the C type gtk_tree_model_sort_convert_child_path_to_path.
func (recv *TreeModelSort) ConvertChildPathToPath(childPath *TreePath) *TreePath {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(childPath.Native)

	var ret gi.Argument

	err := treeModelSortConvertChildPathToPathFunction_Set()
	if err == nil {
		ret = treeModelSortConvertChildPathToPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeModelSortConvertIterToChildIterFunction *gi.Function
var treeModelSortConvertIterToChildIterFunction_Once sync.Once

func treeModelSortConvertIterToChildIterFunction_Set() error {
	var err error
	treeModelSortConvertIterToChildIterFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortConvertIterToChildIterFunction, err = treeModelSortStruct.InvokerNew("convert_iter_to_child_iter")
	})
	return err
}

// ConvertIterToChildIter is a representation of the C type gtk_tree_model_sort_convert_iter_to_child_iter.
func (recv *TreeModelSort) ConvertIterToChildIter(sortedIter *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(sortedIter.Native)

	var outArgs [1]gi.Argument

	err := treeModelSortConvertIterToChildIterFunction_Set()
	if err == nil {
		treeModelSortConvertIterToChildIterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeModelSortConvertPathToChildPathFunction *gi.Function
var treeModelSortConvertPathToChildPathFunction_Once sync.Once

func treeModelSortConvertPathToChildPathFunction_Set() error {
	var err error
	treeModelSortConvertPathToChildPathFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortConvertPathToChildPathFunction, err = treeModelSortStruct.InvokerNew("convert_path_to_child_path")
	})
	return err
}

// ConvertPathToChildPath is a representation of the C type gtk_tree_model_sort_convert_path_to_child_path.
func (recv *TreeModelSort) ConvertPathToChildPath(sortedPath *TreePath) *TreePath {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(sortedPath.Native)

	var ret gi.Argument

	err := treeModelSortConvertPathToChildPathFunction_Set()
	if err == nil {
		ret = treeModelSortConvertPathToChildPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreePath{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_model_sort_get_model' : return type 'TreeModel' not supported

var treeModelSortIterIsValidFunction *gi.Function
var treeModelSortIterIsValidFunction_Once sync.Once

func treeModelSortIterIsValidFunction_Set() error {
	var err error
	treeModelSortIterIsValidFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortIterIsValidFunction, err = treeModelSortStruct.InvokerNew("iter_is_valid")
	})
	return err
}

// IterIsValid is a representation of the C type gtk_tree_model_sort_iter_is_valid.
func (recv *TreeModelSort) IterIsValid(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := treeModelSortIterIsValidFunction_Set()
	if err == nil {
		ret = treeModelSortIterIsValidFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeModelSortResetDefaultSortFuncFunction *gi.Function
var treeModelSortResetDefaultSortFuncFunction_Once sync.Once

func treeModelSortResetDefaultSortFuncFunction_Set() error {
	var err error
	treeModelSortResetDefaultSortFuncFunction_Once.Do(func() {
		err = treeModelSortStruct_Set()
		if err != nil {
			return
		}
		treeModelSortResetDefaultSortFuncFunction, err = treeModelSortStruct.InvokerNew("reset_default_sort_func")
	})
	return err
}

// ResetDefaultSortFunc is a representation of the C type gtk_tree_model_sort_reset_default_sort_func.
func (recv *TreeModelSort) ResetDefaultSortFunc() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeModelSortResetDefaultSortFuncFunction_Set()
	if err == nil {
		treeModelSortResetDefaultSortFuncFunction.Invoke(inArgs[:], nil)
	}

	return
}

// TreeModelSortStruct creates an uninitialised TreeModelSort.
func TreeModelSortStruct() *TreeModelSort {
	err := treeModelSortStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TreeModelSort{}
	structGo.Native = treeModelSortStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTreeModelSort)
	return structGo
}
func finalizeTreeModelSort(obj *TreeModelSort) {
	treeModelSortStruct.Free(obj.Native)
}

var treeSelectionStruct *gi.Struct
var treeSelectionStruct_Once sync.Once

func treeSelectionStruct_Set() error {
	var err error
	treeSelectionStruct_Once.Do(func() {
		treeSelectionStruct, err = gi.StructNew("Gtk", "TreeSelection")
	})
	return err
}

type TreeSelection struct {
	gobject.Object
}

var treeSelectionCountSelectedRowsFunction *gi.Function
var treeSelectionCountSelectedRowsFunction_Once sync.Once

func treeSelectionCountSelectedRowsFunction_Set() error {
	var err error
	treeSelectionCountSelectedRowsFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionCountSelectedRowsFunction, err = treeSelectionStruct.InvokerNew("count_selected_rows")
	})
	return err
}

// CountSelectedRows is a representation of the C type gtk_tree_selection_count_selected_rows.
func (recv *TreeSelection) CountSelectedRows() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeSelectionCountSelectedRowsFunction_Set()
	if err == nil {
		ret = treeSelectionCountSelectedRowsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_selection_get_mode' : return type 'SelectionMode' not supported

// UNSUPPORTED : C value 'gtk_tree_selection_get_select_function' : return type 'TreeSelectionFunc' not supported

// UNSUPPORTED : C value 'gtk_tree_selection_get_selected' : parameter 'model' of type 'TreeModel' not supported

// UNSUPPORTED : C value 'gtk_tree_selection_get_selected_rows' : parameter 'model' of type 'TreeModel' not supported

var treeSelectionGetTreeViewFunction *gi.Function
var treeSelectionGetTreeViewFunction_Once sync.Once

func treeSelectionGetTreeViewFunction_Set() error {
	var err error
	treeSelectionGetTreeViewFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionGetTreeViewFunction, err = treeSelectionStruct.InvokerNew("get_tree_view")
	})
	return err
}

// GetTreeView is a representation of the C type gtk_tree_selection_get_tree_view.
func (recv *TreeSelection) GetTreeView() *TreeView {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeSelectionGetTreeViewFunction_Set()
	if err == nil {
		ret = treeSelectionGetTreeViewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreeView{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_selection_get_user_data' : return type 'gpointer' not supported

var treeSelectionIterIsSelectedFunction *gi.Function
var treeSelectionIterIsSelectedFunction_Once sync.Once

func treeSelectionIterIsSelectedFunction_Set() error {
	var err error
	treeSelectionIterIsSelectedFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionIterIsSelectedFunction, err = treeSelectionStruct.InvokerNew("iter_is_selected")
	})
	return err
}

// IterIsSelected is a representation of the C type gtk_tree_selection_iter_is_selected.
func (recv *TreeSelection) IterIsSelected(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := treeSelectionIterIsSelectedFunction_Set()
	if err == nil {
		ret = treeSelectionIterIsSelectedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeSelectionPathIsSelectedFunction *gi.Function
var treeSelectionPathIsSelectedFunction_Once sync.Once

func treeSelectionPathIsSelectedFunction_Set() error {
	var err error
	treeSelectionPathIsSelectedFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionPathIsSelectedFunction, err = treeSelectionStruct.InvokerNew("path_is_selected")
	})
	return err
}

// PathIsSelected is a representation of the C type gtk_tree_selection_path_is_selected.
func (recv *TreeSelection) PathIsSelected(path *TreePath) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := treeSelectionPathIsSelectedFunction_Set()
	if err == nil {
		ret = treeSelectionPathIsSelectedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeSelectionSelectAllFunction *gi.Function
var treeSelectionSelectAllFunction_Once sync.Once

func treeSelectionSelectAllFunction_Set() error {
	var err error
	treeSelectionSelectAllFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionSelectAllFunction, err = treeSelectionStruct.InvokerNew("select_all")
	})
	return err
}

// SelectAll is a representation of the C type gtk_tree_selection_select_all.
func (recv *TreeSelection) SelectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeSelectionSelectAllFunction_Set()
	if err == nil {
		treeSelectionSelectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionSelectIterFunction *gi.Function
var treeSelectionSelectIterFunction_Once sync.Once

func treeSelectionSelectIterFunction_Set() error {
	var err error
	treeSelectionSelectIterFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionSelectIterFunction, err = treeSelectionStruct.InvokerNew("select_iter")
	})
	return err
}

// SelectIter is a representation of the C type gtk_tree_selection_select_iter.
func (recv *TreeSelection) SelectIter(iter *TreeIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	err := treeSelectionSelectIterFunction_Set()
	if err == nil {
		treeSelectionSelectIterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionSelectPathFunction *gi.Function
var treeSelectionSelectPathFunction_Once sync.Once

func treeSelectionSelectPathFunction_Set() error {
	var err error
	treeSelectionSelectPathFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionSelectPathFunction, err = treeSelectionStruct.InvokerNew("select_path")
	})
	return err
}

// SelectPath is a representation of the C type gtk_tree_selection_select_path.
func (recv *TreeSelection) SelectPath(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := treeSelectionSelectPathFunction_Set()
	if err == nil {
		treeSelectionSelectPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionSelectRangeFunction *gi.Function
var treeSelectionSelectRangeFunction_Once sync.Once

func treeSelectionSelectRangeFunction_Set() error {
	var err error
	treeSelectionSelectRangeFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionSelectRangeFunction, err = treeSelectionStruct.InvokerNew("select_range")
	})
	return err
}

// SelectRange is a representation of the C type gtk_tree_selection_select_range.
func (recv *TreeSelection) SelectRange(startPath *TreePath, endPath *TreePath) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(startPath.Native)
	inArgs[2].SetPointer(endPath.Native)

	err := treeSelectionSelectRangeFunction_Set()
	if err == nil {
		treeSelectionSelectRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_selection_selected_foreach' : parameter 'func' of type 'TreeSelectionForeachFunc' not supported

// UNSUPPORTED : C value 'gtk_tree_selection_set_mode' : parameter 'type' of type 'SelectionMode' not supported

// UNSUPPORTED : C value 'gtk_tree_selection_set_select_function' : parameter 'func' of type 'TreeSelectionFunc' not supported

var treeSelectionUnselectAllFunction *gi.Function
var treeSelectionUnselectAllFunction_Once sync.Once

func treeSelectionUnselectAllFunction_Set() error {
	var err error
	treeSelectionUnselectAllFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionUnselectAllFunction, err = treeSelectionStruct.InvokerNew("unselect_all")
	})
	return err
}

// UnselectAll is a representation of the C type gtk_tree_selection_unselect_all.
func (recv *TreeSelection) UnselectAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeSelectionUnselectAllFunction_Set()
	if err == nil {
		treeSelectionUnselectAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionUnselectIterFunction *gi.Function
var treeSelectionUnselectIterFunction_Once sync.Once

func treeSelectionUnselectIterFunction_Set() error {
	var err error
	treeSelectionUnselectIterFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionUnselectIterFunction, err = treeSelectionStruct.InvokerNew("unselect_iter")
	})
	return err
}

// UnselectIter is a representation of the C type gtk_tree_selection_unselect_iter.
func (recv *TreeSelection) UnselectIter(iter *TreeIter) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	err := treeSelectionUnselectIterFunction_Set()
	if err == nil {
		treeSelectionUnselectIterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionUnselectPathFunction *gi.Function
var treeSelectionUnselectPathFunction_Once sync.Once

func treeSelectionUnselectPathFunction_Set() error {
	var err error
	treeSelectionUnselectPathFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionUnselectPathFunction, err = treeSelectionStruct.InvokerNew("unselect_path")
	})
	return err
}

// UnselectPath is a representation of the C type gtk_tree_selection_unselect_path.
func (recv *TreeSelection) UnselectPath(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := treeSelectionUnselectPathFunction_Set()
	if err == nil {
		treeSelectionUnselectPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeSelectionUnselectRangeFunction *gi.Function
var treeSelectionUnselectRangeFunction_Once sync.Once

func treeSelectionUnselectRangeFunction_Set() error {
	var err error
	treeSelectionUnselectRangeFunction_Once.Do(func() {
		err = treeSelectionStruct_Set()
		if err != nil {
			return
		}
		treeSelectionUnselectRangeFunction, err = treeSelectionStruct.InvokerNew("unselect_range")
	})
	return err
}

// UnselectRange is a representation of the C type gtk_tree_selection_unselect_range.
func (recv *TreeSelection) UnselectRange(startPath *TreePath, endPath *TreePath) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(startPath.Native)
	inArgs[2].SetPointer(endPath.Native)

	err := treeSelectionUnselectRangeFunction_Set()
	if err == nil {
		treeSelectionUnselectRangeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// TreeSelectionStruct creates an uninitialised TreeSelection.
func TreeSelectionStruct() *TreeSelection {
	err := treeSelectionStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TreeSelection{}
	structGo.Native = treeSelectionStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTreeSelection)
	return structGo
}
func finalizeTreeSelection(obj *TreeSelection) {
	treeSelectionStruct.Free(obj.Native)
}

var treeStoreStruct *gi.Struct
var treeStoreStruct_Once sync.Once

func treeStoreStruct_Set() error {
	var err error
	treeStoreStruct_Once.Do(func() {
		treeStoreStruct, err = gi.StructNew("Gtk", "TreeStore")
	})
	return err
}

type TreeStore struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *TreeStore) FieldPriv() *TreeStorePrivate {
	argValue := gi.FieldGet(treeStoreStruct, recv.Native, "priv")
	value := &TreeStorePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TreeStore) SetFieldPriv(value *TreeStorePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(treeStoreStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_tree_store_new' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_store_newv' : parameter 'types' of type 'nil' not supported

var treeStoreAppendFunction *gi.Function
var treeStoreAppendFunction_Once sync.Once

func treeStoreAppendFunction_Set() error {
	var err error
	treeStoreAppendFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreAppendFunction, err = treeStoreStruct.InvokerNew("append")
	})
	return err
}

// Append is a representation of the C type gtk_tree_store_append.
func (recv *TreeStore) Append(parent *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	var outArgs [1]gi.Argument

	err := treeStoreAppendFunction_Set()
	if err == nil {
		treeStoreAppendFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeStoreClearFunction *gi.Function
var treeStoreClearFunction_Once sync.Once

func treeStoreClearFunction_Set() error {
	var err error
	treeStoreClearFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreClearFunction, err = treeStoreStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_tree_store_clear.
func (recv *TreeStore) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeStoreClearFunction_Set()
	if err == nil {
		treeStoreClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeStoreInsertFunction *gi.Function
var treeStoreInsertFunction_Once sync.Once

func treeStoreInsertFunction_Set() error {
	var err error
	treeStoreInsertFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreInsertFunction, err = treeStoreStruct.InvokerNew("insert")
	})
	return err
}

// Insert is a representation of the C type gtk_tree_store_insert.
func (recv *TreeStore) Insert(parent *TreeIter, position int32) *TreeIter {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)
	inArgs[2].SetInt32(position)

	var outArgs [1]gi.Argument

	err := treeStoreInsertFunction_Set()
	if err == nil {
		treeStoreInsertFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeStoreInsertAfterFunction *gi.Function
var treeStoreInsertAfterFunction_Once sync.Once

func treeStoreInsertAfterFunction_Set() error {
	var err error
	treeStoreInsertAfterFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreInsertAfterFunction, err = treeStoreStruct.InvokerNew("insert_after")
	})
	return err
}

// InsertAfter is a representation of the C type gtk_tree_store_insert_after.
func (recv *TreeStore) InsertAfter(parent *TreeIter, sibling *TreeIter) *TreeIter {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)
	inArgs[2].SetPointer(sibling.Native)

	var outArgs [1]gi.Argument

	err := treeStoreInsertAfterFunction_Set()
	if err == nil {
		treeStoreInsertAfterFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeStoreInsertBeforeFunction *gi.Function
var treeStoreInsertBeforeFunction_Once sync.Once

func treeStoreInsertBeforeFunction_Set() error {
	var err error
	treeStoreInsertBeforeFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreInsertBeforeFunction, err = treeStoreStruct.InvokerNew("insert_before")
	})
	return err
}

// InsertBefore is a representation of the C type gtk_tree_store_insert_before.
func (recv *TreeStore) InsertBefore(parent *TreeIter, sibling *TreeIter) *TreeIter {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)
	inArgs[2].SetPointer(sibling.Native)

	var outArgs [1]gi.Argument

	err := treeStoreInsertBeforeFunction_Set()
	if err == nil {
		treeStoreInsertBeforeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

// UNSUPPORTED : C value 'gtk_tree_store_insert_with_values' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_store_insert_with_valuesv' : parameter 'columns' of type 'nil' not supported

var treeStoreIsAncestorFunction *gi.Function
var treeStoreIsAncestorFunction_Once sync.Once

func treeStoreIsAncestorFunction_Set() error {
	var err error
	treeStoreIsAncestorFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreIsAncestorFunction, err = treeStoreStruct.InvokerNew("is_ancestor")
	})
	return err
}

// IsAncestor is a representation of the C type gtk_tree_store_is_ancestor.
func (recv *TreeStore) IsAncestor(iter *TreeIter, descendant *TreeIter) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(descendant.Native)

	var ret gi.Argument

	err := treeStoreIsAncestorFunction_Set()
	if err == nil {
		ret = treeStoreIsAncestorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeStoreIterDepthFunction *gi.Function
var treeStoreIterDepthFunction_Once sync.Once

func treeStoreIterDepthFunction_Set() error {
	var err error
	treeStoreIterDepthFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreIterDepthFunction, err = treeStoreStruct.InvokerNew("iter_depth")
	})
	return err
}

// IterDepth is a representation of the C type gtk_tree_store_iter_depth.
func (recv *TreeStore) IterDepth(iter *TreeIter) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := treeStoreIterDepthFunction_Set()
	if err == nil {
		ret = treeStoreIterDepthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeStoreIterIsValidFunction *gi.Function
var treeStoreIterIsValidFunction_Once sync.Once

func treeStoreIterIsValidFunction_Set() error {
	var err error
	treeStoreIterIsValidFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreIterIsValidFunction, err = treeStoreStruct.InvokerNew("iter_is_valid")
	})
	return err
}

// IterIsValid is a representation of the C type gtk_tree_store_iter_is_valid.
func (recv *TreeStore) IterIsValid(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := treeStoreIterIsValidFunction_Set()
	if err == nil {
		ret = treeStoreIterIsValidFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeStoreMoveAfterFunction *gi.Function
var treeStoreMoveAfterFunction_Once sync.Once

func treeStoreMoveAfterFunction_Set() error {
	var err error
	treeStoreMoveAfterFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreMoveAfterFunction, err = treeStoreStruct.InvokerNew("move_after")
	})
	return err
}

// MoveAfter is a representation of the C type gtk_tree_store_move_after.
func (recv *TreeStore) MoveAfter(iter *TreeIter, position *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(position.Native)

	err := treeStoreMoveAfterFunction_Set()
	if err == nil {
		treeStoreMoveAfterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeStoreMoveBeforeFunction *gi.Function
var treeStoreMoveBeforeFunction_Once sync.Once

func treeStoreMoveBeforeFunction_Set() error {
	var err error
	treeStoreMoveBeforeFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreMoveBeforeFunction, err = treeStoreStruct.InvokerNew("move_before")
	})
	return err
}

// MoveBefore is a representation of the C type gtk_tree_store_move_before.
func (recv *TreeStore) MoveBefore(iter *TreeIter, position *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)
	inArgs[2].SetPointer(position.Native)

	err := treeStoreMoveBeforeFunction_Set()
	if err == nil {
		treeStoreMoveBeforeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeStorePrependFunction *gi.Function
var treeStorePrependFunction_Once sync.Once

func treeStorePrependFunction_Set() error {
	var err error
	treeStorePrependFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStorePrependFunction, err = treeStoreStruct.InvokerNew("prepend")
	})
	return err
}

// Prepend is a representation of the C type gtk_tree_store_prepend.
func (recv *TreeStore) Prepend(parent *TreeIter) *TreeIter {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	var outArgs [1]gi.Argument

	err := treeStorePrependFunction_Set()
	if err == nil {
		treeStorePrependFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreeIter{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var treeStoreRemoveFunction *gi.Function
var treeStoreRemoveFunction_Once sync.Once

func treeStoreRemoveFunction_Set() error {
	var err error
	treeStoreRemoveFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreRemoveFunction, err = treeStoreStruct.InvokerNew("remove")
	})
	return err
}

// Remove is a representation of the C type gtk_tree_store_remove.
func (recv *TreeStore) Remove(iter *TreeIter) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(iter.Native)

	var ret gi.Argument

	err := treeStoreRemoveFunction_Set()
	if err == nil {
		ret = treeStoreRemoveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_store_reorder' : parameter 'new_order' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_store_set' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_store_set_column_types' : parameter 'types' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_store_set_valist' : parameter 'var_args' of type 'va_list' not supported

// UNSUPPORTED : C value 'gtk_tree_store_set_value' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_tree_store_set_valuesv' : parameter 'columns' of type 'nil' not supported

var treeStoreSwapFunction *gi.Function
var treeStoreSwapFunction_Once sync.Once

func treeStoreSwapFunction_Set() error {
	var err error
	treeStoreSwapFunction_Once.Do(func() {
		err = treeStoreStruct_Set()
		if err != nil {
			return
		}
		treeStoreSwapFunction, err = treeStoreStruct.InvokerNew("swap")
	})
	return err
}

// Swap is a representation of the C type gtk_tree_store_swap.
func (recv *TreeStore) Swap(a *TreeIter, b *TreeIter) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(a.Native)
	inArgs[2].SetPointer(b.Native)

	err := treeStoreSwapFunction_Set()
	if err == nil {
		treeStoreSwapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewStruct *gi.Struct
var treeViewStruct_Once sync.Once

func treeViewStruct_Set() error {
	var err error
	treeViewStruct_Once.Do(func() {
		treeViewStruct, err = gi.StructNew("Gtk", "TreeView")
	})
	return err
}

type TreeView struct {
	Container
}

// FieldParent returns the C field 'parent'.
func (recv *TreeView) FieldParent() *Container {
	argValue := gi.FieldGet(treeViewStruct, recv.Native, "parent")
	value := &Container{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *TreeView) SetFieldParent(value *Container) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(treeViewStruct, recv.Native, "parent", argValue)
}

var treeViewNewFunction *gi.Function
var treeViewNewFunction_Once sync.Once

func treeViewNewFunction_Set() error {
	var err error
	treeViewNewFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewNewFunction, err = treeViewStruct.InvokerNew("new")
	})
	return err
}

// TreeViewNew is a representation of the C type gtk_tree_view_new.
func TreeViewNew() *TreeView {

	var ret gi.Argument

	err := treeViewNewFunction_Set()
	if err == nil {
		ret = treeViewNewFunction.Invoke(nil, nil)
	}

	retGo := &TreeView{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_new_with_model' : parameter 'model' of type 'TreeModel' not supported

var treeViewAppendColumnFunction *gi.Function
var treeViewAppendColumnFunction_Once sync.Once

func treeViewAppendColumnFunction_Set() error {
	var err error
	treeViewAppendColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewAppendColumnFunction, err = treeViewStruct.InvokerNew("append_column")
	})
	return err
}

// AppendColumn is a representation of the C type gtk_tree_view_append_column.
func (recv *TreeView) AppendColumn(column *TreeViewColumn) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(column.Native)

	var ret gi.Argument

	err := treeViewAppendColumnFunction_Set()
	if err == nil {
		ret = treeViewAppendColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewCollapseAllFunction *gi.Function
var treeViewCollapseAllFunction_Once sync.Once

func treeViewCollapseAllFunction_Set() error {
	var err error
	treeViewCollapseAllFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewCollapseAllFunction, err = treeViewStruct.InvokerNew("collapse_all")
	})
	return err
}

// CollapseAll is a representation of the C type gtk_tree_view_collapse_all.
func (recv *TreeView) CollapseAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewCollapseAllFunction_Set()
	if err == nil {
		treeViewCollapseAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewCollapseRowFunction *gi.Function
var treeViewCollapseRowFunction_Once sync.Once

func treeViewCollapseRowFunction_Set() error {
	var err error
	treeViewCollapseRowFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewCollapseRowFunction, err = treeViewStruct.InvokerNew("collapse_row")
	})
	return err
}

// CollapseRow is a representation of the C type gtk_tree_view_collapse_row.
func (recv *TreeView) CollapseRow(path *TreePath) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := treeViewCollapseRowFunction_Set()
	if err == nil {
		ret = treeViewCollapseRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewColumnsAutosizeFunction *gi.Function
var treeViewColumnsAutosizeFunction_Once sync.Once

func treeViewColumnsAutosizeFunction_Set() error {
	var err error
	treeViewColumnsAutosizeFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnsAutosizeFunction, err = treeViewStruct.InvokerNew("columns_autosize")
	})
	return err
}

// ColumnsAutosize is a representation of the C type gtk_tree_view_columns_autosize.
func (recv *TreeView) ColumnsAutosize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewColumnsAutosizeFunction_Set()
	if err == nil {
		treeViewColumnsAutosizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewConvertBinWindowToTreeCoordsFunction *gi.Function
var treeViewConvertBinWindowToTreeCoordsFunction_Once sync.Once

func treeViewConvertBinWindowToTreeCoordsFunction_Set() error {
	var err error
	treeViewConvertBinWindowToTreeCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertBinWindowToTreeCoordsFunction, err = treeViewStruct.InvokerNew("convert_bin_window_to_tree_coords")
	})
	return err
}

// ConvertBinWindowToTreeCoords is a representation of the C type gtk_tree_view_convert_bin_window_to_tree_coords.
func (recv *TreeView) ConvertBinWindowToTreeCoords(bx int32, by int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(bx)
	inArgs[2].SetInt32(by)

	var outArgs [2]gi.Argument

	err := treeViewConvertBinWindowToTreeCoordsFunction_Set()
	if err == nil {
		treeViewConvertBinWindowToTreeCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var treeViewConvertBinWindowToWidgetCoordsFunction *gi.Function
var treeViewConvertBinWindowToWidgetCoordsFunction_Once sync.Once

func treeViewConvertBinWindowToWidgetCoordsFunction_Set() error {
	var err error
	treeViewConvertBinWindowToWidgetCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertBinWindowToWidgetCoordsFunction, err = treeViewStruct.InvokerNew("convert_bin_window_to_widget_coords")
	})
	return err
}

// ConvertBinWindowToWidgetCoords is a representation of the C type gtk_tree_view_convert_bin_window_to_widget_coords.
func (recv *TreeView) ConvertBinWindowToWidgetCoords(bx int32, by int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(bx)
	inArgs[2].SetInt32(by)

	var outArgs [2]gi.Argument

	err := treeViewConvertBinWindowToWidgetCoordsFunction_Set()
	if err == nil {
		treeViewConvertBinWindowToWidgetCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var treeViewConvertTreeToBinWindowCoordsFunction *gi.Function
var treeViewConvertTreeToBinWindowCoordsFunction_Once sync.Once

func treeViewConvertTreeToBinWindowCoordsFunction_Set() error {
	var err error
	treeViewConvertTreeToBinWindowCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertTreeToBinWindowCoordsFunction, err = treeViewStruct.InvokerNew("convert_tree_to_bin_window_coords")
	})
	return err
}

// ConvertTreeToBinWindowCoords is a representation of the C type gtk_tree_view_convert_tree_to_bin_window_coords.
func (recv *TreeView) ConvertTreeToBinWindowCoords(tx int32, ty int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(tx)
	inArgs[2].SetInt32(ty)

	var outArgs [2]gi.Argument

	err := treeViewConvertTreeToBinWindowCoordsFunction_Set()
	if err == nil {
		treeViewConvertTreeToBinWindowCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var treeViewConvertTreeToWidgetCoordsFunction *gi.Function
var treeViewConvertTreeToWidgetCoordsFunction_Once sync.Once

func treeViewConvertTreeToWidgetCoordsFunction_Set() error {
	var err error
	treeViewConvertTreeToWidgetCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertTreeToWidgetCoordsFunction, err = treeViewStruct.InvokerNew("convert_tree_to_widget_coords")
	})
	return err
}

// ConvertTreeToWidgetCoords is a representation of the C type gtk_tree_view_convert_tree_to_widget_coords.
func (recv *TreeView) ConvertTreeToWidgetCoords(tx int32, ty int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(tx)
	inArgs[2].SetInt32(ty)

	var outArgs [2]gi.Argument

	err := treeViewConvertTreeToWidgetCoordsFunction_Set()
	if err == nil {
		treeViewConvertTreeToWidgetCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var treeViewConvertWidgetToBinWindowCoordsFunction *gi.Function
var treeViewConvertWidgetToBinWindowCoordsFunction_Once sync.Once

func treeViewConvertWidgetToBinWindowCoordsFunction_Set() error {
	var err error
	treeViewConvertWidgetToBinWindowCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertWidgetToBinWindowCoordsFunction, err = treeViewStruct.InvokerNew("convert_widget_to_bin_window_coords")
	})
	return err
}

// ConvertWidgetToBinWindowCoords is a representation of the C type gtk_tree_view_convert_widget_to_bin_window_coords.
func (recv *TreeView) ConvertWidgetToBinWindowCoords(wx int32, wy int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(wx)
	inArgs[2].SetInt32(wy)

	var outArgs [2]gi.Argument

	err := treeViewConvertWidgetToBinWindowCoordsFunction_Set()
	if err == nil {
		treeViewConvertWidgetToBinWindowCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var treeViewConvertWidgetToTreeCoordsFunction *gi.Function
var treeViewConvertWidgetToTreeCoordsFunction_Once sync.Once

func treeViewConvertWidgetToTreeCoordsFunction_Set() error {
	var err error
	treeViewConvertWidgetToTreeCoordsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewConvertWidgetToTreeCoordsFunction, err = treeViewStruct.InvokerNew("convert_widget_to_tree_coords")
	})
	return err
}

// ConvertWidgetToTreeCoords is a representation of the C type gtk_tree_view_convert_widget_to_tree_coords.
func (recv *TreeView) ConvertWidgetToTreeCoords(wx int32, wy int32) (int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(wx)
	inArgs[2].SetInt32(wy)

	var outArgs [2]gi.Argument

	err := treeViewConvertWidgetToTreeCoordsFunction_Set()
	if err == nil {
		treeViewConvertWidgetToTreeCoordsFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_tree_view_create_row_drag_icon' : return type 'cairo.Surface' not supported

// UNSUPPORTED : C value 'gtk_tree_view_enable_model_drag_dest' : parameter 'targets' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_view_enable_model_drag_source' : parameter 'start_button_mask' of type 'Gdk.ModifierType' not supported

var treeViewExpandAllFunction *gi.Function
var treeViewExpandAllFunction_Once sync.Once

func treeViewExpandAllFunction_Set() error {
	var err error
	treeViewExpandAllFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewExpandAllFunction, err = treeViewStruct.InvokerNew("expand_all")
	})
	return err
}

// ExpandAll is a representation of the C type gtk_tree_view_expand_all.
func (recv *TreeView) ExpandAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewExpandAllFunction_Set()
	if err == nil {
		treeViewExpandAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewExpandRowFunction *gi.Function
var treeViewExpandRowFunction_Once sync.Once

func treeViewExpandRowFunction_Set() error {
	var err error
	treeViewExpandRowFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewExpandRowFunction, err = treeViewStruct.InvokerNew("expand_row")
	})
	return err
}

// ExpandRow is a representation of the C type gtk_tree_view_expand_row.
func (recv *TreeView) ExpandRow(path *TreePath, openAll bool) bool {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetBoolean(openAll)

	var ret gi.Argument

	err := treeViewExpandRowFunction_Set()
	if err == nil {
		ret = treeViewExpandRowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewExpandToPathFunction *gi.Function
var treeViewExpandToPathFunction_Once sync.Once

func treeViewExpandToPathFunction_Set() error {
	var err error
	treeViewExpandToPathFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewExpandToPathFunction, err = treeViewStruct.InvokerNew("expand_to_path")
	})
	return err
}

// ExpandToPath is a representation of the C type gtk_tree_view_expand_to_path.
func (recv *TreeView) ExpandToPath(path *TreePath) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	err := treeViewExpandToPathFunction_Set()
	if err == nil {
		treeViewExpandToPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewGetActivateOnSingleClickFunction *gi.Function
var treeViewGetActivateOnSingleClickFunction_Once sync.Once

func treeViewGetActivateOnSingleClickFunction_Set() error {
	var err error
	treeViewGetActivateOnSingleClickFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetActivateOnSingleClickFunction, err = treeViewStruct.InvokerNew("get_activate_on_single_click")
	})
	return err
}

// GetActivateOnSingleClick is a representation of the C type gtk_tree_view_get_activate_on_single_click.
func (recv *TreeView) GetActivateOnSingleClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetActivateOnSingleClickFunction_Set()
	if err == nil {
		ret = treeViewGetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_background_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

// UNSUPPORTED : C value 'gtk_tree_view_get_bin_window' : return type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_tree_view_get_cell_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

var treeViewGetColumnFunction *gi.Function
var treeViewGetColumnFunction_Once sync.Once

func treeViewGetColumnFunction_Set() error {
	var err error
	treeViewGetColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetColumnFunction, err = treeViewStruct.InvokerNew("get_column")
	})
	return err
}

// GetColumn is a representation of the C type gtk_tree_view_get_column.
func (recv *TreeView) GetColumn(n int32) *TreeViewColumn {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(n)

	var ret gi.Argument

	err := treeViewGetColumnFunction_Set()
	if err == nil {
		ret = treeViewGetColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreeViewColumn{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_columns' : return type 'GLib.List' not supported

var treeViewGetCursorFunction *gi.Function
var treeViewGetCursorFunction_Once sync.Once

func treeViewGetCursorFunction_Set() error {
	var err error
	treeViewGetCursorFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetCursorFunction, err = treeViewStruct.InvokerNew("get_cursor")
	})
	return err
}

// GetCursor is a representation of the C type gtk_tree_view_get_cursor.
func (recv *TreeView) GetCursor() (*TreePath, *TreeViewColumn) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := treeViewGetCursorFunction_Set()
	if err == nil {
		treeViewGetCursorFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TreeViewColumn{}
	out1.Native = outArgs[1].Pointer()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_tree_view_get_dest_row_at_pos' : parameter 'pos' of type 'TreeViewDropPosition' not supported

// UNSUPPORTED : C value 'gtk_tree_view_get_drag_dest_row' : parameter 'pos' of type 'TreeViewDropPosition' not supported

var treeViewGetEnableSearchFunction *gi.Function
var treeViewGetEnableSearchFunction_Once sync.Once

func treeViewGetEnableSearchFunction_Set() error {
	var err error
	treeViewGetEnableSearchFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetEnableSearchFunction, err = treeViewStruct.InvokerNew("get_enable_search")
	})
	return err
}

// GetEnableSearch is a representation of the C type gtk_tree_view_get_enable_search.
func (recv *TreeView) GetEnableSearch() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetEnableSearchFunction_Set()
	if err == nil {
		ret = treeViewGetEnableSearchFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetEnableTreeLinesFunction *gi.Function
var treeViewGetEnableTreeLinesFunction_Once sync.Once

func treeViewGetEnableTreeLinesFunction_Set() error {
	var err error
	treeViewGetEnableTreeLinesFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetEnableTreeLinesFunction, err = treeViewStruct.InvokerNew("get_enable_tree_lines")
	})
	return err
}

// GetEnableTreeLines is a representation of the C type gtk_tree_view_get_enable_tree_lines.
func (recv *TreeView) GetEnableTreeLines() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetEnableTreeLinesFunction_Set()
	if err == nil {
		ret = treeViewGetEnableTreeLinesFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetExpanderColumnFunction *gi.Function
var treeViewGetExpanderColumnFunction_Once sync.Once

func treeViewGetExpanderColumnFunction_Set() error {
	var err error
	treeViewGetExpanderColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetExpanderColumnFunction, err = treeViewStruct.InvokerNew("get_expander_column")
	})
	return err
}

// GetExpanderColumn is a representation of the C type gtk_tree_view_get_expander_column.
func (recv *TreeView) GetExpanderColumn() *TreeViewColumn {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetExpanderColumnFunction_Set()
	if err == nil {
		ret = treeViewGetExpanderColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreeViewColumn{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewGetFixedHeightModeFunction *gi.Function
var treeViewGetFixedHeightModeFunction_Once sync.Once

func treeViewGetFixedHeightModeFunction_Set() error {
	var err error
	treeViewGetFixedHeightModeFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetFixedHeightModeFunction, err = treeViewStruct.InvokerNew("get_fixed_height_mode")
	})
	return err
}

// GetFixedHeightMode is a representation of the C type gtk_tree_view_get_fixed_height_mode.
func (recv *TreeView) GetFixedHeightMode() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetFixedHeightModeFunction_Set()
	if err == nil {
		ret = treeViewGetFixedHeightModeFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_grid_lines' : return type 'TreeViewGridLines' not supported

var treeViewGetHadjustmentFunction *gi.Function
var treeViewGetHadjustmentFunction_Once sync.Once

func treeViewGetHadjustmentFunction_Set() error {
	var err error
	treeViewGetHadjustmentFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetHadjustmentFunction, err = treeViewStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_tree_view_get_hadjustment.
func (recv *TreeView) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetHadjustmentFunction_Set()
	if err == nil {
		ret = treeViewGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewGetHeadersClickableFunction *gi.Function
var treeViewGetHeadersClickableFunction_Once sync.Once

func treeViewGetHeadersClickableFunction_Set() error {
	var err error
	treeViewGetHeadersClickableFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetHeadersClickableFunction, err = treeViewStruct.InvokerNew("get_headers_clickable")
	})
	return err
}

// GetHeadersClickable is a representation of the C type gtk_tree_view_get_headers_clickable.
func (recv *TreeView) GetHeadersClickable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetHeadersClickableFunction_Set()
	if err == nil {
		ret = treeViewGetHeadersClickableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetHeadersVisibleFunction *gi.Function
var treeViewGetHeadersVisibleFunction_Once sync.Once

func treeViewGetHeadersVisibleFunction_Set() error {
	var err error
	treeViewGetHeadersVisibleFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetHeadersVisibleFunction, err = treeViewStruct.InvokerNew("get_headers_visible")
	})
	return err
}

// GetHeadersVisible is a representation of the C type gtk_tree_view_get_headers_visible.
func (recv *TreeView) GetHeadersVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetHeadersVisibleFunction_Set()
	if err == nil {
		ret = treeViewGetHeadersVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetHoverExpandFunction *gi.Function
var treeViewGetHoverExpandFunction_Once sync.Once

func treeViewGetHoverExpandFunction_Set() error {
	var err error
	treeViewGetHoverExpandFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetHoverExpandFunction, err = treeViewStruct.InvokerNew("get_hover_expand")
	})
	return err
}

// GetHoverExpand is a representation of the C type gtk_tree_view_get_hover_expand.
func (recv *TreeView) GetHoverExpand() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetHoverExpandFunction_Set()
	if err == nil {
		ret = treeViewGetHoverExpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetHoverSelectionFunction *gi.Function
var treeViewGetHoverSelectionFunction_Once sync.Once

func treeViewGetHoverSelectionFunction_Set() error {
	var err error
	treeViewGetHoverSelectionFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetHoverSelectionFunction, err = treeViewStruct.InvokerNew("get_hover_selection")
	})
	return err
}

// GetHoverSelection is a representation of the C type gtk_tree_view_get_hover_selection.
func (recv *TreeView) GetHoverSelection() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetHoverSelectionFunction_Set()
	if err == nil {
		ret = treeViewGetHoverSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetLevelIndentationFunction *gi.Function
var treeViewGetLevelIndentationFunction_Once sync.Once

func treeViewGetLevelIndentationFunction_Set() error {
	var err error
	treeViewGetLevelIndentationFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetLevelIndentationFunction, err = treeViewStruct.InvokerNew("get_level_indentation")
	})
	return err
}

// GetLevelIndentation is a representation of the C type gtk_tree_view_get_level_indentation.
func (recv *TreeView) GetLevelIndentation() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetLevelIndentationFunction_Set()
	if err == nil {
		ret = treeViewGetLevelIndentationFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_model' : return type 'TreeModel' not supported

var treeViewGetNColumnsFunction *gi.Function
var treeViewGetNColumnsFunction_Once sync.Once

func treeViewGetNColumnsFunction_Set() error {
	var err error
	treeViewGetNColumnsFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetNColumnsFunction, err = treeViewStruct.InvokerNew("get_n_columns")
	})
	return err
}

// GetNColumns is a representation of the C type gtk_tree_view_get_n_columns.
func (recv *TreeView) GetNColumns() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetNColumnsFunction_Set()
	if err == nil {
		ret = treeViewGetNColumnsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var treeViewGetPathAtPosFunction *gi.Function
var treeViewGetPathAtPosFunction_Once sync.Once

func treeViewGetPathAtPosFunction_Set() error {
	var err error
	treeViewGetPathAtPosFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetPathAtPosFunction, err = treeViewStruct.InvokerNew("get_path_at_pos")
	})
	return err
}

// GetPathAtPos is a representation of the C type gtk_tree_view_get_path_at_pos.
func (recv *TreeView) GetPathAtPos(x int32, y int32) (bool, *TreePath, *TreeViewColumn, int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var outArgs [4]gi.Argument
	var ret gi.Argument

	err := treeViewGetPathAtPosFunction_Set()
	if err == nil {
		ret = treeViewGetPathAtPosFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TreeViewColumn{}
	out1.Native = outArgs[1].Pointer()
	out2 := outArgs[2].Int32()
	out3 := outArgs[3].Int32()

	return retGo, out0, out1, out2, out3
}

var treeViewGetReorderableFunction *gi.Function
var treeViewGetReorderableFunction_Once sync.Once

func treeViewGetReorderableFunction_Set() error {
	var err error
	treeViewGetReorderableFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetReorderableFunction, err = treeViewStruct.InvokerNew("get_reorderable")
	})
	return err
}

// GetReorderable is a representation of the C type gtk_tree_view_get_reorderable.
func (recv *TreeView) GetReorderable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetReorderableFunction_Set()
	if err == nil {
		ret = treeViewGetReorderableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_row_separator_func' : return type 'TreeViewRowSeparatorFunc' not supported

var treeViewGetRubberBandingFunction *gi.Function
var treeViewGetRubberBandingFunction_Once sync.Once

func treeViewGetRubberBandingFunction_Set() error {
	var err error
	treeViewGetRubberBandingFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetRubberBandingFunction, err = treeViewStruct.InvokerNew("get_rubber_banding")
	})
	return err
}

// GetRubberBanding is a representation of the C type gtk_tree_view_get_rubber_banding.
func (recv *TreeView) GetRubberBanding() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetRubberBandingFunction_Set()
	if err == nil {
		ret = treeViewGetRubberBandingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetRulesHintFunction *gi.Function
var treeViewGetRulesHintFunction_Once sync.Once

func treeViewGetRulesHintFunction_Set() error {
	var err error
	treeViewGetRulesHintFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetRulesHintFunction, err = treeViewStruct.InvokerNew("get_rules_hint")
	})
	return err
}

// GetRulesHint is a representation of the C type gtk_tree_view_get_rules_hint.
func (recv *TreeView) GetRulesHint() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetRulesHintFunction_Set()
	if err == nil {
		ret = treeViewGetRulesHintFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetSearchColumnFunction *gi.Function
var treeViewGetSearchColumnFunction_Once sync.Once

func treeViewGetSearchColumnFunction_Set() error {
	var err error
	treeViewGetSearchColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetSearchColumnFunction, err = treeViewStruct.InvokerNew("get_search_column")
	})
	return err
}

// GetSearchColumn is a representation of the C type gtk_tree_view_get_search_column.
func (recv *TreeView) GetSearchColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetSearchColumnFunction_Set()
	if err == nil {
		ret = treeViewGetSearchColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewGetSearchEntryFunction *gi.Function
var treeViewGetSearchEntryFunction_Once sync.Once

func treeViewGetSearchEntryFunction_Set() error {
	var err error
	treeViewGetSearchEntryFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetSearchEntryFunction, err = treeViewStruct.InvokerNew("get_search_entry")
	})
	return err
}

// GetSearchEntry is a representation of the C type gtk_tree_view_get_search_entry.
func (recv *TreeView) GetSearchEntry() *Entry {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetSearchEntryFunction_Set()
	if err == nil {
		ret = treeViewGetSearchEntryFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Entry{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_search_equal_func' : return type 'TreeViewSearchEqualFunc' not supported

// UNSUPPORTED : C value 'gtk_tree_view_get_search_position_func' : return type 'TreeViewSearchPositionFunc' not supported

var treeViewGetSelectionFunction *gi.Function
var treeViewGetSelectionFunction_Once sync.Once

func treeViewGetSelectionFunction_Set() error {
	var err error
	treeViewGetSelectionFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetSelectionFunction, err = treeViewStruct.InvokerNew("get_selection")
	})
	return err
}

// GetSelection is a representation of the C type gtk_tree_view_get_selection.
func (recv *TreeView) GetSelection() *TreeSelection {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetSelectionFunction_Set()
	if err == nil {
		ret = treeViewGetSelectionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreeSelection{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewGetShowExpandersFunction *gi.Function
var treeViewGetShowExpandersFunction_Once sync.Once

func treeViewGetShowExpandersFunction_Set() error {
	var err error
	treeViewGetShowExpandersFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetShowExpandersFunction, err = treeViewStruct.InvokerNew("get_show_expanders")
	})
	return err
}

// GetShowExpanders is a representation of the C type gtk_tree_view_get_show_expanders.
func (recv *TreeView) GetShowExpanders() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetShowExpandersFunction_Set()
	if err == nil {
		ret = treeViewGetShowExpandersFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewGetTooltipColumnFunction *gi.Function
var treeViewGetTooltipColumnFunction_Once sync.Once

func treeViewGetTooltipColumnFunction_Set() error {
	var err error
	treeViewGetTooltipColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetTooltipColumnFunction, err = treeViewStruct.InvokerNew("get_tooltip_column")
	})
	return err
}

// GetTooltipColumn is a representation of the C type gtk_tree_view_get_tooltip_column.
func (recv *TreeView) GetTooltipColumn() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetTooltipColumnFunction_Set()
	if err == nil {
		ret = treeViewGetTooltipColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_get_tooltip_context' : parameter 'model' of type 'TreeModel' not supported

var treeViewGetVadjustmentFunction *gi.Function
var treeViewGetVadjustmentFunction_Once sync.Once

func treeViewGetVadjustmentFunction_Set() error {
	var err error
	treeViewGetVadjustmentFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetVadjustmentFunction, err = treeViewStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_tree_view_get_vadjustment.
func (recv *TreeView) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewGetVadjustmentFunction_Set()
	if err == nil {
		ret = treeViewGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewGetVisibleRangeFunction *gi.Function
var treeViewGetVisibleRangeFunction_Once sync.Once

func treeViewGetVisibleRangeFunction_Set() error {
	var err error
	treeViewGetVisibleRangeFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewGetVisibleRangeFunction, err = treeViewStruct.InvokerNew("get_visible_range")
	})
	return err
}

// GetVisibleRange is a representation of the C type gtk_tree_view_get_visible_range.
func (recv *TreeView) GetVisibleRange() (bool, *TreePath, *TreePath) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := treeViewGetVisibleRangeFunction_Set()
	if err == nil {
		ret = treeViewGetVisibleRangeFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TreePath{}
	out1.Native = outArgs[1].Pointer()

	return retGo, out0, out1
}

// UNSUPPORTED : C value 'gtk_tree_view_get_visible_rect' : parameter 'visible_rect' of type 'Gdk.Rectangle' not supported

var treeViewInsertColumnFunction *gi.Function
var treeViewInsertColumnFunction_Once sync.Once

func treeViewInsertColumnFunction_Set() error {
	var err error
	treeViewInsertColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewInsertColumnFunction, err = treeViewStruct.InvokerNew("insert_column")
	})
	return err
}

// InsertColumn is a representation of the C type gtk_tree_view_insert_column.
func (recv *TreeView) InsertColumn(column *TreeViewColumn, position int32) int32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(column.Native)
	inArgs[2].SetInt32(position)

	var ret gi.Argument

	err := treeViewInsertColumnFunction_Set()
	if err == nil {
		ret = treeViewInsertColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_insert_column_with_attributes' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_view_insert_column_with_data_func' : parameter 'func' of type 'TreeCellDataFunc' not supported

var treeViewIsBlankAtPosFunction *gi.Function
var treeViewIsBlankAtPosFunction_Once sync.Once

func treeViewIsBlankAtPosFunction_Set() error {
	var err error
	treeViewIsBlankAtPosFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewIsBlankAtPosFunction, err = treeViewStruct.InvokerNew("is_blank_at_pos")
	})
	return err
}

// IsBlankAtPos is a representation of the C type gtk_tree_view_is_blank_at_pos.
func (recv *TreeView) IsBlankAtPos(x int32, y int32) (bool, *TreePath, *TreeViewColumn, int32, int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	var outArgs [4]gi.Argument
	var ret gi.Argument

	err := treeViewIsBlankAtPosFunction_Set()
	if err == nil {
		ret = treeViewIsBlankAtPosFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := &TreePath{}
	out0.Native = outArgs[0].Pointer()
	out1 := &TreeViewColumn{}
	out1.Native = outArgs[1].Pointer()
	out2 := outArgs[2].Int32()
	out3 := outArgs[3].Int32()

	return retGo, out0, out1, out2, out3
}

var treeViewIsRubberBandingActiveFunction *gi.Function
var treeViewIsRubberBandingActiveFunction_Once sync.Once

func treeViewIsRubberBandingActiveFunction_Set() error {
	var err error
	treeViewIsRubberBandingActiveFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewIsRubberBandingActiveFunction, err = treeViewStruct.InvokerNew("is_rubber_banding_active")
	})
	return err
}

// IsRubberBandingActive is a representation of the C type gtk_tree_view_is_rubber_banding_active.
func (recv *TreeView) IsRubberBandingActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewIsRubberBandingActiveFunction_Set()
	if err == nil {
		ret = treeViewIsRubberBandingActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_map_expanded_rows' : parameter 'func' of type 'TreeViewMappingFunc' not supported

var treeViewMoveColumnAfterFunction *gi.Function
var treeViewMoveColumnAfterFunction_Once sync.Once

func treeViewMoveColumnAfterFunction_Set() error {
	var err error
	treeViewMoveColumnAfterFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewMoveColumnAfterFunction, err = treeViewStruct.InvokerNew("move_column_after")
	})
	return err
}

// MoveColumnAfter is a representation of the C type gtk_tree_view_move_column_after.
func (recv *TreeView) MoveColumnAfter(column *TreeViewColumn, baseColumn *TreeViewColumn) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(column.Native)
	inArgs[2].SetPointer(baseColumn.Native)

	err := treeViewMoveColumnAfterFunction_Set()
	if err == nil {
		treeViewMoveColumnAfterFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewRemoveColumnFunction *gi.Function
var treeViewRemoveColumnFunction_Once sync.Once

func treeViewRemoveColumnFunction_Set() error {
	var err error
	treeViewRemoveColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewRemoveColumnFunction, err = treeViewStruct.InvokerNew("remove_column")
	})
	return err
}

// RemoveColumn is a representation of the C type gtk_tree_view_remove_column.
func (recv *TreeView) RemoveColumn(column *TreeViewColumn) int32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(column.Native)

	var ret gi.Argument

	err := treeViewRemoveColumnFunction_Set()
	if err == nil {
		ret = treeViewRemoveColumnFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewRowActivatedFunction *gi.Function
var treeViewRowActivatedFunction_Once sync.Once

func treeViewRowActivatedFunction_Set() error {
	var err error
	treeViewRowActivatedFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewRowActivatedFunction, err = treeViewStruct.InvokerNew("row_activated")
	})
	return err
}

// RowActivated is a representation of the C type gtk_tree_view_row_activated.
func (recv *TreeView) RowActivated(path *TreePath, column *TreeViewColumn) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetPointer(column.Native)

	err := treeViewRowActivatedFunction_Set()
	if err == nil {
		treeViewRowActivatedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewRowExpandedFunction *gi.Function
var treeViewRowExpandedFunction_Once sync.Once

func treeViewRowExpandedFunction_Set() error {
	var err error
	treeViewRowExpandedFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewRowExpandedFunction, err = treeViewStruct.InvokerNew("row_expanded")
	})
	return err
}

// RowExpanded is a representation of the C type gtk_tree_view_row_expanded.
func (recv *TreeView) RowExpanded(path *TreePath) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)

	var ret gi.Argument

	err := treeViewRowExpandedFunction_Set()
	if err == nil {
		ret = treeViewRowExpandedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewScrollToCellFunction *gi.Function
var treeViewScrollToCellFunction_Once sync.Once

func treeViewScrollToCellFunction_Set() error {
	var err error
	treeViewScrollToCellFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewScrollToCellFunction, err = treeViewStruct.InvokerNew("scroll_to_cell")
	})
	return err
}

// ScrollToCell is a representation of the C type gtk_tree_view_scroll_to_cell.
func (recv *TreeView) ScrollToCell(path *TreePath, column *TreeViewColumn, useAlign bool, rowAlign float32, colAlign float32) {
	var inArgs [6]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetPointer(column.Native)
	inArgs[3].SetBoolean(useAlign)
	inArgs[4].SetFloat32(rowAlign)
	inArgs[5].SetFloat32(colAlign)

	err := treeViewScrollToCellFunction_Set()
	if err == nil {
		treeViewScrollToCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewScrollToPointFunction *gi.Function
var treeViewScrollToPointFunction_Once sync.Once

func treeViewScrollToPointFunction_Set() error {
	var err error
	treeViewScrollToPointFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewScrollToPointFunction, err = treeViewStruct.InvokerNew("scroll_to_point")
	})
	return err
}

// ScrollToPoint is a representation of the C type gtk_tree_view_scroll_to_point.
func (recv *TreeView) ScrollToPoint(treeX int32, treeY int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(treeX)
	inArgs[2].SetInt32(treeY)

	err := treeViewScrollToPointFunction_Set()
	if err == nil {
		treeViewScrollToPointFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetActivateOnSingleClickFunction *gi.Function
var treeViewSetActivateOnSingleClickFunction_Once sync.Once

func treeViewSetActivateOnSingleClickFunction_Set() error {
	var err error
	treeViewSetActivateOnSingleClickFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetActivateOnSingleClickFunction, err = treeViewStruct.InvokerNew("set_activate_on_single_click")
	})
	return err
}

// SetActivateOnSingleClick is a representation of the C type gtk_tree_view_set_activate_on_single_click.
func (recv *TreeView) SetActivateOnSingleClick(single bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(single)

	err := treeViewSetActivateOnSingleClickFunction_Set()
	if err == nil {
		treeViewSetActivateOnSingleClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_column_drag_function' : parameter 'func' of type 'TreeViewColumnDropFunc' not supported

var treeViewSetCursorFunction *gi.Function
var treeViewSetCursorFunction_Once sync.Once

func treeViewSetCursorFunction_Set() error {
	var err error
	treeViewSetCursorFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetCursorFunction, err = treeViewStruct.InvokerNew("set_cursor")
	})
	return err
}

// SetCursor is a representation of the C type gtk_tree_view_set_cursor.
func (recv *TreeView) SetCursor(path *TreePath, focusColumn *TreeViewColumn, startEditing bool) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetPointer(focusColumn.Native)
	inArgs[3].SetBoolean(startEditing)

	err := treeViewSetCursorFunction_Set()
	if err == nil {
		treeViewSetCursorFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetCursorOnCellFunction *gi.Function
var treeViewSetCursorOnCellFunction_Once sync.Once

func treeViewSetCursorOnCellFunction_Set() error {
	var err error
	treeViewSetCursorOnCellFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetCursorOnCellFunction, err = treeViewStruct.InvokerNew("set_cursor_on_cell")
	})
	return err
}

// SetCursorOnCell is a representation of the C type gtk_tree_view_set_cursor_on_cell.
func (recv *TreeView) SetCursorOnCell(path *TreePath, focusColumn *TreeViewColumn, focusCell *CellRenderer, startEditing bool) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(path.Native)
	inArgs[2].SetPointer(focusColumn.Native)
	inArgs[3].SetPointer(focusCell.Native)
	inArgs[4].SetBoolean(startEditing)

	err := treeViewSetCursorOnCellFunction_Set()
	if err == nil {
		treeViewSetCursorOnCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_destroy_count_func' : parameter 'func' of type 'TreeDestroyCountFunc' not supported

// UNSUPPORTED : C value 'gtk_tree_view_set_drag_dest_row' : parameter 'pos' of type 'TreeViewDropPosition' not supported

var treeViewSetEnableSearchFunction *gi.Function
var treeViewSetEnableSearchFunction_Once sync.Once

func treeViewSetEnableSearchFunction_Set() error {
	var err error
	treeViewSetEnableSearchFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetEnableSearchFunction, err = treeViewStruct.InvokerNew("set_enable_search")
	})
	return err
}

// SetEnableSearch is a representation of the C type gtk_tree_view_set_enable_search.
func (recv *TreeView) SetEnableSearch(enableSearch bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(enableSearch)

	err := treeViewSetEnableSearchFunction_Set()
	if err == nil {
		treeViewSetEnableSearchFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetEnableTreeLinesFunction *gi.Function
var treeViewSetEnableTreeLinesFunction_Once sync.Once

func treeViewSetEnableTreeLinesFunction_Set() error {
	var err error
	treeViewSetEnableTreeLinesFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetEnableTreeLinesFunction, err = treeViewStruct.InvokerNew("set_enable_tree_lines")
	})
	return err
}

// SetEnableTreeLines is a representation of the C type gtk_tree_view_set_enable_tree_lines.
func (recv *TreeView) SetEnableTreeLines(enabled bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(enabled)

	err := treeViewSetEnableTreeLinesFunction_Set()
	if err == nil {
		treeViewSetEnableTreeLinesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetExpanderColumnFunction *gi.Function
var treeViewSetExpanderColumnFunction_Once sync.Once

func treeViewSetExpanderColumnFunction_Set() error {
	var err error
	treeViewSetExpanderColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetExpanderColumnFunction, err = treeViewStruct.InvokerNew("set_expander_column")
	})
	return err
}

// SetExpanderColumn is a representation of the C type gtk_tree_view_set_expander_column.
func (recv *TreeView) SetExpanderColumn(column *TreeViewColumn) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(column.Native)

	err := treeViewSetExpanderColumnFunction_Set()
	if err == nil {
		treeViewSetExpanderColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetFixedHeightModeFunction *gi.Function
var treeViewSetFixedHeightModeFunction_Once sync.Once

func treeViewSetFixedHeightModeFunction_Set() error {
	var err error
	treeViewSetFixedHeightModeFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetFixedHeightModeFunction, err = treeViewStruct.InvokerNew("set_fixed_height_mode")
	})
	return err
}

// SetFixedHeightMode is a representation of the C type gtk_tree_view_set_fixed_height_mode.
func (recv *TreeView) SetFixedHeightMode(enable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(enable)

	err := treeViewSetFixedHeightModeFunction_Set()
	if err == nil {
		treeViewSetFixedHeightModeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_grid_lines' : parameter 'grid_lines' of type 'TreeViewGridLines' not supported

var treeViewSetHadjustmentFunction *gi.Function
var treeViewSetHadjustmentFunction_Once sync.Once

func treeViewSetHadjustmentFunction_Set() error {
	var err error
	treeViewSetHadjustmentFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetHadjustmentFunction, err = treeViewStruct.InvokerNew("set_hadjustment")
	})
	return err
}

// SetHadjustment is a representation of the C type gtk_tree_view_set_hadjustment.
func (recv *TreeView) SetHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := treeViewSetHadjustmentFunction_Set()
	if err == nil {
		treeViewSetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetHeadersClickableFunction *gi.Function
var treeViewSetHeadersClickableFunction_Once sync.Once

func treeViewSetHeadersClickableFunction_Set() error {
	var err error
	treeViewSetHeadersClickableFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetHeadersClickableFunction, err = treeViewStruct.InvokerNew("set_headers_clickable")
	})
	return err
}

// SetHeadersClickable is a representation of the C type gtk_tree_view_set_headers_clickable.
func (recv *TreeView) SetHeadersClickable(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := treeViewSetHeadersClickableFunction_Set()
	if err == nil {
		treeViewSetHeadersClickableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetHeadersVisibleFunction *gi.Function
var treeViewSetHeadersVisibleFunction_Once sync.Once

func treeViewSetHeadersVisibleFunction_Set() error {
	var err error
	treeViewSetHeadersVisibleFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetHeadersVisibleFunction, err = treeViewStruct.InvokerNew("set_headers_visible")
	})
	return err
}

// SetHeadersVisible is a representation of the C type gtk_tree_view_set_headers_visible.
func (recv *TreeView) SetHeadersVisible(headersVisible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(headersVisible)

	err := treeViewSetHeadersVisibleFunction_Set()
	if err == nil {
		treeViewSetHeadersVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetHoverExpandFunction *gi.Function
var treeViewSetHoverExpandFunction_Once sync.Once

func treeViewSetHoverExpandFunction_Set() error {
	var err error
	treeViewSetHoverExpandFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetHoverExpandFunction, err = treeViewStruct.InvokerNew("set_hover_expand")
	})
	return err
}

// SetHoverExpand is a representation of the C type gtk_tree_view_set_hover_expand.
func (recv *TreeView) SetHoverExpand(expand bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expand)

	err := treeViewSetHoverExpandFunction_Set()
	if err == nil {
		treeViewSetHoverExpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetHoverSelectionFunction *gi.Function
var treeViewSetHoverSelectionFunction_Once sync.Once

func treeViewSetHoverSelectionFunction_Set() error {
	var err error
	treeViewSetHoverSelectionFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetHoverSelectionFunction, err = treeViewStruct.InvokerNew("set_hover_selection")
	})
	return err
}

// SetHoverSelection is a representation of the C type gtk_tree_view_set_hover_selection.
func (recv *TreeView) SetHoverSelection(hover bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hover)

	err := treeViewSetHoverSelectionFunction_Set()
	if err == nil {
		treeViewSetHoverSelectionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetLevelIndentationFunction *gi.Function
var treeViewSetLevelIndentationFunction_Once sync.Once

func treeViewSetLevelIndentationFunction_Set() error {
	var err error
	treeViewSetLevelIndentationFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetLevelIndentationFunction, err = treeViewStruct.InvokerNew("set_level_indentation")
	})
	return err
}

// SetLevelIndentation is a representation of the C type gtk_tree_view_set_level_indentation.
func (recv *TreeView) SetLevelIndentation(indentation int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(indentation)

	err := treeViewSetLevelIndentationFunction_Set()
	if err == nil {
		treeViewSetLevelIndentationFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_model' : parameter 'model' of type 'TreeModel' not supported

var treeViewSetReorderableFunction *gi.Function
var treeViewSetReorderableFunction_Once sync.Once

func treeViewSetReorderableFunction_Set() error {
	var err error
	treeViewSetReorderableFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetReorderableFunction, err = treeViewStruct.InvokerNew("set_reorderable")
	})
	return err
}

// SetReorderable is a representation of the C type gtk_tree_view_set_reorderable.
func (recv *TreeView) SetReorderable(reorderable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reorderable)

	err := treeViewSetReorderableFunction_Set()
	if err == nil {
		treeViewSetReorderableFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_row_separator_func' : parameter 'func' of type 'TreeViewRowSeparatorFunc' not supported

var treeViewSetRubberBandingFunction *gi.Function
var treeViewSetRubberBandingFunction_Once sync.Once

func treeViewSetRubberBandingFunction_Set() error {
	var err error
	treeViewSetRubberBandingFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetRubberBandingFunction, err = treeViewStruct.InvokerNew("set_rubber_banding")
	})
	return err
}

// SetRubberBanding is a representation of the C type gtk_tree_view_set_rubber_banding.
func (recv *TreeView) SetRubberBanding(enable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(enable)

	err := treeViewSetRubberBandingFunction_Set()
	if err == nil {
		treeViewSetRubberBandingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetRulesHintFunction *gi.Function
var treeViewSetRulesHintFunction_Once sync.Once

func treeViewSetRulesHintFunction_Set() error {
	var err error
	treeViewSetRulesHintFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetRulesHintFunction, err = treeViewStruct.InvokerNew("set_rules_hint")
	})
	return err
}

// SetRulesHint is a representation of the C type gtk_tree_view_set_rules_hint.
func (recv *TreeView) SetRulesHint(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := treeViewSetRulesHintFunction_Set()
	if err == nil {
		treeViewSetRulesHintFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetSearchColumnFunction *gi.Function
var treeViewSetSearchColumnFunction_Once sync.Once

func treeViewSetSearchColumnFunction_Set() error {
	var err error
	treeViewSetSearchColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetSearchColumnFunction, err = treeViewStruct.InvokerNew("set_search_column")
	})
	return err
}

// SetSearchColumn is a representation of the C type gtk_tree_view_set_search_column.
func (recv *TreeView) SetSearchColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := treeViewSetSearchColumnFunction_Set()
	if err == nil {
		treeViewSetSearchColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetSearchEntryFunction *gi.Function
var treeViewSetSearchEntryFunction_Once sync.Once

func treeViewSetSearchEntryFunction_Set() error {
	var err error
	treeViewSetSearchEntryFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetSearchEntryFunction, err = treeViewStruct.InvokerNew("set_search_entry")
	})
	return err
}

// SetSearchEntry is a representation of the C type gtk_tree_view_set_search_entry.
func (recv *TreeView) SetSearchEntry(entry *Entry) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(entry.Native)

	err := treeViewSetSearchEntryFunction_Set()
	if err == nil {
		treeViewSetSearchEntryFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_set_search_equal_func' : parameter 'search_equal_func' of type 'TreeViewSearchEqualFunc' not supported

// UNSUPPORTED : C value 'gtk_tree_view_set_search_position_func' : parameter 'func' of type 'TreeViewSearchPositionFunc' not supported

var treeViewSetShowExpandersFunction *gi.Function
var treeViewSetShowExpandersFunction_Once sync.Once

func treeViewSetShowExpandersFunction_Set() error {
	var err error
	treeViewSetShowExpandersFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetShowExpandersFunction, err = treeViewStruct.InvokerNew("set_show_expanders")
	})
	return err
}

// SetShowExpanders is a representation of the C type gtk_tree_view_set_show_expanders.
func (recv *TreeView) SetShowExpanders(enabled bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(enabled)

	err := treeViewSetShowExpandersFunction_Set()
	if err == nil {
		treeViewSetShowExpandersFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetTooltipCellFunction *gi.Function
var treeViewSetTooltipCellFunction_Once sync.Once

func treeViewSetTooltipCellFunction_Set() error {
	var err error
	treeViewSetTooltipCellFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetTooltipCellFunction, err = treeViewStruct.InvokerNew("set_tooltip_cell")
	})
	return err
}

// SetTooltipCell is a representation of the C type gtk_tree_view_set_tooltip_cell.
func (recv *TreeView) SetTooltipCell(tooltip *Tooltip, path *TreePath, column *TreeViewColumn, cell *CellRenderer) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tooltip.Native)
	inArgs[2].SetPointer(path.Native)
	inArgs[3].SetPointer(column.Native)
	inArgs[4].SetPointer(cell.Native)

	err := treeViewSetTooltipCellFunction_Set()
	if err == nil {
		treeViewSetTooltipCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetTooltipColumnFunction *gi.Function
var treeViewSetTooltipColumnFunction_Once sync.Once

func treeViewSetTooltipColumnFunction_Set() error {
	var err error
	treeViewSetTooltipColumnFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetTooltipColumnFunction, err = treeViewStruct.InvokerNew("set_tooltip_column")
	})
	return err
}

// SetTooltipColumn is a representation of the C type gtk_tree_view_set_tooltip_column.
func (recv *TreeView) SetTooltipColumn(column int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(column)

	err := treeViewSetTooltipColumnFunction_Set()
	if err == nil {
		treeViewSetTooltipColumnFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetTooltipRowFunction *gi.Function
var treeViewSetTooltipRowFunction_Once sync.Once

func treeViewSetTooltipRowFunction_Set() error {
	var err error
	treeViewSetTooltipRowFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetTooltipRowFunction, err = treeViewStruct.InvokerNew("set_tooltip_row")
	})
	return err
}

// SetTooltipRow is a representation of the C type gtk_tree_view_set_tooltip_row.
func (recv *TreeView) SetTooltipRow(tooltip *Tooltip, path *TreePath) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(tooltip.Native)
	inArgs[2].SetPointer(path.Native)

	err := treeViewSetTooltipRowFunction_Set()
	if err == nil {
		treeViewSetTooltipRowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewSetVadjustmentFunction *gi.Function
var treeViewSetVadjustmentFunction_Once sync.Once

func treeViewSetVadjustmentFunction_Set() error {
	var err error
	treeViewSetVadjustmentFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewSetVadjustmentFunction, err = treeViewStruct.InvokerNew("set_vadjustment")
	})
	return err
}

// SetVadjustment is a representation of the C type gtk_tree_view_set_vadjustment.
func (recv *TreeView) SetVadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := treeViewSetVadjustmentFunction_Set()
	if err == nil {
		treeViewSetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewUnsetRowsDragDestFunction *gi.Function
var treeViewUnsetRowsDragDestFunction_Once sync.Once

func treeViewUnsetRowsDragDestFunction_Set() error {
	var err error
	treeViewUnsetRowsDragDestFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewUnsetRowsDragDestFunction, err = treeViewStruct.InvokerNew("unset_rows_drag_dest")
	})
	return err
}

// UnsetRowsDragDest is a representation of the C type gtk_tree_view_unset_rows_drag_dest.
func (recv *TreeView) UnsetRowsDragDest() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewUnsetRowsDragDestFunction_Set()
	if err == nil {
		treeViewUnsetRowsDragDestFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewUnsetRowsDragSourceFunction *gi.Function
var treeViewUnsetRowsDragSourceFunction_Once sync.Once

func treeViewUnsetRowsDragSourceFunction_Set() error {
	var err error
	treeViewUnsetRowsDragSourceFunction_Once.Do(func() {
		err = treeViewStruct_Set()
		if err != nil {
			return
		}
		treeViewUnsetRowsDragSourceFunction, err = treeViewStruct.InvokerNew("unset_rows_drag_source")
	})
	return err
}

// UnsetRowsDragSource is a representation of the C type gtk_tree_view_unset_rows_drag_source.
func (recv *TreeView) UnsetRowsDragSource() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewUnsetRowsDragSourceFunction_Set()
	if err == nil {
		treeViewUnsetRowsDragSourceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewAccessibleStruct *gi.Struct
var treeViewAccessibleStruct_Once sync.Once

func treeViewAccessibleStruct_Set() error {
	var err error
	treeViewAccessibleStruct_Once.Do(func() {
		treeViewAccessibleStruct, err = gi.StructNew("Gtk", "TreeViewAccessible")
	})
	return err
}

type TreeViewAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *TreeViewAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(treeViewAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *TreeViewAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(treeViewAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *TreeViewAccessible) FieldPriv() *TreeViewAccessiblePrivate {
	argValue := gi.FieldGet(treeViewAccessibleStruct, recv.Native, "priv")
	value := &TreeViewAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TreeViewAccessible) SetFieldPriv(value *TreeViewAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(treeViewAccessibleStruct, recv.Native, "priv", argValue)
}

// TreeViewAccessibleStruct creates an uninitialised TreeViewAccessible.
func TreeViewAccessibleStruct() *TreeViewAccessible {
	err := treeViewAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &TreeViewAccessible{}
	structGo.Native = treeViewAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeTreeViewAccessible)
	return structGo
}
func finalizeTreeViewAccessible(obj *TreeViewAccessible) {
	treeViewAccessibleStruct.Free(obj.Native)
}

var treeViewColumnStruct *gi.Struct
var treeViewColumnStruct_Once sync.Once

func treeViewColumnStruct_Set() error {
	var err error
	treeViewColumnStruct_Once.Do(func() {
		treeViewColumnStruct, err = gi.StructNew("Gtk", "TreeViewColumn")
	})
	return err
}

type TreeViewColumn struct {
	gobject.InitiallyUnowned
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.InitiallyUnowned'

// FieldPriv returns the C field 'priv'.
func (recv *TreeViewColumn) FieldPriv() *TreeViewColumnPrivate {
	argValue := gi.FieldGet(treeViewColumnStruct, recv.Native, "priv")
	value := &TreeViewColumnPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *TreeViewColumn) SetFieldPriv(value *TreeViewColumnPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(treeViewColumnStruct, recv.Native, "priv", argValue)
}

var treeViewColumnNewFunction *gi.Function
var treeViewColumnNewFunction_Once sync.Once

func treeViewColumnNewFunction_Set() error {
	var err error
	treeViewColumnNewFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnNewFunction, err = treeViewColumnStruct.InvokerNew("new")
	})
	return err
}

// TreeViewColumnNew is a representation of the C type gtk_tree_view_column_new.
func TreeViewColumnNew() *TreeViewColumn {

	var ret gi.Argument

	err := treeViewColumnNewFunction_Set()
	if err == nil {
		ret = treeViewColumnNewFunction.Invoke(nil, nil)
	}

	retGo := &TreeViewColumn{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewColumnNewWithAreaFunction *gi.Function
var treeViewColumnNewWithAreaFunction_Once sync.Once

func treeViewColumnNewWithAreaFunction_Set() error {
	var err error
	treeViewColumnNewWithAreaFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnNewWithAreaFunction, err = treeViewColumnStruct.InvokerNew("new_with_area")
	})
	return err
}

// TreeViewColumnNewWithArea is a representation of the C type gtk_tree_view_column_new_with_area.
func TreeViewColumnNewWithArea(area *CellArea) *TreeViewColumn {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(area.Native)

	var ret gi.Argument

	err := treeViewColumnNewWithAreaFunction_Set()
	if err == nil {
		ret = treeViewColumnNewWithAreaFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TreeViewColumn{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_column_new_with_attributes' : parameter '...' of type 'nil' not supported

var treeViewColumnAddAttributeFunction *gi.Function
var treeViewColumnAddAttributeFunction_Once sync.Once

func treeViewColumnAddAttributeFunction_Set() error {
	var err error
	treeViewColumnAddAttributeFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnAddAttributeFunction, err = treeViewColumnStruct.InvokerNew("add_attribute")
	})
	return err
}

// AddAttribute is a representation of the C type gtk_tree_view_column_add_attribute.
func (recv *TreeViewColumn) AddAttribute(cellRenderer *CellRenderer, attribute string, column int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cellRenderer.Native)
	inArgs[2].SetString(attribute)
	inArgs[3].SetInt32(column)

	err := treeViewColumnAddAttributeFunction_Set()
	if err == nil {
		treeViewColumnAddAttributeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnCellGetPositionFunction *gi.Function
var treeViewColumnCellGetPositionFunction_Once sync.Once

func treeViewColumnCellGetPositionFunction_Set() error {
	var err error
	treeViewColumnCellGetPositionFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnCellGetPositionFunction, err = treeViewColumnStruct.InvokerNew("cell_get_position")
	})
	return err
}

// CellGetPosition is a representation of the C type gtk_tree_view_column_cell_get_position.
func (recv *TreeViewColumn) CellGetPosition(cellRenderer *CellRenderer) (bool, int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cellRenderer.Native)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := treeViewColumnCellGetPositionFunction_Set()
	if err == nil {
		ret = treeViewColumnCellGetPositionFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return retGo, out0, out1
}

// UNSUPPORTED : C value 'gtk_tree_view_column_cell_get_size' : parameter 'cell_area' of type 'Gdk.Rectangle' not supported

var treeViewColumnCellIsVisibleFunction *gi.Function
var treeViewColumnCellIsVisibleFunction_Once sync.Once

func treeViewColumnCellIsVisibleFunction_Set() error {
	var err error
	treeViewColumnCellIsVisibleFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnCellIsVisibleFunction, err = treeViewColumnStruct.InvokerNew("cell_is_visible")
	})
	return err
}

// CellIsVisible is a representation of the C type gtk_tree_view_column_cell_is_visible.
func (recv *TreeViewColumn) CellIsVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnCellIsVisibleFunction_Set()
	if err == nil {
		ret = treeViewColumnCellIsVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_column_cell_set_cell_data' : parameter 'tree_model' of type 'TreeModel' not supported

var treeViewColumnClearFunction *gi.Function
var treeViewColumnClearFunction_Once sync.Once

func treeViewColumnClearFunction_Set() error {
	var err error
	treeViewColumnClearFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnClearFunction, err = treeViewColumnStruct.InvokerNew("clear")
	})
	return err
}

// Clear is a representation of the C type gtk_tree_view_column_clear.
func (recv *TreeViewColumn) Clear() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewColumnClearFunction_Set()
	if err == nil {
		treeViewColumnClearFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnClearAttributesFunction *gi.Function
var treeViewColumnClearAttributesFunction_Once sync.Once

func treeViewColumnClearAttributesFunction_Set() error {
	var err error
	treeViewColumnClearAttributesFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnClearAttributesFunction, err = treeViewColumnStruct.InvokerNew("clear_attributes")
	})
	return err
}

// ClearAttributes is a representation of the C type gtk_tree_view_column_clear_attributes.
func (recv *TreeViewColumn) ClearAttributes(cellRenderer *CellRenderer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cellRenderer.Native)

	err := treeViewColumnClearAttributesFunction_Set()
	if err == nil {
		treeViewColumnClearAttributesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnClickedFunction *gi.Function
var treeViewColumnClickedFunction_Once sync.Once

func treeViewColumnClickedFunction_Set() error {
	var err error
	treeViewColumnClickedFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnClickedFunction, err = treeViewColumnStruct.InvokerNew("clicked")
	})
	return err
}

// Clicked is a representation of the C type gtk_tree_view_column_clicked.
func (recv *TreeViewColumn) Clicked() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewColumnClickedFunction_Set()
	if err == nil {
		treeViewColumnClickedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnFocusCellFunction *gi.Function
var treeViewColumnFocusCellFunction_Once sync.Once

func treeViewColumnFocusCellFunction_Set() error {
	var err error
	treeViewColumnFocusCellFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnFocusCellFunction, err = treeViewColumnStruct.InvokerNew("focus_cell")
	})
	return err
}

// FocusCell is a representation of the C type gtk_tree_view_column_focus_cell.
func (recv *TreeViewColumn) FocusCell(cell *CellRenderer) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cell.Native)

	err := treeViewColumnFocusCellFunction_Set()
	if err == nil {
		treeViewColumnFocusCellFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnGetAlignmentFunction *gi.Function
var treeViewColumnGetAlignmentFunction_Once sync.Once

func treeViewColumnGetAlignmentFunction_Set() error {
	var err error
	treeViewColumnGetAlignmentFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetAlignmentFunction, err = treeViewColumnStruct.InvokerNew("get_alignment")
	})
	return err
}

// GetAlignment is a representation of the C type gtk_tree_view_column_get_alignment.
func (recv *TreeViewColumn) GetAlignment() float32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetAlignmentFunction_Set()
	if err == nil {
		ret = treeViewColumnGetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float32()

	return retGo
}

var treeViewColumnGetButtonFunction *gi.Function
var treeViewColumnGetButtonFunction_Once sync.Once

func treeViewColumnGetButtonFunction_Set() error {
	var err error
	treeViewColumnGetButtonFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetButtonFunction, err = treeViewColumnStruct.InvokerNew("get_button")
	})
	return err
}

// GetButton is a representation of the C type gtk_tree_view_column_get_button.
func (recv *TreeViewColumn) GetButton() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetButtonFunction_Set()
	if err == nil {
		ret = treeViewColumnGetButtonFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewColumnGetClickableFunction *gi.Function
var treeViewColumnGetClickableFunction_Once sync.Once

func treeViewColumnGetClickableFunction_Set() error {
	var err error
	treeViewColumnGetClickableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetClickableFunction, err = treeViewColumnStruct.InvokerNew("get_clickable")
	})
	return err
}

// GetClickable is a representation of the C type gtk_tree_view_column_get_clickable.
func (recv *TreeViewColumn) GetClickable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetClickableFunction_Set()
	if err == nil {
		ret = treeViewColumnGetClickableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewColumnGetExpandFunction *gi.Function
var treeViewColumnGetExpandFunction_Once sync.Once

func treeViewColumnGetExpandFunction_Set() error {
	var err error
	treeViewColumnGetExpandFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetExpandFunction, err = treeViewColumnStruct.InvokerNew("get_expand")
	})
	return err
}

// GetExpand is a representation of the C type gtk_tree_view_column_get_expand.
func (recv *TreeViewColumn) GetExpand() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetExpandFunction_Set()
	if err == nil {
		ret = treeViewColumnGetExpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewColumnGetFixedWidthFunction *gi.Function
var treeViewColumnGetFixedWidthFunction_Once sync.Once

func treeViewColumnGetFixedWidthFunction_Set() error {
	var err error
	treeViewColumnGetFixedWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetFixedWidthFunction, err = treeViewColumnStruct.InvokerNew("get_fixed_width")
	})
	return err
}

// GetFixedWidth is a representation of the C type gtk_tree_view_column_get_fixed_width.
func (recv *TreeViewColumn) GetFixedWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetFixedWidthFunction_Set()
	if err == nil {
		ret = treeViewColumnGetFixedWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetMaxWidthFunction *gi.Function
var treeViewColumnGetMaxWidthFunction_Once sync.Once

func treeViewColumnGetMaxWidthFunction_Set() error {
	var err error
	treeViewColumnGetMaxWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetMaxWidthFunction, err = treeViewColumnStruct.InvokerNew("get_max_width")
	})
	return err
}

// GetMaxWidth is a representation of the C type gtk_tree_view_column_get_max_width.
func (recv *TreeViewColumn) GetMaxWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetMaxWidthFunction_Set()
	if err == nil {
		ret = treeViewColumnGetMaxWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetMinWidthFunction *gi.Function
var treeViewColumnGetMinWidthFunction_Once sync.Once

func treeViewColumnGetMinWidthFunction_Set() error {
	var err error
	treeViewColumnGetMinWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetMinWidthFunction, err = treeViewColumnStruct.InvokerNew("get_min_width")
	})
	return err
}

// GetMinWidth is a representation of the C type gtk_tree_view_column_get_min_width.
func (recv *TreeViewColumn) GetMinWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetMinWidthFunction_Set()
	if err == nil {
		ret = treeViewColumnGetMinWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetReorderableFunction *gi.Function
var treeViewColumnGetReorderableFunction_Once sync.Once

func treeViewColumnGetReorderableFunction_Set() error {
	var err error
	treeViewColumnGetReorderableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetReorderableFunction, err = treeViewColumnStruct.InvokerNew("get_reorderable")
	})
	return err
}

// GetReorderable is a representation of the C type gtk_tree_view_column_get_reorderable.
func (recv *TreeViewColumn) GetReorderable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetReorderableFunction_Set()
	if err == nil {
		ret = treeViewColumnGetReorderableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewColumnGetResizableFunction *gi.Function
var treeViewColumnGetResizableFunction_Once sync.Once

func treeViewColumnGetResizableFunction_Set() error {
	var err error
	treeViewColumnGetResizableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetResizableFunction, err = treeViewColumnStruct.InvokerNew("get_resizable")
	})
	return err
}

// GetResizable is a representation of the C type gtk_tree_view_column_get_resizable.
func (recv *TreeViewColumn) GetResizable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetResizableFunction_Set()
	if err == nil {
		ret = treeViewColumnGetResizableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_column_get_sizing' : return type 'TreeViewColumnSizing' not supported

var treeViewColumnGetSortColumnIdFunction *gi.Function
var treeViewColumnGetSortColumnIdFunction_Once sync.Once

func treeViewColumnGetSortColumnIdFunction_Set() error {
	var err error
	treeViewColumnGetSortColumnIdFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetSortColumnIdFunction, err = treeViewColumnStruct.InvokerNew("get_sort_column_id")
	})
	return err
}

// GetSortColumnId is a representation of the C type gtk_tree_view_column_get_sort_column_id.
func (recv *TreeViewColumn) GetSortColumnId() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetSortColumnIdFunction_Set()
	if err == nil {
		ret = treeViewColumnGetSortColumnIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetSortIndicatorFunction *gi.Function
var treeViewColumnGetSortIndicatorFunction_Once sync.Once

func treeViewColumnGetSortIndicatorFunction_Set() error {
	var err error
	treeViewColumnGetSortIndicatorFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetSortIndicatorFunction, err = treeViewColumnStruct.InvokerNew("get_sort_indicator")
	})
	return err
}

// GetSortIndicator is a representation of the C type gtk_tree_view_column_get_sort_indicator.
func (recv *TreeViewColumn) GetSortIndicator() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetSortIndicatorFunction_Set()
	if err == nil {
		ret = treeViewColumnGetSortIndicatorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_tree_view_column_get_sort_order' : return type 'SortType' not supported

var treeViewColumnGetSpacingFunction *gi.Function
var treeViewColumnGetSpacingFunction_Once sync.Once

func treeViewColumnGetSpacingFunction_Set() error {
	var err error
	treeViewColumnGetSpacingFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetSpacingFunction, err = treeViewColumnStruct.InvokerNew("get_spacing")
	})
	return err
}

// GetSpacing is a representation of the C type gtk_tree_view_column_get_spacing.
func (recv *TreeViewColumn) GetSpacing() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetSpacingFunction_Set()
	if err == nil {
		ret = treeViewColumnGetSpacingFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetTitleFunction *gi.Function
var treeViewColumnGetTitleFunction_Once sync.Once

func treeViewColumnGetTitleFunction_Set() error {
	var err error
	treeViewColumnGetTitleFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetTitleFunction, err = treeViewColumnStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_tree_view_column_get_title.
func (recv *TreeViewColumn) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetTitleFunction_Set()
	if err == nil {
		ret = treeViewColumnGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var treeViewColumnGetTreeViewFunction *gi.Function
var treeViewColumnGetTreeViewFunction_Once sync.Once

func treeViewColumnGetTreeViewFunction_Set() error {
	var err error
	treeViewColumnGetTreeViewFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetTreeViewFunction, err = treeViewColumnStruct.InvokerNew("get_tree_view")
	})
	return err
}

// GetTreeView is a representation of the C type gtk_tree_view_column_get_tree_view.
func (recv *TreeViewColumn) GetTreeView() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetTreeViewFunction_Set()
	if err == nil {
		ret = treeViewColumnGetTreeViewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewColumnGetVisibleFunction *gi.Function
var treeViewColumnGetVisibleFunction_Once sync.Once

func treeViewColumnGetVisibleFunction_Set() error {
	var err error
	treeViewColumnGetVisibleFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetVisibleFunction, err = treeViewColumnStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_tree_view_column_get_visible.
func (recv *TreeViewColumn) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetVisibleFunction_Set()
	if err == nil {
		ret = treeViewColumnGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var treeViewColumnGetWidgetFunction *gi.Function
var treeViewColumnGetWidgetFunction_Once sync.Once

func treeViewColumnGetWidgetFunction_Set() error {
	var err error
	treeViewColumnGetWidgetFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetWidgetFunction, err = treeViewColumnStruct.InvokerNew("get_widget")
	})
	return err
}

// GetWidget is a representation of the C type gtk_tree_view_column_get_widget.
func (recv *TreeViewColumn) GetWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetWidgetFunction_Set()
	if err == nil {
		ret = treeViewColumnGetWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var treeViewColumnGetWidthFunction *gi.Function
var treeViewColumnGetWidthFunction_Once sync.Once

func treeViewColumnGetWidthFunction_Set() error {
	var err error
	treeViewColumnGetWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetWidthFunction, err = treeViewColumnStruct.InvokerNew("get_width")
	})
	return err
}

// GetWidth is a representation of the C type gtk_tree_view_column_get_width.
func (recv *TreeViewColumn) GetWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetWidthFunction_Set()
	if err == nil {
		ret = treeViewColumnGetWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnGetXOffsetFunction *gi.Function
var treeViewColumnGetXOffsetFunction_Once sync.Once

func treeViewColumnGetXOffsetFunction_Set() error {
	var err error
	treeViewColumnGetXOffsetFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnGetXOffsetFunction, err = treeViewColumnStruct.InvokerNew("get_x_offset")
	})
	return err
}

// GetXOffset is a representation of the C type gtk_tree_view_column_get_x_offset.
func (recv *TreeViewColumn) GetXOffset() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := treeViewColumnGetXOffsetFunction_Set()
	if err == nil {
		ret = treeViewColumnGetXOffsetFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var treeViewColumnPackEndFunction *gi.Function
var treeViewColumnPackEndFunction_Once sync.Once

func treeViewColumnPackEndFunction_Set() error {
	var err error
	treeViewColumnPackEndFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnPackEndFunction, err = treeViewColumnStruct.InvokerNew("pack_end")
	})
	return err
}

// PackEnd is a representation of the C type gtk_tree_view_column_pack_end.
func (recv *TreeViewColumn) PackEnd(cell *CellRenderer, expand bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cell.Native)
	inArgs[2].SetBoolean(expand)

	err := treeViewColumnPackEndFunction_Set()
	if err == nil {
		treeViewColumnPackEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnPackStartFunction *gi.Function
var treeViewColumnPackStartFunction_Once sync.Once

func treeViewColumnPackStartFunction_Set() error {
	var err error
	treeViewColumnPackStartFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnPackStartFunction, err = treeViewColumnStruct.InvokerNew("pack_start")
	})
	return err
}

// PackStart is a representation of the C type gtk_tree_view_column_pack_start.
func (recv *TreeViewColumn) PackStart(cell *CellRenderer, expand bool) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(cell.Native)
	inArgs[2].SetBoolean(expand)

	err := treeViewColumnPackStartFunction_Set()
	if err == nil {
		treeViewColumnPackStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnQueueResizeFunction *gi.Function
var treeViewColumnQueueResizeFunction_Once sync.Once

func treeViewColumnQueueResizeFunction_Set() error {
	var err error
	treeViewColumnQueueResizeFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnQueueResizeFunction, err = treeViewColumnStruct.InvokerNew("queue_resize")
	})
	return err
}

// QueueResize is a representation of the C type gtk_tree_view_column_queue_resize.
func (recv *TreeViewColumn) QueueResize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := treeViewColumnQueueResizeFunction_Set()
	if err == nil {
		treeViewColumnQueueResizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetAlignmentFunction *gi.Function
var treeViewColumnSetAlignmentFunction_Once sync.Once

func treeViewColumnSetAlignmentFunction_Set() error {
	var err error
	treeViewColumnSetAlignmentFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetAlignmentFunction, err = treeViewColumnStruct.InvokerNew("set_alignment")
	})
	return err
}

// SetAlignment is a representation of the C type gtk_tree_view_column_set_alignment.
func (recv *TreeViewColumn) SetAlignment(xalign float32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat32(xalign)

	err := treeViewColumnSetAlignmentFunction_Set()
	if err == nil {
		treeViewColumnSetAlignmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_column_set_attributes' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_tree_view_column_set_cell_data_func' : parameter 'func' of type 'TreeCellDataFunc' not supported

var treeViewColumnSetClickableFunction *gi.Function
var treeViewColumnSetClickableFunction_Once sync.Once

func treeViewColumnSetClickableFunction_Set() error {
	var err error
	treeViewColumnSetClickableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetClickableFunction, err = treeViewColumnStruct.InvokerNew("set_clickable")
	})
	return err
}

// SetClickable is a representation of the C type gtk_tree_view_column_set_clickable.
func (recv *TreeViewColumn) SetClickable(clickable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(clickable)

	err := treeViewColumnSetClickableFunction_Set()
	if err == nil {
		treeViewColumnSetClickableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetExpandFunction *gi.Function
var treeViewColumnSetExpandFunction_Once sync.Once

func treeViewColumnSetExpandFunction_Set() error {
	var err error
	treeViewColumnSetExpandFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetExpandFunction, err = treeViewColumnStruct.InvokerNew("set_expand")
	})
	return err
}

// SetExpand is a representation of the C type gtk_tree_view_column_set_expand.
func (recv *TreeViewColumn) SetExpand(expand bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expand)

	err := treeViewColumnSetExpandFunction_Set()
	if err == nil {
		treeViewColumnSetExpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetFixedWidthFunction *gi.Function
var treeViewColumnSetFixedWidthFunction_Once sync.Once

func treeViewColumnSetFixedWidthFunction_Set() error {
	var err error
	treeViewColumnSetFixedWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetFixedWidthFunction, err = treeViewColumnStruct.InvokerNew("set_fixed_width")
	})
	return err
}

// SetFixedWidth is a representation of the C type gtk_tree_view_column_set_fixed_width.
func (recv *TreeViewColumn) SetFixedWidth(fixedWidth int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(fixedWidth)

	err := treeViewColumnSetFixedWidthFunction_Set()
	if err == nil {
		treeViewColumnSetFixedWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetMaxWidthFunction *gi.Function
var treeViewColumnSetMaxWidthFunction_Once sync.Once

func treeViewColumnSetMaxWidthFunction_Set() error {
	var err error
	treeViewColumnSetMaxWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetMaxWidthFunction, err = treeViewColumnStruct.InvokerNew("set_max_width")
	})
	return err
}

// SetMaxWidth is a representation of the C type gtk_tree_view_column_set_max_width.
func (recv *TreeViewColumn) SetMaxWidth(maxWidth int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(maxWidth)

	err := treeViewColumnSetMaxWidthFunction_Set()
	if err == nil {
		treeViewColumnSetMaxWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetMinWidthFunction *gi.Function
var treeViewColumnSetMinWidthFunction_Once sync.Once

func treeViewColumnSetMinWidthFunction_Set() error {
	var err error
	treeViewColumnSetMinWidthFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetMinWidthFunction, err = treeViewColumnStruct.InvokerNew("set_min_width")
	})
	return err
}

// SetMinWidth is a representation of the C type gtk_tree_view_column_set_min_width.
func (recv *TreeViewColumn) SetMinWidth(minWidth int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(minWidth)

	err := treeViewColumnSetMinWidthFunction_Set()
	if err == nil {
		treeViewColumnSetMinWidthFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetReorderableFunction *gi.Function
var treeViewColumnSetReorderableFunction_Once sync.Once

func treeViewColumnSetReorderableFunction_Set() error {
	var err error
	treeViewColumnSetReorderableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetReorderableFunction, err = treeViewColumnStruct.InvokerNew("set_reorderable")
	})
	return err
}

// SetReorderable is a representation of the C type gtk_tree_view_column_set_reorderable.
func (recv *TreeViewColumn) SetReorderable(reorderable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(reorderable)

	err := treeViewColumnSetReorderableFunction_Set()
	if err == nil {
		treeViewColumnSetReorderableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetResizableFunction *gi.Function
var treeViewColumnSetResizableFunction_Once sync.Once

func treeViewColumnSetResizableFunction_Set() error {
	var err error
	treeViewColumnSetResizableFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetResizableFunction, err = treeViewColumnStruct.InvokerNew("set_resizable")
	})
	return err
}

// SetResizable is a representation of the C type gtk_tree_view_column_set_resizable.
func (recv *TreeViewColumn) SetResizable(resizable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(resizable)

	err := treeViewColumnSetResizableFunction_Set()
	if err == nil {
		treeViewColumnSetResizableFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_column_set_sizing' : parameter 'type' of type 'TreeViewColumnSizing' not supported

var treeViewColumnSetSortColumnIdFunction *gi.Function
var treeViewColumnSetSortColumnIdFunction_Once sync.Once

func treeViewColumnSetSortColumnIdFunction_Set() error {
	var err error
	treeViewColumnSetSortColumnIdFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetSortColumnIdFunction, err = treeViewColumnStruct.InvokerNew("set_sort_column_id")
	})
	return err
}

// SetSortColumnId is a representation of the C type gtk_tree_view_column_set_sort_column_id.
func (recv *TreeViewColumn) SetSortColumnId(sortColumnId int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(sortColumnId)

	err := treeViewColumnSetSortColumnIdFunction_Set()
	if err == nil {
		treeViewColumnSetSortColumnIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetSortIndicatorFunction *gi.Function
var treeViewColumnSetSortIndicatorFunction_Once sync.Once

func treeViewColumnSetSortIndicatorFunction_Set() error {
	var err error
	treeViewColumnSetSortIndicatorFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetSortIndicatorFunction, err = treeViewColumnStruct.InvokerNew("set_sort_indicator")
	})
	return err
}

// SetSortIndicator is a representation of the C type gtk_tree_view_column_set_sort_indicator.
func (recv *TreeViewColumn) SetSortIndicator(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := treeViewColumnSetSortIndicatorFunction_Set()
	if err == nil {
		treeViewColumnSetSortIndicatorFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_tree_view_column_set_sort_order' : parameter 'order' of type 'SortType' not supported

var treeViewColumnSetSpacingFunction *gi.Function
var treeViewColumnSetSpacingFunction_Once sync.Once

func treeViewColumnSetSpacingFunction_Set() error {
	var err error
	treeViewColumnSetSpacingFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetSpacingFunction, err = treeViewColumnStruct.InvokerNew("set_spacing")
	})
	return err
}

// SetSpacing is a representation of the C type gtk_tree_view_column_set_spacing.
func (recv *TreeViewColumn) SetSpacing(spacing int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(spacing)

	err := treeViewColumnSetSpacingFunction_Set()
	if err == nil {
		treeViewColumnSetSpacingFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetTitleFunction *gi.Function
var treeViewColumnSetTitleFunction_Once sync.Once

func treeViewColumnSetTitleFunction_Set() error {
	var err error
	treeViewColumnSetTitleFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetTitleFunction, err = treeViewColumnStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_tree_view_column_set_title.
func (recv *TreeViewColumn) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := treeViewColumnSetTitleFunction_Set()
	if err == nil {
		treeViewColumnSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetVisibleFunction *gi.Function
var treeViewColumnSetVisibleFunction_Once sync.Once

func treeViewColumnSetVisibleFunction_Set() error {
	var err error
	treeViewColumnSetVisibleFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetVisibleFunction, err = treeViewColumnStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_tree_view_column_set_visible.
func (recv *TreeViewColumn) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := treeViewColumnSetVisibleFunction_Set()
	if err == nil {
		treeViewColumnSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var treeViewColumnSetWidgetFunction *gi.Function
var treeViewColumnSetWidgetFunction_Once sync.Once

func treeViewColumnSetWidgetFunction_Set() error {
	var err error
	treeViewColumnSetWidgetFunction_Once.Do(func() {
		err = treeViewColumnStruct_Set()
		if err != nil {
			return
		}
		treeViewColumnSetWidgetFunction, err = treeViewColumnStruct.InvokerNew("set_widget")
	})
	return err
}

// SetWidget is a representation of the C type gtk_tree_view_column_set_widget.
func (recv *TreeViewColumn) SetWidget(widget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widget.Native)

	err := treeViewColumnSetWidgetFunction_Set()
	if err == nil {
		treeViewColumnSetWidgetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var uIManagerStruct *gi.Struct
var uIManagerStruct_Once sync.Once

func uIManagerStruct_Set() error {
	var err error
	uIManagerStruct_Once.Do(func() {
		uIManagerStruct, err = gi.StructNew("Gtk", "UIManager")
	})
	return err
}

type UIManager struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent' : for field setter : no Go type for 'GObject.Object'

var uIManagerNewFunction *gi.Function
var uIManagerNewFunction_Once sync.Once

func uIManagerNewFunction_Set() error {
	var err error
	uIManagerNewFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerNewFunction, err = uIManagerStruct.InvokerNew("new")
	})
	return err
}

// UIManagerNew is a representation of the C type gtk_ui_manager_new.
func UIManagerNew() *UIManager {

	var ret gi.Argument

	err := uIManagerNewFunction_Set()
	if err == nil {
		ret = uIManagerNewFunction.Invoke(nil, nil)
	}

	retGo := &UIManager{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_ui_manager_add_ui' : parameter 'type' of type 'UIManagerItemType' not supported

var uIManagerAddUiFromFileFunction *gi.Function
var uIManagerAddUiFromFileFunction_Once sync.Once

func uIManagerAddUiFromFileFunction_Set() error {
	var err error
	uIManagerAddUiFromFileFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerAddUiFromFileFunction, err = uIManagerStruct.InvokerNew("add_ui_from_file")
	})
	return err
}

// AddUiFromFile is a representation of the C type gtk_ui_manager_add_ui_from_file.
func (recv *UIManager) AddUiFromFile(filename string) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	var ret gi.Argument

	err := uIManagerAddUiFromFileFunction_Set()
	if err == nil {
		ret = uIManagerAddUiFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var uIManagerAddUiFromResourceFunction *gi.Function
var uIManagerAddUiFromResourceFunction_Once sync.Once

func uIManagerAddUiFromResourceFunction_Set() error {
	var err error
	uIManagerAddUiFromResourceFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerAddUiFromResourceFunction, err = uIManagerStruct.InvokerNew("add_ui_from_resource")
	})
	return err
}

// AddUiFromResource is a representation of the C type gtk_ui_manager_add_ui_from_resource.
func (recv *UIManager) AddUiFromResource(resourcePath string) uint32 {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(resourcePath)

	var ret gi.Argument

	err := uIManagerAddUiFromResourceFunction_Set()
	if err == nil {
		ret = uIManagerAddUiFromResourceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var uIManagerAddUiFromStringFunction *gi.Function
var uIManagerAddUiFromStringFunction_Once sync.Once

func uIManagerAddUiFromStringFunction_Set() error {
	var err error
	uIManagerAddUiFromStringFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerAddUiFromStringFunction, err = uIManagerStruct.InvokerNew("add_ui_from_string")
	})
	return err
}

// AddUiFromString is a representation of the C type gtk_ui_manager_add_ui_from_string.
func (recv *UIManager) AddUiFromString(buffer string, length int32) uint32 {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(buffer)
	inArgs[2].SetInt32(length)

	var ret gi.Argument

	err := uIManagerAddUiFromStringFunction_Set()
	if err == nil {
		ret = uIManagerAddUiFromStringFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var uIManagerEnsureUpdateFunction *gi.Function
var uIManagerEnsureUpdateFunction_Once sync.Once

func uIManagerEnsureUpdateFunction_Set() error {
	var err error
	uIManagerEnsureUpdateFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerEnsureUpdateFunction, err = uIManagerStruct.InvokerNew("ensure_update")
	})
	return err
}

// EnsureUpdate is a representation of the C type gtk_ui_manager_ensure_update.
func (recv *UIManager) EnsureUpdate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := uIManagerEnsureUpdateFunction_Set()
	if err == nil {
		uIManagerEnsureUpdateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var uIManagerGetAccelGroupFunction *gi.Function
var uIManagerGetAccelGroupFunction_Once sync.Once

func uIManagerGetAccelGroupFunction_Set() error {
	var err error
	uIManagerGetAccelGroupFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerGetAccelGroupFunction, err = uIManagerStruct.InvokerNew("get_accel_group")
	})
	return err
}

// GetAccelGroup is a representation of the C type gtk_ui_manager_get_accel_group.
func (recv *UIManager) GetAccelGroup() *AccelGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := uIManagerGetAccelGroupFunction_Set()
	if err == nil {
		ret = uIManagerGetAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &AccelGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var uIManagerGetActionFunction *gi.Function
var uIManagerGetActionFunction_Once sync.Once

func uIManagerGetActionFunction_Set() error {
	var err error
	uIManagerGetActionFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerGetActionFunction, err = uIManagerStruct.InvokerNew("get_action")
	})
	return err
}

// GetAction is a representation of the C type gtk_ui_manager_get_action.
func (recv *UIManager) GetAction(path string) *Action {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	var ret gi.Argument

	err := uIManagerGetActionFunction_Set()
	if err == nil {
		ret = uIManagerGetActionFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Action{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_ui_manager_get_action_groups' : return type 'GLib.List' not supported

var uIManagerGetAddTearoffsFunction *gi.Function
var uIManagerGetAddTearoffsFunction_Once sync.Once

func uIManagerGetAddTearoffsFunction_Set() error {
	var err error
	uIManagerGetAddTearoffsFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerGetAddTearoffsFunction, err = uIManagerStruct.InvokerNew("get_add_tearoffs")
	})
	return err
}

// GetAddTearoffs is a representation of the C type gtk_ui_manager_get_add_tearoffs.
func (recv *UIManager) GetAddTearoffs() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := uIManagerGetAddTearoffsFunction_Set()
	if err == nil {
		ret = uIManagerGetAddTearoffsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_ui_manager_get_toplevels' : parameter 'types' of type 'UIManagerItemType' not supported

var uIManagerGetUiFunction *gi.Function
var uIManagerGetUiFunction_Once sync.Once

func uIManagerGetUiFunction_Set() error {
	var err error
	uIManagerGetUiFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerGetUiFunction, err = uIManagerStruct.InvokerNew("get_ui")
	})
	return err
}

// GetUi is a representation of the C type gtk_ui_manager_get_ui.
func (recv *UIManager) GetUi() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := uIManagerGetUiFunction_Set()
	if err == nil {
		ret = uIManagerGetUiFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var uIManagerGetWidgetFunction *gi.Function
var uIManagerGetWidgetFunction_Once sync.Once

func uIManagerGetWidgetFunction_Set() error {
	var err error
	uIManagerGetWidgetFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerGetWidgetFunction, err = uIManagerStruct.InvokerNew("get_widget")
	})
	return err
}

// GetWidget is a representation of the C type gtk_ui_manager_get_widget.
func (recv *UIManager) GetWidget(path string) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(path)

	var ret gi.Argument

	err := uIManagerGetWidgetFunction_Set()
	if err == nil {
		ret = uIManagerGetWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var uIManagerInsertActionGroupFunction *gi.Function
var uIManagerInsertActionGroupFunction_Once sync.Once

func uIManagerInsertActionGroupFunction_Set() error {
	var err error
	uIManagerInsertActionGroupFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerInsertActionGroupFunction, err = uIManagerStruct.InvokerNew("insert_action_group")
	})
	return err
}

// InsertActionGroup is a representation of the C type gtk_ui_manager_insert_action_group.
func (recv *UIManager) InsertActionGroup(actionGroup *ActionGroup, pos int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(actionGroup.Native)
	inArgs[2].SetInt32(pos)

	err := uIManagerInsertActionGroupFunction_Set()
	if err == nil {
		uIManagerInsertActionGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var uIManagerNewMergeIdFunction *gi.Function
var uIManagerNewMergeIdFunction_Once sync.Once

func uIManagerNewMergeIdFunction_Set() error {
	var err error
	uIManagerNewMergeIdFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerNewMergeIdFunction, err = uIManagerStruct.InvokerNew("new_merge_id")
	})
	return err
}

// NewMergeId is a representation of the C type gtk_ui_manager_new_merge_id.
func (recv *UIManager) NewMergeId() uint32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := uIManagerNewMergeIdFunction_Set()
	if err == nil {
		ret = uIManagerNewMergeIdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Uint32()

	return retGo
}

var uIManagerRemoveActionGroupFunction *gi.Function
var uIManagerRemoveActionGroupFunction_Once sync.Once

func uIManagerRemoveActionGroupFunction_Set() error {
	var err error
	uIManagerRemoveActionGroupFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerRemoveActionGroupFunction, err = uIManagerStruct.InvokerNew("remove_action_group")
	})
	return err
}

// RemoveActionGroup is a representation of the C type gtk_ui_manager_remove_action_group.
func (recv *UIManager) RemoveActionGroup(actionGroup *ActionGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(actionGroup.Native)

	err := uIManagerRemoveActionGroupFunction_Set()
	if err == nil {
		uIManagerRemoveActionGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var uIManagerRemoveUiFunction *gi.Function
var uIManagerRemoveUiFunction_Once sync.Once

func uIManagerRemoveUiFunction_Set() error {
	var err error
	uIManagerRemoveUiFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerRemoveUiFunction, err = uIManagerStruct.InvokerNew("remove_ui")
	})
	return err
}

// RemoveUi is a representation of the C type gtk_ui_manager_remove_ui.
func (recv *UIManager) RemoveUi(mergeId uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(mergeId)

	err := uIManagerRemoveUiFunction_Set()
	if err == nil {
		uIManagerRemoveUiFunction.Invoke(inArgs[:], nil)
	}

	return
}

var uIManagerSetAddTearoffsFunction *gi.Function
var uIManagerSetAddTearoffsFunction_Once sync.Once

func uIManagerSetAddTearoffsFunction_Set() error {
	var err error
	uIManagerSetAddTearoffsFunction_Once.Do(func() {
		err = uIManagerStruct_Set()
		if err != nil {
			return
		}
		uIManagerSetAddTearoffsFunction, err = uIManagerStruct.InvokerNew("set_add_tearoffs")
	})
	return err
}

// SetAddTearoffs is a representation of the C type gtk_ui_manager_set_add_tearoffs.
func (recv *UIManager) SetAddTearoffs(addTearoffs bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(addTearoffs)

	err := uIManagerSetAddTearoffsFunction_Set()
	if err == nil {
		uIManagerSetAddTearoffsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var vBoxStruct *gi.Struct
var vBoxStruct_Once sync.Once

func vBoxStruct_Set() error {
	var err error
	vBoxStruct_Once.Do(func() {
		vBoxStruct, err = gi.StructNew("Gtk", "VBox")
	})
	return err
}

type VBox struct {
	Box
}

// FieldBox returns the C field 'box'.
func (recv *VBox) FieldBox() *Box {
	argValue := gi.FieldGet(vBoxStruct, recv.Native, "box")
	value := &Box{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBox sets the value of the C field 'box'.
func (recv *VBox) SetFieldBox(value *Box) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vBoxStruct, recv.Native, "box", argValue)
}

var vBoxNewFunction *gi.Function
var vBoxNewFunction_Once sync.Once

func vBoxNewFunction_Set() error {
	var err error
	vBoxNewFunction_Once.Do(func() {
		err = vBoxStruct_Set()
		if err != nil {
			return
		}
		vBoxNewFunction, err = vBoxStruct.InvokerNew("new")
	})
	return err
}

// VBoxNew is a representation of the C type gtk_vbox_new.
func VBoxNew(homogeneous bool, spacing int32) *VBox {
	var inArgs [2]gi.Argument
	inArgs[0].SetBoolean(homogeneous)
	inArgs[1].SetInt32(spacing)

	var ret gi.Argument

	err := vBoxNewFunction_Set()
	if err == nil {
		ret = vBoxNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &VBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vButtonBoxStruct *gi.Struct
var vButtonBoxStruct_Once sync.Once

func vButtonBoxStruct_Set() error {
	var err error
	vButtonBoxStruct_Once.Do(func() {
		vButtonBoxStruct, err = gi.StructNew("Gtk", "VButtonBox")
	})
	return err
}

type VButtonBox struct {
	ButtonBox
}

// FieldButtonBox returns the C field 'button_box'.
func (recv *VButtonBox) FieldButtonBox() *ButtonBox {
	argValue := gi.FieldGet(vButtonBoxStruct, recv.Native, "button_box")
	value := &ButtonBox{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldButtonBox sets the value of the C field 'button_box'.
func (recv *VButtonBox) SetFieldButtonBox(value *ButtonBox) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vButtonBoxStruct, recv.Native, "button_box", argValue)
}

var vButtonBoxNewFunction *gi.Function
var vButtonBoxNewFunction_Once sync.Once

func vButtonBoxNewFunction_Set() error {
	var err error
	vButtonBoxNewFunction_Once.Do(func() {
		err = vButtonBoxStruct_Set()
		if err != nil {
			return
		}
		vButtonBoxNewFunction, err = vButtonBoxStruct.InvokerNew("new")
	})
	return err
}

// VButtonBoxNew is a representation of the C type gtk_vbutton_box_new.
func VButtonBoxNew() *VButtonBox {

	var ret gi.Argument

	err := vButtonBoxNewFunction_Set()
	if err == nil {
		ret = vButtonBoxNewFunction.Invoke(nil, nil)
	}

	retGo := &VButtonBox{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vPanedStruct *gi.Struct
var vPanedStruct_Once sync.Once

func vPanedStruct_Set() error {
	var err error
	vPanedStruct_Once.Do(func() {
		vPanedStruct, err = gi.StructNew("Gtk", "VPaned")
	})
	return err
}

type VPaned struct {
	Paned
}

// FieldPaned returns the C field 'paned'.
func (recv *VPaned) FieldPaned() *Paned {
	argValue := gi.FieldGet(vPanedStruct, recv.Native, "paned")
	value := &Paned{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPaned sets the value of the C field 'paned'.
func (recv *VPaned) SetFieldPaned(value *Paned) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vPanedStruct, recv.Native, "paned", argValue)
}

var vPanedNewFunction *gi.Function
var vPanedNewFunction_Once sync.Once

func vPanedNewFunction_Set() error {
	var err error
	vPanedNewFunction_Once.Do(func() {
		err = vPanedStruct_Set()
		if err != nil {
			return
		}
		vPanedNewFunction, err = vPanedStruct.InvokerNew("new")
	})
	return err
}

// VPanedNew is a representation of the C type gtk_vpaned_new.
func VPanedNew() *VPaned {

	var ret gi.Argument

	err := vPanedNewFunction_Set()
	if err == nil {
		ret = vPanedNewFunction.Invoke(nil, nil)
	}

	retGo := &VPaned{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vScaleStruct *gi.Struct
var vScaleStruct_Once sync.Once

func vScaleStruct_Set() error {
	var err error
	vScaleStruct_Once.Do(func() {
		vScaleStruct, err = gi.StructNew("Gtk", "VScale")
	})
	return err
}

type VScale struct {
	Scale
}

// FieldScale returns the C field 'scale'.
func (recv *VScale) FieldScale() *Scale {
	argValue := gi.FieldGet(vScaleStruct, recv.Native, "scale")
	value := &Scale{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldScale sets the value of the C field 'scale'.
func (recv *VScale) SetFieldScale(value *Scale) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vScaleStruct, recv.Native, "scale", argValue)
}

var vScaleNewFunction *gi.Function
var vScaleNewFunction_Once sync.Once

func vScaleNewFunction_Set() error {
	var err error
	vScaleNewFunction_Once.Do(func() {
		err = vScaleStruct_Set()
		if err != nil {
			return
		}
		vScaleNewFunction, err = vScaleStruct.InvokerNew("new")
	})
	return err
}

// VScaleNew is a representation of the C type gtk_vscale_new.
func VScaleNew(adjustment *Adjustment) *VScale {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(adjustment.Native)

	var ret gi.Argument

	err := vScaleNewFunction_Set()
	if err == nil {
		ret = vScaleNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &VScale{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vScaleNewWithRangeFunction *gi.Function
var vScaleNewWithRangeFunction_Once sync.Once

func vScaleNewWithRangeFunction_Set() error {
	var err error
	vScaleNewWithRangeFunction_Once.Do(func() {
		err = vScaleStruct_Set()
		if err != nil {
			return
		}
		vScaleNewWithRangeFunction, err = vScaleStruct.InvokerNew("new_with_range")
	})
	return err
}

// VScaleNewWithRange is a representation of the C type gtk_vscale_new_with_range.
func VScaleNewWithRange(min float64, max float64, step float64) *VScale {
	var inArgs [3]gi.Argument
	inArgs[0].SetFloat64(min)
	inArgs[1].SetFloat64(max)
	inArgs[2].SetFloat64(step)

	var ret gi.Argument

	err := vScaleNewWithRangeFunction_Set()
	if err == nil {
		ret = vScaleNewWithRangeFunction.Invoke(inArgs[:], nil)
	}

	retGo := &VScale{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vScrollbarStruct *gi.Struct
var vScrollbarStruct_Once sync.Once

func vScrollbarStruct_Set() error {
	var err error
	vScrollbarStruct_Once.Do(func() {
		vScrollbarStruct, err = gi.StructNew("Gtk", "VScrollbar")
	})
	return err
}

type VScrollbar struct {
	Scrollbar
}

// FieldScrollbar returns the C field 'scrollbar'.
func (recv *VScrollbar) FieldScrollbar() *Scrollbar {
	argValue := gi.FieldGet(vScrollbarStruct, recv.Native, "scrollbar")
	value := &Scrollbar{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldScrollbar sets the value of the C field 'scrollbar'.
func (recv *VScrollbar) SetFieldScrollbar(value *Scrollbar) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vScrollbarStruct, recv.Native, "scrollbar", argValue)
}

var vScrollbarNewFunction *gi.Function
var vScrollbarNewFunction_Once sync.Once

func vScrollbarNewFunction_Set() error {
	var err error
	vScrollbarNewFunction_Once.Do(func() {
		err = vScrollbarStruct_Set()
		if err != nil {
			return
		}
		vScrollbarNewFunction, err = vScrollbarStruct.InvokerNew("new")
	})
	return err
}

// VScrollbarNew is a representation of the C type gtk_vscrollbar_new.
func VScrollbarNew(adjustment *Adjustment) *VScrollbar {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(adjustment.Native)

	var ret gi.Argument

	err := vScrollbarNewFunction_Set()
	if err == nil {
		ret = vScrollbarNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &VScrollbar{}
	retGo.Native = ret.Pointer()

	return retGo
}

var vSeparatorStruct *gi.Struct
var vSeparatorStruct_Once sync.Once

func vSeparatorStruct_Set() error {
	var err error
	vSeparatorStruct_Once.Do(func() {
		vSeparatorStruct, err = gi.StructNew("Gtk", "VSeparator")
	})
	return err
}

type VSeparator struct {
	Separator
}

// FieldSeparator returns the C field 'separator'.
func (recv *VSeparator) FieldSeparator() *Separator {
	argValue := gi.FieldGet(vSeparatorStruct, recv.Native, "separator")
	value := &Separator{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldSeparator sets the value of the C field 'separator'.
func (recv *VSeparator) SetFieldSeparator(value *Separator) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(vSeparatorStruct, recv.Native, "separator", argValue)
}

var vSeparatorNewFunction *gi.Function
var vSeparatorNewFunction_Once sync.Once

func vSeparatorNewFunction_Set() error {
	var err error
	vSeparatorNewFunction_Once.Do(func() {
		err = vSeparatorStruct_Set()
		if err != nil {
			return
		}
		vSeparatorNewFunction, err = vSeparatorStruct.InvokerNew("new")
	})
	return err
}

// VSeparatorNew is a representation of the C type gtk_vseparator_new.
func VSeparatorNew() *VSeparator {

	var ret gi.Argument

	err := vSeparatorNewFunction_Set()
	if err == nil {
		ret = vSeparatorNewFunction.Invoke(nil, nil)
	}

	retGo := &VSeparator{}
	retGo.Native = ret.Pointer()

	return retGo
}

var viewportStruct *gi.Struct
var viewportStruct_Once sync.Once

func viewportStruct_Set() error {
	var err error
	viewportStruct_Once.Do(func() {
		viewportStruct, err = gi.StructNew("Gtk", "Viewport")
	})
	return err
}

type Viewport struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *Viewport) FieldBin() *Bin {
	argValue := gi.FieldGet(viewportStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *Viewport) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(viewportStruct, recv.Native, "bin", argValue)
}

var viewportNewFunction *gi.Function
var viewportNewFunction_Once sync.Once

func viewportNewFunction_Set() error {
	var err error
	viewportNewFunction_Once.Do(func() {
		err = viewportStruct_Set()
		if err != nil {
			return
		}
		viewportNewFunction, err = viewportStruct.InvokerNew("new")
	})
	return err
}

// ViewportNew is a representation of the C type gtk_viewport_new.
func ViewportNew(hadjustment *Adjustment, vadjustment *Adjustment) *Viewport {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(hadjustment.Native)
	inArgs[1].SetPointer(vadjustment.Native)

	var ret gi.Argument

	err := viewportNewFunction_Set()
	if err == nil {
		ret = viewportNewFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Viewport{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_viewport_get_bin_window' : return type 'Gdk.Window' not supported

var viewportGetHadjustmentFunction *gi.Function
var viewportGetHadjustmentFunction_Once sync.Once

func viewportGetHadjustmentFunction_Set() error {
	var err error
	viewportGetHadjustmentFunction_Once.Do(func() {
		err = viewportStruct_Set()
		if err != nil {
			return
		}
		viewportGetHadjustmentFunction, err = viewportStruct.InvokerNew("get_hadjustment")
	})
	return err
}

// GetHadjustment is a representation of the C type gtk_viewport_get_hadjustment.
func (recv *Viewport) GetHadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := viewportGetHadjustmentFunction_Set()
	if err == nil {
		ret = viewportGetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_viewport_get_shadow_type' : return type 'ShadowType' not supported

var viewportGetVadjustmentFunction *gi.Function
var viewportGetVadjustmentFunction_Once sync.Once

func viewportGetVadjustmentFunction_Set() error {
	var err error
	viewportGetVadjustmentFunction_Once.Do(func() {
		err = viewportStruct_Set()
		if err != nil {
			return
		}
		viewportGetVadjustmentFunction, err = viewportStruct.InvokerNew("get_vadjustment")
	})
	return err
}

// GetVadjustment is a representation of the C type gtk_viewport_get_vadjustment.
func (recv *Viewport) GetVadjustment() *Adjustment {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := viewportGetVadjustmentFunction_Set()
	if err == nil {
		ret = viewportGetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Adjustment{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_viewport_get_view_window' : return type 'Gdk.Window' not supported

var viewportSetHadjustmentFunction *gi.Function
var viewportSetHadjustmentFunction_Once sync.Once

func viewportSetHadjustmentFunction_Set() error {
	var err error
	viewportSetHadjustmentFunction_Once.Do(func() {
		err = viewportStruct_Set()
		if err != nil {
			return
		}
		viewportSetHadjustmentFunction, err = viewportStruct.InvokerNew("set_hadjustment")
	})
	return err
}

// SetHadjustment is a representation of the C type gtk_viewport_set_hadjustment.
func (recv *Viewport) SetHadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := viewportSetHadjustmentFunction_Set()
	if err == nil {
		viewportSetHadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_viewport_set_shadow_type' : parameter 'type' of type 'ShadowType' not supported

var viewportSetVadjustmentFunction *gi.Function
var viewportSetVadjustmentFunction_Once sync.Once

func viewportSetVadjustmentFunction_Set() error {
	var err error
	viewportSetVadjustmentFunction_Once.Do(func() {
		err = viewportStruct_Set()
		if err != nil {
			return
		}
		viewportSetVadjustmentFunction, err = viewportStruct.InvokerNew("set_vadjustment")
	})
	return err
}

// SetVadjustment is a representation of the C type gtk_viewport_set_vadjustment.
func (recv *Viewport) SetVadjustment(adjustment *Adjustment) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(adjustment.Native)

	err := viewportSetVadjustmentFunction_Set()
	if err == nil {
		viewportSetVadjustmentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var volumeButtonStruct *gi.Struct
var volumeButtonStruct_Once sync.Once

func volumeButtonStruct_Set() error {
	var err error
	volumeButtonStruct_Once.Do(func() {
		volumeButtonStruct, err = gi.StructNew("Gtk", "VolumeButton")
	})
	return err
}

type VolumeButton struct {
	ScaleButton
}

// FieldParent returns the C field 'parent'.
func (recv *VolumeButton) FieldParent() *ScaleButton {
	argValue := gi.FieldGet(volumeButtonStruct, recv.Native, "parent")
	value := &ScaleButton{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *VolumeButton) SetFieldParent(value *ScaleButton) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(volumeButtonStruct, recv.Native, "parent", argValue)
}

var volumeButtonNewFunction *gi.Function
var volumeButtonNewFunction_Once sync.Once

func volumeButtonNewFunction_Set() error {
	var err error
	volumeButtonNewFunction_Once.Do(func() {
		err = volumeButtonStruct_Set()
		if err != nil {
			return
		}
		volumeButtonNewFunction, err = volumeButtonStruct.InvokerNew("new")
	})
	return err
}

// VolumeButtonNew is a representation of the C type gtk_volume_button_new.
func VolumeButtonNew() *VolumeButton {

	var ret gi.Argument

	err := volumeButtonNewFunction_Set()
	if err == nil {
		ret = volumeButtonNewFunction.Invoke(nil, nil)
	}

	retGo := &VolumeButton{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetStruct *gi.Struct
var widgetStruct_Once sync.Once

func widgetStruct_Set() error {
	var err error
	widgetStruct_Once.Do(func() {
		widgetStruct, err = gi.StructNew("Gtk", "Widget")
	})
	return err
}

type Widget struct {
	gobject.InitiallyUnowned
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.InitiallyUnowned'

// UNSUPPORTED : C value 'gtk_widget_new' : parameter 'type' of type 'GType' not supported

var widgetActivateFunction *gi.Function
var widgetActivateFunction_Once sync.Once

func widgetActivateFunction_Set() error {
	var err error
	widgetActivateFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetActivateFunction, err = widgetStruct.InvokerNew("activate")
	})
	return err
}

// Activate is a representation of the C type gtk_widget_activate.
func (recv *Widget) Activate() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetActivateFunction_Set()
	if err == nil {
		ret = widgetActivateFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_add_accelerator' : parameter 'accel_mods' of type 'Gdk.ModifierType' not supported

// UNSUPPORTED : C value 'gtk_widget_add_device_events' : parameter 'device' of type 'Gdk.Device' not supported

var widgetAddEventsFunction *gi.Function
var widgetAddEventsFunction_Once sync.Once

func widgetAddEventsFunction_Set() error {
	var err error
	widgetAddEventsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetAddEventsFunction, err = widgetStruct.InvokerNew("add_events")
	})
	return err
}

// AddEvents is a representation of the C type gtk_widget_add_events.
func (recv *Widget) AddEvents(events int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(events)

	err := widgetAddEventsFunction_Set()
	if err == nil {
		widgetAddEventsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetAddMnemonicLabelFunction *gi.Function
var widgetAddMnemonicLabelFunction_Once sync.Once

func widgetAddMnemonicLabelFunction_Set() error {
	var err error
	widgetAddMnemonicLabelFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetAddMnemonicLabelFunction, err = widgetStruct.InvokerNew("add_mnemonic_label")
	})
	return err
}

// AddMnemonicLabel is a representation of the C type gtk_widget_add_mnemonic_label.
func (recv *Widget) AddMnemonicLabel(label *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(label.Native)

	err := widgetAddMnemonicLabelFunction_Set()
	if err == nil {
		widgetAddMnemonicLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_add_tick_callback' : parameter 'callback' of type 'TickCallback' not supported

var widgetCanActivateAccelFunction *gi.Function
var widgetCanActivateAccelFunction_Once sync.Once

func widgetCanActivateAccelFunction_Set() error {
	var err error
	widgetCanActivateAccelFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetCanActivateAccelFunction, err = widgetStruct.InvokerNew("can_activate_accel")
	})
	return err
}

// CanActivateAccel is a representation of the C type gtk_widget_can_activate_accel.
func (recv *Widget) CanActivateAccel(signalId uint32) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(signalId)

	var ret gi.Argument

	err := widgetCanActivateAccelFunction_Set()
	if err == nil {
		ret = widgetCanActivateAccelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_child_focus' : parameter 'direction' of type 'DirectionType' not supported

var widgetChildNotifyFunction *gi.Function
var widgetChildNotifyFunction_Once sync.Once

func widgetChildNotifyFunction_Set() error {
	var err error
	widgetChildNotifyFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetChildNotifyFunction, err = widgetStruct.InvokerNew("child_notify")
	})
	return err
}

// ChildNotify is a representation of the C type gtk_widget_child_notify.
func (recv *Widget) ChildNotify(childProperty string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(childProperty)

	err := widgetChildNotifyFunction_Set()
	if err == nil {
		widgetChildNotifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetClassPathFunction *gi.Function
var widgetClassPathFunction_Once sync.Once

func widgetClassPathFunction_Set() error {
	var err error
	widgetClassPathFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetClassPathFunction, err = widgetStruct.InvokerNew("class_path")
	})
	return err
}

// ClassPath is a representation of the C type gtk_widget_class_path.
func (recv *Widget) ClassPath() (uint32, string, string) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [3]gi.Argument

	err := widgetClassPathFunction_Set()
	if err == nil {
		widgetClassPathFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].String(true)
	out2 := outArgs[2].String(true)

	return out0, out1, out2
}

// UNSUPPORTED : C value 'gtk_widget_compute_expand' : parameter 'orientation' of type 'Orientation' not supported

// UNSUPPORTED : C value 'gtk_widget_create_pango_context' : return type 'Pango.Context' not supported

// UNSUPPORTED : C value 'gtk_widget_create_pango_layout' : return type 'Pango.Layout' not supported

var widgetDestroyFunction *gi.Function
var widgetDestroyFunction_Once sync.Once

func widgetDestroyFunction_Set() error {
	var err error
	widgetDestroyFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDestroyFunction, err = widgetStruct.InvokerNew("destroy")
	})
	return err
}

// Destroy is a representation of the C type gtk_widget_destroy.
func (recv *Widget) Destroy() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDestroyFunction_Set()
	if err == nil {
		widgetDestroyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDestroyedFunction *gi.Function
var widgetDestroyedFunction_Once sync.Once

func widgetDestroyedFunction_Set() error {
	var err error
	widgetDestroyedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDestroyedFunction, err = widgetStruct.InvokerNew("destroyed")
	})
	return err
}

// Destroyed is a representation of the C type gtk_widget_destroyed.
func (recv *Widget) Destroyed(widgetPointer *Widget) *Widget {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(widgetPointer.Native)

	var outArgs [1]gi.Argument

	err := widgetDestroyedFunction_Set()
	if err == nil {
		widgetDestroyedFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Widget{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

// UNSUPPORTED : C value 'gtk_widget_device_is_shadowed' : parameter 'device' of type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_drag_begin' : parameter 'actions' of type 'Gdk.DragAction' not supported

// UNSUPPORTED : C value 'gtk_drag_begin_with_coordinates' : parameter 'actions' of type 'Gdk.DragAction' not supported

var widgetDragCheckThresholdFunction *gi.Function
var widgetDragCheckThresholdFunction_Once sync.Once

func widgetDragCheckThresholdFunction_Set() error {
	var err error
	widgetDragCheckThresholdFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragCheckThresholdFunction, err = widgetStruct.InvokerNew("drag_check_threshold")
	})
	return err
}

// DragCheckThreshold is a representation of the C type gtk_drag_check_threshold.
func (recv *Widget) DragCheckThreshold(startX int32, startY int32, currentX int32, currentY int32) bool {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(startX)
	inArgs[2].SetInt32(startY)
	inArgs[3].SetInt32(currentX)
	inArgs[4].SetInt32(currentY)

	var ret gi.Argument

	err := widgetDragCheckThresholdFunction_Set()
	if err == nil {
		ret = widgetDragCheckThresholdFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetDragDestAddImageTargetsFunction *gi.Function
var widgetDragDestAddImageTargetsFunction_Once sync.Once

func widgetDragDestAddImageTargetsFunction_Set() error {
	var err error
	widgetDragDestAddImageTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestAddImageTargetsFunction, err = widgetStruct.InvokerNew("drag_dest_add_image_targets")
	})
	return err
}

// DragDestAddImageTargets is a representation of the C type gtk_drag_dest_add_image_targets.
func (recv *Widget) DragDestAddImageTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragDestAddImageTargetsFunction_Set()
	if err == nil {
		widgetDragDestAddImageTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragDestAddTextTargetsFunction *gi.Function
var widgetDragDestAddTextTargetsFunction_Once sync.Once

func widgetDragDestAddTextTargetsFunction_Set() error {
	var err error
	widgetDragDestAddTextTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestAddTextTargetsFunction, err = widgetStruct.InvokerNew("drag_dest_add_text_targets")
	})
	return err
}

// DragDestAddTextTargets is a representation of the C type gtk_drag_dest_add_text_targets.
func (recv *Widget) DragDestAddTextTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragDestAddTextTargetsFunction_Set()
	if err == nil {
		widgetDragDestAddTextTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragDestAddUriTargetsFunction *gi.Function
var widgetDragDestAddUriTargetsFunction_Once sync.Once

func widgetDragDestAddUriTargetsFunction_Set() error {
	var err error
	widgetDragDestAddUriTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestAddUriTargetsFunction, err = widgetStruct.InvokerNew("drag_dest_add_uri_targets")
	})
	return err
}

// DragDestAddUriTargets is a representation of the C type gtk_drag_dest_add_uri_targets.
func (recv *Widget) DragDestAddUriTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragDestAddUriTargetsFunction_Set()
	if err == nil {
		widgetDragDestAddUriTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_drag_dest_find_target' : parameter 'context' of type 'Gdk.DragContext' not supported

var widgetDragDestGetTargetListFunction *gi.Function
var widgetDragDestGetTargetListFunction_Once sync.Once

func widgetDragDestGetTargetListFunction_Set() error {
	var err error
	widgetDragDestGetTargetListFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestGetTargetListFunction, err = widgetStruct.InvokerNew("drag_dest_get_target_list")
	})
	return err
}

// DragDestGetTargetList is a representation of the C type gtk_drag_dest_get_target_list.
func (recv *Widget) DragDestGetTargetList() *TargetList {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetDragDestGetTargetListFunction_Set()
	if err == nil {
		ret = widgetDragDestGetTargetListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TargetList{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetDragDestGetTrackMotionFunction *gi.Function
var widgetDragDestGetTrackMotionFunction_Once sync.Once

func widgetDragDestGetTrackMotionFunction_Set() error {
	var err error
	widgetDragDestGetTrackMotionFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestGetTrackMotionFunction, err = widgetStruct.InvokerNew("drag_dest_get_track_motion")
	})
	return err
}

// DragDestGetTrackMotion is a representation of the C type gtk_drag_dest_get_track_motion.
func (recv *Widget) DragDestGetTrackMotion() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetDragDestGetTrackMotionFunction_Set()
	if err == nil {
		ret = widgetDragDestGetTrackMotionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_drag_dest_set' : parameter 'flags' of type 'DestDefaults' not supported

// UNSUPPORTED : C value 'gtk_drag_dest_set_proxy' : parameter 'proxy_window' of type 'Gdk.Window' not supported

var widgetDragDestSetTargetListFunction *gi.Function
var widgetDragDestSetTargetListFunction_Once sync.Once

func widgetDragDestSetTargetListFunction_Set() error {
	var err error
	widgetDragDestSetTargetListFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestSetTargetListFunction, err = widgetStruct.InvokerNew("drag_dest_set_target_list")
	})
	return err
}

// DragDestSetTargetList is a representation of the C type gtk_drag_dest_set_target_list.
func (recv *Widget) DragDestSetTargetList(targetList *TargetList) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(targetList.Native)

	err := widgetDragDestSetTargetListFunction_Set()
	if err == nil {
		widgetDragDestSetTargetListFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragDestSetTrackMotionFunction *gi.Function
var widgetDragDestSetTrackMotionFunction_Once sync.Once

func widgetDragDestSetTrackMotionFunction_Set() error {
	var err error
	widgetDragDestSetTrackMotionFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestSetTrackMotionFunction, err = widgetStruct.InvokerNew("drag_dest_set_track_motion")
	})
	return err
}

// DragDestSetTrackMotion is a representation of the C type gtk_drag_dest_set_track_motion.
func (recv *Widget) DragDestSetTrackMotion(trackMotion bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(trackMotion)

	err := widgetDragDestSetTrackMotionFunction_Set()
	if err == nil {
		widgetDragDestSetTrackMotionFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragDestUnsetFunction *gi.Function
var widgetDragDestUnsetFunction_Once sync.Once

func widgetDragDestUnsetFunction_Set() error {
	var err error
	widgetDragDestUnsetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragDestUnsetFunction, err = widgetStruct.InvokerNew("drag_dest_unset")
	})
	return err
}

// DragDestUnset is a representation of the C type gtk_drag_dest_unset.
func (recv *Widget) DragDestUnset() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragDestUnsetFunction_Set()
	if err == nil {
		widgetDragDestUnsetFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_drag_get_data' : parameter 'context' of type 'Gdk.DragContext' not supported

var widgetDragHighlightFunction *gi.Function
var widgetDragHighlightFunction_Once sync.Once

func widgetDragHighlightFunction_Set() error {
	var err error
	widgetDragHighlightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragHighlightFunction, err = widgetStruct.InvokerNew("drag_highlight")
	})
	return err
}

// DragHighlight is a representation of the C type gtk_drag_highlight.
func (recv *Widget) DragHighlight() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragHighlightFunction_Set()
	if err == nil {
		widgetDragHighlightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceAddImageTargetsFunction *gi.Function
var widgetDragSourceAddImageTargetsFunction_Once sync.Once

func widgetDragSourceAddImageTargetsFunction_Set() error {
	var err error
	widgetDragSourceAddImageTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceAddImageTargetsFunction, err = widgetStruct.InvokerNew("drag_source_add_image_targets")
	})
	return err
}

// DragSourceAddImageTargets is a representation of the C type gtk_drag_source_add_image_targets.
func (recv *Widget) DragSourceAddImageTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragSourceAddImageTargetsFunction_Set()
	if err == nil {
		widgetDragSourceAddImageTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceAddTextTargetsFunction *gi.Function
var widgetDragSourceAddTextTargetsFunction_Once sync.Once

func widgetDragSourceAddTextTargetsFunction_Set() error {
	var err error
	widgetDragSourceAddTextTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceAddTextTargetsFunction, err = widgetStruct.InvokerNew("drag_source_add_text_targets")
	})
	return err
}

// DragSourceAddTextTargets is a representation of the C type gtk_drag_source_add_text_targets.
func (recv *Widget) DragSourceAddTextTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragSourceAddTextTargetsFunction_Set()
	if err == nil {
		widgetDragSourceAddTextTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceAddUriTargetsFunction *gi.Function
var widgetDragSourceAddUriTargetsFunction_Once sync.Once

func widgetDragSourceAddUriTargetsFunction_Set() error {
	var err error
	widgetDragSourceAddUriTargetsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceAddUriTargetsFunction, err = widgetStruct.InvokerNew("drag_source_add_uri_targets")
	})
	return err
}

// DragSourceAddUriTargets is a representation of the C type gtk_drag_source_add_uri_targets.
func (recv *Widget) DragSourceAddUriTargets() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragSourceAddUriTargetsFunction_Set()
	if err == nil {
		widgetDragSourceAddUriTargetsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceGetTargetListFunction *gi.Function
var widgetDragSourceGetTargetListFunction_Once sync.Once

func widgetDragSourceGetTargetListFunction_Set() error {
	var err error
	widgetDragSourceGetTargetListFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceGetTargetListFunction, err = widgetStruct.InvokerNew("drag_source_get_target_list")
	})
	return err
}

// DragSourceGetTargetList is a representation of the C type gtk_drag_source_get_target_list.
func (recv *Widget) DragSourceGetTargetList() *TargetList {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetDragSourceGetTargetListFunction_Set()
	if err == nil {
		ret = widgetDragSourceGetTargetListFunction.Invoke(inArgs[:], nil)
	}

	retGo := &TargetList{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_drag_source_set' : parameter 'start_button_mask' of type 'Gdk.ModifierType' not supported

// UNSUPPORTED : C value 'gtk_drag_source_set_icon_gicon' : parameter 'icon' of type 'Gio.Icon' not supported

var widgetDragSourceSetIconNameFunction *gi.Function
var widgetDragSourceSetIconNameFunction_Once sync.Once

func widgetDragSourceSetIconNameFunction_Set() error {
	var err error
	widgetDragSourceSetIconNameFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceSetIconNameFunction, err = widgetStruct.InvokerNew("drag_source_set_icon_name")
	})
	return err
}

// DragSourceSetIconName is a representation of the C type gtk_drag_source_set_icon_name.
func (recv *Widget) DragSourceSetIconName(iconName string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(iconName)

	err := widgetDragSourceSetIconNameFunction_Set()
	if err == nil {
		widgetDragSourceSetIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_drag_source_set_icon_pixbuf' : parameter 'pixbuf' of type 'GdkPixbuf.Pixbuf' not supported

var widgetDragSourceSetIconStockFunction *gi.Function
var widgetDragSourceSetIconStockFunction_Once sync.Once

func widgetDragSourceSetIconStockFunction_Set() error {
	var err error
	widgetDragSourceSetIconStockFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceSetIconStockFunction, err = widgetStruct.InvokerNew("drag_source_set_icon_stock")
	})
	return err
}

// DragSourceSetIconStock is a representation of the C type gtk_drag_source_set_icon_stock.
func (recv *Widget) DragSourceSetIconStock(stockId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(stockId)

	err := widgetDragSourceSetIconStockFunction_Set()
	if err == nil {
		widgetDragSourceSetIconStockFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceSetTargetListFunction *gi.Function
var widgetDragSourceSetTargetListFunction_Once sync.Once

func widgetDragSourceSetTargetListFunction_Set() error {
	var err error
	widgetDragSourceSetTargetListFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceSetTargetListFunction, err = widgetStruct.InvokerNew("drag_source_set_target_list")
	})
	return err
}

// DragSourceSetTargetList is a representation of the C type gtk_drag_source_set_target_list.
func (recv *Widget) DragSourceSetTargetList(targetList *TargetList) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(targetList.Native)

	err := widgetDragSourceSetTargetListFunction_Set()
	if err == nil {
		widgetDragSourceSetTargetListFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragSourceUnsetFunction *gi.Function
var widgetDragSourceUnsetFunction_Once sync.Once

func widgetDragSourceUnsetFunction_Set() error {
	var err error
	widgetDragSourceUnsetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragSourceUnsetFunction, err = widgetStruct.InvokerNew("drag_source_unset")
	})
	return err
}

// DragSourceUnset is a representation of the C type gtk_drag_source_unset.
func (recv *Widget) DragSourceUnset() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragSourceUnsetFunction_Set()
	if err == nil {
		widgetDragSourceUnsetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetDragUnhighlightFunction *gi.Function
var widgetDragUnhighlightFunction_Once sync.Once

func widgetDragUnhighlightFunction_Set() error {
	var err error
	widgetDragUnhighlightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetDragUnhighlightFunction, err = widgetStruct.InvokerNew("drag_unhighlight")
	})
	return err
}

// DragUnhighlight is a representation of the C type gtk_drag_unhighlight.
func (recv *Widget) DragUnhighlight() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetDragUnhighlightFunction_Set()
	if err == nil {
		widgetDragUnhighlightFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_draw' : parameter 'cr' of type 'cairo.Context' not supported

var widgetEnsureStyleFunction *gi.Function
var widgetEnsureStyleFunction_Once sync.Once

func widgetEnsureStyleFunction_Set() error {
	var err error
	widgetEnsureStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetEnsureStyleFunction, err = widgetStruct.InvokerNew("ensure_style")
	})
	return err
}

// EnsureStyle is a representation of the C type gtk_widget_ensure_style.
func (recv *Widget) EnsureStyle() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetEnsureStyleFunction_Set()
	if err == nil {
		widgetEnsureStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetErrorBellFunction *gi.Function
var widgetErrorBellFunction_Once sync.Once

func widgetErrorBellFunction_Set() error {
	var err error
	widgetErrorBellFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetErrorBellFunction, err = widgetStruct.InvokerNew("error_bell")
	})
	return err
}

// ErrorBell is a representation of the C type gtk_widget_error_bell.
func (recv *Widget) ErrorBell() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetErrorBellFunction_Set()
	if err == nil {
		widgetErrorBellFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_event' : parameter 'event' of type 'Gdk.Event' not supported

var widgetFreezeChildNotifyFunction *gi.Function
var widgetFreezeChildNotifyFunction_Once sync.Once

func widgetFreezeChildNotifyFunction_Set() error {
	var err error
	widgetFreezeChildNotifyFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetFreezeChildNotifyFunction, err = widgetStruct.InvokerNew("freeze_child_notify")
	})
	return err
}

// FreezeChildNotify is a representation of the C type gtk_widget_freeze_child_notify.
func (recv *Widget) FreezeChildNotify() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetFreezeChildNotifyFunction_Set()
	if err == nil {
		widgetFreezeChildNotifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_get_accessible' : return type 'Atk.Object' not supported

// UNSUPPORTED : C value 'gtk_widget_get_action_group' : return type 'Gio.ActionGroup' not supported

var widgetGetAllocatedBaselineFunction *gi.Function
var widgetGetAllocatedBaselineFunction_Once sync.Once

func widgetGetAllocatedBaselineFunction_Set() error {
	var err error
	widgetGetAllocatedBaselineFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetAllocatedBaselineFunction, err = widgetStruct.InvokerNew("get_allocated_baseline")
	})
	return err
}

// GetAllocatedBaseline is a representation of the C type gtk_widget_get_allocated_baseline.
func (recv *Widget) GetAllocatedBaseline() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetAllocatedBaselineFunction_Set()
	if err == nil {
		ret = widgetGetAllocatedBaselineFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetAllocatedHeightFunction *gi.Function
var widgetGetAllocatedHeightFunction_Once sync.Once

func widgetGetAllocatedHeightFunction_Set() error {
	var err error
	widgetGetAllocatedHeightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetAllocatedHeightFunction, err = widgetStruct.InvokerNew("get_allocated_height")
	})
	return err
}

// GetAllocatedHeight is a representation of the C type gtk_widget_get_allocated_height.
func (recv *Widget) GetAllocatedHeight() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetAllocatedHeightFunction_Set()
	if err == nil {
		ret = widgetGetAllocatedHeightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_allocated_size' : parameter 'allocation' of type 'Allocation' not supported

var widgetGetAllocatedWidthFunction *gi.Function
var widgetGetAllocatedWidthFunction_Once sync.Once

func widgetGetAllocatedWidthFunction_Set() error {
	var err error
	widgetGetAllocatedWidthFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetAllocatedWidthFunction, err = widgetStruct.InvokerNew("get_allocated_width")
	})
	return err
}

// GetAllocatedWidth is a representation of the C type gtk_widget_get_allocated_width.
func (recv *Widget) GetAllocatedWidth() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetAllocatedWidthFunction_Set()
	if err == nil {
		ret = widgetGetAllocatedWidthFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_allocation' : parameter 'allocation' of type 'Allocation' not supported

// UNSUPPORTED : C value 'gtk_widget_get_ancestor' : parameter 'widget_type' of type 'GType' not supported

var widgetGetAppPaintableFunction *gi.Function
var widgetGetAppPaintableFunction_Once sync.Once

func widgetGetAppPaintableFunction_Set() error {
	var err error
	widgetGetAppPaintableFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetAppPaintableFunction, err = widgetStruct.InvokerNew("get_app_paintable")
	})
	return err
}

// GetAppPaintable is a representation of the C type gtk_widget_get_app_paintable.
func (recv *Widget) GetAppPaintable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetAppPaintableFunction_Set()
	if err == nil {
		ret = widgetGetAppPaintableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetCanDefaultFunction *gi.Function
var widgetGetCanDefaultFunction_Once sync.Once

func widgetGetCanDefaultFunction_Set() error {
	var err error
	widgetGetCanDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetCanDefaultFunction, err = widgetStruct.InvokerNew("get_can_default")
	})
	return err
}

// GetCanDefault is a representation of the C type gtk_widget_get_can_default.
func (recv *Widget) GetCanDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetCanDefaultFunction_Set()
	if err == nil {
		ret = widgetGetCanDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetCanFocusFunction *gi.Function
var widgetGetCanFocusFunction_Once sync.Once

func widgetGetCanFocusFunction_Set() error {
	var err error
	widgetGetCanFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetCanFocusFunction, err = widgetStruct.InvokerNew("get_can_focus")
	})
	return err
}

// GetCanFocus is a representation of the C type gtk_widget_get_can_focus.
func (recv *Widget) GetCanFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetCanFocusFunction_Set()
	if err == nil {
		ret = widgetGetCanFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetChildRequisitionFunction *gi.Function
var widgetGetChildRequisitionFunction_Once sync.Once

func widgetGetChildRequisitionFunction_Set() error {
	var err error
	widgetGetChildRequisitionFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetChildRequisitionFunction, err = widgetStruct.InvokerNew("get_child_requisition")
	})
	return err
}

// GetChildRequisition is a representation of the C type gtk_widget_get_child_requisition.
func (recv *Widget) GetChildRequisition() *Requisition {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := widgetGetChildRequisitionFunction_Set()
	if err == nil {
		widgetGetChildRequisitionFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var widgetGetChildVisibleFunction *gi.Function
var widgetGetChildVisibleFunction_Once sync.Once

func widgetGetChildVisibleFunction_Set() error {
	var err error
	widgetGetChildVisibleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetChildVisibleFunction, err = widgetStruct.InvokerNew("get_child_visible")
	})
	return err
}

// GetChildVisible is a representation of the C type gtk_widget_get_child_visible.
func (recv *Widget) GetChildVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetChildVisibleFunction_Set()
	if err == nil {
		ret = widgetGetChildVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_clip' : parameter 'clip' of type 'Allocation' not supported

// UNSUPPORTED : C value 'gtk_widget_get_clipboard' : parameter 'selection' of type 'Gdk.Atom' not supported

var widgetGetCompositeNameFunction *gi.Function
var widgetGetCompositeNameFunction_Once sync.Once

func widgetGetCompositeNameFunction_Set() error {
	var err error
	widgetGetCompositeNameFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetCompositeNameFunction, err = widgetStruct.InvokerNew("get_composite_name")
	})
	return err
}

// GetCompositeName is a representation of the C type gtk_widget_get_composite_name.
func (recv *Widget) GetCompositeName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetCompositeNameFunction_Set()
	if err == nil {
		ret = widgetGetCompositeNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_device_enabled' : parameter 'device' of type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_widget_get_device_events' : parameter 'device' of type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_widget_get_direction' : return type 'TextDirection' not supported

// UNSUPPORTED : C value 'gtk_widget_get_display' : return type 'Gdk.Display' not supported

var widgetGetDoubleBufferedFunction *gi.Function
var widgetGetDoubleBufferedFunction_Once sync.Once

func widgetGetDoubleBufferedFunction_Set() error {
	var err error
	widgetGetDoubleBufferedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetDoubleBufferedFunction, err = widgetStruct.InvokerNew("get_double_buffered")
	})
	return err
}

// GetDoubleBuffered is a representation of the C type gtk_widget_get_double_buffered.
func (recv *Widget) GetDoubleBuffered() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetDoubleBufferedFunction_Set()
	if err == nil {
		ret = widgetGetDoubleBufferedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetEventsFunction *gi.Function
var widgetGetEventsFunction_Once sync.Once

func widgetGetEventsFunction_Set() error {
	var err error
	widgetGetEventsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetEventsFunction, err = widgetStruct.InvokerNew("get_events")
	})
	return err
}

// GetEvents is a representation of the C type gtk_widget_get_events.
func (recv *Widget) GetEvents() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetEventsFunction_Set()
	if err == nil {
		ret = widgetGetEventsFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetFocusOnClickFunction *gi.Function
var widgetGetFocusOnClickFunction_Once sync.Once

func widgetGetFocusOnClickFunction_Set() error {
	var err error
	widgetGetFocusOnClickFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetFocusOnClickFunction, err = widgetStruct.InvokerNew("get_focus_on_click")
	})
	return err
}

// GetFocusOnClick is a representation of the C type gtk_widget_get_focus_on_click.
func (recv *Widget) GetFocusOnClick() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetFocusOnClickFunction_Set()
	if err == nil {
		ret = widgetGetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_font_map' : return type 'Pango.FontMap' not supported

// UNSUPPORTED : C value 'gtk_widget_get_font_options' : return type 'cairo.FontOptions' not supported

// UNSUPPORTED : C value 'gtk_widget_get_frame_clock' : return type 'Gdk.FrameClock' not supported

// UNSUPPORTED : C value 'gtk_widget_get_halign' : return type 'Align' not supported

var widgetGetHasTooltipFunction *gi.Function
var widgetGetHasTooltipFunction_Once sync.Once

func widgetGetHasTooltipFunction_Set() error {
	var err error
	widgetGetHasTooltipFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetHasTooltipFunction, err = widgetStruct.InvokerNew("get_has_tooltip")
	})
	return err
}

// GetHasTooltip is a representation of the C type gtk_widget_get_has_tooltip.
func (recv *Widget) GetHasTooltip() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetHasTooltipFunction_Set()
	if err == nil {
		ret = widgetGetHasTooltipFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetHasWindowFunction *gi.Function
var widgetGetHasWindowFunction_Once sync.Once

func widgetGetHasWindowFunction_Set() error {
	var err error
	widgetGetHasWindowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetHasWindowFunction, err = widgetStruct.InvokerNew("get_has_window")
	})
	return err
}

// GetHasWindow is a representation of the C type gtk_widget_get_has_window.
func (recv *Widget) GetHasWindow() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetHasWindowFunction_Set()
	if err == nil {
		ret = widgetGetHasWindowFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetHexpandFunction *gi.Function
var widgetGetHexpandFunction_Once sync.Once

func widgetGetHexpandFunction_Set() error {
	var err error
	widgetGetHexpandFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetHexpandFunction, err = widgetStruct.InvokerNew("get_hexpand")
	})
	return err
}

// GetHexpand is a representation of the C type gtk_widget_get_hexpand.
func (recv *Widget) GetHexpand() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetHexpandFunction_Set()
	if err == nil {
		ret = widgetGetHexpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetHexpandSetFunction *gi.Function
var widgetGetHexpandSetFunction_Once sync.Once

func widgetGetHexpandSetFunction_Set() error {
	var err error
	widgetGetHexpandSetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetHexpandSetFunction, err = widgetStruct.InvokerNew("get_hexpand_set")
	})
	return err
}

// GetHexpandSet is a representation of the C type gtk_widget_get_hexpand_set.
func (recv *Widget) GetHexpandSet() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetHexpandSetFunction_Set()
	if err == nil {
		ret = widgetGetHexpandSetFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetMappedFunction *gi.Function
var widgetGetMappedFunction_Once sync.Once

func widgetGetMappedFunction_Set() error {
	var err error
	widgetGetMappedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMappedFunction, err = widgetStruct.InvokerNew("get_mapped")
	})
	return err
}

// GetMapped is a representation of the C type gtk_widget_get_mapped.
func (recv *Widget) GetMapped() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMappedFunction_Set()
	if err == nil {
		ret = widgetGetMappedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetMarginBottomFunction *gi.Function
var widgetGetMarginBottomFunction_Once sync.Once

func widgetGetMarginBottomFunction_Set() error {
	var err error
	widgetGetMarginBottomFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginBottomFunction, err = widgetStruct.InvokerNew("get_margin_bottom")
	})
	return err
}

// GetMarginBottom is a representation of the C type gtk_widget_get_margin_bottom.
func (recv *Widget) GetMarginBottom() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginBottomFunction_Set()
	if err == nil {
		ret = widgetGetMarginBottomFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetMarginEndFunction *gi.Function
var widgetGetMarginEndFunction_Once sync.Once

func widgetGetMarginEndFunction_Set() error {
	var err error
	widgetGetMarginEndFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginEndFunction, err = widgetStruct.InvokerNew("get_margin_end")
	})
	return err
}

// GetMarginEnd is a representation of the C type gtk_widget_get_margin_end.
func (recv *Widget) GetMarginEnd() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginEndFunction_Set()
	if err == nil {
		ret = widgetGetMarginEndFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetMarginLeftFunction *gi.Function
var widgetGetMarginLeftFunction_Once sync.Once

func widgetGetMarginLeftFunction_Set() error {
	var err error
	widgetGetMarginLeftFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginLeftFunction, err = widgetStruct.InvokerNew("get_margin_left")
	})
	return err
}

// GetMarginLeft is a representation of the C type gtk_widget_get_margin_left.
func (recv *Widget) GetMarginLeft() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginLeftFunction_Set()
	if err == nil {
		ret = widgetGetMarginLeftFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetMarginRightFunction *gi.Function
var widgetGetMarginRightFunction_Once sync.Once

func widgetGetMarginRightFunction_Set() error {
	var err error
	widgetGetMarginRightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginRightFunction, err = widgetStruct.InvokerNew("get_margin_right")
	})
	return err
}

// GetMarginRight is a representation of the C type gtk_widget_get_margin_right.
func (recv *Widget) GetMarginRight() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginRightFunction_Set()
	if err == nil {
		ret = widgetGetMarginRightFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetMarginStartFunction *gi.Function
var widgetGetMarginStartFunction_Once sync.Once

func widgetGetMarginStartFunction_Set() error {
	var err error
	widgetGetMarginStartFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginStartFunction, err = widgetStruct.InvokerNew("get_margin_start")
	})
	return err
}

// GetMarginStart is a representation of the C type gtk_widget_get_margin_start.
func (recv *Widget) GetMarginStart() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginStartFunction_Set()
	if err == nil {
		ret = widgetGetMarginStartFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

var widgetGetMarginTopFunction *gi.Function
var widgetGetMarginTopFunction_Once sync.Once

func widgetGetMarginTopFunction_Set() error {
	var err error
	widgetGetMarginTopFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetMarginTopFunction, err = widgetStruct.InvokerNew("get_margin_top")
	})
	return err
}

// GetMarginTop is a representation of the C type gtk_widget_get_margin_top.
func (recv *Widget) GetMarginTop() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetMarginTopFunction_Set()
	if err == nil {
		ret = widgetGetMarginTopFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_modifier_mask' : parameter 'intent' of type 'Gdk.ModifierIntent' not supported

var widgetGetModifierStyleFunction *gi.Function
var widgetGetModifierStyleFunction_Once sync.Once

func widgetGetModifierStyleFunction_Set() error {
	var err error
	widgetGetModifierStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetModifierStyleFunction, err = widgetStruct.InvokerNew("get_modifier_style")
	})
	return err
}

// GetModifierStyle is a representation of the C type gtk_widget_get_modifier_style.
func (recv *Widget) GetModifierStyle() *RcStyle {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetModifierStyleFunction_Set()
	if err == nil {
		ret = widgetGetModifierStyleFunction.Invoke(inArgs[:], nil)
	}

	retGo := &RcStyle{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetNameFunction *gi.Function
var widgetGetNameFunction_Once sync.Once

func widgetGetNameFunction_Set() error {
	var err error
	widgetGetNameFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetNameFunction, err = widgetStruct.InvokerNew("get_name")
	})
	return err
}

// GetName is a representation of the C type gtk_widget_get_name.
func (recv *Widget) GetName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetNameFunction_Set()
	if err == nil {
		ret = widgetGetNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var widgetGetNoShowAllFunction *gi.Function
var widgetGetNoShowAllFunction_Once sync.Once

func widgetGetNoShowAllFunction_Set() error {
	var err error
	widgetGetNoShowAllFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetNoShowAllFunction, err = widgetStruct.InvokerNew("get_no_show_all")
	})
	return err
}

// GetNoShowAll is a representation of the C type gtk_widget_get_no_show_all.
func (recv *Widget) GetNoShowAll() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetNoShowAllFunction_Set()
	if err == nil {
		ret = widgetGetNoShowAllFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetOpacityFunction *gi.Function
var widgetGetOpacityFunction_Once sync.Once

func widgetGetOpacityFunction_Set() error {
	var err error
	widgetGetOpacityFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetOpacityFunction, err = widgetStruct.InvokerNew("get_opacity")
	})
	return err
}

// GetOpacity is a representation of the C type gtk_widget_get_opacity.
func (recv *Widget) GetOpacity() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetOpacityFunction_Set()
	if err == nil {
		ret = widgetGetOpacityFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_pango_context' : return type 'Pango.Context' not supported

var widgetGetParentFunction *gi.Function
var widgetGetParentFunction_Once sync.Once

func widgetGetParentFunction_Set() error {
	var err error
	widgetGetParentFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetParentFunction, err = widgetStruct.InvokerNew("get_parent")
	})
	return err
}

// GetParent is a representation of the C type gtk_widget_get_parent.
func (recv *Widget) GetParent() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetParentFunction_Set()
	if err == nil {
		ret = widgetGetParentFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_parent_window' : return type 'Gdk.Window' not supported

var widgetGetPathFunction *gi.Function
var widgetGetPathFunction_Once sync.Once

func widgetGetPathFunction_Set() error {
	var err error
	widgetGetPathFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPathFunction, err = widgetStruct.InvokerNew("get_path")
	})
	return err
}

// GetPath is a representation of the C type gtk_widget_get_path.
func (recv *Widget) GetPath() *WidgetPath {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetPathFunction_Set()
	if err == nil {
		ret = widgetGetPathFunction.Invoke(inArgs[:], nil)
	}

	retGo := &WidgetPath{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetPointerFunction *gi.Function
var widgetGetPointerFunction_Once sync.Once

func widgetGetPointerFunction_Set() error {
	var err error
	widgetGetPointerFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPointerFunction, err = widgetStruct.InvokerNew("get_pointer")
	})
	return err
}

// GetPointer is a representation of the C type gtk_widget_get_pointer.
func (recv *Widget) GetPointer() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := widgetGetPointerFunction_Set()
	if err == nil {
		widgetGetPointerFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var widgetGetPreferredHeightFunction *gi.Function
var widgetGetPreferredHeightFunction_Once sync.Once

func widgetGetPreferredHeightFunction_Set() error {
	var err error
	widgetGetPreferredHeightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredHeightFunction, err = widgetStruct.InvokerNew("get_preferred_height")
	})
	return err
}

// GetPreferredHeight is a representation of the C type gtk_widget_get_preferred_height.
func (recv *Widget) GetPreferredHeight() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := widgetGetPreferredHeightFunction_Set()
	if err == nil {
		widgetGetPreferredHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var widgetGetPreferredHeightAndBaselineForWidthFunction *gi.Function
var widgetGetPreferredHeightAndBaselineForWidthFunction_Once sync.Once

func widgetGetPreferredHeightAndBaselineForWidthFunction_Set() error {
	var err error
	widgetGetPreferredHeightAndBaselineForWidthFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredHeightAndBaselineForWidthFunction, err = widgetStruct.InvokerNew("get_preferred_height_and_baseline_for_width")
	})
	return err
}

// GetPreferredHeightAndBaselineForWidth is a representation of the C type gtk_widget_get_preferred_height_and_baseline_for_width.
func (recv *Widget) GetPreferredHeightAndBaselineForWidth(width int32) (int32, int32, int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	var outArgs [4]gi.Argument

	err := widgetGetPreferredHeightAndBaselineForWidthFunction_Set()
	if err == nil {
		widgetGetPreferredHeightAndBaselineForWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()
	out2 := outArgs[2].Int32()
	out3 := outArgs[3].Int32()

	return out0, out1, out2, out3
}

var widgetGetPreferredHeightForWidthFunction *gi.Function
var widgetGetPreferredHeightForWidthFunction_Once sync.Once

func widgetGetPreferredHeightForWidthFunction_Set() error {
	var err error
	widgetGetPreferredHeightForWidthFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredHeightForWidthFunction, err = widgetStruct.InvokerNew("get_preferred_height_for_width")
	})
	return err
}

// GetPreferredHeightForWidth is a representation of the C type gtk_widget_get_preferred_height_for_width.
func (recv *Widget) GetPreferredHeightForWidth(width int32) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)

	var outArgs [2]gi.Argument

	err := widgetGetPreferredHeightForWidthFunction_Set()
	if err == nil {
		widgetGetPreferredHeightForWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var widgetGetPreferredSizeFunction *gi.Function
var widgetGetPreferredSizeFunction_Once sync.Once

func widgetGetPreferredSizeFunction_Set() error {
	var err error
	widgetGetPreferredSizeFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredSizeFunction, err = widgetStruct.InvokerNew("get_preferred_size")
	})
	return err
}

// GetPreferredSize is a representation of the C type gtk_widget_get_preferred_size.
func (recv *Widget) GetPreferredSize() (*Requisition, *Requisition) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := widgetGetPreferredSizeFunction_Set()
	if err == nil {
		widgetGetPreferredSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()
	out1 := &Requisition{}
	out1.Native = outArgs[1].Pointer()

	return out0, out1
}

var widgetGetPreferredWidthFunction *gi.Function
var widgetGetPreferredWidthFunction_Once sync.Once

func widgetGetPreferredWidthFunction_Set() error {
	var err error
	widgetGetPreferredWidthFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredWidthFunction, err = widgetStruct.InvokerNew("get_preferred_width")
	})
	return err
}

// GetPreferredWidth is a representation of the C type gtk_widget_get_preferred_width.
func (recv *Widget) GetPreferredWidth() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := widgetGetPreferredWidthFunction_Set()
	if err == nil {
		widgetGetPreferredWidthFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var widgetGetPreferredWidthForHeightFunction *gi.Function
var widgetGetPreferredWidthForHeightFunction_Once sync.Once

func widgetGetPreferredWidthForHeightFunction_Set() error {
	var err error
	widgetGetPreferredWidthForHeightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetPreferredWidthForHeightFunction, err = widgetStruct.InvokerNew("get_preferred_width_for_height")
	})
	return err
}

// GetPreferredWidthForHeight is a representation of the C type gtk_widget_get_preferred_width_for_height.
func (recv *Widget) GetPreferredWidthForHeight(height int32) (int32, int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(height)

	var outArgs [2]gi.Argument

	err := widgetGetPreferredWidthForHeightFunction_Set()
	if err == nil {
		widgetGetPreferredWidthForHeightFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var widgetGetRealizedFunction *gi.Function
var widgetGetRealizedFunction_Once sync.Once

func widgetGetRealizedFunction_Set() error {
	var err error
	widgetGetRealizedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetRealizedFunction, err = widgetStruct.InvokerNew("get_realized")
	})
	return err
}

// GetRealized is a representation of the C type gtk_widget_get_realized.
func (recv *Widget) GetRealized() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetRealizedFunction_Set()
	if err == nil {
		ret = widgetGetRealizedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetReceivesDefaultFunction *gi.Function
var widgetGetReceivesDefaultFunction_Once sync.Once

func widgetGetReceivesDefaultFunction_Set() error {
	var err error
	widgetGetReceivesDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetReceivesDefaultFunction, err = widgetStruct.InvokerNew("get_receives_default")
	})
	return err
}

// GetReceivesDefault is a representation of the C type gtk_widget_get_receives_default.
func (recv *Widget) GetReceivesDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetReceivesDefaultFunction_Set()
	if err == nil {
		ret = widgetGetReceivesDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_request_mode' : return type 'SizeRequestMode' not supported

var widgetGetRequisitionFunction *gi.Function
var widgetGetRequisitionFunction_Once sync.Once

func widgetGetRequisitionFunction_Set() error {
	var err error
	widgetGetRequisitionFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetRequisitionFunction, err = widgetStruct.InvokerNew("get_requisition")
	})
	return err
}

// GetRequisition is a representation of the C type gtk_widget_get_requisition.
func (recv *Widget) GetRequisition() *Requisition {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := widgetGetRequisitionFunction_Set()
	if err == nil {
		widgetGetRequisitionFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

// UNSUPPORTED : C value 'gtk_widget_get_root_window' : return type 'Gdk.Window' not supported

var widgetGetScaleFactorFunction *gi.Function
var widgetGetScaleFactorFunction_Once sync.Once

func widgetGetScaleFactorFunction_Set() error {
	var err error
	widgetGetScaleFactorFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetScaleFactorFunction, err = widgetStruct.InvokerNew("get_scale_factor")
	})
	return err
}

// GetScaleFactor is a representation of the C type gtk_widget_get_scale_factor.
func (recv *Widget) GetScaleFactor() int32 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetScaleFactorFunction_Set()
	if err == nil {
		ret = widgetGetScaleFactorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Int32()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_screen' : return type 'Gdk.Screen' not supported

var widgetGetSensitiveFunction *gi.Function
var widgetGetSensitiveFunction_Once sync.Once

func widgetGetSensitiveFunction_Set() error {
	var err error
	widgetGetSensitiveFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetSensitiveFunction, err = widgetStruct.InvokerNew("get_sensitive")
	})
	return err
}

// GetSensitive is a representation of the C type gtk_widget_get_sensitive.
func (recv *Widget) GetSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetSensitiveFunction_Set()
	if err == nil {
		ret = widgetGetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetSettingsFunction *gi.Function
var widgetGetSettingsFunction_Once sync.Once

func widgetGetSettingsFunction_Set() error {
	var err error
	widgetGetSettingsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetSettingsFunction, err = widgetStruct.InvokerNew("get_settings")
	})
	return err
}

// GetSettings is a representation of the C type gtk_widget_get_settings.
func (recv *Widget) GetSettings() *Settings {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetSettingsFunction_Set()
	if err == nil {
		ret = widgetGetSettingsFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Settings{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetSizeRequestFunction *gi.Function
var widgetGetSizeRequestFunction_Once sync.Once

func widgetGetSizeRequestFunction_Set() error {
	var err error
	widgetGetSizeRequestFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetSizeRequestFunction, err = widgetStruct.InvokerNew("get_size_request")
	})
	return err
}

// GetSizeRequest is a representation of the C type gtk_widget_get_size_request.
func (recv *Widget) GetSizeRequest() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := widgetGetSizeRequestFunction_Set()
	if err == nil {
		widgetGetSizeRequestFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

// UNSUPPORTED : C value 'gtk_widget_get_state' : return type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_get_state_flags' : return type 'StateFlags' not supported

var widgetGetStyleFunction *gi.Function
var widgetGetStyleFunction_Once sync.Once

func widgetGetStyleFunction_Set() error {
	var err error
	widgetGetStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetStyleFunction, err = widgetStruct.InvokerNew("get_style")
	})
	return err
}

// GetStyle is a representation of the C type gtk_widget_get_style.
func (recv *Widget) GetStyle() *Style {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetStyleFunction_Set()
	if err == nil {
		ret = widgetGetStyleFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Style{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetStyleContextFunction *gi.Function
var widgetGetStyleContextFunction_Once sync.Once

func widgetGetStyleContextFunction_Set() error {
	var err error
	widgetGetStyleContextFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetStyleContextFunction, err = widgetStruct.InvokerNew("get_style_context")
	})
	return err
}

// GetStyleContext is a representation of the C type gtk_widget_get_style_context.
func (recv *Widget) GetStyleContext() *StyleContext {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetStyleContextFunction_Set()
	if err == nil {
		ret = widgetGetStyleContextFunction.Invoke(inArgs[:], nil)
	}

	retGo := &StyleContext{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetSupportMultideviceFunction *gi.Function
var widgetGetSupportMultideviceFunction_Once sync.Once

func widgetGetSupportMultideviceFunction_Set() error {
	var err error
	widgetGetSupportMultideviceFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetSupportMultideviceFunction, err = widgetStruct.InvokerNew("get_support_multidevice")
	})
	return err
}

// GetSupportMultidevice is a representation of the C type gtk_widget_get_support_multidevice.
func (recv *Widget) GetSupportMultidevice() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetSupportMultideviceFunction_Set()
	if err == nil {
		ret = widgetGetSupportMultideviceFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_template_child' : parameter 'widget_type' of type 'GType' not supported

var widgetGetTooltipMarkupFunction *gi.Function
var widgetGetTooltipMarkupFunction_Once sync.Once

func widgetGetTooltipMarkupFunction_Set() error {
	var err error
	widgetGetTooltipMarkupFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetTooltipMarkupFunction, err = widgetStruct.InvokerNew("get_tooltip_markup")
	})
	return err
}

// GetTooltipMarkup is a representation of the C type gtk_widget_get_tooltip_markup.
func (recv *Widget) GetTooltipMarkup() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetTooltipMarkupFunction_Set()
	if err == nil {
		ret = widgetGetTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var widgetGetTooltipTextFunction *gi.Function
var widgetGetTooltipTextFunction_Once sync.Once

func widgetGetTooltipTextFunction_Set() error {
	var err error
	widgetGetTooltipTextFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetTooltipTextFunction, err = widgetStruct.InvokerNew("get_tooltip_text")
	})
	return err
}

// GetTooltipText is a representation of the C type gtk_widget_get_tooltip_text.
func (recv *Widget) GetTooltipText() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetTooltipTextFunction_Set()
	if err == nil {
		ret = widgetGetTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(true)

	return retGo
}

var widgetGetTooltipWindowFunction *gi.Function
var widgetGetTooltipWindowFunction_Once sync.Once

func widgetGetTooltipWindowFunction_Set() error {
	var err error
	widgetGetTooltipWindowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetTooltipWindowFunction, err = widgetStruct.InvokerNew("get_tooltip_window")
	})
	return err
}

// GetTooltipWindow is a representation of the C type gtk_widget_get_tooltip_window.
func (recv *Widget) GetTooltipWindow() *Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetTooltipWindowFunction_Set()
	if err == nil {
		ret = widgetGetTooltipWindowFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

var widgetGetToplevelFunction *gi.Function
var widgetGetToplevelFunction_Once sync.Once

func widgetGetToplevelFunction_Set() error {
	var err error
	widgetGetToplevelFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetToplevelFunction, err = widgetStruct.InvokerNew("get_toplevel")
	})
	return err
}

// GetToplevel is a representation of the C type gtk_widget_get_toplevel.
func (recv *Widget) GetToplevel() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetToplevelFunction_Set()
	if err == nil {
		ret = widgetGetToplevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_valign' : return type 'Align' not supported

// UNSUPPORTED : C value 'gtk_widget_get_valign_with_baseline' : return type 'Align' not supported

var widgetGetVexpandFunction *gi.Function
var widgetGetVexpandFunction_Once sync.Once

func widgetGetVexpandFunction_Set() error {
	var err error
	widgetGetVexpandFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetVexpandFunction, err = widgetStruct.InvokerNew("get_vexpand")
	})
	return err
}

// GetVexpand is a representation of the C type gtk_widget_get_vexpand.
func (recv *Widget) GetVexpand() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetVexpandFunction_Set()
	if err == nil {
		ret = widgetGetVexpandFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetVexpandSetFunction *gi.Function
var widgetGetVexpandSetFunction_Once sync.Once

func widgetGetVexpandSetFunction_Set() error {
	var err error
	widgetGetVexpandSetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetVexpandSetFunction, err = widgetStruct.InvokerNew("get_vexpand_set")
	})
	return err
}

// GetVexpandSet is a representation of the C type gtk_widget_get_vexpand_set.
func (recv *Widget) GetVexpandSet() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetVexpandSetFunction_Set()
	if err == nil {
		ret = widgetGetVexpandSetFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetGetVisibleFunction *gi.Function
var widgetGetVisibleFunction_Once sync.Once

func widgetGetVisibleFunction_Set() error {
	var err error
	widgetGetVisibleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGetVisibleFunction, err = widgetStruct.InvokerNew("get_visible")
	})
	return err
}

// GetVisible is a representation of the C type gtk_widget_get_visible.
func (recv *Widget) GetVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetGetVisibleFunction_Set()
	if err == nil {
		ret = widgetGetVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_get_visual' : return type 'Gdk.Visual' not supported

// UNSUPPORTED : C value 'gtk_widget_get_window' : return type 'Gdk.Window' not supported

var widgetGrabAddFunction *gi.Function
var widgetGrabAddFunction_Once sync.Once

func widgetGrabAddFunction_Set() error {
	var err error
	widgetGrabAddFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGrabAddFunction, err = widgetStruct.InvokerNew("grab_add")
	})
	return err
}

// GrabAdd is a representation of the C type gtk_grab_add.
func (recv *Widget) GrabAdd() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetGrabAddFunction_Set()
	if err == nil {
		widgetGrabAddFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetGrabDefaultFunction *gi.Function
var widgetGrabDefaultFunction_Once sync.Once

func widgetGrabDefaultFunction_Set() error {
	var err error
	widgetGrabDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGrabDefaultFunction, err = widgetStruct.InvokerNew("grab_default")
	})
	return err
}

// GrabDefault is a representation of the C type gtk_widget_grab_default.
func (recv *Widget) GrabDefault() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetGrabDefaultFunction_Set()
	if err == nil {
		widgetGrabDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetGrabFocusFunction *gi.Function
var widgetGrabFocusFunction_Once sync.Once

func widgetGrabFocusFunction_Set() error {
	var err error
	widgetGrabFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGrabFocusFunction, err = widgetStruct.InvokerNew("grab_focus")
	})
	return err
}

// GrabFocus is a representation of the C type gtk_widget_grab_focus.
func (recv *Widget) GrabFocus() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetGrabFocusFunction_Set()
	if err == nil {
		widgetGrabFocusFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetGrabRemoveFunction *gi.Function
var widgetGrabRemoveFunction_Once sync.Once

func widgetGrabRemoveFunction_Set() error {
	var err error
	widgetGrabRemoveFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetGrabRemoveFunction, err = widgetStruct.InvokerNew("grab_remove")
	})
	return err
}

// GrabRemove is a representation of the C type gtk_grab_remove.
func (recv *Widget) GrabRemove() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetGrabRemoveFunction_Set()
	if err == nil {
		widgetGrabRemoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetHasDefaultFunction *gi.Function
var widgetHasDefaultFunction_Once sync.Once

func widgetHasDefaultFunction_Set() error {
	var err error
	widgetHasDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasDefaultFunction, err = widgetStruct.InvokerNew("has_default")
	})
	return err
}

// HasDefault is a representation of the C type gtk_widget_has_default.
func (recv *Widget) HasDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasDefaultFunction_Set()
	if err == nil {
		ret = widgetHasDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHasFocusFunction *gi.Function
var widgetHasFocusFunction_Once sync.Once

func widgetHasFocusFunction_Set() error {
	var err error
	widgetHasFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasFocusFunction, err = widgetStruct.InvokerNew("has_focus")
	})
	return err
}

// HasFocus is a representation of the C type gtk_widget_has_focus.
func (recv *Widget) HasFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasFocusFunction_Set()
	if err == nil {
		ret = widgetHasFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHasGrabFunction *gi.Function
var widgetHasGrabFunction_Once sync.Once

func widgetHasGrabFunction_Set() error {
	var err error
	widgetHasGrabFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasGrabFunction, err = widgetStruct.InvokerNew("has_grab")
	})
	return err
}

// HasGrab is a representation of the C type gtk_widget_has_grab.
func (recv *Widget) HasGrab() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasGrabFunction_Set()
	if err == nil {
		ret = widgetHasGrabFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHasRcStyleFunction *gi.Function
var widgetHasRcStyleFunction_Once sync.Once

func widgetHasRcStyleFunction_Set() error {
	var err error
	widgetHasRcStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasRcStyleFunction, err = widgetStruct.InvokerNew("has_rc_style")
	})
	return err
}

// HasRcStyle is a representation of the C type gtk_widget_has_rc_style.
func (recv *Widget) HasRcStyle() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasRcStyleFunction_Set()
	if err == nil {
		ret = widgetHasRcStyleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHasScreenFunction *gi.Function
var widgetHasScreenFunction_Once sync.Once

func widgetHasScreenFunction_Set() error {
	var err error
	widgetHasScreenFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasScreenFunction, err = widgetStruct.InvokerNew("has_screen")
	})
	return err
}

// HasScreen is a representation of the C type gtk_widget_has_screen.
func (recv *Widget) HasScreen() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasScreenFunction_Set()
	if err == nil {
		ret = widgetHasScreenFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHasVisibleFocusFunction *gi.Function
var widgetHasVisibleFocusFunction_Once sync.Once

func widgetHasVisibleFocusFunction_Set() error {
	var err error
	widgetHasVisibleFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHasVisibleFocusFunction, err = widgetStruct.InvokerNew("has_visible_focus")
	})
	return err
}

// HasVisibleFocus is a representation of the C type gtk_widget_has_visible_focus.
func (recv *Widget) HasVisibleFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHasVisibleFocusFunction_Set()
	if err == nil {
		ret = widgetHasVisibleFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetHideFunction *gi.Function
var widgetHideFunction_Once sync.Once

func widgetHideFunction_Set() error {
	var err error
	widgetHideFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHideFunction, err = widgetStruct.InvokerNew("hide")
	})
	return err
}

// Hide is a representation of the C type gtk_widget_hide.
func (recv *Widget) Hide() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetHideFunction_Set()
	if err == nil {
		widgetHideFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetHideOnDeleteFunction *gi.Function
var widgetHideOnDeleteFunction_Once sync.Once

func widgetHideOnDeleteFunction_Set() error {
	var err error
	widgetHideOnDeleteFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetHideOnDeleteFunction, err = widgetStruct.InvokerNew("hide_on_delete")
	})
	return err
}

// HideOnDelete is a representation of the C type gtk_widget_hide_on_delete.
func (recv *Widget) HideOnDelete() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetHideOnDeleteFunction_Set()
	if err == nil {
		ret = widgetHideOnDeleteFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetInDestructionFunction *gi.Function
var widgetInDestructionFunction_Once sync.Once

func widgetInDestructionFunction_Set() error {
	var err error
	widgetInDestructionFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetInDestructionFunction, err = widgetStruct.InvokerNew("in_destruction")
	})
	return err
}

// InDestruction is a representation of the C type gtk_widget_in_destruction.
func (recv *Widget) InDestruction() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetInDestructionFunction_Set()
	if err == nil {
		ret = widgetInDestructionFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetInitTemplateFunction *gi.Function
var widgetInitTemplateFunction_Once sync.Once

func widgetInitTemplateFunction_Set() error {
	var err error
	widgetInitTemplateFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetInitTemplateFunction, err = widgetStruct.InvokerNew("init_template")
	})
	return err
}

// InitTemplate is a representation of the C type gtk_widget_init_template.
func (recv *Widget) InitTemplate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetInitTemplateFunction_Set()
	if err == nil {
		widgetInitTemplateFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_input_shape_combine_region' : parameter 'region' of type 'cairo.Region' not supported

// UNSUPPORTED : C value 'gtk_widget_insert_action_group' : parameter 'group' of type 'Gio.ActionGroup' not supported

// UNSUPPORTED : C value 'gtk_widget_intersect' : parameter 'area' of type 'Gdk.Rectangle' not supported

var widgetIsAncestorFunction *gi.Function
var widgetIsAncestorFunction_Once sync.Once

func widgetIsAncestorFunction_Set() error {
	var err error
	widgetIsAncestorFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsAncestorFunction, err = widgetStruct.InvokerNew("is_ancestor")
	})
	return err
}

// IsAncestor is a representation of the C type gtk_widget_is_ancestor.
func (recv *Widget) IsAncestor(ancestor *Widget) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(ancestor.Native)

	var ret gi.Argument

	err := widgetIsAncestorFunction_Set()
	if err == nil {
		ret = widgetIsAncestorFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsCompositedFunction *gi.Function
var widgetIsCompositedFunction_Once sync.Once

func widgetIsCompositedFunction_Set() error {
	var err error
	widgetIsCompositedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsCompositedFunction, err = widgetStruct.InvokerNew("is_composited")
	})
	return err
}

// IsComposited is a representation of the C type gtk_widget_is_composited.
func (recv *Widget) IsComposited() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsCompositedFunction_Set()
	if err == nil {
		ret = widgetIsCompositedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsDrawableFunction *gi.Function
var widgetIsDrawableFunction_Once sync.Once

func widgetIsDrawableFunction_Set() error {
	var err error
	widgetIsDrawableFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsDrawableFunction, err = widgetStruct.InvokerNew("is_drawable")
	})
	return err
}

// IsDrawable is a representation of the C type gtk_widget_is_drawable.
func (recv *Widget) IsDrawable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsDrawableFunction_Set()
	if err == nil {
		ret = widgetIsDrawableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsFocusFunction *gi.Function
var widgetIsFocusFunction_Once sync.Once

func widgetIsFocusFunction_Set() error {
	var err error
	widgetIsFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsFocusFunction, err = widgetStruct.InvokerNew("is_focus")
	})
	return err
}

// IsFocus is a representation of the C type gtk_widget_is_focus.
func (recv *Widget) IsFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsFocusFunction_Set()
	if err == nil {
		ret = widgetIsFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsSensitiveFunction *gi.Function
var widgetIsSensitiveFunction_Once sync.Once

func widgetIsSensitiveFunction_Set() error {
	var err error
	widgetIsSensitiveFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsSensitiveFunction, err = widgetStruct.InvokerNew("is_sensitive")
	})
	return err
}

// IsSensitive is a representation of the C type gtk_widget_is_sensitive.
func (recv *Widget) IsSensitive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsSensitiveFunction_Set()
	if err == nil {
		ret = widgetIsSensitiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsToplevelFunction *gi.Function
var widgetIsToplevelFunction_Once sync.Once

func widgetIsToplevelFunction_Set() error {
	var err error
	widgetIsToplevelFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsToplevelFunction, err = widgetStruct.InvokerNew("is_toplevel")
	})
	return err
}

// IsToplevel is a representation of the C type gtk_widget_is_toplevel.
func (recv *Widget) IsToplevel() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsToplevelFunction_Set()
	if err == nil {
		ret = widgetIsToplevelFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var widgetIsVisibleFunction *gi.Function
var widgetIsVisibleFunction_Once sync.Once

func widgetIsVisibleFunction_Set() error {
	var err error
	widgetIsVisibleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetIsVisibleFunction, err = widgetStruct.InvokerNew("is_visible")
	})
	return err
}

// IsVisible is a representation of the C type gtk_widget_is_visible.
func (recv *Widget) IsVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := widgetIsVisibleFunction_Set()
	if err == nil {
		ret = widgetIsVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_keynav_failed' : parameter 'direction' of type 'DirectionType' not supported

// UNSUPPORTED : C value 'gtk_widget_list_accel_closures' : return type 'GLib.List' not supported

var widgetListActionPrefixesFunction *gi.Function
var widgetListActionPrefixesFunction_Once sync.Once

func widgetListActionPrefixesFunction_Set() error {
	var err error
	widgetListActionPrefixesFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetListActionPrefixesFunction, err = widgetStruct.InvokerNew("list_action_prefixes")
	})
	return err
}

// ListActionPrefixes is a representation of the C type gtk_widget_list_action_prefixes.
func (recv *Widget) ListActionPrefixes() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetListActionPrefixesFunction_Set()
	if err == nil {
		widgetListActionPrefixesFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_list_mnemonic_labels' : return type 'GLib.List' not supported

var widgetMapFunction *gi.Function
var widgetMapFunction_Once sync.Once

func widgetMapFunction_Set() error {
	var err error
	widgetMapFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetMapFunction, err = widgetStruct.InvokerNew("map")
	})
	return err
}

// Map is a representation of the C type gtk_widget_map.
func (recv *Widget) Map() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetMapFunction_Set()
	if err == nil {
		widgetMapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetMnemonicActivateFunction *gi.Function
var widgetMnemonicActivateFunction_Once sync.Once

func widgetMnemonicActivateFunction_Set() error {
	var err error
	widgetMnemonicActivateFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetMnemonicActivateFunction, err = widgetStruct.InvokerNew("mnemonic_activate")
	})
	return err
}

// MnemonicActivate is a representation of the C type gtk_widget_mnemonic_activate.
func (recv *Widget) MnemonicActivate(groupCycling bool) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(groupCycling)

	var ret gi.Argument

	err := widgetMnemonicActivateFunction_Set()
	if err == nil {
		ret = widgetMnemonicActivateFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_widget_modify_base' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_modify_bg' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_modify_cursor' : parameter 'primary' of type 'Gdk.Color' not supported

// UNSUPPORTED : C value 'gtk_widget_modify_fg' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_modify_font' : parameter 'font_desc' of type 'Pango.FontDescription' not supported

var widgetModifyStyleFunction *gi.Function
var widgetModifyStyleFunction_Once sync.Once

func widgetModifyStyleFunction_Set() error {
	var err error
	widgetModifyStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetModifyStyleFunction, err = widgetStruct.InvokerNew("modify_style")
	})
	return err
}

// ModifyStyle is a representation of the C type gtk_widget_modify_style.
func (recv *Widget) ModifyStyle(style *RcStyle) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(style.Native)

	err := widgetModifyStyleFunction_Set()
	if err == nil {
		widgetModifyStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_modify_text' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_override_background_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_widget_override_color' : parameter 'state' of type 'StateFlags' not supported

// UNSUPPORTED : C value 'gtk_widget_override_cursor' : parameter 'cursor' of type 'Gdk.RGBA' not supported

// UNSUPPORTED : C value 'gtk_widget_override_font' : parameter 'font_desc' of type 'Pango.FontDescription' not supported

// UNSUPPORTED : C value 'gtk_widget_override_symbolic_color' : parameter 'color' of type 'Gdk.RGBA' not supported

var widgetPathFunction *gi.Function
var widgetPathFunction_Once sync.Once

func widgetPathFunction_Set() error {
	var err error
	widgetPathFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetPathFunction, err = widgetStruct.InvokerNew("path")
	})
	return err
}

// Path is a representation of the C type gtk_widget_path.
func (recv *Widget) Path() (uint32, string, string) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [3]gi.Argument

	err := widgetPathFunction_Set()
	if err == nil {
		widgetPathFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Uint32()
	out1 := outArgs[1].String(true)
	out2 := outArgs[2].String(true)

	return out0, out1, out2
}

var widgetQueueAllocateFunction *gi.Function
var widgetQueueAllocateFunction_Once sync.Once

func widgetQueueAllocateFunction_Set() error {
	var err error
	widgetQueueAllocateFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueAllocateFunction, err = widgetStruct.InvokerNew("queue_allocate")
	})
	return err
}

// QueueAllocate is a representation of the C type gtk_widget_queue_allocate.
func (recv *Widget) QueueAllocate() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetQueueAllocateFunction_Set()
	if err == nil {
		widgetQueueAllocateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetQueueComputeExpandFunction *gi.Function
var widgetQueueComputeExpandFunction_Once sync.Once

func widgetQueueComputeExpandFunction_Set() error {
	var err error
	widgetQueueComputeExpandFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueComputeExpandFunction, err = widgetStruct.InvokerNew("queue_compute_expand")
	})
	return err
}

// QueueComputeExpand is a representation of the C type gtk_widget_queue_compute_expand.
func (recv *Widget) QueueComputeExpand() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetQueueComputeExpandFunction_Set()
	if err == nil {
		widgetQueueComputeExpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetQueueDrawFunction *gi.Function
var widgetQueueDrawFunction_Once sync.Once

func widgetQueueDrawFunction_Set() error {
	var err error
	widgetQueueDrawFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueDrawFunction, err = widgetStruct.InvokerNew("queue_draw")
	})
	return err
}

// QueueDraw is a representation of the C type gtk_widget_queue_draw.
func (recv *Widget) QueueDraw() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetQueueDrawFunction_Set()
	if err == nil {
		widgetQueueDrawFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetQueueDrawAreaFunction *gi.Function
var widgetQueueDrawAreaFunction_Once sync.Once

func widgetQueueDrawAreaFunction_Set() error {
	var err error
	widgetQueueDrawAreaFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueDrawAreaFunction, err = widgetStruct.InvokerNew("queue_draw_area")
	})
	return err
}

// QueueDrawArea is a representation of the C type gtk_widget_queue_draw_area.
func (recv *Widget) QueueDrawArea(x int32, y int32, width int32, height int32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)
	inArgs[3].SetInt32(width)
	inArgs[4].SetInt32(height)

	err := widgetQueueDrawAreaFunction_Set()
	if err == nil {
		widgetQueueDrawAreaFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_queue_draw_region' : parameter 'region' of type 'cairo.Region' not supported

var widgetQueueResizeFunction *gi.Function
var widgetQueueResizeFunction_Once sync.Once

func widgetQueueResizeFunction_Set() error {
	var err error
	widgetQueueResizeFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueResizeFunction, err = widgetStruct.InvokerNew("queue_resize")
	})
	return err
}

// QueueResize is a representation of the C type gtk_widget_queue_resize.
func (recv *Widget) QueueResize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetQueueResizeFunction_Set()
	if err == nil {
		widgetQueueResizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetQueueResizeNoRedrawFunction *gi.Function
var widgetQueueResizeNoRedrawFunction_Once sync.Once

func widgetQueueResizeNoRedrawFunction_Set() error {
	var err error
	widgetQueueResizeNoRedrawFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetQueueResizeNoRedrawFunction, err = widgetStruct.InvokerNew("queue_resize_no_redraw")
	})
	return err
}

// QueueResizeNoRedraw is a representation of the C type gtk_widget_queue_resize_no_redraw.
func (recv *Widget) QueueResizeNoRedraw() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetQueueResizeNoRedrawFunction_Set()
	if err == nil {
		widgetQueueResizeNoRedrawFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetRealizeFunction *gi.Function
var widgetRealizeFunction_Once sync.Once

func widgetRealizeFunction_Set() error {
	var err error
	widgetRealizeFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetRealizeFunction, err = widgetStruct.InvokerNew("realize")
	})
	return err
}

// Realize is a representation of the C type gtk_widget_realize.
func (recv *Widget) Realize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetRealizeFunction_Set()
	if err == nil {
		widgetRealizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_region_intersect' : parameter 'region' of type 'cairo.Region' not supported

// UNSUPPORTED : C value 'gtk_widget_register_window' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_widget_remove_accelerator' : parameter 'accel_mods' of type 'Gdk.ModifierType' not supported

var widgetRemoveMnemonicLabelFunction *gi.Function
var widgetRemoveMnemonicLabelFunction_Once sync.Once

func widgetRemoveMnemonicLabelFunction_Set() error {
	var err error
	widgetRemoveMnemonicLabelFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetRemoveMnemonicLabelFunction, err = widgetStruct.InvokerNew("remove_mnemonic_label")
	})
	return err
}

// RemoveMnemonicLabel is a representation of the C type gtk_widget_remove_mnemonic_label.
func (recv *Widget) RemoveMnemonicLabel(label *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(label.Native)

	err := widgetRemoveMnemonicLabelFunction_Set()
	if err == nil {
		widgetRemoveMnemonicLabelFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetRemoveTickCallbackFunction *gi.Function
var widgetRemoveTickCallbackFunction_Once sync.Once

func widgetRemoveTickCallbackFunction_Set() error {
	var err error
	widgetRemoveTickCallbackFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetRemoveTickCallbackFunction, err = widgetStruct.InvokerNew("remove_tick_callback")
	})
	return err
}

// RemoveTickCallback is a representation of the C type gtk_widget_remove_tick_callback.
func (recv *Widget) RemoveTickCallback(id uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(id)

	err := widgetRemoveTickCallbackFunction_Set()
	if err == nil {
		widgetRemoveTickCallbackFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_render_icon' : parameter 'size' of type 'IconSize' not supported

// UNSUPPORTED : C value 'gtk_widget_render_icon_pixbuf' : parameter 'size' of type 'IconSize' not supported

var widgetReparentFunction *gi.Function
var widgetReparentFunction_Once sync.Once

func widgetReparentFunction_Set() error {
	var err error
	widgetReparentFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetReparentFunction, err = widgetStruct.InvokerNew("reparent")
	})
	return err
}

// Reparent is a representation of the C type gtk_widget_reparent.
func (recv *Widget) Reparent(newParent *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(newParent.Native)

	err := widgetReparentFunction_Set()
	if err == nil {
		widgetReparentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetResetRcStylesFunction *gi.Function
var widgetResetRcStylesFunction_Once sync.Once

func widgetResetRcStylesFunction_Set() error {
	var err error
	widgetResetRcStylesFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetResetRcStylesFunction, err = widgetStruct.InvokerNew("reset_rc_styles")
	})
	return err
}

// ResetRcStyles is a representation of the C type gtk_widget_reset_rc_styles.
func (recv *Widget) ResetRcStyles() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetResetRcStylesFunction_Set()
	if err == nil {
		widgetResetRcStylesFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetResetStyleFunction *gi.Function
var widgetResetStyleFunction_Once sync.Once

func widgetResetStyleFunction_Set() error {
	var err error
	widgetResetStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetResetStyleFunction, err = widgetStruct.InvokerNew("reset_style")
	})
	return err
}

// ResetStyle is a representation of the C type gtk_widget_reset_style.
func (recv *Widget) ResetStyle() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetResetStyleFunction_Set()
	if err == nil {
		widgetResetStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_send_expose' : parameter 'event' of type 'Gdk.Event' not supported

// UNSUPPORTED : C value 'gtk_widget_send_focus_change' : parameter 'event' of type 'Gdk.Event' not supported

var widgetSetAccelPathFunction *gi.Function
var widgetSetAccelPathFunction_Once sync.Once

func widgetSetAccelPathFunction_Set() error {
	var err error
	widgetSetAccelPathFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetAccelPathFunction, err = widgetStruct.InvokerNew("set_accel_path")
	})
	return err
}

// SetAccelPath is a representation of the C type gtk_widget_set_accel_path.
func (recv *Widget) SetAccelPath(accelPath string, accelGroup *AccelGroup) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(accelPath)
	inArgs[2].SetPointer(accelGroup.Native)

	err := widgetSetAccelPathFunction_Set()
	if err == nil {
		widgetSetAccelPathFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_allocation' : parameter 'allocation' of type 'Allocation' not supported

var widgetSetAppPaintableFunction *gi.Function
var widgetSetAppPaintableFunction_Once sync.Once

func widgetSetAppPaintableFunction_Set() error {
	var err error
	widgetSetAppPaintableFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetAppPaintableFunction, err = widgetStruct.InvokerNew("set_app_paintable")
	})
	return err
}

// SetAppPaintable is a representation of the C type gtk_widget_set_app_paintable.
func (recv *Widget) SetAppPaintable(appPaintable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(appPaintable)

	err := widgetSetAppPaintableFunction_Set()
	if err == nil {
		widgetSetAppPaintableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetCanDefaultFunction *gi.Function
var widgetSetCanDefaultFunction_Once sync.Once

func widgetSetCanDefaultFunction_Set() error {
	var err error
	widgetSetCanDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetCanDefaultFunction, err = widgetStruct.InvokerNew("set_can_default")
	})
	return err
}

// SetCanDefault is a representation of the C type gtk_widget_set_can_default.
func (recv *Widget) SetCanDefault(canDefault bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(canDefault)

	err := widgetSetCanDefaultFunction_Set()
	if err == nil {
		widgetSetCanDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetCanFocusFunction *gi.Function
var widgetSetCanFocusFunction_Once sync.Once

func widgetSetCanFocusFunction_Set() error {
	var err error
	widgetSetCanFocusFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetCanFocusFunction, err = widgetStruct.InvokerNew("set_can_focus")
	})
	return err
}

// SetCanFocus is a representation of the C type gtk_widget_set_can_focus.
func (recv *Widget) SetCanFocus(canFocus bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(canFocus)

	err := widgetSetCanFocusFunction_Set()
	if err == nil {
		widgetSetCanFocusFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetChildVisibleFunction *gi.Function
var widgetSetChildVisibleFunction_Once sync.Once

func widgetSetChildVisibleFunction_Set() error {
	var err error
	widgetSetChildVisibleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetChildVisibleFunction, err = widgetStruct.InvokerNew("set_child_visible")
	})
	return err
}

// SetChildVisible is a representation of the C type gtk_widget_set_child_visible.
func (recv *Widget) SetChildVisible(isVisible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(isVisible)

	err := widgetSetChildVisibleFunction_Set()
	if err == nil {
		widgetSetChildVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_clip' : parameter 'clip' of type 'Allocation' not supported

var widgetSetCompositeNameFunction *gi.Function
var widgetSetCompositeNameFunction_Once sync.Once

func widgetSetCompositeNameFunction_Set() error {
	var err error
	widgetSetCompositeNameFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetCompositeNameFunction, err = widgetStruct.InvokerNew("set_composite_name")
	})
	return err
}

// SetCompositeName is a representation of the C type gtk_widget_set_composite_name.
func (recv *Widget) SetCompositeName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := widgetSetCompositeNameFunction_Set()
	if err == nil {
		widgetSetCompositeNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_device_enabled' : parameter 'device' of type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_widget_set_device_events' : parameter 'device' of type 'Gdk.Device' not supported

// UNSUPPORTED : C value 'gtk_widget_set_direction' : parameter 'dir' of type 'TextDirection' not supported

var widgetSetDoubleBufferedFunction *gi.Function
var widgetSetDoubleBufferedFunction_Once sync.Once

func widgetSetDoubleBufferedFunction_Set() error {
	var err error
	widgetSetDoubleBufferedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetDoubleBufferedFunction, err = widgetStruct.InvokerNew("set_double_buffered")
	})
	return err
}

// SetDoubleBuffered is a representation of the C type gtk_widget_set_double_buffered.
func (recv *Widget) SetDoubleBuffered(doubleBuffered bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(doubleBuffered)

	err := widgetSetDoubleBufferedFunction_Set()
	if err == nil {
		widgetSetDoubleBufferedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetEventsFunction *gi.Function
var widgetSetEventsFunction_Once sync.Once

func widgetSetEventsFunction_Set() error {
	var err error
	widgetSetEventsFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetEventsFunction, err = widgetStruct.InvokerNew("set_events")
	})
	return err
}

// SetEvents is a representation of the C type gtk_widget_set_events.
func (recv *Widget) SetEvents(events int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(events)

	err := widgetSetEventsFunction_Set()
	if err == nil {
		widgetSetEventsFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetFocusOnClickFunction *gi.Function
var widgetSetFocusOnClickFunction_Once sync.Once

func widgetSetFocusOnClickFunction_Set() error {
	var err error
	widgetSetFocusOnClickFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetFocusOnClickFunction, err = widgetStruct.InvokerNew("set_focus_on_click")
	})
	return err
}

// SetFocusOnClick is a representation of the C type gtk_widget_set_focus_on_click.
func (recv *Widget) SetFocusOnClick(focusOnClick bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(focusOnClick)

	err := widgetSetFocusOnClickFunction_Set()
	if err == nil {
		widgetSetFocusOnClickFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_font_map' : parameter 'font_map' of type 'Pango.FontMap' not supported

// UNSUPPORTED : C value 'gtk_widget_set_font_options' : parameter 'options' of type 'cairo.FontOptions' not supported

// UNSUPPORTED : C value 'gtk_widget_set_halign' : parameter 'align' of type 'Align' not supported

var widgetSetHasTooltipFunction *gi.Function
var widgetSetHasTooltipFunction_Once sync.Once

func widgetSetHasTooltipFunction_Set() error {
	var err error
	widgetSetHasTooltipFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetHasTooltipFunction, err = widgetStruct.InvokerNew("set_has_tooltip")
	})
	return err
}

// SetHasTooltip is a representation of the C type gtk_widget_set_has_tooltip.
func (recv *Widget) SetHasTooltip(hasTooltip bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasTooltip)

	err := widgetSetHasTooltipFunction_Set()
	if err == nil {
		widgetSetHasTooltipFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetHasWindowFunction *gi.Function
var widgetSetHasWindowFunction_Once sync.Once

func widgetSetHasWindowFunction_Set() error {
	var err error
	widgetSetHasWindowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetHasWindowFunction, err = widgetStruct.InvokerNew("set_has_window")
	})
	return err
}

// SetHasWindow is a representation of the C type gtk_widget_set_has_window.
func (recv *Widget) SetHasWindow(hasWindow bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(hasWindow)

	err := widgetSetHasWindowFunction_Set()
	if err == nil {
		widgetSetHasWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetHexpandFunction *gi.Function
var widgetSetHexpandFunction_Once sync.Once

func widgetSetHexpandFunction_Set() error {
	var err error
	widgetSetHexpandFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetHexpandFunction, err = widgetStruct.InvokerNew("set_hexpand")
	})
	return err
}

// SetHexpand is a representation of the C type gtk_widget_set_hexpand.
func (recv *Widget) SetHexpand(expand bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expand)

	err := widgetSetHexpandFunction_Set()
	if err == nil {
		widgetSetHexpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetHexpandSetFunction *gi.Function
var widgetSetHexpandSetFunction_Once sync.Once

func widgetSetHexpandSetFunction_Set() error {
	var err error
	widgetSetHexpandSetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetHexpandSetFunction, err = widgetStruct.InvokerNew("set_hexpand_set")
	})
	return err
}

// SetHexpandSet is a representation of the C type gtk_widget_set_hexpand_set.
func (recv *Widget) SetHexpandSet(set bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(set)

	err := widgetSetHexpandSetFunction_Set()
	if err == nil {
		widgetSetHexpandSetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMappedFunction *gi.Function
var widgetSetMappedFunction_Once sync.Once

func widgetSetMappedFunction_Set() error {
	var err error
	widgetSetMappedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMappedFunction, err = widgetStruct.InvokerNew("set_mapped")
	})
	return err
}

// SetMapped is a representation of the C type gtk_widget_set_mapped.
func (recv *Widget) SetMapped(mapped bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(mapped)

	err := widgetSetMappedFunction_Set()
	if err == nil {
		widgetSetMappedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginBottomFunction *gi.Function
var widgetSetMarginBottomFunction_Once sync.Once

func widgetSetMarginBottomFunction_Set() error {
	var err error
	widgetSetMarginBottomFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginBottomFunction, err = widgetStruct.InvokerNew("set_margin_bottom")
	})
	return err
}

// SetMarginBottom is a representation of the C type gtk_widget_set_margin_bottom.
func (recv *Widget) SetMarginBottom(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginBottomFunction_Set()
	if err == nil {
		widgetSetMarginBottomFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginEndFunction *gi.Function
var widgetSetMarginEndFunction_Once sync.Once

func widgetSetMarginEndFunction_Set() error {
	var err error
	widgetSetMarginEndFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginEndFunction, err = widgetStruct.InvokerNew("set_margin_end")
	})
	return err
}

// SetMarginEnd is a representation of the C type gtk_widget_set_margin_end.
func (recv *Widget) SetMarginEnd(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginEndFunction_Set()
	if err == nil {
		widgetSetMarginEndFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginLeftFunction *gi.Function
var widgetSetMarginLeftFunction_Once sync.Once

func widgetSetMarginLeftFunction_Set() error {
	var err error
	widgetSetMarginLeftFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginLeftFunction, err = widgetStruct.InvokerNew("set_margin_left")
	})
	return err
}

// SetMarginLeft is a representation of the C type gtk_widget_set_margin_left.
func (recv *Widget) SetMarginLeft(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginLeftFunction_Set()
	if err == nil {
		widgetSetMarginLeftFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginRightFunction *gi.Function
var widgetSetMarginRightFunction_Once sync.Once

func widgetSetMarginRightFunction_Set() error {
	var err error
	widgetSetMarginRightFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginRightFunction, err = widgetStruct.InvokerNew("set_margin_right")
	})
	return err
}

// SetMarginRight is a representation of the C type gtk_widget_set_margin_right.
func (recv *Widget) SetMarginRight(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginRightFunction_Set()
	if err == nil {
		widgetSetMarginRightFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginStartFunction *gi.Function
var widgetSetMarginStartFunction_Once sync.Once

func widgetSetMarginStartFunction_Set() error {
	var err error
	widgetSetMarginStartFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginStartFunction, err = widgetStruct.InvokerNew("set_margin_start")
	})
	return err
}

// SetMarginStart is a representation of the C type gtk_widget_set_margin_start.
func (recv *Widget) SetMarginStart(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginStartFunction_Set()
	if err == nil {
		widgetSetMarginStartFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetMarginTopFunction *gi.Function
var widgetSetMarginTopFunction_Once sync.Once

func widgetSetMarginTopFunction_Set() error {
	var err error
	widgetSetMarginTopFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetMarginTopFunction, err = widgetStruct.InvokerNew("set_margin_top")
	})
	return err
}

// SetMarginTop is a representation of the C type gtk_widget_set_margin_top.
func (recv *Widget) SetMarginTop(margin int32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(margin)

	err := widgetSetMarginTopFunction_Set()
	if err == nil {
		widgetSetMarginTopFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetNameFunction *gi.Function
var widgetSetNameFunction_Once sync.Once

func widgetSetNameFunction_Set() error {
	var err error
	widgetSetNameFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetNameFunction, err = widgetStruct.InvokerNew("set_name")
	})
	return err
}

// SetName is a representation of the C type gtk_widget_set_name.
func (recv *Widget) SetName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := widgetSetNameFunction_Set()
	if err == nil {
		widgetSetNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetNoShowAllFunction *gi.Function
var widgetSetNoShowAllFunction_Once sync.Once

func widgetSetNoShowAllFunction_Set() error {
	var err error
	widgetSetNoShowAllFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetNoShowAllFunction, err = widgetStruct.InvokerNew("set_no_show_all")
	})
	return err
}

// SetNoShowAll is a representation of the C type gtk_widget_set_no_show_all.
func (recv *Widget) SetNoShowAll(noShowAll bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(noShowAll)

	err := widgetSetNoShowAllFunction_Set()
	if err == nil {
		widgetSetNoShowAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetOpacityFunction *gi.Function
var widgetSetOpacityFunction_Once sync.Once

func widgetSetOpacityFunction_Set() error {
	var err error
	widgetSetOpacityFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetOpacityFunction, err = widgetStruct.InvokerNew("set_opacity")
	})
	return err
}

// SetOpacity is a representation of the C type gtk_widget_set_opacity.
func (recv *Widget) SetOpacity(opacity float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(opacity)

	err := widgetSetOpacityFunction_Set()
	if err == nil {
		widgetSetOpacityFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetParentFunction *gi.Function
var widgetSetParentFunction_Once sync.Once

func widgetSetParentFunction_Set() error {
	var err error
	widgetSetParentFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetParentFunction, err = widgetStruct.InvokerNew("set_parent")
	})
	return err
}

// SetParent is a representation of the C type gtk_widget_set_parent.
func (recv *Widget) SetParent(parent *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	err := widgetSetParentFunction_Set()
	if err == nil {
		widgetSetParentFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_parent_window' : parameter 'parent_window' of type 'Gdk.Window' not supported

var widgetSetRealizedFunction *gi.Function
var widgetSetRealizedFunction_Once sync.Once

func widgetSetRealizedFunction_Set() error {
	var err error
	widgetSetRealizedFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetRealizedFunction, err = widgetStruct.InvokerNew("set_realized")
	})
	return err
}

// SetRealized is a representation of the C type gtk_widget_set_realized.
func (recv *Widget) SetRealized(realized bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(realized)

	err := widgetSetRealizedFunction_Set()
	if err == nil {
		widgetSetRealizedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetReceivesDefaultFunction *gi.Function
var widgetSetReceivesDefaultFunction_Once sync.Once

func widgetSetReceivesDefaultFunction_Set() error {
	var err error
	widgetSetReceivesDefaultFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetReceivesDefaultFunction, err = widgetStruct.InvokerNew("set_receives_default")
	})
	return err
}

// SetReceivesDefault is a representation of the C type gtk_widget_set_receives_default.
func (recv *Widget) SetReceivesDefault(receivesDefault bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(receivesDefault)

	err := widgetSetReceivesDefaultFunction_Set()
	if err == nil {
		widgetSetReceivesDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetRedrawOnAllocateFunction *gi.Function
var widgetSetRedrawOnAllocateFunction_Once sync.Once

func widgetSetRedrawOnAllocateFunction_Set() error {
	var err error
	widgetSetRedrawOnAllocateFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetRedrawOnAllocateFunction, err = widgetStruct.InvokerNew("set_redraw_on_allocate")
	})
	return err
}

// SetRedrawOnAllocate is a representation of the C type gtk_widget_set_redraw_on_allocate.
func (recv *Widget) SetRedrawOnAllocate(redrawOnAllocate bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(redrawOnAllocate)

	err := widgetSetRedrawOnAllocateFunction_Set()
	if err == nil {
		widgetSetRedrawOnAllocateFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetSensitiveFunction *gi.Function
var widgetSetSensitiveFunction_Once sync.Once

func widgetSetSensitiveFunction_Set() error {
	var err error
	widgetSetSensitiveFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetSensitiveFunction, err = widgetStruct.InvokerNew("set_sensitive")
	})
	return err
}

// SetSensitive is a representation of the C type gtk_widget_set_sensitive.
func (recv *Widget) SetSensitive(sensitive bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(sensitive)

	err := widgetSetSensitiveFunction_Set()
	if err == nil {
		widgetSetSensitiveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetSizeRequestFunction *gi.Function
var widgetSetSizeRequestFunction_Once sync.Once

func widgetSetSizeRequestFunction_Set() error {
	var err error
	widgetSetSizeRequestFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetSizeRequestFunction, err = widgetStruct.InvokerNew("set_size_request")
	})
	return err
}

// SetSizeRequest is a representation of the C type gtk_widget_set_size_request.
func (recv *Widget) SetSizeRequest(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := widgetSetSizeRequestFunction_Set()
	if err == nil {
		widgetSetSizeRequestFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_state' : parameter 'state' of type 'StateType' not supported

// UNSUPPORTED : C value 'gtk_widget_set_state_flags' : parameter 'flags' of type 'StateFlags' not supported

var widgetSetStyleFunction *gi.Function
var widgetSetStyleFunction_Once sync.Once

func widgetSetStyleFunction_Set() error {
	var err error
	widgetSetStyleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetStyleFunction, err = widgetStruct.InvokerNew("set_style")
	})
	return err
}

// SetStyle is a representation of the C type gtk_widget_set_style.
func (recv *Widget) SetStyle(style *Style) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(style.Native)

	err := widgetSetStyleFunction_Set()
	if err == nil {
		widgetSetStyleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetSupportMultideviceFunction *gi.Function
var widgetSetSupportMultideviceFunction_Once sync.Once

func widgetSetSupportMultideviceFunction_Set() error {
	var err error
	widgetSetSupportMultideviceFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetSupportMultideviceFunction, err = widgetStruct.InvokerNew("set_support_multidevice")
	})
	return err
}

// SetSupportMultidevice is a representation of the C type gtk_widget_set_support_multidevice.
func (recv *Widget) SetSupportMultidevice(supportMultidevice bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(supportMultidevice)

	err := widgetSetSupportMultideviceFunction_Set()
	if err == nil {
		widgetSetSupportMultideviceFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetTooltipMarkupFunction *gi.Function
var widgetSetTooltipMarkupFunction_Once sync.Once

func widgetSetTooltipMarkupFunction_Set() error {
	var err error
	widgetSetTooltipMarkupFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetTooltipMarkupFunction, err = widgetStruct.InvokerNew("set_tooltip_markup")
	})
	return err
}

// SetTooltipMarkup is a representation of the C type gtk_widget_set_tooltip_markup.
func (recv *Widget) SetTooltipMarkup(markup string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(markup)

	err := widgetSetTooltipMarkupFunction_Set()
	if err == nil {
		widgetSetTooltipMarkupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetTooltipTextFunction *gi.Function
var widgetSetTooltipTextFunction_Once sync.Once

func widgetSetTooltipTextFunction_Set() error {
	var err error
	widgetSetTooltipTextFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetTooltipTextFunction, err = widgetStruct.InvokerNew("set_tooltip_text")
	})
	return err
}

// SetTooltipText is a representation of the C type gtk_widget_set_tooltip_text.
func (recv *Widget) SetTooltipText(text string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(text)

	err := widgetSetTooltipTextFunction_Set()
	if err == nil {
		widgetSetTooltipTextFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetTooltipWindowFunction *gi.Function
var widgetSetTooltipWindowFunction_Once sync.Once

func widgetSetTooltipWindowFunction_Set() error {
	var err error
	widgetSetTooltipWindowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetTooltipWindowFunction, err = widgetStruct.InvokerNew("set_tooltip_window")
	})
	return err
}

// SetTooltipWindow is a representation of the C type gtk_widget_set_tooltip_window.
func (recv *Widget) SetTooltipWindow(customWindow *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(customWindow.Native)

	err := widgetSetTooltipWindowFunction_Set()
	if err == nil {
		widgetSetTooltipWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_valign' : parameter 'align' of type 'Align' not supported

var widgetSetVexpandFunction *gi.Function
var widgetSetVexpandFunction_Once sync.Once

func widgetSetVexpandFunction_Set() error {
	var err error
	widgetSetVexpandFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetVexpandFunction, err = widgetStruct.InvokerNew("set_vexpand")
	})
	return err
}

// SetVexpand is a representation of the C type gtk_widget_set_vexpand.
func (recv *Widget) SetVexpand(expand bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(expand)

	err := widgetSetVexpandFunction_Set()
	if err == nil {
		widgetSetVexpandFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetVexpandSetFunction *gi.Function
var widgetSetVexpandSetFunction_Once sync.Once

func widgetSetVexpandSetFunction_Set() error {
	var err error
	widgetSetVexpandSetFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetVexpandSetFunction, err = widgetStruct.InvokerNew("set_vexpand_set")
	})
	return err
}

// SetVexpandSet is a representation of the C type gtk_widget_set_vexpand_set.
func (recv *Widget) SetVexpandSet(set bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(set)

	err := widgetSetVexpandSetFunction_Set()
	if err == nil {
		widgetSetVexpandSetFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetSetVisibleFunction *gi.Function
var widgetSetVisibleFunction_Once sync.Once

func widgetSetVisibleFunction_Set() error {
	var err error
	widgetSetVisibleFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSetVisibleFunction, err = widgetStruct.InvokerNew("set_visible")
	})
	return err
}

// SetVisible is a representation of the C type gtk_widget_set_visible.
func (recv *Widget) SetVisible(visible bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(visible)

	err := widgetSetVisibleFunction_Set()
	if err == nil {
		widgetSetVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_set_visual' : parameter 'visual' of type 'Gdk.Visual' not supported

// UNSUPPORTED : C value 'gtk_widget_set_window' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_widget_shape_combine_region' : parameter 'region' of type 'cairo.Region' not supported

var widgetShowFunction *gi.Function
var widgetShowFunction_Once sync.Once

func widgetShowFunction_Set() error {
	var err error
	widgetShowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetShowFunction, err = widgetStruct.InvokerNew("show")
	})
	return err
}

// Show is a representation of the C type gtk_widget_show.
func (recv *Widget) Show() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetShowFunction_Set()
	if err == nil {
		widgetShowFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetShowAllFunction *gi.Function
var widgetShowAllFunction_Once sync.Once

func widgetShowAllFunction_Set() error {
	var err error
	widgetShowAllFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetShowAllFunction, err = widgetStruct.InvokerNew("show_all")
	})
	return err
}

// ShowAll is a representation of the C type gtk_widget_show_all.
func (recv *Widget) ShowAll() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetShowAllFunction_Set()
	if err == nil {
		widgetShowAllFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetShowNowFunction *gi.Function
var widgetShowNowFunction_Once sync.Once

func widgetShowNowFunction_Set() error {
	var err error
	widgetShowNowFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetShowNowFunction, err = widgetStruct.InvokerNew("show_now")
	})
	return err
}

// ShowNow is a representation of the C type gtk_widget_show_now.
func (recv *Widget) ShowNow() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetShowNowFunction_Set()
	if err == nil {
		widgetShowNowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_size_allocate' : parameter 'allocation' of type 'Allocation' not supported

// UNSUPPORTED : C value 'gtk_widget_size_allocate_with_baseline' : parameter 'allocation' of type 'Allocation' not supported

var widgetSizeRequestFunction *gi.Function
var widgetSizeRequestFunction_Once sync.Once

func widgetSizeRequestFunction_Set() error {
	var err error
	widgetSizeRequestFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetSizeRequestFunction, err = widgetStruct.InvokerNew("size_request")
	})
	return err
}

// SizeRequest is a representation of the C type gtk_widget_size_request.
func (recv *Widget) SizeRequest() *Requisition {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [1]gi.Argument

	err := widgetSizeRequestFunction_Set()
	if err == nil {
		widgetSizeRequestFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := &Requisition{}
	out0.Native = outArgs[0].Pointer()

	return out0
}

var widgetStyleAttachFunction *gi.Function
var widgetStyleAttachFunction_Once sync.Once

func widgetStyleAttachFunction_Set() error {
	var err error
	widgetStyleAttachFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetStyleAttachFunction, err = widgetStruct.InvokerNew("style_attach")
	})
	return err
}

// StyleAttach is a representation of the C type gtk_widget_style_attach.
func (recv *Widget) StyleAttach() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetStyleAttachFunction_Set()
	if err == nil {
		widgetStyleAttachFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_style_get' : parameter '...' of type 'nil' not supported

// UNSUPPORTED : C value 'gtk_widget_style_get_property' : parameter 'value' of type 'GObject.Value' not supported

// UNSUPPORTED : C value 'gtk_widget_style_get_valist' : parameter 'var_args' of type 'va_list' not supported

var widgetThawChildNotifyFunction *gi.Function
var widgetThawChildNotifyFunction_Once sync.Once

func widgetThawChildNotifyFunction_Set() error {
	var err error
	widgetThawChildNotifyFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetThawChildNotifyFunction, err = widgetStruct.InvokerNew("thaw_child_notify")
	})
	return err
}

// ThawChildNotify is a representation of the C type gtk_widget_thaw_child_notify.
func (recv *Widget) ThawChildNotify() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetThawChildNotifyFunction_Set()
	if err == nil {
		widgetThawChildNotifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetTranslateCoordinatesFunction *gi.Function
var widgetTranslateCoordinatesFunction_Once sync.Once

func widgetTranslateCoordinatesFunction_Set() error {
	var err error
	widgetTranslateCoordinatesFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetTranslateCoordinatesFunction, err = widgetStruct.InvokerNew("translate_coordinates")
	})
	return err
}

// TranslateCoordinates is a representation of the C type gtk_widget_translate_coordinates.
func (recv *Widget) TranslateCoordinates(destWidget *Widget, srcX int32, srcY int32) (bool, int32, int32) {
	var inArgs [4]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(destWidget.Native)
	inArgs[2].SetInt32(srcX)
	inArgs[3].SetInt32(srcY)

	var outArgs [2]gi.Argument
	var ret gi.Argument

	err := widgetTranslateCoordinatesFunction_Set()
	if err == nil {
		ret = widgetTranslateCoordinatesFunction.Invoke(inArgs[:], outArgs[:])
	}

	retGo := ret.Boolean()
	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return retGo, out0, out1
}

var widgetTriggerTooltipQueryFunction *gi.Function
var widgetTriggerTooltipQueryFunction_Once sync.Once

func widgetTriggerTooltipQueryFunction_Set() error {
	var err error
	widgetTriggerTooltipQueryFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetTriggerTooltipQueryFunction, err = widgetStruct.InvokerNew("trigger_tooltip_query")
	})
	return err
}

// TriggerTooltipQuery is a representation of the C type gtk_widget_trigger_tooltip_query.
func (recv *Widget) TriggerTooltipQuery() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetTriggerTooltipQueryFunction_Set()
	if err == nil {
		widgetTriggerTooltipQueryFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetUnmapFunction *gi.Function
var widgetUnmapFunction_Once sync.Once

func widgetUnmapFunction_Set() error {
	var err error
	widgetUnmapFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetUnmapFunction, err = widgetStruct.InvokerNew("unmap")
	})
	return err
}

// Unmap is a representation of the C type gtk_widget_unmap.
func (recv *Widget) Unmap() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetUnmapFunction_Set()
	if err == nil {
		widgetUnmapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetUnparentFunction *gi.Function
var widgetUnparentFunction_Once sync.Once

func widgetUnparentFunction_Set() error {
	var err error
	widgetUnparentFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetUnparentFunction, err = widgetStruct.InvokerNew("unparent")
	})
	return err
}

// Unparent is a representation of the C type gtk_widget_unparent.
func (recv *Widget) Unparent() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetUnparentFunction_Set()
	if err == nil {
		widgetUnparentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var widgetUnrealizeFunction *gi.Function
var widgetUnrealizeFunction_Once sync.Once

func widgetUnrealizeFunction_Set() error {
	var err error
	widgetUnrealizeFunction_Once.Do(func() {
		err = widgetStruct_Set()
		if err != nil {
			return
		}
		widgetUnrealizeFunction, err = widgetStruct.InvokerNew("unrealize")
	})
	return err
}

// Unrealize is a representation of the C type gtk_widget_unrealize.
func (recv *Widget) Unrealize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := widgetUnrealizeFunction_Set()
	if err == nil {
		widgetUnrealizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_widget_unregister_window' : parameter 'window' of type 'Gdk.Window' not supported

// UNSUPPORTED : C value 'gtk_widget_unset_state_flags' : parameter 'flags' of type 'StateFlags' not supported

var widgetAccessibleStruct *gi.Struct
var widgetAccessibleStruct_Once sync.Once

func widgetAccessibleStruct_Set() error {
	var err error
	widgetAccessibleStruct_Once.Do(func() {
		widgetAccessibleStruct, err = gi.StructNew("Gtk", "WidgetAccessible")
	})
	return err
}

type WidgetAccessible struct {
	Accessible
}

// FieldParent returns the C field 'parent'.
func (recv *WidgetAccessible) FieldParent() *Accessible {
	argValue := gi.FieldGet(widgetAccessibleStruct, recv.Native, "parent")
	value := &Accessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *WidgetAccessible) SetFieldParent(value *Accessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(widgetAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *WidgetAccessible) FieldPriv() *WidgetAccessiblePrivate {
	argValue := gi.FieldGet(widgetAccessibleStruct, recv.Native, "priv")
	value := &WidgetAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *WidgetAccessible) SetFieldPriv(value *WidgetAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(widgetAccessibleStruct, recv.Native, "priv", argValue)
}

// WidgetAccessibleStruct creates an uninitialised WidgetAccessible.
func WidgetAccessibleStruct() *WidgetAccessible {
	err := widgetAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &WidgetAccessible{}
	structGo.Native = widgetAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeWidgetAccessible)
	return structGo
}
func finalizeWidgetAccessible(obj *WidgetAccessible) {
	widgetAccessibleStruct.Free(obj.Native)
}

var windowStruct *gi.Struct
var windowStruct_Once sync.Once

func windowStruct_Set() error {
	var err error
	windowStruct_Once.Do(func() {
		windowStruct, err = gi.StructNew("Gtk", "Window")
	})
	return err
}

type Window struct {
	Bin
}

// FieldBin returns the C field 'bin'.
func (recv *Window) FieldBin() *Bin {
	argValue := gi.FieldGet(windowStruct, recv.Native, "bin")
	value := &Bin{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldBin sets the value of the C field 'bin'.
func (recv *Window) SetFieldBin(value *Bin) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(windowStruct, recv.Native, "bin", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *Window) FieldPriv() *WindowPrivate {
	argValue := gi.FieldGet(windowStruct, recv.Native, "priv")
	value := &WindowPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *Window) SetFieldPriv(value *WindowPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(windowStruct, recv.Native, "priv", argValue)
}

// UNSUPPORTED : C value 'gtk_window_new' : parameter 'type' of type 'WindowType' not supported

var windowActivateDefaultFunction *gi.Function
var windowActivateDefaultFunction_Once sync.Once

func windowActivateDefaultFunction_Set() error {
	var err error
	windowActivateDefaultFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowActivateDefaultFunction, err = windowStruct.InvokerNew("activate_default")
	})
	return err
}

// ActivateDefault is a representation of the C type gtk_window_activate_default.
func (recv *Window) ActivateDefault() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowActivateDefaultFunction_Set()
	if err == nil {
		ret = windowActivateDefaultFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowActivateFocusFunction *gi.Function
var windowActivateFocusFunction_Once sync.Once

func windowActivateFocusFunction_Set() error {
	var err error
	windowActivateFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowActivateFocusFunction, err = windowStruct.InvokerNew("activate_focus")
	})
	return err
}

// ActivateFocus is a representation of the C type gtk_window_activate_focus.
func (recv *Window) ActivateFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowActivateFocusFunction_Set()
	if err == nil {
		ret = windowActivateFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_activate_key' : parameter 'event' of type 'Gdk.EventKey' not supported

var windowAddAccelGroupFunction *gi.Function
var windowAddAccelGroupFunction_Once sync.Once

func windowAddAccelGroupFunction_Set() error {
	var err error
	windowAddAccelGroupFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowAddAccelGroupFunction, err = windowStruct.InvokerNew("add_accel_group")
	})
	return err
}

// AddAccelGroup is a representation of the C type gtk_window_add_accel_group.
func (recv *Window) AddAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := windowAddAccelGroupFunction_Set()
	if err == nil {
		windowAddAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowAddMnemonicFunction *gi.Function
var windowAddMnemonicFunction_Once sync.Once

func windowAddMnemonicFunction_Set() error {
	var err error
	windowAddMnemonicFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowAddMnemonicFunction, err = windowStruct.InvokerNew("add_mnemonic")
	})
	return err
}

// AddMnemonic is a representation of the C type gtk_window_add_mnemonic.
func (recv *Window) AddMnemonic(keyval uint32, target *Widget) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(keyval)
	inArgs[2].SetPointer(target.Native)

	err := windowAddMnemonicFunction_Set()
	if err == nil {
		windowAddMnemonicFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowBeginMoveDragFunction *gi.Function
var windowBeginMoveDragFunction_Once sync.Once

func windowBeginMoveDragFunction_Set() error {
	var err error
	windowBeginMoveDragFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowBeginMoveDragFunction, err = windowStruct.InvokerNew("begin_move_drag")
	})
	return err
}

// BeginMoveDrag is a representation of the C type gtk_window_begin_move_drag.
func (recv *Window) BeginMoveDrag(button int32, rootX int32, rootY int32, timestamp uint32) {
	var inArgs [5]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(button)
	inArgs[2].SetInt32(rootX)
	inArgs[3].SetInt32(rootY)
	inArgs[4].SetUint32(timestamp)

	err := windowBeginMoveDragFunction_Set()
	if err == nil {
		windowBeginMoveDragFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_begin_resize_drag' : parameter 'edge' of type 'Gdk.WindowEdge' not supported

var windowCloseFunction *gi.Function
var windowCloseFunction_Once sync.Once

func windowCloseFunction_Set() error {
	var err error
	windowCloseFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowCloseFunction, err = windowStruct.InvokerNew("close")
	})
	return err
}

// Close is a representation of the C type gtk_window_close.
func (recv *Window) Close() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowCloseFunction_Set()
	if err == nil {
		windowCloseFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowDeiconifyFunction *gi.Function
var windowDeiconifyFunction_Once sync.Once

func windowDeiconifyFunction_Set() error {
	var err error
	windowDeiconifyFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowDeiconifyFunction, err = windowStruct.InvokerNew("deiconify")
	})
	return err
}

// Deiconify is a representation of the C type gtk_window_deiconify.
func (recv *Window) Deiconify() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowDeiconifyFunction_Set()
	if err == nil {
		windowDeiconifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowFullscreenFunction *gi.Function
var windowFullscreenFunction_Once sync.Once

func windowFullscreenFunction_Set() error {
	var err error
	windowFullscreenFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowFullscreenFunction, err = windowStruct.InvokerNew("fullscreen")
	})
	return err
}

// Fullscreen is a representation of the C type gtk_window_fullscreen.
func (recv *Window) Fullscreen() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowFullscreenFunction_Set()
	if err == nil {
		windowFullscreenFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_fullscreen_on_monitor' : parameter 'screen' of type 'Gdk.Screen' not supported

var windowGetAcceptFocusFunction *gi.Function
var windowGetAcceptFocusFunction_Once sync.Once

func windowGetAcceptFocusFunction_Set() error {
	var err error
	windowGetAcceptFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetAcceptFocusFunction, err = windowStruct.InvokerNew("get_accept_focus")
	})
	return err
}

// GetAcceptFocus is a representation of the C type gtk_window_get_accept_focus.
func (recv *Window) GetAcceptFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetAcceptFocusFunction_Set()
	if err == nil {
		ret = windowGetAcceptFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetApplicationFunction *gi.Function
var windowGetApplicationFunction_Once sync.Once

func windowGetApplicationFunction_Set() error {
	var err error
	windowGetApplicationFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetApplicationFunction, err = windowStruct.InvokerNew("get_application")
	})
	return err
}

// GetApplication is a representation of the C type gtk_window_get_application.
func (recv *Window) GetApplication() *Application {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetApplicationFunction_Set()
	if err == nil {
		ret = windowGetApplicationFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Application{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetAttachedToFunction *gi.Function
var windowGetAttachedToFunction_Once sync.Once

func windowGetAttachedToFunction_Set() error {
	var err error
	windowGetAttachedToFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetAttachedToFunction, err = windowStruct.InvokerNew("get_attached_to")
	})
	return err
}

// GetAttachedTo is a representation of the C type gtk_window_get_attached_to.
func (recv *Window) GetAttachedTo() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetAttachedToFunction_Set()
	if err == nil {
		ret = windowGetAttachedToFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetDecoratedFunction *gi.Function
var windowGetDecoratedFunction_Once sync.Once

func windowGetDecoratedFunction_Set() error {
	var err error
	windowGetDecoratedFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetDecoratedFunction, err = windowStruct.InvokerNew("get_decorated")
	})
	return err
}

// GetDecorated is a representation of the C type gtk_window_get_decorated.
func (recv *Window) GetDecorated() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetDecoratedFunction_Set()
	if err == nil {
		ret = windowGetDecoratedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetDefaultSizeFunction *gi.Function
var windowGetDefaultSizeFunction_Once sync.Once

func windowGetDefaultSizeFunction_Set() error {
	var err error
	windowGetDefaultSizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetDefaultSizeFunction, err = windowStruct.InvokerNew("get_default_size")
	})
	return err
}

// GetDefaultSize is a representation of the C type gtk_window_get_default_size.
func (recv *Window) GetDefaultSize() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := windowGetDefaultSizeFunction_Set()
	if err == nil {
		windowGetDefaultSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var windowGetDefaultWidgetFunction *gi.Function
var windowGetDefaultWidgetFunction_Once sync.Once

func windowGetDefaultWidgetFunction_Set() error {
	var err error
	windowGetDefaultWidgetFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetDefaultWidgetFunction, err = windowStruct.InvokerNew("get_default_widget")
	})
	return err
}

// GetDefaultWidget is a representation of the C type gtk_window_get_default_widget.
func (recv *Window) GetDefaultWidget() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetDefaultWidgetFunction_Set()
	if err == nil {
		ret = windowGetDefaultWidgetFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetDeletableFunction *gi.Function
var windowGetDeletableFunction_Once sync.Once

func windowGetDeletableFunction_Set() error {
	var err error
	windowGetDeletableFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetDeletableFunction, err = windowStruct.InvokerNew("get_deletable")
	})
	return err
}

// GetDeletable is a representation of the C type gtk_window_get_deletable.
func (recv *Window) GetDeletable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetDeletableFunction_Set()
	if err == nil {
		ret = windowGetDeletableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetDestroyWithParentFunction *gi.Function
var windowGetDestroyWithParentFunction_Once sync.Once

func windowGetDestroyWithParentFunction_Set() error {
	var err error
	windowGetDestroyWithParentFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetDestroyWithParentFunction, err = windowStruct.InvokerNew("get_destroy_with_parent")
	})
	return err
}

// GetDestroyWithParent is a representation of the C type gtk_window_get_destroy_with_parent.
func (recv *Window) GetDestroyWithParent() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetDestroyWithParentFunction_Set()
	if err == nil {
		ret = windowGetDestroyWithParentFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetFocusFunction *gi.Function
var windowGetFocusFunction_Once sync.Once

func windowGetFocusFunction_Set() error {
	var err error
	windowGetFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetFocusFunction, err = windowStruct.InvokerNew("get_focus")
	})
	return err
}

// GetFocus is a representation of the C type gtk_window_get_focus.
func (recv *Window) GetFocus() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetFocusFunction_Set()
	if err == nil {
		ret = windowGetFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetFocusOnMapFunction *gi.Function
var windowGetFocusOnMapFunction_Once sync.Once

func windowGetFocusOnMapFunction_Set() error {
	var err error
	windowGetFocusOnMapFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetFocusOnMapFunction, err = windowStruct.InvokerNew("get_focus_on_map")
	})
	return err
}

// GetFocusOnMap is a representation of the C type gtk_window_get_focus_on_map.
func (recv *Window) GetFocusOnMap() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetFocusOnMapFunction_Set()
	if err == nil {
		ret = windowGetFocusOnMapFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetFocusVisibleFunction *gi.Function
var windowGetFocusVisibleFunction_Once sync.Once

func windowGetFocusVisibleFunction_Set() error {
	var err error
	windowGetFocusVisibleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetFocusVisibleFunction, err = windowStruct.InvokerNew("get_focus_visible")
	})
	return err
}

// GetFocusVisible is a representation of the C type gtk_window_get_focus_visible.
func (recv *Window) GetFocusVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetFocusVisibleFunction_Set()
	if err == nil {
		ret = windowGetFocusVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_gravity' : return type 'Gdk.Gravity' not supported

var windowGetGroupFunction *gi.Function
var windowGetGroupFunction_Once sync.Once

func windowGetGroupFunction_Set() error {
	var err error
	windowGetGroupFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetGroupFunction, err = windowStruct.InvokerNew("get_group")
	})
	return err
}

// GetGroup is a representation of the C type gtk_window_get_group.
func (recv *Window) GetGroup() *WindowGroup {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetGroupFunction_Set()
	if err == nil {
		ret = windowGetGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := &WindowGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetHasResizeGripFunction *gi.Function
var windowGetHasResizeGripFunction_Once sync.Once

func windowGetHasResizeGripFunction_Set() error {
	var err error
	windowGetHasResizeGripFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetHasResizeGripFunction, err = windowStruct.InvokerNew("get_has_resize_grip")
	})
	return err
}

// GetHasResizeGrip is a representation of the C type gtk_window_get_has_resize_grip.
func (recv *Window) GetHasResizeGrip() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetHasResizeGripFunction_Set()
	if err == nil {
		ret = windowGetHasResizeGripFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetHideTitlebarWhenMaximizedFunction *gi.Function
var windowGetHideTitlebarWhenMaximizedFunction_Once sync.Once

func windowGetHideTitlebarWhenMaximizedFunction_Set() error {
	var err error
	windowGetHideTitlebarWhenMaximizedFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetHideTitlebarWhenMaximizedFunction, err = windowStruct.InvokerNew("get_hide_titlebar_when_maximized")
	})
	return err
}

// GetHideTitlebarWhenMaximized is a representation of the C type gtk_window_get_hide_titlebar_when_maximized.
func (recv *Window) GetHideTitlebarWhenMaximized() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetHideTitlebarWhenMaximizedFunction_Set()
	if err == nil {
		ret = windowGetHideTitlebarWhenMaximizedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_icon' : return type 'GdkPixbuf.Pixbuf' not supported

// UNSUPPORTED : C value 'gtk_window_get_icon_list' : return type 'GLib.List' not supported

var windowGetIconNameFunction *gi.Function
var windowGetIconNameFunction_Once sync.Once

func windowGetIconNameFunction_Set() error {
	var err error
	windowGetIconNameFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetIconNameFunction, err = windowStruct.InvokerNew("get_icon_name")
	})
	return err
}

// GetIconName is a representation of the C type gtk_window_get_icon_name.
func (recv *Window) GetIconName() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetIconNameFunction_Set()
	if err == nil {
		ret = windowGetIconNameFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_mnemonic_modifier' : return type 'Gdk.ModifierType' not supported

var windowGetMnemonicsVisibleFunction *gi.Function
var windowGetMnemonicsVisibleFunction_Once sync.Once

func windowGetMnemonicsVisibleFunction_Set() error {
	var err error
	windowGetMnemonicsVisibleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetMnemonicsVisibleFunction, err = windowStruct.InvokerNew("get_mnemonics_visible")
	})
	return err
}

// GetMnemonicsVisible is a representation of the C type gtk_window_get_mnemonics_visible.
func (recv *Window) GetMnemonicsVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetMnemonicsVisibleFunction_Set()
	if err == nil {
		ret = windowGetMnemonicsVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetModalFunction *gi.Function
var windowGetModalFunction_Once sync.Once

func windowGetModalFunction_Set() error {
	var err error
	windowGetModalFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetModalFunction, err = windowStruct.InvokerNew("get_modal")
	})
	return err
}

// GetModal is a representation of the C type gtk_window_get_modal.
func (recv *Window) GetModal() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetModalFunction_Set()
	if err == nil {
		ret = windowGetModalFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetOpacityFunction *gi.Function
var windowGetOpacityFunction_Once sync.Once

func windowGetOpacityFunction_Set() error {
	var err error
	windowGetOpacityFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetOpacityFunction, err = windowStruct.InvokerNew("get_opacity")
	})
	return err
}

// GetOpacity is a representation of the C type gtk_window_get_opacity.
func (recv *Window) GetOpacity() float64 {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetOpacityFunction_Set()
	if err == nil {
		ret = windowGetOpacityFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Float64()

	return retGo
}

var windowGetPositionFunction *gi.Function
var windowGetPositionFunction_Once sync.Once

func windowGetPositionFunction_Set() error {
	var err error
	windowGetPositionFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetPositionFunction, err = windowStruct.InvokerNew("get_position")
	})
	return err
}

// GetPosition is a representation of the C type gtk_window_get_position.
func (recv *Window) GetPosition() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := windowGetPositionFunction_Set()
	if err == nil {
		windowGetPositionFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var windowGetResizableFunction *gi.Function
var windowGetResizableFunction_Once sync.Once

func windowGetResizableFunction_Set() error {
	var err error
	windowGetResizableFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetResizableFunction, err = windowStruct.InvokerNew("get_resizable")
	})
	return err
}

// GetResizable is a representation of the C type gtk_window_get_resizable.
func (recv *Window) GetResizable() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetResizableFunction_Set()
	if err == nil {
		ret = windowGetResizableFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_resize_grip_area' : parameter 'rect' of type 'Gdk.Rectangle' not supported

var windowGetRoleFunction *gi.Function
var windowGetRoleFunction_Once sync.Once

func windowGetRoleFunction_Set() error {
	var err error
	windowGetRoleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetRoleFunction, err = windowStruct.InvokerNew("get_role")
	})
	return err
}

// GetRole is a representation of the C type gtk_window_get_role.
func (recv *Window) GetRole() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetRoleFunction_Set()
	if err == nil {
		ret = windowGetRoleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_screen' : return type 'Gdk.Screen' not supported

var windowGetSizeFunction *gi.Function
var windowGetSizeFunction_Once sync.Once

func windowGetSizeFunction_Set() error {
	var err error
	windowGetSizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetSizeFunction, err = windowStruct.InvokerNew("get_size")
	})
	return err
}

// GetSize is a representation of the C type gtk_window_get_size.
func (recv *Window) GetSize() (int32, int32) {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var outArgs [2]gi.Argument

	err := windowGetSizeFunction_Set()
	if err == nil {
		windowGetSizeFunction.Invoke(inArgs[:], outArgs[:])
	}

	out0 := outArgs[0].Int32()
	out1 := outArgs[1].Int32()

	return out0, out1
}

var windowGetSkipPagerHintFunction *gi.Function
var windowGetSkipPagerHintFunction_Once sync.Once

func windowGetSkipPagerHintFunction_Set() error {
	var err error
	windowGetSkipPagerHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetSkipPagerHintFunction, err = windowStruct.InvokerNew("get_skip_pager_hint")
	})
	return err
}

// GetSkipPagerHint is a representation of the C type gtk_window_get_skip_pager_hint.
func (recv *Window) GetSkipPagerHint() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetSkipPagerHintFunction_Set()
	if err == nil {
		ret = windowGetSkipPagerHintFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetSkipTaskbarHintFunction *gi.Function
var windowGetSkipTaskbarHintFunction_Once sync.Once

func windowGetSkipTaskbarHintFunction_Set() error {
	var err error
	windowGetSkipTaskbarHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetSkipTaskbarHintFunction, err = windowStruct.InvokerNew("get_skip_taskbar_hint")
	})
	return err
}

// GetSkipTaskbarHint is a representation of the C type gtk_window_get_skip_taskbar_hint.
func (recv *Window) GetSkipTaskbarHint() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetSkipTaskbarHintFunction_Set()
	if err == nil {
		ret = windowGetSkipTaskbarHintFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowGetTitleFunction *gi.Function
var windowGetTitleFunction_Once sync.Once

func windowGetTitleFunction_Set() error {
	var err error
	windowGetTitleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetTitleFunction, err = windowStruct.InvokerNew("get_title")
	})
	return err
}

// GetTitle is a representation of the C type gtk_window_get_title.
func (recv *Window) GetTitle() string {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetTitleFunction_Set()
	if err == nil {
		ret = windowGetTitleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.String(false)

	return retGo
}

var windowGetTitlebarFunction *gi.Function
var windowGetTitlebarFunction_Once sync.Once

func windowGetTitlebarFunction_Set() error {
	var err error
	windowGetTitlebarFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetTitlebarFunction, err = windowStruct.InvokerNew("get_titlebar")
	})
	return err
}

// GetTitlebar is a representation of the C type gtk_window_get_titlebar.
func (recv *Window) GetTitlebar() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetTitlebarFunction_Set()
	if err == nil {
		ret = windowGetTitlebarFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGetTransientForFunction *gi.Function
var windowGetTransientForFunction_Once sync.Once

func windowGetTransientForFunction_Set() error {
	var err error
	windowGetTransientForFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetTransientForFunction, err = windowStruct.InvokerNew("get_transient_for")
	})
	return err
}

// GetTransientFor is a representation of the C type gtk_window_get_transient_for.
func (recv *Window) GetTransientFor() *Window {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetTransientForFunction_Set()
	if err == nil {
		ret = windowGetTransientForFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Window{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_type_hint' : return type 'Gdk.WindowTypeHint' not supported

var windowGetUrgencyHintFunction *gi.Function
var windowGetUrgencyHintFunction_Once sync.Once

func windowGetUrgencyHintFunction_Set() error {
	var err error
	windowGetUrgencyHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowGetUrgencyHintFunction, err = windowStruct.InvokerNew("get_urgency_hint")
	})
	return err
}

// GetUrgencyHint is a representation of the C type gtk_window_get_urgency_hint.
func (recv *Window) GetUrgencyHint() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGetUrgencyHintFunction_Set()
	if err == nil {
		ret = windowGetUrgencyHintFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_get_window_type' : return type 'WindowType' not supported

var windowHasGroupFunction *gi.Function
var windowHasGroupFunction_Once sync.Once

func windowHasGroupFunction_Set() error {
	var err error
	windowHasGroupFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowHasGroupFunction, err = windowStruct.InvokerNew("has_group")
	})
	return err
}

// HasGroup is a representation of the C type gtk_window_has_group.
func (recv *Window) HasGroup() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowHasGroupFunction_Set()
	if err == nil {
		ret = windowHasGroupFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowHasToplevelFocusFunction *gi.Function
var windowHasToplevelFocusFunction_Once sync.Once

func windowHasToplevelFocusFunction_Set() error {
	var err error
	windowHasToplevelFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowHasToplevelFocusFunction, err = windowStruct.InvokerNew("has_toplevel_focus")
	})
	return err
}

// HasToplevelFocus is a representation of the C type gtk_window_has_toplevel_focus.
func (recv *Window) HasToplevelFocus() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowHasToplevelFocusFunction_Set()
	if err == nil {
		ret = windowHasToplevelFocusFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowIconifyFunction *gi.Function
var windowIconifyFunction_Once sync.Once

func windowIconifyFunction_Set() error {
	var err error
	windowIconifyFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowIconifyFunction, err = windowStruct.InvokerNew("iconify")
	})
	return err
}

// Iconify is a representation of the C type gtk_window_iconify.
func (recv *Window) Iconify() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowIconifyFunction_Set()
	if err == nil {
		windowIconifyFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowIsActiveFunction *gi.Function
var windowIsActiveFunction_Once sync.Once

func windowIsActiveFunction_Set() error {
	var err error
	windowIsActiveFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowIsActiveFunction, err = windowStruct.InvokerNew("is_active")
	})
	return err
}

// IsActive is a representation of the C type gtk_window_is_active.
func (recv *Window) IsActive() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowIsActiveFunction_Set()
	if err == nil {
		ret = windowIsActiveFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowIsMaximizedFunction *gi.Function
var windowIsMaximizedFunction_Once sync.Once

func windowIsMaximizedFunction_Set() error {
	var err error
	windowIsMaximizedFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowIsMaximizedFunction, err = windowStruct.InvokerNew("is_maximized")
	})
	return err
}

// IsMaximized is a representation of the C type gtk_window_is_maximized.
func (recv *Window) IsMaximized() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowIsMaximizedFunction_Set()
	if err == nil {
		ret = windowIsMaximizedFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowMaximizeFunction *gi.Function
var windowMaximizeFunction_Once sync.Once

func windowMaximizeFunction_Set() error {
	var err error
	windowMaximizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowMaximizeFunction, err = windowStruct.InvokerNew("maximize")
	})
	return err
}

// Maximize is a representation of the C type gtk_window_maximize.
func (recv *Window) Maximize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowMaximizeFunction_Set()
	if err == nil {
		windowMaximizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_mnemonic_activate' : parameter 'modifier' of type 'Gdk.ModifierType' not supported

var windowMoveFunction *gi.Function
var windowMoveFunction_Once sync.Once

func windowMoveFunction_Set() error {
	var err error
	windowMoveFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowMoveFunction, err = windowStruct.InvokerNew("move")
	})
	return err
}

// Move is a representation of the C type gtk_window_move.
func (recv *Window) Move(x int32, y int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(x)
	inArgs[2].SetInt32(y)

	err := windowMoveFunction_Set()
	if err == nil {
		windowMoveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowParseGeometryFunction *gi.Function
var windowParseGeometryFunction_Once sync.Once

func windowParseGeometryFunction_Set() error {
	var err error
	windowParseGeometryFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowParseGeometryFunction, err = windowStruct.InvokerNew("parse_geometry")
	})
	return err
}

// ParseGeometry is a representation of the C type gtk_window_parse_geometry.
func (recv *Window) ParseGeometry(geometry string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(geometry)

	var ret gi.Argument

	err := windowParseGeometryFunction_Set()
	if err == nil {
		ret = windowParseGeometryFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowPresentFunction *gi.Function
var windowPresentFunction_Once sync.Once

func windowPresentFunction_Set() error {
	var err error
	windowPresentFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowPresentFunction, err = windowStruct.InvokerNew("present")
	})
	return err
}

// Present is a representation of the C type gtk_window_present.
func (recv *Window) Present() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowPresentFunction_Set()
	if err == nil {
		windowPresentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowPresentWithTimeFunction *gi.Function
var windowPresentWithTimeFunction_Once sync.Once

func windowPresentWithTimeFunction_Set() error {
	var err error
	windowPresentWithTimeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowPresentWithTimeFunction, err = windowStruct.InvokerNew("present_with_time")
	})
	return err
}

// PresentWithTime is a representation of the C type gtk_window_present_with_time.
func (recv *Window) PresentWithTime(timestamp uint32) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(timestamp)

	err := windowPresentWithTimeFunction_Set()
	if err == nil {
		windowPresentWithTimeFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_propagate_key_event' : parameter 'event' of type 'Gdk.EventKey' not supported

var windowRemoveAccelGroupFunction *gi.Function
var windowRemoveAccelGroupFunction_Once sync.Once

func windowRemoveAccelGroupFunction_Set() error {
	var err error
	windowRemoveAccelGroupFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowRemoveAccelGroupFunction, err = windowStruct.InvokerNew("remove_accel_group")
	})
	return err
}

// RemoveAccelGroup is a representation of the C type gtk_window_remove_accel_group.
func (recv *Window) RemoveAccelGroup(accelGroup *AccelGroup) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(accelGroup.Native)

	err := windowRemoveAccelGroupFunction_Set()
	if err == nil {
		windowRemoveAccelGroupFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowRemoveMnemonicFunction *gi.Function
var windowRemoveMnemonicFunction_Once sync.Once

func windowRemoveMnemonicFunction_Set() error {
	var err error
	windowRemoveMnemonicFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowRemoveMnemonicFunction, err = windowStruct.InvokerNew("remove_mnemonic")
	})
	return err
}

// RemoveMnemonic is a representation of the C type gtk_window_remove_mnemonic.
func (recv *Window) RemoveMnemonic(keyval uint32, target *Widget) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetUint32(keyval)
	inArgs[2].SetPointer(target.Native)

	err := windowRemoveMnemonicFunction_Set()
	if err == nil {
		windowRemoveMnemonicFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowReshowWithInitialSizeFunction *gi.Function
var windowReshowWithInitialSizeFunction_Once sync.Once

func windowReshowWithInitialSizeFunction_Set() error {
	var err error
	windowReshowWithInitialSizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowReshowWithInitialSizeFunction, err = windowStruct.InvokerNew("reshow_with_initial_size")
	})
	return err
}

// ReshowWithInitialSize is a representation of the C type gtk_window_reshow_with_initial_size.
func (recv *Window) ReshowWithInitialSize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowReshowWithInitialSizeFunction_Set()
	if err == nil {
		windowReshowWithInitialSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowResizeFunction *gi.Function
var windowResizeFunction_Once sync.Once

func windowResizeFunction_Set() error {
	var err error
	windowResizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowResizeFunction, err = windowStruct.InvokerNew("resize")
	})
	return err
}

// Resize is a representation of the C type gtk_window_resize.
func (recv *Window) Resize(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := windowResizeFunction_Set()
	if err == nil {
		windowResizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowResizeGripIsVisibleFunction *gi.Function
var windowResizeGripIsVisibleFunction_Once sync.Once

func windowResizeGripIsVisibleFunction_Set() error {
	var err error
	windowResizeGripIsVisibleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowResizeGripIsVisibleFunction, err = windowStruct.InvokerNew("resize_grip_is_visible")
	})
	return err
}

// ResizeGripIsVisible is a representation of the C type gtk_window_resize_grip_is_visible.
func (recv *Window) ResizeGripIsVisible() bool {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowResizeGripIsVisibleFunction_Set()
	if err == nil {
		ret = windowResizeGripIsVisibleFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

var windowResizeToGeometryFunction *gi.Function
var windowResizeToGeometryFunction_Once sync.Once

func windowResizeToGeometryFunction_Set() error {
	var err error
	windowResizeToGeometryFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowResizeToGeometryFunction, err = windowStruct.InvokerNew("resize_to_geometry")
	})
	return err
}

// ResizeToGeometry is a representation of the C type gtk_window_resize_to_geometry.
func (recv *Window) ResizeToGeometry(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := windowResizeToGeometryFunction_Set()
	if err == nil {
		windowResizeToGeometryFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetAcceptFocusFunction *gi.Function
var windowSetAcceptFocusFunction_Once sync.Once

func windowSetAcceptFocusFunction_Set() error {
	var err error
	windowSetAcceptFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetAcceptFocusFunction, err = windowStruct.InvokerNew("set_accept_focus")
	})
	return err
}

// SetAcceptFocus is a representation of the C type gtk_window_set_accept_focus.
func (recv *Window) SetAcceptFocus(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetAcceptFocusFunction_Set()
	if err == nil {
		windowSetAcceptFocusFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetApplicationFunction *gi.Function
var windowSetApplicationFunction_Once sync.Once

func windowSetApplicationFunction_Set() error {
	var err error
	windowSetApplicationFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetApplicationFunction, err = windowStruct.InvokerNew("set_application")
	})
	return err
}

// SetApplication is a representation of the C type gtk_window_set_application.
func (recv *Window) SetApplication(application *Application) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(application.Native)

	err := windowSetApplicationFunction_Set()
	if err == nil {
		windowSetApplicationFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetAttachedToFunction *gi.Function
var windowSetAttachedToFunction_Once sync.Once

func windowSetAttachedToFunction_Set() error {
	var err error
	windowSetAttachedToFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetAttachedToFunction, err = windowStruct.InvokerNew("set_attached_to")
	})
	return err
}

// SetAttachedTo is a representation of the C type gtk_window_set_attached_to.
func (recv *Window) SetAttachedTo(attachWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(attachWidget.Native)

	err := windowSetAttachedToFunction_Set()
	if err == nil {
		windowSetAttachedToFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDecoratedFunction *gi.Function
var windowSetDecoratedFunction_Once sync.Once

func windowSetDecoratedFunction_Set() error {
	var err error
	windowSetDecoratedFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDecoratedFunction, err = windowStruct.InvokerNew("set_decorated")
	})
	return err
}

// SetDecorated is a representation of the C type gtk_window_set_decorated.
func (recv *Window) SetDecorated(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetDecoratedFunction_Set()
	if err == nil {
		windowSetDecoratedFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDefaultFunction *gi.Function
var windowSetDefaultFunction_Once sync.Once

func windowSetDefaultFunction_Set() error {
	var err error
	windowSetDefaultFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDefaultFunction, err = windowStruct.InvokerNew("set_default")
	})
	return err
}

// SetDefault is a representation of the C type gtk_window_set_default.
func (recv *Window) SetDefault(defaultWidget *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(defaultWidget.Native)

	err := windowSetDefaultFunction_Set()
	if err == nil {
		windowSetDefaultFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDefaultGeometryFunction *gi.Function
var windowSetDefaultGeometryFunction_Once sync.Once

func windowSetDefaultGeometryFunction_Set() error {
	var err error
	windowSetDefaultGeometryFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDefaultGeometryFunction, err = windowStruct.InvokerNew("set_default_geometry")
	})
	return err
}

// SetDefaultGeometry is a representation of the C type gtk_window_set_default_geometry.
func (recv *Window) SetDefaultGeometry(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := windowSetDefaultGeometryFunction_Set()
	if err == nil {
		windowSetDefaultGeometryFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDefaultSizeFunction *gi.Function
var windowSetDefaultSizeFunction_Once sync.Once

func windowSetDefaultSizeFunction_Set() error {
	var err error
	windowSetDefaultSizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDefaultSizeFunction, err = windowStruct.InvokerNew("set_default_size")
	})
	return err
}

// SetDefaultSize is a representation of the C type gtk_window_set_default_size.
func (recv *Window) SetDefaultSize(width int32, height int32) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetInt32(width)
	inArgs[2].SetInt32(height)

	err := windowSetDefaultSizeFunction_Set()
	if err == nil {
		windowSetDefaultSizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDeletableFunction *gi.Function
var windowSetDeletableFunction_Once sync.Once

func windowSetDeletableFunction_Set() error {
	var err error
	windowSetDeletableFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDeletableFunction, err = windowStruct.InvokerNew("set_deletable")
	})
	return err
}

// SetDeletable is a representation of the C type gtk_window_set_deletable.
func (recv *Window) SetDeletable(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetDeletableFunction_Set()
	if err == nil {
		windowSetDeletableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetDestroyWithParentFunction *gi.Function
var windowSetDestroyWithParentFunction_Once sync.Once

func windowSetDestroyWithParentFunction_Set() error {
	var err error
	windowSetDestroyWithParentFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetDestroyWithParentFunction, err = windowStruct.InvokerNew("set_destroy_with_parent")
	})
	return err
}

// SetDestroyWithParent is a representation of the C type gtk_window_set_destroy_with_parent.
func (recv *Window) SetDestroyWithParent(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetDestroyWithParentFunction_Set()
	if err == nil {
		windowSetDestroyWithParentFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetFocusFunction *gi.Function
var windowSetFocusFunction_Once sync.Once

func windowSetFocusFunction_Set() error {
	var err error
	windowSetFocusFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetFocusFunction, err = windowStruct.InvokerNew("set_focus")
	})
	return err
}

// SetFocus is a representation of the C type gtk_window_set_focus.
func (recv *Window) SetFocus(focus *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(focus.Native)

	err := windowSetFocusFunction_Set()
	if err == nil {
		windowSetFocusFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetFocusOnMapFunction *gi.Function
var windowSetFocusOnMapFunction_Once sync.Once

func windowSetFocusOnMapFunction_Set() error {
	var err error
	windowSetFocusOnMapFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetFocusOnMapFunction, err = windowStruct.InvokerNew("set_focus_on_map")
	})
	return err
}

// SetFocusOnMap is a representation of the C type gtk_window_set_focus_on_map.
func (recv *Window) SetFocusOnMap(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetFocusOnMapFunction_Set()
	if err == nil {
		windowSetFocusOnMapFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetFocusVisibleFunction *gi.Function
var windowSetFocusVisibleFunction_Once sync.Once

func windowSetFocusVisibleFunction_Set() error {
	var err error
	windowSetFocusVisibleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetFocusVisibleFunction, err = windowStruct.InvokerNew("set_focus_visible")
	})
	return err
}

// SetFocusVisible is a representation of the C type gtk_window_set_focus_visible.
func (recv *Window) SetFocusVisible(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetFocusVisibleFunction_Set()
	if err == nil {
		windowSetFocusVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_geometry_hints' : parameter 'geometry' of type 'Gdk.Geometry' not supported

// UNSUPPORTED : C value 'gtk_window_set_gravity' : parameter 'gravity' of type 'Gdk.Gravity' not supported

var windowSetHasResizeGripFunction *gi.Function
var windowSetHasResizeGripFunction_Once sync.Once

func windowSetHasResizeGripFunction_Set() error {
	var err error
	windowSetHasResizeGripFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetHasResizeGripFunction, err = windowStruct.InvokerNew("set_has_resize_grip")
	})
	return err
}

// SetHasResizeGrip is a representation of the C type gtk_window_set_has_resize_grip.
func (recv *Window) SetHasResizeGrip(value bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(value)

	err := windowSetHasResizeGripFunction_Set()
	if err == nil {
		windowSetHasResizeGripFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetHasUserRefCountFunction *gi.Function
var windowSetHasUserRefCountFunction_Once sync.Once

func windowSetHasUserRefCountFunction_Set() error {
	var err error
	windowSetHasUserRefCountFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetHasUserRefCountFunction, err = windowStruct.InvokerNew("set_has_user_ref_count")
	})
	return err
}

// SetHasUserRefCount is a representation of the C type gtk_window_set_has_user_ref_count.
func (recv *Window) SetHasUserRefCount(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetHasUserRefCountFunction_Set()
	if err == nil {
		windowSetHasUserRefCountFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetHideTitlebarWhenMaximizedFunction *gi.Function
var windowSetHideTitlebarWhenMaximizedFunction_Once sync.Once

func windowSetHideTitlebarWhenMaximizedFunction_Set() error {
	var err error
	windowSetHideTitlebarWhenMaximizedFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetHideTitlebarWhenMaximizedFunction, err = windowStruct.InvokerNew("set_hide_titlebar_when_maximized")
	})
	return err
}

// SetHideTitlebarWhenMaximized is a representation of the C type gtk_window_set_hide_titlebar_when_maximized.
func (recv *Window) SetHideTitlebarWhenMaximized(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetHideTitlebarWhenMaximizedFunction_Set()
	if err == nil {
		windowSetHideTitlebarWhenMaximizedFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_icon' : parameter 'icon' of type 'GdkPixbuf.Pixbuf' not supported

var windowSetIconFromFileFunction *gi.Function
var windowSetIconFromFileFunction_Once sync.Once

func windowSetIconFromFileFunction_Set() error {
	var err error
	windowSetIconFromFileFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetIconFromFileFunction, err = windowStruct.InvokerNew("set_icon_from_file")
	})
	return err
}

// SetIconFromFile is a representation of the C type gtk_window_set_icon_from_file.
func (recv *Window) SetIconFromFile(filename string) bool {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(filename)

	var ret gi.Argument

	err := windowSetIconFromFileFunction_Set()
	if err == nil {
		ret = windowSetIconFromFileFunction.Invoke(inArgs[:], nil)
	}

	retGo := ret.Boolean()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_set_icon_list' : parameter 'list' of type 'GLib.List' not supported

var windowSetIconNameFunction *gi.Function
var windowSetIconNameFunction_Once sync.Once

func windowSetIconNameFunction_Set() error {
	var err error
	windowSetIconNameFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetIconNameFunction, err = windowStruct.InvokerNew("set_icon_name")
	})
	return err
}

// SetIconName is a representation of the C type gtk_window_set_icon_name.
func (recv *Window) SetIconName(name string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(name)

	err := windowSetIconNameFunction_Set()
	if err == nil {
		windowSetIconNameFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetKeepAboveFunction *gi.Function
var windowSetKeepAboveFunction_Once sync.Once

func windowSetKeepAboveFunction_Set() error {
	var err error
	windowSetKeepAboveFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetKeepAboveFunction, err = windowStruct.InvokerNew("set_keep_above")
	})
	return err
}

// SetKeepAbove is a representation of the C type gtk_window_set_keep_above.
func (recv *Window) SetKeepAbove(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetKeepAboveFunction_Set()
	if err == nil {
		windowSetKeepAboveFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetKeepBelowFunction *gi.Function
var windowSetKeepBelowFunction_Once sync.Once

func windowSetKeepBelowFunction_Set() error {
	var err error
	windowSetKeepBelowFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetKeepBelowFunction, err = windowStruct.InvokerNew("set_keep_below")
	})
	return err
}

// SetKeepBelow is a representation of the C type gtk_window_set_keep_below.
func (recv *Window) SetKeepBelow(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetKeepBelowFunction_Set()
	if err == nil {
		windowSetKeepBelowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_mnemonic_modifier' : parameter 'modifier' of type 'Gdk.ModifierType' not supported

var windowSetMnemonicsVisibleFunction *gi.Function
var windowSetMnemonicsVisibleFunction_Once sync.Once

func windowSetMnemonicsVisibleFunction_Set() error {
	var err error
	windowSetMnemonicsVisibleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetMnemonicsVisibleFunction, err = windowStruct.InvokerNew("set_mnemonics_visible")
	})
	return err
}

// SetMnemonicsVisible is a representation of the C type gtk_window_set_mnemonics_visible.
func (recv *Window) SetMnemonicsVisible(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetMnemonicsVisibleFunction_Set()
	if err == nil {
		windowSetMnemonicsVisibleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetModalFunction *gi.Function
var windowSetModalFunction_Once sync.Once

func windowSetModalFunction_Set() error {
	var err error
	windowSetModalFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetModalFunction, err = windowStruct.InvokerNew("set_modal")
	})
	return err
}

// SetModal is a representation of the C type gtk_window_set_modal.
func (recv *Window) SetModal(modal bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(modal)

	err := windowSetModalFunction_Set()
	if err == nil {
		windowSetModalFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetOpacityFunction *gi.Function
var windowSetOpacityFunction_Once sync.Once

func windowSetOpacityFunction_Set() error {
	var err error
	windowSetOpacityFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetOpacityFunction, err = windowStruct.InvokerNew("set_opacity")
	})
	return err
}

// SetOpacity is a representation of the C type gtk_window_set_opacity.
func (recv *Window) SetOpacity(opacity float64) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetFloat64(opacity)

	err := windowSetOpacityFunction_Set()
	if err == nil {
		windowSetOpacityFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_position' : parameter 'position' of type 'WindowPosition' not supported

var windowSetResizableFunction *gi.Function
var windowSetResizableFunction_Once sync.Once

func windowSetResizableFunction_Set() error {
	var err error
	windowSetResizableFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetResizableFunction, err = windowStruct.InvokerNew("set_resizable")
	})
	return err
}

// SetResizable is a representation of the C type gtk_window_set_resizable.
func (recv *Window) SetResizable(resizable bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(resizable)

	err := windowSetResizableFunction_Set()
	if err == nil {
		windowSetResizableFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetRoleFunction *gi.Function
var windowSetRoleFunction_Once sync.Once

func windowSetRoleFunction_Set() error {
	var err error
	windowSetRoleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetRoleFunction, err = windowStruct.InvokerNew("set_role")
	})
	return err
}

// SetRole is a representation of the C type gtk_window_set_role.
func (recv *Window) SetRole(role string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(role)

	err := windowSetRoleFunction_Set()
	if err == nil {
		windowSetRoleFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_screen' : parameter 'screen' of type 'Gdk.Screen' not supported

var windowSetSkipPagerHintFunction *gi.Function
var windowSetSkipPagerHintFunction_Once sync.Once

func windowSetSkipPagerHintFunction_Set() error {
	var err error
	windowSetSkipPagerHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetSkipPagerHintFunction, err = windowStruct.InvokerNew("set_skip_pager_hint")
	})
	return err
}

// SetSkipPagerHint is a representation of the C type gtk_window_set_skip_pager_hint.
func (recv *Window) SetSkipPagerHint(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetSkipPagerHintFunction_Set()
	if err == nil {
		windowSetSkipPagerHintFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetSkipTaskbarHintFunction *gi.Function
var windowSetSkipTaskbarHintFunction_Once sync.Once

func windowSetSkipTaskbarHintFunction_Set() error {
	var err error
	windowSetSkipTaskbarHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetSkipTaskbarHintFunction, err = windowStruct.InvokerNew("set_skip_taskbar_hint")
	})
	return err
}

// SetSkipTaskbarHint is a representation of the C type gtk_window_set_skip_taskbar_hint.
func (recv *Window) SetSkipTaskbarHint(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetSkipTaskbarHintFunction_Set()
	if err == nil {
		windowSetSkipTaskbarHintFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetStartupIdFunction *gi.Function
var windowSetStartupIdFunction_Once sync.Once

func windowSetStartupIdFunction_Set() error {
	var err error
	windowSetStartupIdFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetStartupIdFunction, err = windowStruct.InvokerNew("set_startup_id")
	})
	return err
}

// SetStartupId is a representation of the C type gtk_window_set_startup_id.
func (recv *Window) SetStartupId(startupId string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(startupId)

	err := windowSetStartupIdFunction_Set()
	if err == nil {
		windowSetStartupIdFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetTitleFunction *gi.Function
var windowSetTitleFunction_Once sync.Once

func windowSetTitleFunction_Set() error {
	var err error
	windowSetTitleFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetTitleFunction, err = windowStruct.InvokerNew("set_title")
	})
	return err
}

// SetTitle is a representation of the C type gtk_window_set_title.
func (recv *Window) SetTitle(title string) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(title)

	err := windowSetTitleFunction_Set()
	if err == nil {
		windowSetTitleFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetTitlebarFunction *gi.Function
var windowSetTitlebarFunction_Once sync.Once

func windowSetTitlebarFunction_Set() error {
	var err error
	windowSetTitlebarFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetTitlebarFunction, err = windowStruct.InvokerNew("set_titlebar")
	})
	return err
}

// SetTitlebar is a representation of the C type gtk_window_set_titlebar.
func (recv *Window) SetTitlebar(titlebar *Widget) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(titlebar.Native)

	err := windowSetTitlebarFunction_Set()
	if err == nil {
		windowSetTitlebarFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetTransientForFunction *gi.Function
var windowSetTransientForFunction_Once sync.Once

func windowSetTransientForFunction_Set() error {
	var err error
	windowSetTransientForFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetTransientForFunction, err = windowStruct.InvokerNew("set_transient_for")
	})
	return err
}

// SetTransientFor is a representation of the C type gtk_window_set_transient_for.
func (recv *Window) SetTransientFor(parent *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(parent.Native)

	err := windowSetTransientForFunction_Set()
	if err == nil {
		windowSetTransientForFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_set_type_hint' : parameter 'hint' of type 'Gdk.WindowTypeHint' not supported

var windowSetUrgencyHintFunction *gi.Function
var windowSetUrgencyHintFunction_Once sync.Once

func windowSetUrgencyHintFunction_Set() error {
	var err error
	windowSetUrgencyHintFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetUrgencyHintFunction, err = windowStruct.InvokerNew("set_urgency_hint")
	})
	return err
}

// SetUrgencyHint is a representation of the C type gtk_window_set_urgency_hint.
func (recv *Window) SetUrgencyHint(setting bool) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetBoolean(setting)

	err := windowSetUrgencyHintFunction_Set()
	if err == nil {
		windowSetUrgencyHintFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowSetWmclassFunction *gi.Function
var windowSetWmclassFunction_Once sync.Once

func windowSetWmclassFunction_Set() error {
	var err error
	windowSetWmclassFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowSetWmclassFunction, err = windowStruct.InvokerNew("set_wmclass")
	})
	return err
}

// SetWmclass is a representation of the C type gtk_window_set_wmclass.
func (recv *Window) SetWmclass(wmclassName string, wmclassClass string) {
	var inArgs [3]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetString(wmclassName)
	inArgs[2].SetString(wmclassClass)

	err := windowSetWmclassFunction_Set()
	if err == nil {
		windowSetWmclassFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowStickFunction *gi.Function
var windowStickFunction_Once sync.Once

func windowStickFunction_Set() error {
	var err error
	windowStickFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowStickFunction, err = windowStruct.InvokerNew("stick")
	})
	return err
}

// Stick is a representation of the C type gtk_window_stick.
func (recv *Window) Stick() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowStickFunction_Set()
	if err == nil {
		windowStickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowUnfullscreenFunction *gi.Function
var windowUnfullscreenFunction_Once sync.Once

func windowUnfullscreenFunction_Set() error {
	var err error
	windowUnfullscreenFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowUnfullscreenFunction, err = windowStruct.InvokerNew("unfullscreen")
	})
	return err
}

// Unfullscreen is a representation of the C type gtk_window_unfullscreen.
func (recv *Window) Unfullscreen() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowUnfullscreenFunction_Set()
	if err == nil {
		windowUnfullscreenFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowUnmaximizeFunction *gi.Function
var windowUnmaximizeFunction_Once sync.Once

func windowUnmaximizeFunction_Set() error {
	var err error
	windowUnmaximizeFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowUnmaximizeFunction, err = windowStruct.InvokerNew("unmaximize")
	})
	return err
}

// Unmaximize is a representation of the C type gtk_window_unmaximize.
func (recv *Window) Unmaximize() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowUnmaximizeFunction_Set()
	if err == nil {
		windowUnmaximizeFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowUnstickFunction *gi.Function
var windowUnstickFunction_Once sync.Once

func windowUnstickFunction_Set() error {
	var err error
	windowUnstickFunction_Once.Do(func() {
		err = windowStruct_Set()
		if err != nil {
			return
		}
		windowUnstickFunction, err = windowStruct.InvokerNew("unstick")
	})
	return err
}

// Unstick is a representation of the C type gtk_window_unstick.
func (recv *Window) Unstick() {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	err := windowUnstickFunction_Set()
	if err == nil {
		windowUnstickFunction.Invoke(inArgs[:], nil)
	}

	return
}

var windowAccessibleStruct *gi.Struct
var windowAccessibleStruct_Once sync.Once

func windowAccessibleStruct_Set() error {
	var err error
	windowAccessibleStruct_Once.Do(func() {
		windowAccessibleStruct, err = gi.StructNew("Gtk", "WindowAccessible")
	})
	return err
}

type WindowAccessible struct {
	ContainerAccessible
}

// FieldParent returns the C field 'parent'.
func (recv *WindowAccessible) FieldParent() *ContainerAccessible {
	argValue := gi.FieldGet(windowAccessibleStruct, recv.Native, "parent")
	value := &ContainerAccessible{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldParent sets the value of the C field 'parent'.
func (recv *WindowAccessible) SetFieldParent(value *ContainerAccessible) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(windowAccessibleStruct, recv.Native, "parent", argValue)
}

// FieldPriv returns the C field 'priv'.
func (recv *WindowAccessible) FieldPriv() *WindowAccessiblePrivate {
	argValue := gi.FieldGet(windowAccessibleStruct, recv.Native, "priv")
	value := &WindowAccessiblePrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *WindowAccessible) SetFieldPriv(value *WindowAccessiblePrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(windowAccessibleStruct, recv.Native, "priv", argValue)
}

// WindowAccessibleStruct creates an uninitialised WindowAccessible.
func WindowAccessibleStruct() *WindowAccessible {
	err := windowAccessibleStruct_Set()
	if err != nil {
		return nil
	}

	structGo := &WindowAccessible{}
	structGo.Native = windowAccessibleStruct.Alloc()
	runtime.SetFinalizer(structGo, finalizeWindowAccessible)
	return structGo
}
func finalizeWindowAccessible(obj *WindowAccessible) {
	windowAccessibleStruct.Free(obj.Native)
}

var windowGroupStruct *gi.Struct
var windowGroupStruct_Once sync.Once

func windowGroupStruct_Set() error {
	var err error
	windowGroupStruct_Once.Do(func() {
		windowGroupStruct, err = gi.StructNew("Gtk", "WindowGroup")
	})
	return err
}

type WindowGroup struct {
	gobject.Object
}

// UNSUPPORTED : C value 'parent_instance' : for field getter : no Go type for 'GObject.Object'

// UNSUPPORTED : C value 'parent_instance' : for field setter : no Go type for 'GObject.Object'

// FieldPriv returns the C field 'priv'.
func (recv *WindowGroup) FieldPriv() *WindowGroupPrivate {
	argValue := gi.FieldGet(windowGroupStruct, recv.Native, "priv")
	value := &WindowGroupPrivate{}
	value.Native = argValue.Pointer()
	return value
}

// SetFieldPriv sets the value of the C field 'priv'.
func (recv *WindowGroup) SetFieldPriv(value *WindowGroupPrivate) {
	var argValue gi.Argument
	argValue.SetPointer(value.Native)
	gi.FieldSet(windowGroupStruct, recv.Native, "priv", argValue)
}

var windowGroupNewFunction *gi.Function
var windowGroupNewFunction_Once sync.Once

func windowGroupNewFunction_Set() error {
	var err error
	windowGroupNewFunction_Once.Do(func() {
		err = windowGroupStruct_Set()
		if err != nil {
			return
		}
		windowGroupNewFunction, err = windowGroupStruct.InvokerNew("new")
	})
	return err
}

// WindowGroupNew is a representation of the C type gtk_window_group_new.
func WindowGroupNew() *WindowGroup {

	var ret gi.Argument

	err := windowGroupNewFunction_Set()
	if err == nil {
		ret = windowGroupNewFunction.Invoke(nil, nil)
	}

	retGo := &WindowGroup{}
	retGo.Native = ret.Pointer()

	return retGo
}

var windowGroupAddWindowFunction *gi.Function
var windowGroupAddWindowFunction_Once sync.Once

func windowGroupAddWindowFunction_Set() error {
	var err error
	windowGroupAddWindowFunction_Once.Do(func() {
		err = windowGroupStruct_Set()
		if err != nil {
			return
		}
		windowGroupAddWindowFunction, err = windowGroupStruct.InvokerNew("add_window")
	})
	return err
}

// AddWindow is a representation of the C type gtk_window_group_add_window.
func (recv *WindowGroup) AddWindow(window *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(window.Native)

	err := windowGroupAddWindowFunction_Set()
	if err == nil {
		windowGroupAddWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}

// UNSUPPORTED : C value 'gtk_window_group_get_current_device_grab' : parameter 'device' of type 'Gdk.Device' not supported

var windowGroupGetCurrentGrabFunction *gi.Function
var windowGroupGetCurrentGrabFunction_Once sync.Once

func windowGroupGetCurrentGrabFunction_Set() error {
	var err error
	windowGroupGetCurrentGrabFunction_Once.Do(func() {
		err = windowGroupStruct_Set()
		if err != nil {
			return
		}
		windowGroupGetCurrentGrabFunction, err = windowGroupStruct.InvokerNew("get_current_grab")
	})
	return err
}

// GetCurrentGrab is a representation of the C type gtk_window_group_get_current_grab.
func (recv *WindowGroup) GetCurrentGrab() *Widget {
	var inArgs [1]gi.Argument
	inArgs[0].SetPointer(recv.Native)

	var ret gi.Argument

	err := windowGroupGetCurrentGrabFunction_Set()
	if err == nil {
		ret = windowGroupGetCurrentGrabFunction.Invoke(inArgs[:], nil)
	}

	retGo := &Widget{}
	retGo.Native = ret.Pointer()

	return retGo
}

// UNSUPPORTED : C value 'gtk_window_group_list_windows' : return type 'GLib.List' not supported

var windowGroupRemoveWindowFunction *gi.Function
var windowGroupRemoveWindowFunction_Once sync.Once

func windowGroupRemoveWindowFunction_Set() error {
	var err error
	windowGroupRemoveWindowFunction_Once.Do(func() {
		err = windowGroupStruct_Set()
		if err != nil {
			return
		}
		windowGroupRemoveWindowFunction, err = windowGroupStruct.InvokerNew("remove_window")
	})
	return err
}

// RemoveWindow is a representation of the C type gtk_window_group_remove_window.
func (recv *WindowGroup) RemoveWindow(window *Window) {
	var inArgs [2]gi.Argument
	inArgs[0].SetPointer(recv.Native)
	inArgs[1].SetPointer(window.Native)

	err := windowGroupRemoveWindowFunction_Set()
	if err == nil {
		windowGroupRemoveWindowFunction.Invoke(inArgs[:], nil)
	}

	return
}
